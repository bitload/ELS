
stm32f411_leadscrew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c420  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c50c  0800c5c0  0800c5c0  0001c5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018acc  08018acc  00028acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018ad4  08018ad4  00028ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018ad8  08018ad8  00028ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d0  20000000  08018adc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a60  200000d0  08018bac  000300d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000b30  08018bac  00030b30  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023562  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000049c0  00000000  00000000  00053662  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001ab8  00000000  00000000  00058028  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000018b8  00000000  00000000  00059ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c801  00000000  00000000  0005b398  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000080a9  00000000  00000000  00067b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006fc42  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000074d0  00000000  00000000  0006fcc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c5a8 	.word	0x0800c5a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0800c5a8 	.word	0x0800c5a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b97a 	b.w	8000dc0 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	468c      	mov	ip, r1
 8000aea:	460d      	mov	r5, r1
 8000aec:	4604      	mov	r4, r0
 8000aee:	9e08      	ldr	r6, [sp, #32]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d151      	bne.n	8000b98 <__udivmoddi4+0xb4>
 8000af4:	428a      	cmp	r2, r1
 8000af6:	4617      	mov	r7, r2
 8000af8:	d96d      	bls.n	8000bd6 <__udivmoddi4+0xf2>
 8000afa:	fab2 fe82 	clz	lr, r2
 8000afe:	f1be 0f00 	cmp.w	lr, #0
 8000b02:	d00b      	beq.n	8000b1c <__udivmoddi4+0x38>
 8000b04:	f1ce 0c20 	rsb	ip, lr, #32
 8000b08:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b0c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b10:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b14:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b18:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b1c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b20:	0c25      	lsrs	r5, r4, #16
 8000b22:	fbbc f8fa 	udiv	r8, ip, sl
 8000b26:	fa1f f987 	uxth.w	r9, r7
 8000b2a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b2e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b32:	fb08 f309 	mul.w	r3, r8, r9
 8000b36:	42ab      	cmp	r3, r5
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x6c>
 8000b3a:	19ed      	adds	r5, r5, r7
 8000b3c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b40:	f080 8123 	bcs.w	8000d8a <__udivmoddi4+0x2a6>
 8000b44:	42ab      	cmp	r3, r5
 8000b46:	f240 8120 	bls.w	8000d8a <__udivmoddi4+0x2a6>
 8000b4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4e:	443d      	add	r5, r7
 8000b50:	1aed      	subs	r5, r5, r3
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b58:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b60:	fb00 f909 	mul.w	r9, r0, r9
 8000b64:	45a1      	cmp	r9, r4
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x98>
 8000b68:	19e4      	adds	r4, r4, r7
 8000b6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6e:	f080 810a 	bcs.w	8000d86 <__udivmoddi4+0x2a2>
 8000b72:	45a1      	cmp	r9, r4
 8000b74:	f240 8107 	bls.w	8000d86 <__udivmoddi4+0x2a2>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	eba4 0409 	sub.w	r4, r4, r9
 8000b80:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b84:	2100      	movs	r1, #0
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d061      	beq.n	8000c4e <__udivmoddi4+0x16a>
 8000b8a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b8e:	2300      	movs	r3, #0
 8000b90:	6034      	str	r4, [r6, #0]
 8000b92:	6073      	str	r3, [r6, #4]
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d907      	bls.n	8000bac <__udivmoddi4+0xc8>
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d054      	beq.n	8000c4a <__udivmoddi4+0x166>
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bac:	fab3 f183 	clz	r1, r3
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	f040 808e 	bne.w	8000cd2 <__udivmoddi4+0x1ee>
 8000bb6:	42ab      	cmp	r3, r5
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xdc>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80fa 	bhi.w	8000db4 <__udivmoddi4+0x2d0>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb65 0503 	sbc.w	r5, r5, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	46ac      	mov	ip, r5
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d03f      	beq.n	8000c4e <__udivmoddi4+0x16a>
 8000bce:	e886 1010 	stmia.w	r6, {r4, ip}
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	b912      	cbnz	r2, 8000bde <__udivmoddi4+0xfa>
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb7 f7f2 	udiv	r7, r7, r2
 8000bde:	fab7 fe87 	clz	lr, r7
 8000be2:	f1be 0f00 	cmp.w	lr, #0
 8000be6:	d134      	bne.n	8000c52 <__udivmoddi4+0x16e>
 8000be8:	1beb      	subs	r3, r5, r7
 8000bea:	0c3a      	lsrs	r2, r7, #16
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bf6:	0c25      	lsrs	r5, r4, #16
 8000bf8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bfc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c00:	fb0c f308 	mul.w	r3, ip, r8
 8000c04:	42ab      	cmp	r3, r5
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x134>
 8000c08:	19ed      	adds	r5, r5, r7
 8000c0a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x132>
 8000c10:	42ab      	cmp	r3, r5
 8000c12:	f200 80d1 	bhi.w	8000db8 <__udivmoddi4+0x2d4>
 8000c16:	4680      	mov	r8, r0
 8000c18:	1aed      	subs	r5, r5, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c20:	fb02 5510 	mls	r5, r2, r0, r5
 8000c24:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c28:	fb0c fc00 	mul.w	ip, ip, r0
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x15c>
 8000c30:	19e4      	adds	r4, r4, r7
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x15a>
 8000c38:	45a4      	cmp	ip, r4
 8000c3a:	f200 80b8 	bhi.w	8000dae <__udivmoddi4+0x2ca>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 040c 	sub.w	r4, r4, ip
 8000c44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c48:	e79d      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000c4a:	4631      	mov	r1, r6
 8000c4c:	4630      	mov	r0, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	f1ce 0420 	rsb	r4, lr, #32
 8000c56:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c5e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c62:	0c3a      	lsrs	r2, r7, #16
 8000c64:	fa25 f404 	lsr.w	r4, r5, r4
 8000c68:	ea48 0803 	orr.w	r8, r8, r3
 8000c6c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c70:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c74:	fb02 4411 	mls	r4, r2, r1, r4
 8000c78:	fa1f fc87 	uxth.w	ip, r7
 8000c7c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c80:	fb01 f30c 	mul.w	r3, r1, ip
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x1bc>
 8000c8c:	19ed      	adds	r5, r5, r7
 8000c8e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c92:	f080 808a 	bcs.w	8000daa <__udivmoddi4+0x2c6>
 8000c96:	42ab      	cmp	r3, r5
 8000c98:	f240 8087 	bls.w	8000daa <__udivmoddi4+0x2c6>
 8000c9c:	3902      	subs	r1, #2
 8000c9e:	443d      	add	r5, r7
 8000ca0:	1aeb      	subs	r3, r5, r3
 8000ca2:	fa1f f588 	uxth.w	r5, r8
 8000ca6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000caa:	fb02 3310 	mls	r3, r2, r0, r3
 8000cae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cb2:	fb00 f30c 	mul.w	r3, r0, ip
 8000cb6:	42ab      	cmp	r3, r5
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x1e6>
 8000cba:	19ed      	adds	r5, r5, r7
 8000cbc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cc0:	d26f      	bcs.n	8000da2 <__udivmoddi4+0x2be>
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0x2be>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	443d      	add	r5, r7
 8000cca:	1aeb      	subs	r3, r5, r3
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	e78f      	b.n	8000bf2 <__udivmoddi4+0x10e>
 8000cd2:	f1c1 0720 	rsb	r7, r1, #32
 8000cd6:	fa22 f807 	lsr.w	r8, r2, r7
 8000cda:	408b      	lsls	r3, r1
 8000cdc:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce0:	ea48 0303 	orr.w	r3, r8, r3
 8000ce4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ce8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cf2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cf6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cfa:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cfe:	fa1f f883 	uxth.w	r8, r3
 8000d02:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d06:	fb09 f408 	mul.w	r4, r9, r8
 8000d0a:	42ac      	cmp	r4, r5
 8000d0c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d10:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x244>
 8000d16:	18ed      	adds	r5, r5, r3
 8000d18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d1c:	d243      	bcs.n	8000da6 <__udivmoddi4+0x2c2>
 8000d1e:	42ac      	cmp	r4, r5
 8000d20:	d941      	bls.n	8000da6 <__udivmoddi4+0x2c2>
 8000d22:	f1a9 0902 	sub.w	r9, r9, #2
 8000d26:	441d      	add	r5, r3
 8000d28:	1b2d      	subs	r5, r5, r4
 8000d2a:	fa1f fe8e 	uxth.w	lr, lr
 8000d2e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d32:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d36:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d3a:	fb00 f808 	mul.w	r8, r0, r8
 8000d3e:	45a0      	cmp	r8, r4
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x26e>
 8000d42:	18e4      	adds	r4, r4, r3
 8000d44:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d48:	d229      	bcs.n	8000d9e <__udivmoddi4+0x2ba>
 8000d4a:	45a0      	cmp	r8, r4
 8000d4c:	d927      	bls.n	8000d9e <__udivmoddi4+0x2ba>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	441c      	add	r4, r3
 8000d52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d56:	eba4 0408 	sub.w	r4, r4, r8
 8000d5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d5e:	454c      	cmp	r4, r9
 8000d60:	46c6      	mov	lr, r8
 8000d62:	464d      	mov	r5, r9
 8000d64:	d315      	bcc.n	8000d92 <__udivmoddi4+0x2ae>
 8000d66:	d012      	beq.n	8000d8e <__udivmoddi4+0x2aa>
 8000d68:	b156      	cbz	r6, 8000d80 <__udivmoddi4+0x29c>
 8000d6a:	ebba 030e 	subs.w	r3, sl, lr
 8000d6e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d72:	fa04 f707 	lsl.w	r7, r4, r7
 8000d76:	40cb      	lsrs	r3, r1
 8000d78:	431f      	orrs	r7, r3
 8000d7a:	40cc      	lsrs	r4, r1
 8000d7c:	6037      	str	r7, [r6, #0]
 8000d7e:	6074      	str	r4, [r6, #4]
 8000d80:	2100      	movs	r1, #0
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	4618      	mov	r0, r3
 8000d88:	e6f8      	b.n	8000b7c <__udivmoddi4+0x98>
 8000d8a:	4690      	mov	r8, r2
 8000d8c:	e6e0      	b.n	8000b50 <__udivmoddi4+0x6c>
 8000d8e:	45c2      	cmp	sl, r8
 8000d90:	d2ea      	bcs.n	8000d68 <__udivmoddi4+0x284>
 8000d92:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d96:	eb69 0503 	sbc.w	r5, r9, r3
 8000d9a:	3801      	subs	r0, #1
 8000d9c:	e7e4      	b.n	8000d68 <__udivmoddi4+0x284>
 8000d9e:	4628      	mov	r0, r5
 8000da0:	e7d7      	b.n	8000d52 <__udivmoddi4+0x26e>
 8000da2:	4640      	mov	r0, r8
 8000da4:	e791      	b.n	8000cca <__udivmoddi4+0x1e6>
 8000da6:	4681      	mov	r9, r0
 8000da8:	e7be      	b.n	8000d28 <__udivmoddi4+0x244>
 8000daa:	4601      	mov	r1, r0
 8000dac:	e778      	b.n	8000ca0 <__udivmoddi4+0x1bc>
 8000dae:	3802      	subs	r0, #2
 8000db0:	443c      	add	r4, r7
 8000db2:	e745      	b.n	8000c40 <__udivmoddi4+0x15c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e708      	b.n	8000bca <__udivmoddi4+0xe6>
 8000db8:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbc:	443d      	add	r5, r7
 8000dbe:	e72b      	b.n	8000c18 <__udivmoddi4+0x134>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_Init+0x40>)
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_Init+0x40>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <HAL_Init+0x40>)
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_Init+0x40>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_Init+0x40>)
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x40>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f94b 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f808 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f00a f882 	bl	800af00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f963 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f92b 	bl	800109e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000068 	.word	0x20000068
 8000e60:	20000004 	.word	0x20000004
 8000e64:	20000000 	.word	0x20000000

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000120 	.word	0x20000120

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000120 	.word	0x20000120

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff ffee 	bl	8000e90 <HAL_GetTick>
 8000eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_Delay+0x40>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ffde 	bl	8000e90 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad2      	subs	r2, r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d3f7      	bcc.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000004 	.word	0x20000004

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	4909      	ldr	r1, [pc, #36]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	095b      	lsrs	r3, r3, #5
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	f002 021f 	and.w	r2, r2, #31
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	4909      	ldr	r1, [pc, #36]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	2201      	movs	r2, #1
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	1e5a      	subs	r2, r3, #1
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	401a      	ands	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001026:	2101      	movs	r1, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	1e59      	subs	r1, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f7ff ff90 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff2b 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff40 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff90 	bl	8000fe0 <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5f 	bl	8000f8c <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff33 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffa2 	bl	8001044 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff feba 	bl	8000e90 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e099      	b.n	800125c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2202      	movs	r2, #2
 8001134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001148:	e00f      	b.n	800116a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800114a:	f7ff fea1 	bl	8000e90 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b05      	cmp	r3, #5
 8001156:	d908      	bls.n	800116a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2220      	movs	r2, #32
 800115c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2203      	movs	r2, #3
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e078      	b.n	800125c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e8      	bne.n	800114a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <HAL_DMA_Init+0x158>)
 8001184:	4013      	ands	r3, r2
 8001186:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001196:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d107      	bne.n	80011d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4313      	orrs	r3, r2
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f023 0307 	bic.w	r3, r3, #7
 80011ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d117      	bne.n	800122e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4313      	orrs	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00e      	beq.n	800122e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 fa99 	bl	8001748 <DMA_CheckFifoParam>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800122a:	2301      	movs	r3, #1
 800122c:	e016      	b.n	800125c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fa50 	bl	80016dc <DMA_CalcBaseAndBitshift>
 800123c:	4603      	mov	r3, r0
 800123e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	223f      	movs	r2, #63	; 0x3f
 8001246:	409a      	lsls	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	f010803f 	.word	0xf010803f

08001268 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_DMA_Start_IT+0x26>
 800128a:	2302      	movs	r3, #2
 800128c:	e048      	b.n	8001320 <HAL_DMA_Start_IT+0xb8>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d137      	bne.n	8001312 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2202      	movs	r2, #2
 80012a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f9e2 	bl	8001680 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	223f      	movs	r2, #63	; 0x3f
 80012c2:	409a      	lsls	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	f042 0216 	orr.w	r2, r2, #22
 80012d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	6952      	ldr	r2, [r2, #20]
 80012e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d007      	beq.n	8001300 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	f042 0208 	orr.w	r2, r2, #8
 80012fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e005      	b.n	800131e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800131a:	2302      	movs	r3, #2
 800131c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d004      	beq.n	8001346 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00c      	b.n	8001360 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2205      	movs	r2, #5
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001378:	4b92      	ldr	r3, [pc, #584]	; (80015c4 <HAL_DMA_IRQHandler+0x258>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a92      	ldr	r2, [pc, #584]	; (80015c8 <HAL_DMA_IRQHandler+0x25c>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0a9b      	lsrs	r3, r3, #10
 8001384:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001396:	2208      	movs	r2, #8
 8001398:	409a      	lsls	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d01a      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d013      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	f022 0204 	bic.w	r2, r2, #4
 80013be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c4:	2208      	movs	r2, #8
 80013c6:	409a      	lsls	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d0:	f043 0201 	orr.w	r2, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013dc:	2201      	movs	r2, #1
 80013de:	409a      	lsls	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d012      	beq.n	800140e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	2201      	movs	r2, #1
 80013fc:	409a      	lsls	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001406:	f043 0202 	orr.w	r2, r3, #2
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	2204      	movs	r2, #4
 8001414:	409a      	lsls	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d012      	beq.n	8001444 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00b      	beq.n	8001444 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	2204      	movs	r2, #4
 8001432:	409a      	lsls	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	f043 0204 	orr.w	r2, r3, #4
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001448:	2210      	movs	r2, #16
 800144a:	409a      	lsls	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4013      	ands	r3, r2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d043      	beq.n	80014dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d03c      	beq.n	80014dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001466:	2210      	movs	r2, #16
 8001468:	409a      	lsls	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d018      	beq.n	80014ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d108      	bne.n	800149c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	2b00      	cmp	r3, #0
 8001490:	d024      	beq.n	80014dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
 800149a:	e01f      	b.n	80014dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d01b      	beq.n	80014dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	4798      	blx	r3
 80014ac:	e016      	b.n	80014dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d107      	bne.n	80014cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	f022 0208 	bic.w	r2, r2, #8
 80014ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	2220      	movs	r2, #32
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 808e 	beq.w	800160a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8086 	beq.w	800160a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	2220      	movs	r2, #32
 8001504:	409a      	lsls	r2, r3
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b05      	cmp	r3, #5
 8001514:	d136      	bne.n	8001584 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	f022 0216 	bic.w	r2, r2, #22
 8001524:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	6952      	ldr	r2, [r2, #20]
 8001530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001534:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	2b00      	cmp	r3, #0
 800153c:	d103      	bne.n	8001546 <HAL_DMA_IRQHandler+0x1da>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	f022 0208 	bic.w	r2, r2, #8
 8001554:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	223f      	movs	r2, #63	; 0x3f
 800155c:	409a      	lsls	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001576:	2b00      	cmp	r3, #0
 8001578:	d07d      	beq.n	8001676 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	4798      	blx	r3
        }
        return;
 8001582:	e078      	b.n	8001676 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d01c      	beq.n	80015cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d108      	bne.n	80015b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d030      	beq.n	800160a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
 80015b0:	e02b      	b.n	800160a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d027      	beq.n	800160a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
 80015c2:	e022      	b.n	800160a <HAL_DMA_IRQHandler+0x29e>
 80015c4:	20000068 	.word	0x20000068
 80015c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10f      	bne.n	80015fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f022 0210 	bic.w	r2, r2, #16
 80015e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	2b00      	cmp	r3, #0
 8001610:	d032      	beq.n	8001678 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d022      	beq.n	8001664 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2205      	movs	r2, #5
 8001622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	4293      	cmp	r3, r2
 8001640:	d807      	bhi.n	8001652 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f2      	bne.n	8001636 <HAL_DMA_IRQHandler+0x2ca>
 8001650:	e000      	b.n	8001654 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001652:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
 8001674:	e000      	b.n	8001678 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001676:	bf00      	nop
    }
  }
}
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop

08001680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800169c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b40      	cmp	r3, #64	; 0x40
 80016ac:	d108      	bne.n	80016c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016be:	e007      	b.n	80016d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	3b10      	subs	r3, #16
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <DMA_CalcBaseAndBitshift+0x64>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	091b      	lsrs	r3, r3, #4
 80016f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016f6:	4a13      	ldr	r2, [pc, #76]	; (8001744 <DMA_CalcBaseAndBitshift+0x68>)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d909      	bls.n	800171e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	1d1a      	adds	r2, r3, #4
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	659a      	str	r2, [r3, #88]	; 0x58
 800171c:	e007      	b.n	800172e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	aaaaaaab 	.word	0xaaaaaaab
 8001744:	0800c648 	.word	0x0800c648

08001748 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d11f      	bne.n	80017a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d855      	bhi.n	8001814 <DMA_CheckFifoParam+0xcc>
 8001768:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <DMA_CheckFifoParam+0x28>)
 800176a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176e:	bf00      	nop
 8001770:	08001781 	.word	0x08001781
 8001774:	08001793 	.word	0x08001793
 8001778:	08001781 	.word	0x08001781
 800177c:	08001815 	.word	0x08001815
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d045      	beq.n	8001818 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001790:	e042      	b.n	8001818 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800179a:	d13f      	bne.n	800181c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017a0:	e03c      	b.n	800181c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017aa:	d121      	bne.n	80017f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d836      	bhi.n	8001820 <DMA_CheckFifoParam+0xd8>
 80017b2:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <DMA_CheckFifoParam+0x70>)
 80017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b8:	080017c9 	.word	0x080017c9
 80017bc:	080017cf 	.word	0x080017cf
 80017c0:	080017c9 	.word	0x080017c9
 80017c4:	080017e1 	.word	0x080017e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
      break;
 80017cc:	e02f      	b.n	800182e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d024      	beq.n	8001824 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017de:	e021      	b.n	8001824 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017e8:	d11e      	bne.n	8001828 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017ee:	e01b      	b.n	8001828 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d902      	bls.n	80017fc <DMA_CheckFifoParam+0xb4>
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d003      	beq.n	8001802 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017fa:	e018      	b.n	800182e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001800:	e015      	b.n	800182e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00e      	beq.n	800182c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
      break;
 8001812:	e00b      	b.n	800182c <DMA_CheckFifoParam+0xe4>
      break;
 8001814:	bf00      	nop
 8001816:	e00a      	b.n	800182e <DMA_CheckFifoParam+0xe6>
      break;
 8001818:	bf00      	nop
 800181a:	e008      	b.n	800182e <DMA_CheckFifoParam+0xe6>
      break;
 800181c:	bf00      	nop
 800181e:	e006      	b.n	800182e <DMA_CheckFifoParam+0xe6>
      break;
 8001820:	bf00      	nop
 8001822:	e004      	b.n	800182e <DMA_CheckFifoParam+0xe6>
      break;
 8001824:	bf00      	nop
 8001826:	e002      	b.n	800182e <DMA_CheckFifoParam+0xe6>
      break;   
 8001828:	bf00      	nop
 800182a:	e000      	b.n	800182e <DMA_CheckFifoParam+0xe6>
      break;
 800182c:	bf00      	nop
    }
  } 
  
  return status; 
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800184e:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_FLASH_Program+0xa0>)
 8001850:	7e1b      	ldrb	r3, [r3, #24]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_FLASH_Program+0x1e>
 8001856:	2302      	movs	r3, #2
 8001858:	e03b      	b.n	80018d2 <HAL_FLASH_Program+0x96>
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_FLASH_Program+0xa0>)
 800185c:	2201      	movs	r2, #1
 800185e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001860:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001864:	f000 f870 	bl	8001948 <FLASH_WaitForLastOperation>
 8001868:	4603      	mov	r3, r0
 800186a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d12b      	bne.n	80018ca <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d105      	bne.n	8001884 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001878:	783b      	ldrb	r3, [r7, #0]
 800187a:	4619      	mov	r1, r3
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f000 f915 	bl	8001aac <FLASH_Program_Byte>
 8001882:	e016      	b.n	80018b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d105      	bne.n	8001896 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800188a:	883b      	ldrh	r3, [r7, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	68b8      	ldr	r0, [r7, #8]
 8001890:	f000 f8e8 	bl	8001a64 <FLASH_Program_HalfWord>
 8001894:	e00d      	b.n	80018b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d105      	bne.n	80018a8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4619      	mov	r1, r3
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	f000 f8bd 	bl	8001a20 <FLASH_Program_Word>
 80018a6:	e004      	b.n	80018b2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80018a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f000 f88b 	bl	80019c8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018b6:	f000 f847 	bl	8001948 <FLASH_WaitForLastOperation>
 80018ba:	4603      	mov	r3, r0
 80018bc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_FLASH_Program+0xa4>)
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <HAL_FLASH_Program+0xa4>)
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_FLASH_Program+0xa0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	761a      	strb	r2, [r3, #24]
  
  return status;
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000124 	.word	0x20000124
 80018e0:	40023c00 	.word	0x40023c00

080018e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_FLASH_Unlock+0x38>)
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da0b      	bge.n	800190e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_FLASH_Unlock+0x38>)
 80018f8:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_FLASH_Unlock+0x3c>)
 80018fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_FLASH_Unlock+0x38>)
 80018fe:	4a09      	ldr	r2, [pc, #36]	; (8001924 <HAL_FLASH_Unlock+0x40>)
 8001900:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_FLASH_Unlock+0x38>)
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	da01      	bge.n	800190e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800190e:	79fb      	ldrb	r3, [r7, #7]
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40023c00 	.word	0x40023c00
 8001920:	45670123 	.word	0x45670123
 8001924:	cdef89ab 	.word	0xcdef89ab

08001928 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <HAL_FLASH_Lock+0x1c>)
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_FLASH_Lock+0x1c>)
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001936:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40023c00 	.word	0x40023c00

08001948 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <FLASH_WaitForLastOperation+0x78>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800195a:	f7ff fa99 	bl	8000e90 <HAL_GetTick>
 800195e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001960:	e010      	b.n	8001984 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d00c      	beq.n	8001984 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <FLASH_WaitForLastOperation+0x38>
 8001970:	f7ff fa8e 	bl	8000e90 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad2      	subs	r2, r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	d901      	bls.n	8001984 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e019      	b.n	80019b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <FLASH_WaitForLastOperation+0x7c>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e8      	bne.n	8001962 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <FLASH_WaitForLastOperation+0x7c>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <FLASH_WaitForLastOperation+0x7c>)
 800199e:	2201      	movs	r2, #1
 80019a0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <FLASH_WaitForLastOperation+0x7c>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80019ae:	f000 f89f 	bl	8001af0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
  
}  
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000124 	.word	0x20000124
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80019c8:	b4f0      	push	{r4, r5, r6, r7}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019d4:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <FLASH_Program_DoubleWord+0x54>)
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <FLASH_Program_DoubleWord+0x54>)
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80019e0:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <FLASH_Program_DoubleWord+0x54>)
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <FLASH_Program_DoubleWord+0x54>)
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <FLASH_Program_DoubleWord+0x54>)
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <FLASH_Program_DoubleWord+0x54>)
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3304      	adds	r3, #4
 8001a02:	461a      	mov	r2, r3
 8001a04:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001a08:	0025      	movs	r5, r4
 8001a0a:	2600      	movs	r6, #0
 8001a0c:	462b      	mov	r3, r5
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bcf0      	pop	{r4, r5, r6, r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a2a:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <FLASH_Program_Word+0x40>)
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <FLASH_Program_Word+0x40>)
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <FLASH_Program_Word+0x40>)
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <FLASH_Program_Word+0x40>)
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a42:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <FLASH_Program_Word+0x40>)
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <FLASH_Program_Word+0x40>)
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <FLASH_Program_HalfWord+0x44>)
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <FLASH_Program_HalfWord+0x44>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <FLASH_Program_HalfWord+0x44>)
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <FLASH_Program_HalfWord+0x44>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <FLASH_Program_HalfWord+0x44>)
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <FLASH_Program_HalfWord+0x44>)
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	801a      	strh	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <FLASH_Program_Byte+0x40>)
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <FLASH_Program_Byte+0x40>)
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ac2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001ac4:	4a09      	ldr	r2, [pc, #36]	; (8001aec <FLASH_Program_Byte+0x40>)
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <FLASH_Program_Byte+0x40>)
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <FLASH_Program_Byte+0x40>)
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <FLASH_Program_Byte+0x40>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	701a      	strb	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	4a2b      	ldr	r2, [pc, #172]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b0a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001b0e:	2210      	movs	r2, #16
 8001b10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b28:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001b4a:	2240      	movs	r2, #64	; 0x40
 8001b4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b64:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d009      	beq.n	8001b8c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f043 0320 	orr.w	r3, r3, #32
 8001ba0:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <FLASH_SetErrorCode+0xc8>)
 8001ba2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <FLASH_SetErrorCode+0xc4>)
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	60da      	str	r2, [r3, #12]
  }
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40023c00 	.word	0x40023c00
 8001bb8:	20000124 	.word	0x20000124

08001bbc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e010      	b.n	8001bfa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d103      	bne.n	8001be6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e009      	b.n	8001bfa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d103      	bne.n	8001bf4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e002      	b.n	8001bfa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001bf4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <FLASH_Erase_Sector+0x8c>)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <FLASH_Erase_Sector+0x8c>)
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001c06:	4910      	ldr	r1, [pc, #64]	; (8001c48 <FLASH_Erase_Sector+0x8c>)
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <FLASH_Erase_Sector+0x8c>)
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <FLASH_Erase_Sector+0x8c>)
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <FLASH_Erase_Sector+0x8c>)
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001c1e:	490a      	ldr	r1, [pc, #40]	; (8001c48 <FLASH_Erase_Sector+0x8c>)
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <FLASH_Erase_Sector+0x8c>)
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <FLASH_Erase_Sector+0x8c>)
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <FLASH_Erase_Sector+0x8c>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3a:	6113      	str	r3, [r2, #16]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40023c00 	.word	0x40023c00

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e159      	b.n	8001f1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f040 8148 	bne.w	8001f16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x4a>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b12      	cmp	r3, #18
 8001c94:	d123      	bne.n	8001cde <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	69b9      	ldr	r1, [r7, #24]
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0203 	and.w	r2, r3, #3
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d00b      	beq.n	8001d32 <HAL_GPIO_Init+0xe6>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d26:	2b11      	cmp	r3, #17
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b12      	cmp	r3, #18
 8001d30:	d130      	bne.n	8001d94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a2 	beq.w	8001f16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4a56      	ldr	r2, [pc, #344]	; (8001f30 <HAL_GPIO_Init+0x2e4>)
 8001dd8:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <HAL_GPIO_Init+0x2e4>)
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_GPIO_Init+0x2e4>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dee:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <HAL_GPIO_Init+0x2e8>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a48      	ldr	r2, [pc, #288]	; (8001f38 <HAL_GPIO_Init+0x2ec>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d019      	beq.n	8001e4e <HAL_GPIO_Init+0x202>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a47      	ldr	r2, [pc, #284]	; (8001f3c <HAL_GPIO_Init+0x2f0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_GPIO_Init+0x1fe>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a46      	ldr	r2, [pc, #280]	; (8001f40 <HAL_GPIO_Init+0x2f4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00d      	beq.n	8001e46 <HAL_GPIO_Init+0x1fa>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a45      	ldr	r2, [pc, #276]	; (8001f44 <HAL_GPIO_Init+0x2f8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_GPIO_Init+0x1f6>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a44      	ldr	r2, [pc, #272]	; (8001f48 <HAL_GPIO_Init+0x2fc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_GPIO_Init+0x1f2>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e008      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e3e:	2307      	movs	r3, #7
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e004      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_GPIO_Init+0x204>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f002 0203 	and.w	r2, r2, #3
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	4093      	lsls	r3, r2
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e60:	4934      	ldr	r1, [pc, #208]	; (8001f34 <HAL_GPIO_Init+0x2e8>)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6e:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_GPIO_Init+0x300>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e92:	4a2e      	ldr	r2, [pc, #184]	; (8001f4c <HAL_GPIO_Init+0x300>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_GPIO_Init+0x300>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ebc:	4a23      	ldr	r2, [pc, #140]	; (8001f4c <HAL_GPIO_Init+0x300>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec2:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <HAL_GPIO_Init+0x300>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee6:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <HAL_GPIO_Init+0x300>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_GPIO_Init+0x300>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <HAL_GPIO_Init+0x300>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	f67f aea2 	bls.w	8001c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	3724      	adds	r7, #36	; 0x24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40013800 	.word	0x40013800
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40020c00 	.word	0x40020c00
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40013c00 	.word	0x40013c00

08001f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e001      	b.n	8001f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f9c:	e003      	b.n	8001fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	041a      	lsls	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	619a      	str	r2, [r3, #24]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d104      	bne.n	8001fd6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	041a      	lsls	r2, r3, #16
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001fd4:	e002      	b.n	8001fdc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	b08f      	sub	sp, #60	; 0x3c
 8001fec:	af0a      	add	r7, sp, #40	; 0x28
 8001fee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e054      	b.n	80020a4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f009 fb85 	bl	800b724 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2203      	movs	r2, #3
 800201e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f004 f8cc 	bl	80061d6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	687e      	ldr	r6, [r7, #4]
 8002046:	466d      	mov	r5, sp
 8002048:	f106 0410 	add.w	r4, r6, #16
 800204c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002054:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002058:	e885 0003 	stmia.w	r5, {r0, r1}
 800205c:	1d33      	adds	r3, r6, #4
 800205e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002060:	6838      	ldr	r0, [r7, #0]
 8002062:	f004 f846 	bl	80060f2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2101      	movs	r1, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f004 f8c3 	bl	80061f8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	687e      	ldr	r6, [r7, #4]
 800207a:	466d      	mov	r5, sp
 800207c:	f106 0410 	add.w	r4, r6, #16
 8002080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800208c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002090:	1d33      	adds	r3, r6, #4
 8002092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002094:	6838      	ldr	r0, [r7, #0]
 8002096:	f004 f9d5 	bl	8006444 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020ac <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af04      	add	r7, sp, #16
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	70fb      	strb	r3, [r7, #3]
 80020be:	460b      	mov	r3, r1
 80020c0:	70bb      	strb	r3, [r7, #2]
 80020c2:	4613      	mov	r3, r2
 80020c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_HCD_HC_Init+0x28>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e07f      	b.n	80021d4 <HAL_HCD_HC_Init+0x128>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	333d      	adds	r3, #61	; 0x3d
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	3338      	adds	r3, #56	; 0x38
 8002100:	787a      	ldrb	r2, [r7, #1]
 8002102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	3340      	adds	r3, #64	; 0x40
 8002114:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002116:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	3339      	adds	r3, #57	; 0x39
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	333f      	adds	r3, #63	; 0x3f
 800213c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002140:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	78bb      	ldrb	r3, [r7, #2]
 8002146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800214a:	b2d8      	uxtb	r0, r3
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	333a      	adds	r3, #58	; 0x3a
 800215a:	4602      	mov	r2, r0
 800215c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800215e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002162:	2b00      	cmp	r3, #0
 8002164:	da0a      	bge.n	800217c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	333b      	adds	r3, #59	; 0x3b
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e009      	b.n	8002190 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	333b      	adds	r3, #59	; 0x3b
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	333c      	adds	r3, #60	; 0x3c
 80021a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021a4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	787c      	ldrb	r4, [r7, #1]
 80021ac:	78ba      	ldrb	r2, [r7, #2]
 80021ae:	78f9      	ldrb	r1, [r7, #3]
 80021b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	4623      	mov	r3, r4
 80021c2:	f004 fac9 	bl	8006758 <USB_HC_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd90      	pop	{r4, r7, pc}

080021dc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_HCD_HC_Halt+0x1e>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e00f      	b.n	800221a <HAL_HCD_HC_Halt+0x3e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f004 fd0f 	bl	8006c2e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	461a      	mov	r2, r3
 8002232:	4603      	mov	r3, r0
 8002234:	70fb      	strb	r3, [r7, #3]
 8002236:	460b      	mov	r3, r1
 8002238:	70bb      	strb	r3, [r7, #2]
 800223a:	4613      	mov	r3, r2
 800223c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	333b      	adds	r3, #59	; 0x3b
 800224e:	78ba      	ldrb	r2, [r7, #2]
 8002250:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	333f      	adds	r3, #63	; 0x3f
 8002262:	787a      	ldrb	r2, [r7, #1]
 8002264:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002266:	7c3b      	ldrb	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	3342      	adds	r3, #66	; 0x42
 800227c:	2203      	movs	r2, #3
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e009      	b.n	8002296 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	3342      	adds	r3, #66	; 0x42
 8002292:	2202      	movs	r2, #2
 8002294:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002296:	787b      	ldrb	r3, [r7, #1]
 8002298:	2b03      	cmp	r3, #3
 800229a:	f200 80d6 	bhi.w	800244a <HAL_HCD_HC_SubmitRequest+0x226>
 800229e:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <HAL_HCD_HC_SubmitRequest+0x80>)
 80022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a4:	080022b5 	.word	0x080022b5
 80022a8:	08002435 	.word	0x08002435
 80022ac:	08002321 	.word	0x08002321
 80022b0:	080023ab 	.word	0x080023ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022b4:	7c3b      	ldrb	r3, [r7, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	f040 80c9 	bne.w	800244e <HAL_HCD_HC_SubmitRequest+0x22a>
 80022bc:	78bb      	ldrb	r3, [r7, #2]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 80c5 	bne.w	800244e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80022c4:	8b3b      	ldrh	r3, [r7, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	3351      	adds	r3, #81	; 0x51
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	440b      	add	r3, r1
 80022ec:	3351      	adds	r3, #81	; 0x51
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10a      	bne.n	800230a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	3342      	adds	r3, #66	; 0x42
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002308:	e0a1      	b.n	800244e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	3342      	adds	r3, #66	; 0x42
 800231a:	2202      	movs	r2, #2
 800231c:	701a      	strb	r2, [r3, #0]
      break;
 800231e:	e096      	b.n	800244e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002320:	78bb      	ldrb	r3, [r7, #2]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d120      	bne.n	8002368 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	3351      	adds	r3, #81	; 0x51
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	3342      	adds	r3, #66	; 0x42
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002350:	e07e      	b.n	8002450 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	3342      	adds	r3, #66	; 0x42
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]
      break;
 8002366:	e073      	b.n	8002450 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	3350      	adds	r3, #80	; 0x50
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	3342      	adds	r3, #66	; 0x42
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
      break;
 8002392:	e05d      	b.n	8002450 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	3342      	adds	r3, #66	; 0x42
 80023a4:	2202      	movs	r2, #2
 80023a6:	701a      	strb	r2, [r3, #0]
      break;
 80023a8:	e052      	b.n	8002450 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023aa:	78bb      	ldrb	r3, [r7, #2]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d120      	bne.n	80023f2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	3351      	adds	r3, #81	; 0x51
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	3342      	adds	r3, #66	; 0x42
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023da:	e039      	b.n	8002450 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3342      	adds	r3, #66	; 0x42
 80023ec:	2202      	movs	r2, #2
 80023ee:	701a      	strb	r2, [r3, #0]
      break;
 80023f0:	e02e      	b.n	8002450 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3350      	adds	r3, #80	; 0x50
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	3342      	adds	r3, #66	; 0x42
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
      break;
 800241c:	e018      	b.n	8002450 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	3342      	adds	r3, #66	; 0x42
 800242e:	2202      	movs	r2, #2
 8002430:	701a      	strb	r2, [r3, #0]
      break;
 8002432:	e00d      	b.n	8002450 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	3342      	adds	r3, #66	; 0x42
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
      break;
 8002448:	e002      	b.n	8002450 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800244a:	bf00      	nop
 800244c:	e000      	b.n	8002450 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800244e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	3344      	adds	r3, #68	; 0x44
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	8b39      	ldrh	r1, [r7, #24]
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4403      	add	r3, r0
 8002474:	3348      	adds	r3, #72	; 0x48
 8002476:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	335c      	adds	r3, #92	; 0x5c
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	334c      	adds	r3, #76	; 0x4c
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3339      	adds	r3, #57	; 0x39
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	335d      	adds	r3, #93	; 0x5d
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	3338      	adds	r3, #56	; 0x38
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	18d1      	adds	r1, r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	f004 fa4a 	bl	800697c <USB_HC_StartXfer>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop

080024f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f003 ff57 	bl	80063be <USB_GetMode>
 8002510:	4603      	mov	r3, r0
 8002512:	2b01      	cmp	r3, #1
 8002514:	f040 80f2 	bne.w	80026fc <HAL_HCD_IRQHandler+0x208>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f003 ff3b 	bl	8006398 <USB_ReadInterrupts>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80e8 	beq.w	80026fa <HAL_HCD_IRQHandler+0x206>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 ff32 	bl	8006398 <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800253e:	d104      	bne.n	800254a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002548:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 ff22 	bl	8006398 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800255e:	d104      	bne.n	800256a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002568:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f003 ff12 	bl	8006398 <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800257a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800257e:	d104      	bne.n	800258a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002588:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f003 ff02 	bl	8006398 <USB_ReadInterrupts>
 8002594:	4603      	mov	r3, r0
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d103      	bne.n	80025a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2202      	movs	r2, #2
 80025a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fef4 	bl	8006398 <USB_ReadInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ba:	d118      	bne.n	80025ee <HAL_HCD_IRQHandler+0xfa>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80025d0:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f009 f924 	bl	800b820 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2101      	movs	r1, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 ffee 	bl	80065c0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fed0 	bl	8006398 <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002602:	d102      	bne.n	800260a <HAL_HCD_IRQHandler+0x116>
    {
      HCD_Port_IRQHandler(hhcd);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f001 f8dd 	bl	80037c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f003 fec2 	bl	8006398 <USB_ReadInterrupts>
 8002614:	4603      	mov	r3, r0
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b08      	cmp	r3, #8
 800261c:	d106      	bne.n	800262c <HAL_HCD_IRQHandler+0x138>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f009 f8e2 	bl	800b7e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2208      	movs	r2, #8
 800262a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f003 feb1 	bl	8006398 <USB_ReadInterrupts>
 8002636:	4603      	mov	r3, r0
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002640:	d138      	bne.n	80026b4 <HAL_HCD_IRQHandler+0x1c0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f004 fae0 	bl	8006c0c <USB_HC_ReadInterrupt>
 800264c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	e025      	b.n	80026a0 <HAL_HCD_IRQHandler+0x1ac>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <HAL_HCD_IRQHandler+0x1a6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800267a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267e:	d106      	bne.n	800268e <HAL_HCD_IRQHandler+0x19a>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8cf 	bl	800282a <HCD_HC_IN_IRQHandler>
 800268c:	e005      	b.n	800269a <HAL_HCD_IRQHandler+0x1a6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	4619      	mov	r1, r3
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fc69 	bl	8002f6c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3301      	adds	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d8d4      	bhi.n	8002654 <HAL_HCD_IRQHandler+0x160>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fe6d 	bl	8006398 <USB_ReadInterrupts>
 80026be:	4603      	mov	r3, r0
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d101      	bne.n	80026cc <HAL_HCD_IRQHandler+0x1d8>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_HCD_IRQHandler+0x1da>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d014      	beq.n	80026fc <HAL_HCD_IRQHandler+0x208>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	6992      	ldr	r2, [r2, #24]
 80026dc:	f022 0210 	bic.w	r2, r2, #16
 80026e0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 ffc2 	bl	800366c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	6992      	ldr	r2, [r2, #24]
 80026f2:	f042 0210 	orr.w	r2, r2, #16
 80026f6:	619a      	str	r2, [r3, #24]
 80026f8:	e000      	b.n	80026fc <HAL_HCD_IRQHandler+0x208>
      return;
 80026fa:	bf00      	nop
    }
  }
}
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_HCD_Start+0x16>
 8002714:	2302      	movs	r3, #2
 8002716:	e013      	b.n	8002740 <HAL_HCD_Start+0x3e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f003 fd45 	bl	80061b4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2101      	movs	r1, #1
 8002730:	4618      	mov	r0, r3
 8002732:	f003 ffad 	bl	8006690 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_HCD_Stop+0x16>
 800275a:	2302      	movs	r3, #2
 800275c:	e00d      	b.n	800277a <HAL_HCD_Stop+0x32>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f004 fba4 	bl	8006eb8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f003 ff52 	bl	8006638 <USB_ResetPort>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	335c      	adds	r3, #92	; 0x5c
 80027ba:	781b      	ldrb	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	440b      	add	r3, r1
 80027e2:	334c      	adds	r3, #76	; 0x4c
 80027e4:	681b      	ldr	r3, [r3, #0]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 ff98 	bl	8006734 <USB_GetCurrentFrame>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f003 ff73 	bl	8006706 <USB_GetHostSpeed>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d11a      	bne.n	8002890 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	461a      	mov	r2, r3
 8002868:	2304      	movs	r3, #4
 800286a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	4619      	mov	r1, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	60cb      	str	r3, [r1, #12]
 800288e:	e097      	b.n	80029c0 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d109      	bne.n	80028ba <HCD_HC_IN_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b2:	461a      	mov	r2, r3
 80028b4:	2320      	movs	r3, #32
 80028b6:	6093      	str	r3, [r2, #8]
 80028b8:	e082      	b.n	80029c0 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d135      	bne.n	800293c <HCD_HC_IN_IRQHandler+0x112>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	4619      	mov	r1, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	335d      	adds	r3, #93	; 0x5d
 8002902:	2205      	movs	r2, #5
 8002904:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	461a      	mov	r2, r3
 8002914:	2310      	movs	r3, #16
 8002916:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	2308      	movs	r3, #8
 8002928:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f004 f97a 	bl	8006c2e <USB_HC_Halt>
 800293a:	e041      	b.n	80029c0 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	d135      	bne.n	80029c0 <HCD_HC_IN_IRQHandler+0x196>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	4619      	mov	r1, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f004 f954 	bl	8006c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	2310      	movs	r3, #16
 8002996:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	335d      	adds	r3, #93	; 0x5d
 80029a8:	2208      	movs	r2, #8
 80029aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	461a      	mov	r2, r3
 80029ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029be:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d6:	d123      	bne.n	8002a20 <HCD_HC_IN_IRQHandler+0x1f6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	4619      	mov	r1, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 f912 	bl	8006c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	461a      	mov	r2, r3
 8002a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a1c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a1e:	e2a1      	b.n	8002f64 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	f040 80c3 	bne.w	8002bbe <HCD_HC_IN_IRQHandler+0x394>
    if (hhcd->Init.dma_enable != 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01b      	beq.n	8002a78 <HCD_HC_IN_IRQHandler+0x24e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3348      	adds	r3, #72	; 0x48
 8002a50:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	0159      	lsls	r1, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	440b      	add	r3, r1
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002a64:	1ad1      	subs	r1, r2, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4403      	add	r3, r0
 8002a74:	334c      	adds	r3, #76	; 0x4c
 8002a76:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	335d      	adds	r3, #93	; 0x5d
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	3358      	adds	r3, #88	; 0x58
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	2301      	movs	r3, #1
 8002ab0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	333f      	adds	r3, #63	; 0x3f
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HCD_HC_IN_IRQHandler+0x2b4>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	333f      	adds	r3, #63	; 0x3f
 8002ad8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d122      	bne.n	8002b24 <HCD_HC_IN_IRQHandler+0x2fa>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	4619      	mov	r1, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 f88f 	bl	8006c2e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2310      	movs	r3, #16
 8002b20:	6093      	str	r3, [r2, #8]
 8002b22:	e035      	b.n	8002b90 <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	333f      	adds	r3, #63	; 0x3f
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d12a      	bne.n	8002b90 <HCD_HC_IN_IRQHandler+0x366>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	4619      	mov	r1, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b5a:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	335c      	adds	r3, #92	; 0x5c
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	b2d8      	uxtb	r0, r3
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	335c      	adds	r3, #92	; 0x5c
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	4601      	mov	r1, r0
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f008 fe56 	bl	800b83c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3350      	adds	r3, #80	; 0x50
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	f083 0301 	eor.w	r3, r3, #1
 8002ba6:	b2d8      	uxtb	r0, r3
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3350      	adds	r3, #80	; 0x50
 8002bb8:	4602      	mov	r2, r0
 8002bba:	701a      	strb	r2, [r3, #0]
}
 8002bbc:	e1d2      	b.n	8002f64 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	f040 80f2 	bne.w	8002dba <HCD_HC_IN_IRQHandler+0x590>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be2:	4619      	mov	r1, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f023 0302 	bic.w	r3, r3, #2
 8002bf6:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	335d      	adds	r3, #93	; 0x5d
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d10a      	bne.n	8002c24 <HCD_HC_IN_IRQHandler+0x3fa>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	335c      	adds	r3, #92	; 0x5c
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	e0b0      	b.n	8002d86 <HCD_HC_IN_IRQHandler+0x55c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	335d      	adds	r3, #93	; 0x5d
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b05      	cmp	r3, #5
 8002c38:	d10a      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0x426>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	335c      	adds	r3, #92	; 0x5c
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e09a      	b.n	8002d86 <HCD_HC_IN_IRQHandler+0x55c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	335d      	adds	r3, #93	; 0x5d
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b06      	cmp	r3, #6
 8002c64:	d00a      	beq.n	8002c7c <HCD_HC_IN_IRQHandler+0x452>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	335d      	adds	r3, #93	; 0x5d
 8002c76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d156      	bne.n	8002d2a <HCD_HC_IN_IRQHandler+0x500>
      hhcd->hc[ch_num].ErrCnt++;
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	3358      	adds	r3, #88	; 0x58
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	1c59      	adds	r1, r3, #1
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4403      	add	r3, r0
 8002c9e:	3358      	adds	r3, #88	; 0x58
 8002ca0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	3358      	adds	r3, #88	; 0x58
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d914      	bls.n	8002ce2 <HCD_HC_IN_IRQHandler+0x4b8>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3358      	adds	r3, #88	; 0x58
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	335c      	adds	r3, #92	; 0x5c
 8002cdc:	2204      	movs	r2, #4
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e009      	b.n	8002cf6 <HCD_HC_IN_IRQHandler+0x4cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	335c      	adds	r3, #92	; 0x5c
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d0c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d14:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	e02d      	b.n	8002d86 <HCD_HC_IN_IRQHandler+0x55c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	440b      	add	r3, r1
 8002d38:	335d      	adds	r3, #93	; 0x5d
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d122      	bne.n	8002d86 <HCD_HC_IN_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	335c      	adds	r3, #92	; 0x5c
 8002d50:	2202      	movs	r2, #2
 8002d52:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d6a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d72:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	461a      	mov	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	2302      	movs	r3, #2
 8002d96:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	b2d8      	uxtb	r0, r3
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	335c      	adds	r3, #92	; 0x5c
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	4601      	mov	r1, r0
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f008 fd42 	bl	800b83c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002db8:	e0d4      	b.n	8002f64 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d13f      	bne.n	8002e50 <HCD_HC_IN_IRQHandler+0x626>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	4619      	mov	r1, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	3358      	adds	r3, #88	; 0x58
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	1c59      	adds	r1, r3, #1
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4403      	add	r3, r0
 8002e14:	3358      	adds	r3, #88	; 0x58
 8002e16:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	335d      	adds	r3, #93	; 0x5d
 8002e28:	2206      	movs	r2, #6
 8002e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fef9 	bl	8006c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	6093      	str	r3, [r2, #8]
}
 8002e4e:	e089      	b.n	8002f64 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d17e      	bne.n	8002f64 <HCD_HC_IN_IRQHandler+0x73a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	333f      	adds	r3, #63	; 0x3f
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d123      	bne.n	8002ec4 <HCD_HC_IN_IRQHandler+0x69a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	3358      	adds	r3, #88	; 0x58
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 feb6 	bl	8006c2e <USB_HC_Halt>
 8002ec2:	e046      	b.n	8002f52 <HCD_HC_IN_IRQHandler+0x728>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	333f      	adds	r3, #63	; 0x3f
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HCD_HC_IN_IRQHandler+0x6c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	333f      	adds	r3, #63	; 0x3f
 8002eea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d130      	bne.n	8002f52 <HCD_HC_IN_IRQHandler+0x728>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	3358      	adds	r3, #88	; 0x58
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d122      	bne.n	8002f52 <HCD_HC_IN_IRQHandler+0x728>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	335d      	adds	r3, #93	; 0x5d
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	60cb      	str	r3, [r1, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fe6e 	bl	8006c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5e:	461a      	mov	r2, r3
 8002f60:	2310      	movs	r3, #16
 8002f62:	6093      	str	r3, [r2, #8]
}
 8002f64:	bf00      	nop
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d11a      	bne.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2304      	movs	r3, #4
 8002fac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	4619      	mov	r1, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    /* ... */
  }
}
 8002fd0:	e347      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d142      	bne.n	800306e <HCD_HC_OUT_IRQHandler+0x102>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	333d      	adds	r3, #61	; 0x3d
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	f040 8328 	bne.w	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].do_ping = 0U;
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	333d      	adds	r3, #61	; 0x3d
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	440b      	add	r3, r1
 8003034:	335c      	adds	r3, #92	; 0x5c
 8003036:	2202      	movs	r2, #2
 8003038:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	4619      	mov	r1, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f043 0302 	orr.w	r3, r3, #2
 800305a:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f003 fde1 	bl	8006c2e <USB_HC_Halt>
}
 800306c:	e2f9      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4413      	add	r3, r2
 8003076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d140      	bne.n	8003106 <HCD_HC_OUT_IRQHandler+0x19a>
    hhcd->hc[ch_num].state = HC_NYET;
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	335d      	adds	r3, #93	; 0x5d
 8003094:	2204      	movs	r2, #4
 8003096:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	440b      	add	r3, r1
 80030a6:	333d      	adds	r3, #61	; 0x3d
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3358      	adds	r3, #88	; 0x58
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	4619      	mov	r1, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 fd9e 	bl	8006c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	461a      	mov	r2, r3
 8003100:	2340      	movs	r3, #64	; 0x40
 8003102:	6093      	str	r3, [r2, #8]
}
 8003104:	e2ad      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311c:	d123      	bne.n	8003166 <HCD_HC_OUT_IRQHandler+0x1fa>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312a:	4619      	mov	r1, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fd6f 	bl	8006c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	461a      	mov	r2, r3
 800315e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003162:	6093      	str	r3, [r2, #8]
}
 8003164:	e27d      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d136      	bne.n	80031ea <HCD_HC_OUT_IRQHandler+0x27e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	3358      	adds	r3, #88	; 0x58
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	4619      	mov	r1, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 fd36 	bl	8006c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ce:	461a      	mov	r2, r3
 80031d0:	2301      	movs	r3, #1
 80031d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	440b      	add	r3, r1
 80031e2:	335d      	adds	r3, #93	; 0x5d
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
}
 80031e8:	e23b      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d12c      	bne.n	800325a <HCD_HC_OUT_IRQHandler+0x2ee>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	461a      	mov	r2, r3
 800320e:	2308      	movs	r3, #8
 8003210:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	4619      	mov	r1, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f043 0302 	orr.w	r3, r3, #2
 8003232:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f003 fcf5 	bl	8006c2e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	440b      	add	r3, r1
 8003252:	335d      	adds	r3, #93	; 0x5d
 8003254:	2205      	movs	r2, #5
 8003256:	701a      	strb	r2, [r3, #0]
}
 8003258:	e203      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b10      	cmp	r3, #16
 800326e:	d156      	bne.n	800331e <HCD_HC_OUT_IRQHandler+0x3b2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	3358      	adds	r3, #88	; 0x58
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	335d      	adds	r3, #93	; 0x5d
 8003294:	2203      	movs	r2, #3
 8003296:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	333d      	adds	r3, #61	; 0x3d
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d114      	bne.n	80032d8 <HCD_HC_OUT_IRQHandler+0x36c>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	333c      	adds	r3, #60	; 0x3c
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HCD_HC_OUT_IRQHandler+0x36c>
        hhcd->hc[ch_num].do_ping = 1U;
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	333d      	adds	r3, #61	; 0x3d
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	4619      	mov	r1, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f003 fc92 	bl	8006c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	2310      	movs	r3, #16
 800331a:	6093      	str	r3, [r2, #8]
}
 800331c:	e1a1      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003330:	2b80      	cmp	r3, #128	; 0x80
 8003332:	d12c      	bne.n	800338e <HCD_HC_OUT_IRQHandler+0x422>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	4619      	mov	r1, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f003 fc64 	bl	8006c2e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	440b      	add	r3, r1
 8003374:	335d      	adds	r3, #93	; 0x5d
 8003376:	2206      	movs	r2, #6
 8003378:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	461a      	mov	r2, r3
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	6093      	str	r3, [r2, #8]
}
 800338c:	e169      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a4:	d136      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x4a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b2:	4619      	mov	r1, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f043 0302 	orr.w	r3, r3, #2
 80033c6:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 fc2b 	bl	8006c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	2310      	movs	r3, #16
 80033e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	335d      	adds	r3, #93	; 0x5d
 800340e:	2208      	movs	r2, #8
 8003410:	701a      	strb	r2, [r3, #0]
}
 8003412:	e126      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	f040 811b 	bne.w	8003662 <HCD_HC_OUT_IRQHandler+0x6f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003438:	4619      	mov	r1, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f023 0302 	bic.w	r3, r3, #2
 800344c:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	440b      	add	r3, r1
 800345c:	335d      	adds	r3, #93	; 0x5d
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d137      	bne.n	80034d4 <HCD_HC_OUT_IRQHandler+0x568>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	440b      	add	r3, r1
 8003472:	335c      	adds	r3, #92	; 0x5c
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	440b      	add	r3, r1
 8003486:	333f      	adds	r3, #63	; 0x3f
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d00b      	beq.n	80034a6 <HCD_HC_OUT_IRQHandler+0x53a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	333f      	adds	r3, #63	; 0x3f
 800349e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	f040 80c5 	bne.w	8003630 <HCD_HC_OUT_IRQHandler+0x6c4>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	3351      	adds	r3, #81	; 0x51
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f083 0301 	eor.w	r3, r3, #1
 80034bc:	b2d8      	uxtb	r0, r3
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	440b      	add	r3, r1
 80034cc:	3351      	adds	r3, #81	; 0x51
 80034ce:	4602      	mov	r2, r0
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e0ad      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	440b      	add	r3, r1
 80034e2:	335d      	adds	r3, #93	; 0x5d
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d10a      	bne.n	8003500 <HCD_HC_OUT_IRQHandler+0x594>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	335c      	adds	r3, #92	; 0x5c
 80034fa:	2202      	movs	r2, #2
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e097      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	335d      	adds	r3, #93	; 0x5d
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b04      	cmp	r3, #4
 8003514:	d10a      	bne.n	800352c <HCD_HC_OUT_IRQHandler+0x5c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	440b      	add	r3, r1
 8003524:	335c      	adds	r3, #92	; 0x5c
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	e081      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	440b      	add	r3, r1
 800353a:	335d      	adds	r3, #93	; 0x5d
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b05      	cmp	r3, #5
 8003540:	d10a      	bne.n	8003558 <HCD_HC_OUT_IRQHandler+0x5ec>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	335c      	adds	r3, #92	; 0x5c
 8003552:	2205      	movs	r2, #5
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e06b      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	335d      	adds	r3, #93	; 0x5d
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b06      	cmp	r3, #6
 800356c:	d00a      	beq.n	8003584 <HCD_HC_OUT_IRQHandler+0x618>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	440b      	add	r3, r1
 800357c:	335d      	adds	r3, #93	; 0x5d
 800357e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003580:	2b08      	cmp	r3, #8
 8003582:	d155      	bne.n	8003630 <HCD_HC_OUT_IRQHandler+0x6c4>
      hhcd->hc[ch_num].ErrCnt++;
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	440b      	add	r3, r1
 8003592:	3358      	adds	r3, #88	; 0x58
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4403      	add	r3, r0
 80035a6:	3358      	adds	r3, #88	; 0x58
 80035a8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	3358      	adds	r3, #88	; 0x58
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d914      	bls.n	80035ea <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	3358      	adds	r3, #88	; 0x58
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	440b      	add	r3, r1
 80035e2:	335c      	adds	r3, #92	; 0x5c
 80035e4:	2204      	movs	r2, #4
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e009      	b.n	80035fe <HCD_HC_OUT_IRQHandler+0x692>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	335c      	adds	r3, #92	; 0x5c
 80035fa:	2202      	movs	r2, #2
 80035fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003614:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800361c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	461a      	mov	r2, r3
 800363e:	2302      	movs	r3, #2
 8003640:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	b2d8      	uxtb	r0, r3
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	335c      	adds	r3, #92	; 0x5c
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	4601      	mov	r1, r0
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f008 f8ed 	bl	800b83c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	0c5b      	lsrs	r3, r3, #17
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d003      	beq.n	80036b0 <HCD_RXQLVL_IRQHandler+0x44>
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	f000 8082 	beq.w	80037b2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036ae:	e083      	b.n	80037b8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d07f      	beq.n	80037b6 <HCD_RXQLVL_IRQHandler+0x14a>
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	440b      	add	r3, r1
 80036c4:	3344      	adds	r3, #68	; 0x44
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d074      	beq.n	80037b6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	440b      	add	r3, r1
 80036de:	3344      	adds	r3, #68	; 0x44
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	b292      	uxth	r2, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	f002 fe2d 	bl	8006346 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	440b      	add	r3, r1
 80036fa:	3344      	adds	r3, #68	; 0x44
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	18d1      	adds	r1, r2, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4403      	add	r3, r0
 8003710:	3344      	adds	r3, #68	; 0x44
 8003712:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	334c      	adds	r3, #76	; 0x4c
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	18d1      	adds	r1, r2, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4403      	add	r3, r0
 8003738:	334c      	adds	r3, #76	; 0x4c
 800373a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HCD_RXQLVL_IRQHandler+0x154>)
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d031      	beq.n	80037b6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003768:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003770:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	440b      	add	r3, r1
 8003792:	3350      	adds	r3, #80	; 0x50
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	f083 0301 	eor.w	r3, r3, #1
 800379a:	b2d8      	uxtb	r0, r3
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	440b      	add	r3, r1
 80037aa:	3350      	adds	r3, #80	; 0x50
 80037ac:	4602      	mov	r2, r0
 80037ae:	701a      	strb	r2, [r3, #0]
      break;
 80037b0:	e001      	b.n	80037b6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80037b6:	bf00      	nop
  }
}
 80037b8:	bf00      	nop
 80037ba:	3728      	adds	r7, #40	; 0x28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	1ff80000 	.word	0x1ff80000

080037c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d113      	bne.n	8003824 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10a      	bne.n	800381c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	6992      	ldr	r2, [r2, #24]
 8003810:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003814:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f007 fff4 	bl	800b804 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f043 0302 	orr.w	r3, r3, #2
 8003822:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b08      	cmp	r3, #8
 800382c:	d148      	bne.n	80038c0 <HCD_Port_IRQHandler+0xfc>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f043 0308 	orr.w	r3, r3, #8
 8003834:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b04      	cmp	r3, #4
 800383e:	d129      	bne.n	8003894 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d113      	bne.n	8003870 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800384e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003852:	d106      	bne.n	8003862 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f002 feb0 	bl	80065c0 <USB_InitFSLSPClkSel>
 8003860:	e011      	b.n	8003886 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f002 fea9 	bl	80065c0 <USB_InitFSLSPClkSel>
 800386e:	e00a      	b.n	8003886 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d106      	bne.n	8003886 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800387e:	461a      	mov	r2, r3
 8003880:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003884:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f007 ffe6 	bl	800b858 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f007 ffb9 	bl	800b804 <HAL_HCD_Connect_Callback>
 8003892:	e015      	b.n	80038c0 <HCD_Port_IRQHandler+0xfc>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f007 ffed 	bl	800b874 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038a0:	461a      	mov	r2, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038ae:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	6992      	ldr	r2, [r2, #24]
 80038ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80038be:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d103      	bne.n	80038d2 <HCD_Port_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f043 0320 	orr.w	r3, r3, #32
 80038d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038d8:	461a      	mov	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6013      	str	r3, [r2, #0]
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e10f      	b.n	8003b1a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f007 fb1e 	bl	800af50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800392c:	f001 f9aa 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8003930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4a7b      	ldr	r2, [pc, #492]	; (8003b24 <HAL_I2C_Init+0x23c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d807      	bhi.n	800394c <HAL_I2C_Init+0x64>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a7a      	ldr	r2, [pc, #488]	; (8003b28 <HAL_I2C_Init+0x240>)
 8003940:	4293      	cmp	r3, r2
 8003942:	bf94      	ite	ls
 8003944:	2301      	movls	r3, #1
 8003946:	2300      	movhi	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e006      	b.n	800395a <HAL_I2C_Init+0x72>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a77      	ldr	r2, [pc, #476]	; (8003b2c <HAL_I2C_Init+0x244>)
 8003950:	4293      	cmp	r3, r2
 8003952:	bf94      	ite	ls
 8003954:	2301      	movls	r3, #1
 8003956:	2300      	movhi	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0db      	b.n	8003b1a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a72      	ldr	r2, [pc, #456]	; (8003b30 <HAL_I2C_Init+0x248>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0c9b      	lsrs	r3, r3, #18
 800396c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	6852      	ldr	r2, [r2, #4]
 8003978:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4863      	ldr	r0, [pc, #396]	; (8003b24 <HAL_I2C_Init+0x23c>)
 8003996:	4283      	cmp	r3, r0
 8003998:	d802      	bhi.n	80039a0 <HAL_I2C_Init+0xb8>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3301      	adds	r3, #1
 800399e:	e009      	b.n	80039b4 <HAL_I2C_Init+0xcc>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039a6:	fb00 f303 	mul.w	r3, r0, r3
 80039aa:	4862      	ldr	r0, [pc, #392]	; (8003b34 <HAL_I2C_Init+0x24c>)
 80039ac:	fba0 0303 	umull	r0, r3, r0, r3
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	3301      	adds	r3, #1
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4955      	ldr	r1, [pc, #340]	; (8003b24 <HAL_I2C_Init+0x23c>)
 80039d0:	428b      	cmp	r3, r1
 80039d2:	d80d      	bhi.n	80039f0 <HAL_I2C_Init+0x108>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e59      	subs	r1, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	bf38      	it	cc
 80039ec:	2304      	movcc	r3, #4
 80039ee:	e04f      	b.n	8003a90 <HAL_I2C_Init+0x1a8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d111      	bne.n	8003a1c <HAL_I2C_Init+0x134>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e5c      	subs	r4, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	440b      	add	r3, r1
 8003a06:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e012      	b.n	8003a42 <HAL_I2C_Init+0x15a>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e5c      	subs	r4, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	0099      	lsls	r1, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_Init+0x162>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e022      	b.n	8003a90 <HAL_I2C_Init+0x1a8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10e      	bne.n	8003a70 <HAL_I2C_Init+0x188>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1e5c      	subs	r4, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	440b      	add	r3, r1
 8003a60:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a64:	3301      	adds	r3, #1
 8003a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6e:	e00f      	b.n	8003a90 <HAL_I2C_Init+0x1a8>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e5c      	subs	r4, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	0099      	lsls	r1, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	69d0      	ldr	r0, [r2, #28]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6a12      	ldr	r2, [r2, #32]
 8003aaa:	4302      	orrs	r2, r0
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003abe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	6908      	ldr	r0, [r1, #16]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	68c9      	ldr	r1, [r1, #12]
 8003aca:	4301      	orrs	r1, r0
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6950      	ldr	r0, [r2, #20]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6992      	ldr	r2, [r2, #24]
 8003ae6:	4302      	orrs	r2, r0
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd90      	pop	{r4, r7, pc}
 8003b22:	bf00      	nop
 8003b24:	000186a0 	.word	0x000186a0
 8003b28:	001e847f 	.word	0x001e847f
 8003b2c:	003d08ff 	.word	0x003d08ff
 8003b30:	431bde83 	.word	0x431bde83
 8003b34:	10624dd3 	.word	0x10624dd3

08003b38 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e127      	b.n	8003d9a <HAL_I2S_Init+0x262>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a90      	ldr	r2, [pc, #576]	; (8003da4 <HAL_I2S_Init+0x26c>)
 8003b62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f007 fa3b 	bl	800afe0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b80:	f023 030f 	bic.w	r3, r3, #15
 8003b84:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d060      	beq.n	8003c58 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e001      	b.n	8003ba8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d802      	bhi.n	8003bb6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f001 f968 	bl	8004e8c <HAL_RCCEx_GetPeriphCLKFreq>
 8003bbc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc6:	d125      	bne.n	8003c14 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d010      	beq.n	8003bf2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	3305      	adds	r3, #5
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	e01f      	b.n	8003c32 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	461a      	mov	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	3305      	adds	r3, #5
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e00e      	b.n	8003c32 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	461a      	mov	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	3305      	adds	r3, #5
 8003c30:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4a5c      	ldr	r2, [pc, #368]	; (8003da8 <HAL_I2S_Init+0x270>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	08db      	lsrs	r3, r3, #3
 8003c3c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e003      	b.n	8003c60 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d902      	bls.n	8003c6c <HAL_I2S_Init+0x134>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	2bff      	cmp	r3, #255	; 0xff
 8003c6a:	d907      	bls.n	8003c7c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e08e      	b.n	8003d9a <HAL_I2S_Init+0x262>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6911      	ldr	r1, [r2, #16]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4311      	orrs	r1, r2
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c9c:	f023 030f 	bic.w	r3, r3, #15
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	6848      	ldr	r0, [r1, #4]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	6889      	ldr	r1, [r1, #8]
 8003ca8:	4308      	orrs	r0, r1
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	68c9      	ldr	r1, [r1, #12]
 8003cae:	4308      	orrs	r0, r1
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	6989      	ldr	r1, [r1, #24]
 8003cb4:	4301      	orrs	r1, r0
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cbc:	61d3      	str	r3, [r2, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d161      	bne.n	8003d8a <HAL_I2S_Init+0x252>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a38      	ldr	r2, [pc, #224]	; (8003dac <HAL_I2S_Init+0x274>)
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a37      	ldr	r2, [pc, #220]	; (8003db0 <HAL_I2S_Init+0x278>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_I2S_Init+0x1a2>
 8003cd6:	4a37      	ldr	r2, [pc, #220]	; (8003db4 <HAL_I2S_Init+0x27c>)
 8003cd8:	e001      	b.n	8003cde <HAL_I2S_Init+0x1a6>
 8003cda:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4933      	ldr	r1, [pc, #204]	; (8003db0 <HAL_I2S_Init+0x278>)
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d101      	bne.n	8003cec <HAL_I2S_Init+0x1b4>
 8003ce8:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <HAL_I2S_Init+0x27c>)
 8003cea:	e001      	b.n	8003cf0 <HAL_I2S_Init+0x1b8>
 8003cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cf6:	f023 030f 	bic.w	r3, r3, #15
 8003cfa:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2b      	ldr	r2, [pc, #172]	; (8003db0 <HAL_I2S_Init+0x278>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_I2S_Init+0x1d2>
 8003d06:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_I2S_Init+0x27c>)
 8003d08:	e001      	b.n	8003d0e <HAL_I2S_Init+0x1d6>
 8003d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d0e:	2202      	movs	r2, #2
 8003d10:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <HAL_I2S_Init+0x278>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_I2S_Init+0x1e8>
 8003d1c:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <HAL_I2S_Init+0x27c>)
 8003d1e:	e001      	b.n	8003d24 <HAL_I2S_Init+0x1ec>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d30:	d003      	beq.n	8003d3a <HAL_I2S_Init+0x202>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <HAL_I2S_Init+0x20a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	e001      	b.n	8003d46 <HAL_I2S_Init+0x20e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	b299      	uxth	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003d5c:	4303      	orrs	r3, r0
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	430b      	orrs	r3, r1
 8003d62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003d64:	4313      	orrs	r3, r2
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	897b      	ldrh	r3, [r7, #10]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d72:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <HAL_I2S_Init+0x278>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2S_Init+0x24a>
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <HAL_I2S_Init+0x27c>)
 8003d80:	e001      	b.n	8003d86 <HAL_I2S_Init+0x24e>
 8003d82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d86:	897a      	ldrh	r2, [r7, #10]
 8003d88:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08003eaf 	.word	0x08003eaf
 8003da8:	cccccccd 	.word	0xcccccccd
 8003dac:	08003fc5 	.word	0x08003fc5
 8003db0:	40003800 	.word	0x40003800
 8003db4:	40003400 	.word	0x40003400

08003db8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e04:	8812      	ldrh	r2, [r2, #0]
 8003e06:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c9a      	adds	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10e      	bne.n	8003e48 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	6852      	ldr	r2, [r2, #4]
 8003e34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e38:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ffb8 	bl	8003db8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	68d2      	ldr	r2, [r2, #12]
 8003e62:	b292      	uxth	r2, r2
 8003e64:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	1c9a      	adds	r2, r3, #2
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10e      	bne.n	8003ea6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	6852      	ldr	r2, [r2, #4]
 8003e92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e96:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ff93 	bl	8003dcc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b086      	sub	sp, #24
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d13a      	bne.n	8003f40 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d109      	bne.n	8003ee8 <I2S_IRQHandler+0x3a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d102      	bne.n	8003ee8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff ffb4 	bl	8003e50 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d126      	bne.n	8003f40 <I2S_IRQHandler+0x92>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d11f      	bne.n	8003f40 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	6852      	ldr	r2, [r2, #4]
 8003f0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ff50 	bl	8003de0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d136      	bne.n	8003fba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d109      	bne.n	8003f6a <I2S_IRQHandler+0xbc>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b80      	cmp	r3, #128	; 0x80
 8003f62:	d102      	bne.n	8003f6a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ff45 	bl	8003df4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d122      	bne.n	8003fba <I2S_IRQHandler+0x10c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d11b      	bne.n	8003fba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	6852      	ldr	r2, [r2, #4]
 8003f8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f90:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	f043 0204 	orr.w	r2, r3, #4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ff13 	bl	8003de0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fba:	bf00      	nop
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4aa2      	ldr	r2, [pc, #648]	; (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003fde:	4ba2      	ldr	r3, [pc, #648]	; (8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fe0:	e001      	b.n	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a9b      	ldr	r2, [pc, #620]	; (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d101      	bne.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ffc:	4b9a      	ldr	r3, [pc, #616]	; (8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ffe:	e001      	b.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004010:	d004      	beq.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 8099 	bne.w	800414e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d107      	bne.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f925 	bl	8004280 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d107      	bne.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9c6 	bl	80043dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d13a      	bne.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d035      	beq.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a7e      	ldr	r2, [pc, #504]	; (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d101      	bne.n	8004072 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800406e:	4b7e      	ldr	r3, [pc, #504]	; (8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004070:	e001      	b.n	8004076 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004072:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	497a      	ldr	r1, [pc, #488]	; (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800407c:	428a      	cmp	r2, r1
 800407e:	d101      	bne.n	8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0xc0>
 8004080:	4a79      	ldr	r2, [pc, #484]	; (8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004082:	e001      	b.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0xc4>
 8004084:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004088:	6852      	ldr	r2, [r2, #4]
 800408a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800408e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	6852      	ldr	r2, [r2, #4]
 800409a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800409e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f043 0202 	orr.w	r2, r3, #2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fe88 	bl	8003de0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	f040 80be 	bne.w	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80b8 	beq.w	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	6852      	ldr	r2, [r2, #4]
 80040f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a59      	ldr	r2, [pc, #356]	; (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004102:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004104:	e001      	b.n	800410a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004106:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	4955      	ldr	r1, [pc, #340]	; (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004110:	428a      	cmp	r2, r1
 8004112:	d101      	bne.n	8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
 8004114:	4a54      	ldr	r2, [pc, #336]	; (8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004116:	e001      	b.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x158>
 8004118:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800411c:	6852      	ldr	r2, [r2, #4]
 800411e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004122:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f043 0204 	orr.w	r2, r3, #4
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff fe4a 	bl	8003de0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800414c:	e084      	b.n	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b02      	cmp	r3, #2
 8004156:	d107      	bne.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f8be 	bl	80042e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d107      	bne.n	8004182 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8fb 	bl	8004378 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d12f      	bne.n	80041ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b00      	cmp	r3, #0
 8004194:	d02a      	beq.n	80041ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	6852      	ldr	r2, [r2, #4]
 80041a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2e      	ldr	r2, [pc, #184]	; (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d101      	bne.n	80041b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041b0:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041b2:	e001      	b.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	4929      	ldr	r1, [pc, #164]	; (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041be:	428a      	cmp	r2, r1
 80041c0:	d101      	bne.n	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
 80041c2:	4a29      	ldr	r2, [pc, #164]	; (8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041c4:	e001      	b.n	80041ca <HAL_I2SEx_FullDuplex_IRQHandler+0x206>
 80041c6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041ca:	6852      	ldr	r2, [r2, #4]
 80041cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f043 0202 	orr.w	r2, r3, #2
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff fdfa 	bl	8003de0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d131      	bne.n	800425a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d02c      	beq.n	800425a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a17      	ldr	r2, [pc, #92]	; (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800420a:	4b17      	ldr	r3, [pc, #92]	; (8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800420c:	e001      	b.n	8004212 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800420e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	4913      	ldr	r1, [pc, #76]	; (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004218:	428a      	cmp	r2, r1
 800421a:	d101      	bne.n	8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x25c>
 800421c:	4a12      	ldr	r2, [pc, #72]	; (8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800421e:	e001      	b.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>
 8004220:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004224:	6852      	ldr	r2, [r2, #4]
 8004226:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800422a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	6852      	ldr	r2, [r2, #4]
 8004236:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800423a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004248:	f043 0204 	orr.w	r2, r3, #4
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff fdc5 	bl	8003de0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004256:	e000      	b.n	800425a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004258:	bf00      	nop
}
 800425a:	bf00      	nop
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40003800 	.word	0x40003800
 8004268:	40003400 	.word	0x40003400

0800426c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	1c98      	adds	r0, r3, #2
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	6248      	str	r0, [r1, #36]	; 0x24
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d113      	bne.n	80042da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	6852      	ldr	r2, [r2, #4]
 80042bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ffc9 	bl	800426c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <I2SEx_TxISR_I2SExt+0x8c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d101      	bne.n	80042fa <I2SEx_TxISR_I2SExt+0x16>
 80042f6:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <I2SEx_TxISR_I2SExt+0x90>)
 80042f8:	e001      	b.n	80042fe <I2SEx_TxISR_I2SExt+0x1a>
 80042fa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c98      	adds	r0, r3, #2
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	6248      	str	r0, [r1, #36]	; 0x24
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d121      	bne.n	8004368 <I2SEx_TxISR_I2SExt+0x84>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a11      	ldr	r2, [pc, #68]	; (8004370 <I2SEx_TxISR_I2SExt+0x8c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <I2SEx_TxISR_I2SExt+0x4e>
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <I2SEx_TxISR_I2SExt+0x90>)
 8004330:	e001      	b.n	8004336 <I2SEx_TxISR_I2SExt+0x52>
 8004332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	490d      	ldr	r1, [pc, #52]	; (8004370 <I2SEx_TxISR_I2SExt+0x8c>)
 800433c:	428a      	cmp	r2, r1
 800433e:	d101      	bne.n	8004344 <I2SEx_TxISR_I2SExt+0x60>
 8004340:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <I2SEx_TxISR_I2SExt+0x90>)
 8004342:	e001      	b.n	8004348 <I2SEx_TxISR_I2SExt+0x64>
 8004344:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004348:	6852      	ldr	r2, [r2, #4]
 800434a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800434e:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <I2SEx_TxISR_I2SExt+0x84>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff ff82 	bl	800426c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40003800 	.word	0x40003800
 8004374:	40003400 	.word	0x40003400

08004378 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	1c99      	adds	r1, r3, #2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	62d1      	str	r1, [r2, #44]	; 0x2c
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	68d2      	ldr	r2, [r2, #12]
 8004390:	b292      	uxth	r2, r2
 8004392:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d113      	bne.n	80043d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	6852      	ldr	r2, [r2, #4]
 80043b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff ff4c 	bl	800426c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	1c99      	adds	r1, r3, #2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	491e      	ldr	r1, [pc, #120]	; (800446c <I2SEx_RxISR_I2SExt+0x90>)
 80043f4:	428a      	cmp	r2, r1
 80043f6:	d101      	bne.n	80043fc <I2SEx_RxISR_I2SExt+0x20>
 80043f8:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <I2SEx_RxISR_I2SExt+0x94>)
 80043fa:	e001      	b.n	8004400 <I2SEx_RxISR_I2SExt+0x24>
 80043fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004400:	68d2      	ldr	r2, [r2, #12]
 8004402:	b292      	uxth	r2, r2
 8004404:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d121      	bne.n	8004462 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <I2SEx_RxISR_I2SExt+0x90>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d101      	bne.n	800442c <I2SEx_RxISR_I2SExt+0x50>
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <I2SEx_RxISR_I2SExt+0x94>)
 800442a:	e001      	b.n	8004430 <I2SEx_RxISR_I2SExt+0x54>
 800442c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	490d      	ldr	r1, [pc, #52]	; (800446c <I2SEx_RxISR_I2SExt+0x90>)
 8004436:	428a      	cmp	r2, r1
 8004438:	d101      	bne.n	800443e <I2SEx_RxISR_I2SExt+0x62>
 800443a:	4a0d      	ldr	r2, [pc, #52]	; (8004470 <I2SEx_RxISR_I2SExt+0x94>)
 800443c:	e001      	b.n	8004442 <I2SEx_RxISR_I2SExt+0x66>
 800443e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004442:	6852      	ldr	r2, [r2, #4]
 8004444:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004448:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff05 	bl	800426c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40003800 	.word	0x40003800
 8004470:	40003400 	.word	0x40003400

08004474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e22d      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d075      	beq.n	800457e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004492:	4ba3      	ldr	r3, [pc, #652]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d00c      	beq.n	80044b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800449e:	4ba0      	ldr	r3, [pc, #640]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d112      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044aa:	4b9d      	ldr	r3, [pc, #628]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	4b99      	ldr	r3, [pc, #612]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05b      	beq.n	800457c <HAL_RCC_OscConfig+0x108>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d157      	bne.n	800457c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e208      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d8:	d106      	bne.n	80044e8 <HAL_RCC_OscConfig+0x74>
 80044da:	4a91      	ldr	r2, [pc, #580]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	4b90      	ldr	r3, [pc, #576]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e01d      	b.n	8004524 <HAL_RCC_OscConfig+0xb0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x98>
 80044f2:	4a8b      	ldr	r2, [pc, #556]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	4b8a      	ldr	r3, [pc, #552]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4a88      	ldr	r2, [pc, #544]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	4b87      	ldr	r3, [pc, #540]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0xb0>
 800450c:	4a84      	ldr	r2, [pc, #528]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 800450e:	4b84      	ldr	r3, [pc, #528]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4a81      	ldr	r2, [pc, #516]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 800451a:	4b81      	ldr	r3, [pc, #516]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fc fcb0 	bl	8000e90 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004534:	f7fc fcac 	bl	8000e90 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e1cd      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b76      	ldr	r3, [pc, #472]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0xc0>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fc fc9c 	bl	8000e90 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455c:	f7fc fc98 	bl	8000e90 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e1b9      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0xe8>
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d063      	beq.n	8004652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800458a:	4b65      	ldr	r3, [pc, #404]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004596:	4b62      	ldr	r3, [pc, #392]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11c      	bne.n	80045dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a2:	4b5f      	ldr	r3, [pc, #380]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d116      	bne.n	80045dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	4b5c      	ldr	r3, [pc, #368]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x152>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e18d      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c6:	4956      	ldr	r1, [pc, #344]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	4b55      	ldr	r3, [pc, #340]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	e03a      	b.n	8004652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d020      	beq.n	8004626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e4:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <HAL_RCC_OscConfig+0x2b0>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fc fc51 	bl	8000e90 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f2:	f7fc fc4d 	bl	8000e90 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e16e      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004604:	4b46      	ldr	r3, [pc, #280]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4943      	ldr	r1, [pc, #268]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004612:	4b43      	ldr	r3, [pc, #268]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
 8004624:	e015      	b.n	8004652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	4b3f      	ldr	r3, [pc, #252]	; (8004724 <HAL_RCC_OscConfig+0x2b0>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fc fc30 	bl	8000e90 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004634:	f7fc fc2c 	bl	8000e90 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e14d      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004646:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d030      	beq.n	80046c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004666:	4b30      	ldr	r3, [pc, #192]	; (8004728 <HAL_RCC_OscConfig+0x2b4>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fc fc10 	bl	8000e90 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004674:	f7fc fc0c 	bl	8000e90 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e12d      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004686:	4b26      	ldr	r3, [pc, #152]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x200>
 8004692:	e015      	b.n	80046c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004694:	4b24      	ldr	r3, [pc, #144]	; (8004728 <HAL_RCC_OscConfig+0x2b4>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469a:	f7fc fbf9 	bl	8000e90 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a2:	f7fc fbf5 	bl	8000e90 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e116      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80046b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80a0 	beq.w	800480e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10f      	bne.n	80046fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	4a0f      	ldr	r2, [pc, #60]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ec:	6413      	str	r3, [r2, #64]	; 0x40
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046fa:	2301      	movs	r3, #1
 80046fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_OscConfig+0x2b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d121      	bne.n	800474e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470a:	4a08      	ldr	r2, [pc, #32]	; (800472c <HAL_RCC_OscConfig+0x2b8>)
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <HAL_RCC_OscConfig+0x2b8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004716:	f7fc fbbb 	bl	8000e90 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471c:	e011      	b.n	8004742 <HAL_RCC_OscConfig+0x2ce>
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800
 8004724:	42470000 	.word	0x42470000
 8004728:	42470e80 	.word	0x42470e80
 800472c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004730:	f7fc fbae 	bl	8000e90 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e0cf      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004742:	4b6a      	ldr	r3, [pc, #424]	; (80048ec <HAL_RCC_OscConfig+0x478>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d106      	bne.n	8004764 <HAL_RCC_OscConfig+0x2f0>
 8004756:	4a66      	ldr	r2, [pc, #408]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 8004758:	4b65      	ldr	r3, [pc, #404]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	6713      	str	r3, [r2, #112]	; 0x70
 8004762:	e01c      	b.n	800479e <HAL_RCC_OscConfig+0x32a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b05      	cmp	r3, #5
 800476a:	d10c      	bne.n	8004786 <HAL_RCC_OscConfig+0x312>
 800476c:	4a60      	ldr	r2, [pc, #384]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 800476e:	4b60      	ldr	r3, [pc, #384]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
 8004778:	4a5d      	ldr	r2, [pc, #372]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 800477a:	4b5d      	ldr	r3, [pc, #372]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	; 0x70
 8004784:	e00b      	b.n	800479e <HAL_RCC_OscConfig+0x32a>
 8004786:	4a5a      	ldr	r2, [pc, #360]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 8004788:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6713      	str	r3, [r2, #112]	; 0x70
 8004792:	4a57      	ldr	r2, [pc, #348]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 8004794:	4b56      	ldr	r3, [pc, #344]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d015      	beq.n	80047d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a6:	f7fc fb73 	bl	8000e90 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ae:	f7fc fb6f 	bl	8000e90 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047bc:	4293      	cmp	r3, r2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e08e      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	4b4a      	ldr	r3, [pc, #296]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ee      	beq.n	80047ae <HAL_RCC_OscConfig+0x33a>
 80047d0:	e014      	b.n	80047fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d2:	f7fc fb5d 	bl	8000e90 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fc fb59 	bl	8000e90 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e078      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f0:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ee      	bne.n	80047da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004802:	4a3b      	ldr	r2, [pc, #236]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 8004804:	4b3a      	ldr	r3, [pc, #232]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d064      	beq.n	80048e0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004816:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b08      	cmp	r3, #8
 8004820:	d05c      	beq.n	80048dc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d141      	bne.n	80048ae <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482a:	4b32      	ldr	r3, [pc, #200]	; (80048f4 <HAL_RCC_OscConfig+0x480>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fc fb2e 	bl	8000e90 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004838:	f7fc fb2a 	bl	8000e90 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e04b      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484a:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004856:	4926      	ldr	r1, [pc, #152]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	019b      	lsls	r3, r3, #6
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	3b01      	subs	r3, #1
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	061b      	lsls	r3, r3, #24
 800487c:	4313      	orrs	r3, r2
 800487e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004880:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <HAL_RCC_OscConfig+0x480>)
 8004882:	2201      	movs	r2, #1
 8004884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004886:	f7fc fb03 	bl	8000e90 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488e:	f7fc faff 	bl	8000e90 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e020      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a0:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f0      	beq.n	800488e <HAL_RCC_OscConfig+0x41a>
 80048ac:	e018      	b.n	80048e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCC_OscConfig+0x480>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fc faec 	bl	8000e90 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fc fae8 	bl	8000e90 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e009      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <HAL_RCC_OscConfig+0x47c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x448>
 80048da:	e001      	b.n	80048e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40007000 	.word	0x40007000
 80048f0:	40023800 	.word	0x40023800
 80048f4:	42470060 	.word	0x42470060

080048f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0ca      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800490c:	4b67      	ldr	r3, [pc, #412]	; (8004aac <HAL_RCC_ClockConfig+0x1b4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d20c      	bcs.n	8004934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b64      	ldr	r3, [pc, #400]	; (8004aac <HAL_RCC_ClockConfig+0x1b4>)
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004922:	4b62      	ldr	r3, [pc, #392]	; (8004aac <HAL_RCC_ClockConfig+0x1b4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 020f 	and.w	r2, r3, #15
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d001      	beq.n	8004934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0b6      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d020      	beq.n	8004982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800494c:	4a58      	ldr	r2, [pc, #352]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800494e:	4b58      	ldr	r3, [pc, #352]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004964:	4a52      	ldr	r2, [pc, #328]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004966:	4b52      	ldr	r3, [pc, #328]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800496e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004970:	494f      	ldr	r1, [pc, #316]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	4b4f      	ldr	r3, [pc, #316]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d044      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004996:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d119      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e07d      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d107      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b6:	4b3e      	ldr	r3, [pc, #248]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e06d      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c6:	4b3a      	ldr	r3, [pc, #232]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e065      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049d6:	4936      	ldr	r1, [pc, #216]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	4b35      	ldr	r3, [pc, #212]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f023 0203 	bic.w	r2, r3, #3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e8:	f7fc fa52 	bl	8000e90 <HAL_GetTick>
 80049ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	e00a      	b.n	8004a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f0:	f7fc fa4e 	bl	8000e90 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e04d      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a06:	4b2a      	ldr	r3, [pc, #168]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 020c 	and.w	r2, r3, #12
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d1eb      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a18:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_RCC_ClockConfig+0x1b4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 020f 	and.w	r2, r3, #15
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d90c      	bls.n	8004a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b21      	ldr	r3, [pc, #132]	; (8004aac <HAL_RCC_ClockConfig+0x1b4>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <HAL_RCC_ClockConfig+0x1b4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 020f 	and.w	r2, r3, #15
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e030      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a4c:	4918      	ldr	r1, [pc, #96]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4e:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a6a:	4911      	ldr	r1, [pc, #68]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a7e:	f000 f81d 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a82:	4601      	mov	r1, r0
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	091b      	lsrs	r3, r3, #4
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	4a09      	ldr	r2, [pc, #36]	; (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	5cd3      	ldrb	r3, [r2, r3]
 8004a92:	fa21 f303 	lsr.w	r3, r1, r3
 8004a96:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	f7fc f9b4 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023c00 	.word	0x40023c00
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	08018a80 	.word	0x08018a80
 8004ab8:	20000068 	.word	0x20000068

08004abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	b08f      	sub	sp, #60	; 0x3c
 8004ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac8:	2300      	movs	r3, #0
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
 8004acc:	2300      	movs	r3, #0
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad4:	4b62      	ldr	r3, [pc, #392]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 030c 	and.w	r3, r3, #12
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d007      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 80b2 	bne.w	8004c4e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aea:	4b5e      	ldr	r3, [pc, #376]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004aec:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8004aee:	e0b1      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004af0:	4b5d      	ldr	r3, [pc, #372]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004af4:	e0ae      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af6:	4b5a      	ldr	r3, [pc, #360]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b00:	4b57      	ldr	r3, [pc, #348]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d04e      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0c:	4b54      	ldr	r3, [pc, #336]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	099b      	lsrs	r3, r3, #6
 8004b12:	f04f 0400 	mov.w	r4, #0
 8004b16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	ea01 0103 	and.w	r1, r1, r3
 8004b22:	ea02 0204 	and.w	r2, r2, r4
 8004b26:	460b      	mov	r3, r1
 8004b28:	4614      	mov	r4, r2
 8004b2a:	0160      	lsls	r0, r4, #5
 8004b2c:	6278      	str	r0, [r7, #36]	; 0x24
 8004b2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b30:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004b34:	6278      	str	r0, [r7, #36]	; 0x24
 8004b36:	015b      	lsls	r3, r3, #5
 8004b38:	623b      	str	r3, [r7, #32]
 8004b3a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004b3e:	1a5b      	subs	r3, r3, r1
 8004b40:	eb64 0402 	sbc.w	r4, r4, r2
 8004b44:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8004b48:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8004b4c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8004b50:	ebb8 0803 	subs.w	r8, r8, r3
 8004b54:	eb69 0904 	sbc.w	r9, r9, r4
 8004b58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004b70:	eb18 0801 	adds.w	r8, r8, r1
 8004b74:	eb49 0902 	adc.w	r9, r9, r2
 8004b78:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004b90:	4640      	mov	r0, r8
 8004b92:	4649      	mov	r1, r9
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	f04f 0400 	mov.w	r4, #0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	f7fb ff89 	bl	8000ab4 <__aeabi_uldivmod>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba8:	e043      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004baa:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	f04f 0400 	mov.w	r4, #0
 8004bb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	ea01 0103 	and.w	r1, r1, r3
 8004bc0:	ea02 0204 	and.w	r2, r2, r4
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	0160      	lsls	r0, r4, #5
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	015b      	lsls	r3, r3, #5
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004bdc:	1a5b      	subs	r3, r3, r1
 8004bde:	eb64 0402 	sbc.w	r4, r4, r2
 8004be2:	01a6      	lsls	r6, r4, #6
 8004be4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8004be8:	019d      	lsls	r5, r3, #6
 8004bea:	1aed      	subs	r5, r5, r3
 8004bec:	eb66 0604 	sbc.w	r6, r6, r4
 8004bf0:	00f3      	lsls	r3, r6, #3
 8004bf2:	607b      	str	r3, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004bfa:	607b      	str	r3, [r7, #4]
 8004bfc:	00eb      	lsls	r3, r5, #3
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	e897 0060 	ldmia.w	r7, {r5, r6}
 8004c04:	186d      	adds	r5, r5, r1
 8004c06:	eb46 0602 	adc.w	r6, r6, r2
 8004c0a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8004c0e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8004c12:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8004c16:	4655      	mov	r5, sl
 8004c18:	465e      	mov	r6, fp
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	f04f 0400 	mov.w	r4, #0
 8004c24:	461a      	mov	r2, r3
 8004c26:	4623      	mov	r3, r4
 8004c28:	f7fb ff44 	bl	8000ab4 <__aeabi_uldivmod>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	460c      	mov	r4, r1
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8004c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c4c:	e002      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	373c      	adds	r7, #60	; 0x3c
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	00f42400 	.word	0x00f42400
 8004c68:	007a1200 	.word	0x007a1200

08004c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c72:	681b      	ldr	r3, [r3, #0]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000068 	.word	0x20000068

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c88:	f7ff fff0 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004c8c:	4601      	mov	r1, r0
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0a9b      	lsrs	r3, r3, #10
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4a03      	ldr	r2, [pc, #12]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9a:	5cd3      	ldrb	r3, [r2, r3]
 8004c9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	08018a90 	.word	0x08018a90

08004cac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d038      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cd4:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cda:	f7fc f8d9 	bl	8000e90 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ce2:	f7fc f8d5 	bl	8000e90 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0bd      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cf4:	4b61      	ldr	r3, [pc, #388]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d00:	495e      	ldr	r1, [pc, #376]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	019b      	lsls	r3, r3, #6
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	071b      	lsls	r3, r3, #28
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d1a:	4b57      	ldr	r3, [pc, #348]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d20:	f7fc f8b6 	bl	8000e90 <HAL_GetTick>
 8004d24:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d28:	f7fc f8b2 	bl	8000e90 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e09a      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d3a:	4b50      	ldr	r3, [pc, #320]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8083 	beq.w	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	4a48      	ldr	r2, [pc, #288]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5a:	4b48      	ldr	r3, [pc, #288]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d62:	6413      	str	r3, [r2, #64]	; 0x40
 8004d64:	4b45      	ldr	r3, [pc, #276]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d70:	4a43      	ldr	r2, [pc, #268]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d72:	4b43      	ldr	r3, [pc, #268]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d7c:	f7fc f888 	bl	8000e90 <HAL_GetTick>
 8004d80:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d84:	f7fc f884 	bl	8000e90 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e06c      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d96:	4b3a      	ldr	r3, [pc, #232]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004da2:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004daa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d02f      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d028      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc0:	4b2e      	ldr	r3, [pc, #184]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dca:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd0:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dd6:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d114      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004de8:	f7fc f852 	bl	8000e90 <HAL_GetTick>
 8004dec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dee:	e00a      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fc f84e 	bl	8000e90 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e034      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0ee      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1e:	d10d      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004e20:	4916      	ldr	r1, [pc, #88]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
 8004e3a:	e005      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004e3c:	4a0f      	ldr	r2, [pc, #60]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e46:	6093      	str	r3, [r2, #8]
 8004e48:	490c      	ldr	r1, [pc, #48]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4a:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e56:	4313      	orrs	r3, r2
 8004e58:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e66:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	7d1b      	ldrb	r3, [r3, #20]
 8004e6c:	6013      	str	r3, [r2, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	42470068 	.word	0x42470068
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40007000 	.word	0x40007000
 8004e84:	42470e40 	.word	0x42470e40
 8004e88:	424711e0 	.word	0x424711e0

08004e8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d13f      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004eaa:	4b23      	ldr	r3, [pc, #140]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eb2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d131      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ebe:	4b1f      	ldr	r3, [pc, #124]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ec0:	617b      	str	r3, [r7, #20]
          break;
 8004ec2:	e031      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ec4:	4b1c      	ldr	r3, [pc, #112]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed0:	d109      	bne.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ed2:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004edc:	4a18      	ldr	r2, [pc, #96]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ee6:	4b14      	ldr	r3, [pc, #80]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef0:	4a14      	ldr	r2, [pc, #80]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efe:	099b      	lsrs	r3, r3, #6
 8004f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f12:	0f1b      	lsrs	r3, r3, #28
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1e:	617b      	str	r3, [r7, #20]
          break;
 8004f20:	e002      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
          break;
 8004f26:	bf00      	nop
        }
      }
      break;
 8004f28:	bf00      	nop
    }
  }
  return frequency;
 8004f2a:	697b      	ldr	r3, [r7, #20]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	00bb8000 	.word	0x00bb8000
 8004f40:	007a1200 	.word	0x007a1200
 8004f44:	00f42400 	.word	0x00f42400

08004f48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e055      	b.n	8005006 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f006 f901 	bl	800b17c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f90:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6851      	ldr	r1, [r2, #4]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6892      	ldr	r2, [r2, #8]
 8004f9e:	4311      	orrs	r1, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68d2      	ldr	r2, [r2, #12]
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6912      	ldr	r2, [r2, #16]
 8004faa:	4311      	orrs	r1, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6952      	ldr	r2, [r2, #20]
 8004fb0:	4311      	orrs	r1, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6992      	ldr	r2, [r2, #24]
 8004fb6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004fba:	4311      	orrs	r1, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	69d2      	ldr	r2, [r2, #28]
 8004fc0:	4311      	orrs	r1, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6a12      	ldr	r2, [r2, #32]
 8004fc6:	4311      	orrs	r1, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6992      	ldr	r2, [r2, #24]
 8004fd8:	0c12      	lsrs	r2, r2, #16
 8004fda:	f002 0104 	and.w	r1, r2, #4
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	69d2      	ldr	r2, [r2, #28]
 8004ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b088      	sub	sp, #32
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	603b      	str	r3, [r7, #0]
 800501a:	4613      	mov	r3, r2
 800501c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_SPI_Transmit+0x22>
 800502c:	2302      	movs	r3, #2
 800502e:	e11c      	b.n	800526a <HAL_SPI_Transmit+0x25c>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005038:	f7fb ff2a 	bl	8000e90 <HAL_GetTick>
 800503c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d002      	beq.n	8005054 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800504e:	2302      	movs	r3, #2
 8005050:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005052:	e101      	b.n	8005258 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_Transmit+0x52>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005064:	e0f8      	b.n	8005258 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2203      	movs	r2, #3
 800506a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	88fa      	ldrh	r2, [r7, #6]
 800507e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ac:	d107      	bne.n	80050be <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d007      	beq.n	80050dc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e4:	d14b      	bne.n	800517e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_SPI_Transmit+0xe6>
 80050ee:	8afb      	ldrh	r3, [r7, #22]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d13e      	bne.n	8005172 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050fc:	8812      	ldrh	r2, [r2, #0]
 80050fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	1c9a      	adds	r2, r3, #2
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005118:	e02b      	b.n	8005172 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b02      	cmp	r3, #2
 8005126:	d112      	bne.n	800514e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005130:	8812      	ldrh	r2, [r2, #0]
 8005132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	1c9a      	adds	r2, r3, #2
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	86da      	strh	r2, [r3, #54]	; 0x36
 800514c:	e011      	b.n	8005172 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800514e:	f7fb fe9f 	bl	8000e90 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	1ad2      	subs	r2, r2, r3
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d303      	bcc.n	8005166 <HAL_SPI_Transmit+0x158>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005164:	d102      	bne.n	800516c <HAL_SPI_Transmit+0x15e>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005170:	e072      	b.n	8005258 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1ce      	bne.n	800511a <HAL_SPI_Transmit+0x10c>
 800517c:	e04c      	b.n	8005218 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_SPI_Transmit+0x17e>
 8005186:	8afb      	ldrh	r3, [r7, #22]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d140      	bne.n	800520e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005196:	7812      	ldrb	r2, [r2, #0]
 8005198:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051b2:	e02c      	b.n	800520e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d113      	bne.n	80051ea <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80051e8:	e011      	b.n	800520e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ea:	f7fb fe51 	bl	8000e90 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	1ad2      	subs	r2, r2, r3
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d303      	bcc.n	8005202 <HAL_SPI_Transmit+0x1f4>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d102      	bne.n	8005208 <HAL_SPI_Transmit+0x1fa>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800520c:	e024      	b.n	8005258 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1cd      	bne.n	80051b4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 faeb 	bl	80057f8 <SPI_EndRxTxTransaction>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005268:	7ffb      	ldrb	r3, [r7, #31]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_SPI_Transmit_DMA+0x20>
 8005290:	2302      	movs	r3, #2
 8005292:	e093      	b.n	80053bc <HAL_SPI_Transmit_DMA+0x148>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d002      	beq.n	80052ae <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
 80052aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052ac:	e081      	b.n	80053b2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <HAL_SPI_Transmit_DMA+0x46>
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d102      	bne.n	80052c0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052be:	e078      	b.n	80053b2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2203      	movs	r2, #3
 80052c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	88fa      	ldrh	r2, [r7, #6]
 80052d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	88fa      	ldrh	r2, [r7, #6]
 80052de:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005306:	d107      	bne.n	8005318 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005316:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531c:	4a29      	ldr	r2, [pc, #164]	; (80053c4 <HAL_SPI_Transmit_DMA+0x150>)
 800531e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005324:	4a28      	ldr	r2, [pc, #160]	; (80053c8 <HAL_SPI_Transmit_DMA+0x154>)
 8005326:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532c:	4a27      	ldr	r2, [pc, #156]	; (80053cc <HAL_SPI_Transmit_DMA+0x158>)
 800532e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005334:	2200      	movs	r2, #0
 8005336:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	4619      	mov	r1, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	461a      	mov	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534e:	b29b      	uxth	r3, r3
 8005350:	f7fb ff8a 	bl	8001268 <HAL_DMA_Start_IT>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00c      	beq.n	8005374 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	f043 0210 	orr.w	r2, r3, #16
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005372:	e01e      	b.n	80053b2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d007      	beq.n	8005392 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005390:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	6852      	ldr	r2, [r2, #4]
 800539c:	f042 0220 	orr.w	r2, r2, #32
 80053a0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	6852      	ldr	r2, [r2, #4]
 80053ac:	f042 0202 	orr.w	r2, r2, #2
 80053b0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	080056a1 	.word	0x080056a1
 80053c8:	080055f9 	.word	0x080055f9
 80053cc:	080056bd 	.word	0x080056bd

080053d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10e      	bne.n	8005410 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d009      	beq.n	8005410 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
    return;
 800540e:	e0cf      	b.n	80055b0 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_SPI_IRQHandler+0x5e>
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
    return;
 800542c:	e0c0      	b.n	80055b0 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <HAL_SPI_IRQHandler+0x7e>
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d105      	bne.n	800544e <HAL_SPI_IRQHandler+0x7e>
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80b1 	beq.w	80055b0 <HAL_SPI_IRQHandler+0x1e0>
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80ab 	beq.w	80055b0 <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d023      	beq.n	80054ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b03      	cmp	r3, #3
 800546e:	d011      	beq.n	8005494 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005474:	f043 0204 	orr.w	r2, r3, #4
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	e00b      	b.n	80054ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]
        return;
 80054aa:	e081      	b.n	80055b0 <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d014      	beq.n	80054e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	f043 0201 	orr.w	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00c      	beq.n	8005504 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	f043 0208 	orr.w	r2, r3, #8
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005508:	2b00      	cmp	r3, #0
 800550a:	d050      	beq.n	80055ae <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	6852      	ldr	r2, [r2, #4]
 8005516:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800551a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <HAL_SPI_IRQHandler+0x168>
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d034      	beq.n	80055a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	6852      	ldr	r2, [r2, #4]
 8005542:	f022 0203 	bic.w	r2, r2, #3
 8005546:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d011      	beq.n	8005574 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_SPI_IRQHandler+0x1e8>)
 8005556:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555c:	4618      	mov	r0, r3
 800555e:	f7fb fee3 	bl	8001328 <HAL_DMA_Abort_IT>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005578:	2b00      	cmp	r3, #0
 800557a:	d016      	beq.n	80055aa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005580:	4a0d      	ldr	r2, [pc, #52]	; (80055b8 <HAL_SPI_IRQHandler+0x1e8>)
 8005582:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005588:	4618      	mov	r0, r3
 800558a:	f7fb fecd 	bl	8001328 <HAL_DMA_Abort_IT>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80055a0:	e003      	b.n	80055aa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f81e 	bl	80055e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80055a8:	e000      	b.n	80055ac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80055aa:	bf00      	nop
    return;
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
  }
}
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	080056fd 	.word	0x080056fd

080055bc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005606:	f7fb fc43 	bl	8000e90 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561a:	d03b      	beq.n	8005694 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	6852      	ldr	r2, [r2, #4]
 8005626:	f022 0220 	bic.w	r2, r2, #32
 800562a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	6852      	ldr	r2, [r2, #4]
 8005636:	f022 0202 	bic.w	r2, r2, #2
 800563a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	2164      	movs	r1, #100	; 0x64
 8005640:	6978      	ldr	r0, [r7, #20]
 8005642:	f000 f8d9 	bl	80057f8 <SPI_EndRxTxTransaction>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f043 0220 	orr.w	r2, r3, #32
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2200      	movs	r2, #0
 800567a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800568c:	6978      	ldr	r0, [r7, #20]
 800568e:	f7ff ffa9 	bl	80055e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005692:	e002      	b.n	800569a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005694:	6978      	ldr	r0, [r7, #20]
 8005696:	f7ff ff91 	bl	80055bc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff ff8e 	bl	80055d0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056b4:	bf00      	nop
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	6852      	ldr	r2, [r2, #4]
 80056d4:	f022 0203 	bic.w	r2, r2, #3
 80056d8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	f043 0210 	orr.w	r2, r3, #16
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f7ff ff78 	bl	80055e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff ff64 	bl	80055e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	4613      	mov	r3, r2
 8005732:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005734:	e04c      	b.n	80057d0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573c:	d048      	beq.n	80057d0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800573e:	f7fb fba7 	bl	8000e90 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	1ad2      	subs	r2, r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d202      	bcs.n	8005754 <SPI_WaitFlagStateUntilTimeout+0x30>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d13d      	bne.n	80057d0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	6852      	ldr	r2, [r2, #4]
 800575e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005762:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576c:	d111      	bne.n	8005792 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005776:	d004      	beq.n	8005782 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005780:	d107      	bne.n	8005792 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005790:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579a:	d10f      	bne.n	80057bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e00f      	b.n	80057f0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	401a      	ands	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	429a      	cmp	r2, r3
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d1a3      	bne.n	8005736 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005804:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <SPI_EndRxTxTransaction+0x7c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <SPI_EndRxTxTransaction+0x80>)
 800580a:	fba2 2303 	umull	r2, r3, r2, r3
 800580e:	0d5b      	lsrs	r3, r3, #21
 8005810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005822:	d112      	bne.n	800584a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2200      	movs	r2, #0
 800582c:	2180      	movs	r1, #128	; 0x80
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7ff ff78 	bl	8005724 <SPI_WaitFlagStateUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e00f      	b.n	800586a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	3b01      	subs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	2b80      	cmp	r3, #128	; 0x80
 8005862:	d0f2      	beq.n	800584a <SPI_EndRxTxTransaction+0x52>
 8005864:	e000      	b.n	8005868 <SPI_EndRxTxTransaction+0x70>
        break;
 8005866:	bf00      	nop
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000068 	.word	0x20000068
 8005878:	165e9f81 	.word	0x165e9f81

0800587c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e01d      	b.n	80058ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f005 fda8 	bl	800b3f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f000 faa6 	bl	8005e0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	6812      	ldr	r2, [r2, #0]
 80058e2:	68d2      	ldr	r2, [r2, #12]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b06      	cmp	r3, #6
 80058fa:	d007      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b086      	sub	sp, #24
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e083      	b.n	8005a36 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f005 fcd2 	bl	800b2ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800595e:	f023 0307 	bic.w	r3, r3, #7
 8005962:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3304      	adds	r3, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f000 fa4c 	bl	8005e0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599c:	f023 0303 	bic.w	r3, r3, #3
 80059a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	4313      	orrs	r3, r2
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059ba:	f023 030c 	bic.w	r3, r3, #12
 80059be:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	4313      	orrs	r3, r2
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	011a      	lsls	r2, r3, #4
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	031b      	lsls	r3, r3, #12
 80059ea:	4313      	orrs	r3, r2
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80059f8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005a00:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d122      	bne.n	8005a9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d11b      	bne.n	8005a9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f06f 0202 	mvn.w	r2, #2
 8005a6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f9a5 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
 8005a86:	e005      	b.n	8005a94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f997 	bl	8005dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9a8 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d122      	bne.n	8005aee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d11b      	bne.n	8005aee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f06f 0204 	mvn.w	r2, #4
 8005abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f97b 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
 8005ada:	e005      	b.n	8005ae8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f96d 	bl	8005dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f97e 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d122      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d11b      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f06f 0208 	mvn.w	r2, #8
 8005b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2204      	movs	r2, #4
 8005b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f951 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
 8005b2e:	e005      	b.n	8005b3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f943 	bl	8005dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f954 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d122      	bne.n	8005b96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d11b      	bne.n	8005b96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f06f 0210 	mvn.w	r2, #16
 8005b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2208      	movs	r2, #8
 8005b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f927 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
 8005b82:	e005      	b.n	8005b90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f919 	bl	8005dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f92a 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d10e      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d107      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f06f 0201 	mvn.w	r2, #1
 8005bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f005 f893 	bl	800ace8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bcc:	2b80      	cmp	r3, #128	; 0x80
 8005bce:	d10e      	bne.n	8005bee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	d107      	bne.n	8005bee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa78 	bl	80060de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf8:	2b40      	cmp	r3, #64	; 0x40
 8005bfa:	d10e      	bne.n	8005c1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c06:	2b40      	cmp	r3, #64	; 0x40
 8005c08:	d107      	bne.n	8005c1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f8ef 	bl	8005df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d10e      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d107      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f06f 0220 	mvn.w	r2, #32
 8005c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fa42 	bl	80060ca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_ConfigClockSource+0x18>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e0a6      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x166>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d067      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x120>
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d80b      	bhi.n	8005cba <HAL_TIM_ConfigClockSource+0x6c>
 8005ca2:	2b10      	cmp	r3, #16
 8005ca4:	d073      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x140>
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d802      	bhi.n	8005cb0 <HAL_TIM_ConfigClockSource+0x62>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d06f      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005cae:	e078      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d06c      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x140>
 8005cb4:	2b30      	cmp	r3, #48	; 0x30
 8005cb6:	d06a      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005cb8:	e073      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005cba:	2b70      	cmp	r3, #112	; 0x70
 8005cbc:	d00d      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x8c>
 8005cbe:	2b70      	cmp	r3, #112	; 0x70
 8005cc0:	d804      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x7e>
 8005cc2:	2b50      	cmp	r3, #80	; 0x50
 8005cc4:	d033      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0xe0>
 8005cc6:	2b60      	cmp	r3, #96	; 0x60
 8005cc8:	d041      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005cca:	e06a      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd0:	d066      	beq.n	8005da0 <HAL_TIM_ConfigClockSource+0x152>
 8005cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd6:	d017      	beq.n	8005d08 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005cd8:	e063      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6899      	ldr	r1, [r3, #8]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f000 f989 	bl	8006000 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	609a      	str	r2, [r3, #8]
      break;
 8005d06:	e04c      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	6899      	ldr	r1, [r3, #8]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f000 f972 	bl	8006000 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	6892      	ldr	r2, [r2, #8]
 8005d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d2a:	609a      	str	r2, [r3, #8]
      break;
 8005d2c:	e039      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6859      	ldr	r1, [r3, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f000 f8e6 	bl	8005f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2150      	movs	r1, #80	; 0x50
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f93f 	bl	8005fca <TIM_ITRx_SetConfig>
      break;
 8005d4c:	e029      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6859      	ldr	r1, [r3, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f000 f905 	bl	8005f6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2160      	movs	r1, #96	; 0x60
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f92f 	bl	8005fca <TIM_ITRx_SetConfig>
      break;
 8005d6c:	e019      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6859      	ldr	r1, [r3, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f000 f8c6 	bl	8005f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2140      	movs	r1, #64	; 0x40
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f91f 	bl	8005fca <TIM_ITRx_SetConfig>
      break;
 8005d8c:	e009      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f000 f916 	bl	8005fca <TIM_ITRx_SetConfig>
      break;
 8005d9e:	e000      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005da0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a34      	ldr	r2, [pc, #208]	; (8005ef0 <TIM_Base_SetConfig+0xe4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00f      	beq.n	8005e44 <TIM_Base_SetConfig+0x38>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2a:	d00b      	beq.n	8005e44 <TIM_Base_SetConfig+0x38>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a31      	ldr	r2, [pc, #196]	; (8005ef4 <TIM_Base_SetConfig+0xe8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d007      	beq.n	8005e44 <TIM_Base_SetConfig+0x38>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a30      	ldr	r2, [pc, #192]	; (8005ef8 <TIM_Base_SetConfig+0xec>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_Base_SetConfig+0x38>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a2f      	ldr	r2, [pc, #188]	; (8005efc <TIM_Base_SetConfig+0xf0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d108      	bne.n	8005e56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a25      	ldr	r2, [pc, #148]	; (8005ef0 <TIM_Base_SetConfig+0xe4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01b      	beq.n	8005e96 <TIM_Base_SetConfig+0x8a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e64:	d017      	beq.n	8005e96 <TIM_Base_SetConfig+0x8a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a22      	ldr	r2, [pc, #136]	; (8005ef4 <TIM_Base_SetConfig+0xe8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <TIM_Base_SetConfig+0x8a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a21      	ldr	r2, [pc, #132]	; (8005ef8 <TIM_Base_SetConfig+0xec>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00f      	beq.n	8005e96 <TIM_Base_SetConfig+0x8a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a20      	ldr	r2, [pc, #128]	; (8005efc <TIM_Base_SetConfig+0xf0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00b      	beq.n	8005e96 <TIM_Base_SetConfig+0x8a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1f      	ldr	r2, [pc, #124]	; (8005f00 <TIM_Base_SetConfig+0xf4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d007      	beq.n	8005e96 <TIM_Base_SetConfig+0x8a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1e      	ldr	r2, [pc, #120]	; (8005f04 <TIM_Base_SetConfig+0xf8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d003      	beq.n	8005e96 <TIM_Base_SetConfig+0x8a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1d      	ldr	r2, [pc, #116]	; (8005f08 <TIM_Base_SetConfig+0xfc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d108      	bne.n	8005ea8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a08      	ldr	r2, [pc, #32]	; (8005ef0 <TIM_Base_SetConfig+0xe4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d103      	bne.n	8005edc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	615a      	str	r2, [r3, #20]
}
 8005ee2:	bf00      	nop
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40014000 	.word	0x40014000
 8005f04:	40014400 	.word	0x40014400
 8005f08:	40014800 	.word	0x40014800

08005f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f023 0201 	bic.w	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 030a 	bic.w	r3, r3, #10
 8005f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	621a      	str	r2, [r3, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b087      	sub	sp, #28
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f023 0210 	bic.w	r2, r3, #16
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	031b      	lsls	r3, r3, #12
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	621a      	str	r2, [r3, #32]
}
 8005fbe:	bf00      	nop
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f043 0307 	orr.w	r3, r3, #7
 8005fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800601a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	021a      	lsls	r2, r3, #8
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	431a      	orrs	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4313      	orrs	r3, r2
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006054:	2302      	movs	r3, #2
 8006056:	e032      	b.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006090:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4313      	orrs	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060f2:	b084      	sub	sp, #16
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	f107 001c 	add.w	r0, r7, #28
 8006100:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	2b01      	cmp	r3, #1
 8006108:	d122      	bne.n	8006150 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800611e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006134:	2b01      	cmp	r3, #1
 8006136:	d105      	bne.n	8006144 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f949 	bl	80063dc <USB_CoreReset>
 800614a:	4603      	mov	r3, r0
 800614c:	73fb      	strb	r3, [r7, #15]
 800614e:	e01a      	b.n	8006186 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f93d 	bl	80063dc <USB_CoreReset>
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
 8006178:	e005      	b.n	8006186 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	2b01      	cmp	r3, #1
 800618a:	d10b      	bne.n	80061a4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f043 0206 	orr.w	r2, r3, #6
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f043 0220 	orr.w	r2, r3, #32
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061b0:	b004      	add	sp, #16
 80061b2:	4770      	bx	lr

080061b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f043 0201 	orr.w	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f023 0201 	bic.w	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d106      	bne.n	8006224 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	e00b      	b.n	800623c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60da      	str	r2, [r3, #12]
 8006236:	e001      	b.n	800623c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e003      	b.n	8006244 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800623c:	2032      	movs	r0, #50	; 0x32
 800623e:	f7fa fe33 	bl	8000ea8 <HAL_Delay>

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	019b      	lsls	r3, r3, #6
 800625e:	f043 0220 	orr.w	r2, r3, #32
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a09      	ldr	r2, [pc, #36]	; (8006294 <USB_FlushTxFifo+0x48>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d901      	bls.n	8006278 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e006      	b.n	8006286 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b20      	cmp	r3, #32
 8006282:	d0f0      	beq.n	8006266 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	00030d40 	.word	0x00030d40

08006298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2210      	movs	r2, #16
 80062a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a09      	ldr	r2, [pc, #36]	; (80062d8 <USB_FlushRxFifo+0x40>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d901      	bls.n	80062bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e006      	b.n	80062ca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d0f0      	beq.n	80062aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	00030d40 	.word	0x00030d40

080062dc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062dc:	b480      	push	{r7}
 80062de:	b089      	sub	sp, #36	; 0x24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4611      	mov	r1, r2
 80062e8:	461a      	mov	r2, r3
 80062ea:	460b      	mov	r3, r1
 80062ec:	71fb      	strb	r3, [r7, #7]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80062fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d11a      	bne.n	8006338 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006302:	88bb      	ldrh	r3, [r7, #4]
 8006304:	3303      	adds	r3, #3
 8006306:	089b      	lsrs	r3, r3, #2
 8006308:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800630a:	2300      	movs	r3, #0
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	e00f      	b.n	8006330 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	031a      	lsls	r2, r3, #12
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	4413      	add	r3, r2
 8006318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800631c:	461a      	mov	r2, r3
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	3304      	adds	r3, #4
 8006328:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	3301      	adds	r3, #1
 800632e:	61bb      	str	r3, [r7, #24]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	429a      	cmp	r2, r3
 8006336:	d3eb      	bcc.n	8006310 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3724      	adds	r7, #36	; 0x24
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006346:	b480      	push	{r7}
 8006348:	b089      	sub	sp, #36	; 0x24
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	4613      	mov	r3, r2
 8006352:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	3303      	adds	r3, #3
 8006360:	089b      	lsrs	r3, r3, #2
 8006362:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006364:	2300      	movs	r3, #0
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	e00b      	b.n	8006382 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	601a      	str	r2, [r3, #0]
    pDest++;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3304      	adds	r3, #4
 800637a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	3301      	adds	r3, #1
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	429a      	cmp	r2, r3
 8006388:	d3ef      	bcc.n	800636a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800638a:	69fb      	ldr	r3, [r7, #28]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3724      	adds	r7, #36	; 0x24
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4013      	ands	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063b0:	68fb      	ldr	r3, [r7, #12]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f003 0301 	and.w	r3, r3, #1
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
	...

080063dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a13      	ldr	r2, [pc, #76]	; (8006440 <USB_CoreReset+0x64>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e01b      	b.n	8006432 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	daf2      	bge.n	80063e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f043 0201 	orr.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4a09      	ldr	r2, [pc, #36]	; (8006440 <USB_CoreReset+0x64>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d901      	bls.n	8006424 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e006      	b.n	8006432 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b01      	cmp	r3, #1
 800642e:	d0f0      	beq.n	8006412 <USB_CoreReset+0x36>

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	00030d40 	.word	0x00030d40

08006444 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006444:	b084      	sub	sp, #16
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	f107 001c 	add.w	r0, r7, #28
 8006452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006460:	461a      	mov	r2, r3
 8006462:	2300      	movs	r3, #0
 8006464:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01a      	beq.n	80064cc <USB_HostInit+0x88>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	2b03      	cmp	r3, #3
 800649a:	d10b      	bne.n	80064b4 <USB_HostInit+0x70>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064a2:	461a      	mov	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f043 0304 	orr.w	r3, r3, #4
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e016      	b.n	80064e2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ba:	461a      	mov	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f023 0304 	bic.w	r3, r3, #4
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	e00a      	b.n	80064e2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d2:	461a      	mov	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f023 0304 	bic.w	r3, r3, #4
 80064e0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80064e2:	2110      	movs	r1, #16
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff feb1 	bl	800624c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff fed4 	bl	8006298 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e015      	b.n	8006522 <USB_HostInit+0xde>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	461a      	mov	r2, r3
 8006504:	f04f 33ff 	mov.w	r3, #4294967295
 8006508:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006516:	461a      	mov	r2, r3
 8006518:	2300      	movs	r3, #0
 800651a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3301      	adds	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	6a3a      	ldr	r2, [r7, #32]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	429a      	cmp	r2, r3
 8006528:	d8e5      	bhi.n	80064f6 <USB_HostInit+0xb2>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800652a:	2101      	movs	r1, #1
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f8af 	bl	8006690 <USB_DriveVbus>

  HAL_Delay(200U);
 8006532:	20c8      	movs	r0, #200	; 0xc8
 8006534:	f7fa fcb8 	bl	8000ea8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f04f 32ff 	mov.w	r2, #4294967295
 8006544:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <USB_HostInit+0x126>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006558:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a13      	ldr	r2, [pc, #76]	; (80065ac <USB_HostInit+0x168>)
 800655e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <USB_HostInit+0x16c>)
 8006564:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006568:	e009      	b.n	800657e <USB_HostInit+0x13a>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2280      	movs	r2, #128	; 0x80
 800656e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a10      	ldr	r2, [pc, #64]	; (80065b4 <USB_HostInit+0x170>)
 8006574:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <USB_HostInit+0x174>)
 800657a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	2b00      	cmp	r3, #0
 8006582:	d105      	bne.n	8006590 <USB_HostInit+0x14c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	f043 0210 	orr.w	r2, r3, #16
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	4b09      	ldr	r3, [pc, #36]	; (80065bc <USB_HostInit+0x178>)
 8006596:	4313      	orrs	r3, r2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065a8:	b004      	add	sp, #16
 80065aa:	4770      	bx	lr
 80065ac:	01000200 	.word	0x01000200
 80065b0:	00e00300 	.word	0x00e00300
 80065b4:	00600080 	.word	0x00600080
 80065b8:	004000e0 	.word	0x004000e0
 80065bc:	a3200008 	.word	0xa3200008

080065c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d6:	461a      	mov	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f023 0303 	bic.w	r3, r3, #3
 80065e4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ec:	4619      	mov	r1, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	f003 0303 	and.w	r3, r3, #3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d107      	bne.n	8006616 <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660c:	461a      	mov	r2, r3
 800660e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006612:	6053      	str	r3, [r2, #4]
 8006614:	e009      	b.n	800662a <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d106      	bne.n	800662a <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006622:	461a      	mov	r2, r3
 8006624:	f241 7370 	movw	r3, #6000	; 0x1770
 8006628:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006658:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006660:	461a      	mov	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006668:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800666a:	2064      	movs	r0, #100	; 0x64
 800666c:	f7fa fc1c 	bl	8000ea8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006676:	461a      	mov	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800667e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006680:	200a      	movs	r0, #10
 8006682:	f7fa fc11 	bl	8000ea8 <HAL_Delay>

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80066b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <USB_DriveVbus+0x46>
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d107      	bne.n	80066d6 <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066cc:	461a      	mov	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066d4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e0:	d10a      	bne.n	80066f8 <USB_DriveVbus+0x68>
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d107      	bne.n	80066f8 <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066ee:	461a      	mov	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	0c5b      	lsrs	r3, r3, #17
 8006724:	f003 0303 	and.w	r3, r3, #3
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	b29b      	uxth	r3, r3
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
	...

08006758 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	4603      	mov	r3, r0
 8006768:	70fb      	strb	r3, [r7, #3]
 800676a:	460b      	mov	r3, r1
 800676c:	70bb      	strb	r3, [r7, #2]
 800676e:	4613      	mov	r3, r2
 8006770:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006786:	461a      	mov	r2, r3
 8006788:	f04f 33ff 	mov.w	r3, #4294967295
 800678c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800678e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006792:	2b03      	cmp	r3, #3
 8006794:	f200 8084 	bhi.w	80068a0 <USB_HC_Init+0x148>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <USB_HC_Init+0x48>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	08006861 	.word	0x08006861
 80067a8:	080067b1 	.word	0x080067b1
 80067ac:	08006821 	.word	0x08006821
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067bc:	461a      	mov	r2, r3
 80067be:	f240 439d 	movw	r3, #1181	; 0x49d
 80067c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80067c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	da11      	bge.n	80067f0 <USB_HC_Init+0x98>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d8:	4619      	mov	r1, r3
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ec:	60cb      	str	r3, [r1, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80067ee:	e05a      	b.n	80068a6 <USB_HC_Init+0x14e>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d054      	beq.n	80068a6 <USB_HC_Init+0x14e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4413      	add	r3, r2
 8006804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006808:	4619      	mov	r1, r3
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4413      	add	r3, r2
 8006812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800681c:	60cb      	str	r3, [r1, #12]
      break;
 800681e:	e042      	b.n	80068a6 <USB_HC_Init+0x14e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4413      	add	r3, r2
 8006828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682c:	461a      	mov	r2, r3
 800682e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006832:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006834:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006838:	2b00      	cmp	r3, #0
 800683a:	da36      	bge.n	80068aa <USB_HC_Init+0x152>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4413      	add	r3, r2
 8006844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006848:	4619      	mov	r1, r3
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685c:	60cb      	str	r3, [r1, #12]
      }

      break;
 800685e:	e024      	b.n	80068aa <USB_HC_Init+0x152>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4413      	add	r3, r2
 8006868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686c:	461a      	mov	r2, r3
 800686e:	f240 2325 	movw	r3, #549	; 0x225
 8006872:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006874:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006878:	2b00      	cmp	r3, #0
 800687a:	da18      	bge.n	80068ae <USB_HC_Init+0x156>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006888:	4619      	mov	r1, r3
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4413      	add	r3, r2
 8006892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800689c:	60cb      	str	r3, [r1, #12]
      }
      break;
 800689e:	e006      	b.n	80068ae <USB_HC_Init+0x156>

    default:
      ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	75fb      	strb	r3, [r7, #23]
      break;
 80068a4:	e004      	b.n	80068b0 <USB_HC_Init+0x158>
      break;
 80068a6:	bf00      	nop
 80068a8:	e002      	b.n	80068b0 <USB_HC_Init+0x158>
      break;
 80068aa:	bf00      	nop
 80068ac:	e000      	b.n	80068b0 <USB_HC_Init+0x158>
      break;
 80068ae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b6:	4618      	mov	r0, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	2101      	movs	r1, #1
 80068c8:	fa01 f303 	lsl.w	r3, r1, r3
 80068cc:	4313      	orrs	r3, r2
 80068ce:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	da03      	bge.n	80068ec <USB_HC_Init+0x194>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	e001      	b.n	80068f0 <USB_HC_Init+0x198>
  }
  else
  {
    HCcharEpDir = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80068f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d103      	bne.n	8006900 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e001      	b.n	8006904 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4413      	add	r3, r2
 800690c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006910:	4619      	mov	r1, r3
 8006912:	787b      	ldrb	r3, [r7, #1]
 8006914:	059b      	lsls	r3, r3, #22
 8006916:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800691a:	78bb      	ldrb	r3, [r7, #2]
 800691c:	02db      	lsls	r3, r3, #11
 800691e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006922:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006924:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006928:	049b      	lsls	r3, r3, #18
 800692a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800692e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006930:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006932:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006936:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	431a      	orrs	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006940:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006946:	2b03      	cmp	r3, #3
 8006948:	d110      	bne.n	800696c <USB_HC_Init+0x214>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4413      	add	r3, r2
 8006952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006956:	4619      	mov	r1, r3
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800696a:	600b      	str	r3, [r1, #0]
  }

  return ret;
 800696c:	7dfb      	ldrb	r3, [r7, #23]
}
 800696e:	4618      	mov	r0, r3
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop

0800697c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08c      	sub	sp, #48	; 0x30
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	4613      	mov	r3, r2
 8006988:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006998:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d029      	beq.n	80069fa <USB_HC_StartXfer+0x7e>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	791b      	ldrb	r3, [r3, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d125      	bne.n	80069fa <USB_HC_StartXfer+0x7e>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10b      	bne.n	80069cc <USB_HC_StartXfer+0x50>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	795b      	ldrb	r3, [r3, #5]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d107      	bne.n	80069cc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	785b      	ldrb	r3, [r3, #1]
 80069c0:	4619      	mov	r1, r3
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 fa3c 	bl	8006e40 <USB_DoPing>
      return HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e116      	b.n	8006bfa <USB_HC_StartXfer+0x27e>
    }
    else if (dma == 1U)
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d113      	bne.n	80069fa <USB_HC_StartXfer+0x7e>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	4619      	mov	r1, r3
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80069f2:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2200      	movs	r2, #0
 80069f8:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d018      	beq.n	8006a34 <USB_HC_StartXfer+0xb8>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	8912      	ldrh	r2, [r2, #8]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	8912      	ldrh	r2, [r2, #8]
 8006a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a16:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006a18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a1a:	8b7b      	ldrh	r3, [r7, #26]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d90b      	bls.n	8006a38 <USB_HC_StartXfer+0xbc>
    {
      num_packets = max_hc_pkt_count;
 8006a20:	8b7b      	ldrh	r3, [r7, #26]
 8006a22:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	8912      	ldrh	r2, [r2, #8]
 8006a2a:	fb02 f203 	mul.w	r2, r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	611a      	str	r2, [r3, #16]
 8006a32:	e001      	b.n	8006a38 <USB_HC_StartXfer+0xbc>
    }
  }
  else
  {
    num_packets = 1U;
 8006a34:	2301      	movs	r3, #1
 8006a36:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	78db      	ldrb	r3, [r3, #3]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <USB_HC_StartXfer+0xd2>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006a40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	8912      	ldrh	r2, [r2, #8]
 8006a46:	fb02 f203 	mul.w	r2, r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a66:	04d9      	lsls	r1, r3, #19
 8006a68:	4b66      	ldr	r3, [pc, #408]	; (8006c04 <USB_HC_StartXfer+0x288>)
 8006a6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	7a9b      	ldrb	r3, [r3, #10]
 8006a72:	075b      	lsls	r3, r3, #29
 8006a74:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a7a:	6103      	str	r3, [r0, #16]

  if (dma != 0U)
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <USB_HC_StartXfer+0x11a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	6153      	str	r3, [r2, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bf0c      	ite	eq
 8006aa6:	2301      	moveq	r3, #1
 8006aa8:	2300      	movne	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aba:	4619      	mov	r1, r3
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ace:	600b      	str	r3, [r1, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006adc:	4619      	mov	r1, r3
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	7e7b      	ldrb	r3, [r7, #25]
 8006aee:	075b      	lsls	r3, r3, #29
 8006af0:	4313      	orrs	r3, r2
 8006af2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a41      	ldr	r2, [pc, #260]	; (8006c08 <USB_HC_StartXfer+0x28c>)
 8006b04:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b06:	4b40      	ldr	r3, [pc, #256]	; (8006c08 <USB_HC_StartXfer+0x28c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b0e:	4a3e      	ldr	r2, [pc, #248]	; (8006c08 <USB_HC_StartXfer+0x28c>)
 8006b10:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	78db      	ldrb	r3, [r3, #3]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d006      	beq.n	8006b28 <USB_HC_StartXfer+0x1ac>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b1a:	4b3b      	ldr	r3, [pc, #236]	; (8006c08 <USB_HC_StartXfer+0x28c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b22:	4a39      	ldr	r2, [pc, #228]	; (8006c08 <USB_HC_StartXfer+0x28c>)
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	e005      	b.n	8006b34 <USB_HC_StartXfer+0x1b8>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b28:	4b37      	ldr	r3, [pc, #220]	; (8006c08 <USB_HC_StartXfer+0x28c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b30:	4a35      	ldr	r2, [pc, #212]	; (8006c08 <USB_HC_StartXfer+0x28c>)
 8006b32:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b34:	4b34      	ldr	r3, [pc, #208]	; (8006c08 <USB_HC_StartXfer+0x28c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b3c:	4a32      	ldr	r2, [pc, #200]	; (8006c08 <USB_HC_StartXfer+0x28c>)
 8006b3e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4b2e      	ldr	r3, [pc, #184]	; (8006c08 <USB_HC_StartXfer+0x28c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d14e      	bne.n	8006bf8 <USB_HC_StartXfer+0x27c>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	78db      	ldrb	r3, [r3, #3]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d14a      	bne.n	8006bf8 <USB_HC_StartXfer+0x27c>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d046      	beq.n	8006bf8 <USB_HC_StartXfer+0x27c>
    {
      switch (hc->ep_type)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	79db      	ldrb	r3, [r3, #7]
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d830      	bhi.n	8006bd4 <USB_HC_StartXfer+0x258>
 8006b72:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <USB_HC_StartXfer+0x1fc>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b89 	.word	0x08006b89
 8006b7c:	08006bad 	.word	0x08006bad
 8006b80:	08006b89 	.word	0x08006b89
 8006b84:	08006bad 	.word	0x08006bad
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	3303      	adds	r3, #3
 8006b8e:	089b      	lsrs	r3, r3, #2
 8006b90:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b92:	8afa      	ldrh	r2, [r7, #22]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d91c      	bls.n	8006bd8 <USB_HC_StartXfer+0x25c>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f043 0220 	orr.w	r2, r3, #32
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	619a      	str	r2, [r3, #24]
          }
          break;
 8006baa:	e015      	b.n	8006bd8 <USB_HC_StartXfer+0x25c>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	3303      	adds	r3, #3
 8006bb2:	089b      	lsrs	r3, r3, #2
 8006bb4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006bb6:	8afa      	ldrh	r2, [r7, #22]
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d90a      	bls.n	8006bdc <USB_HC_StartXfer+0x260>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	619a      	str	r2, [r3, #24]
          }
          break;
 8006bd2:	e003      	b.n	8006bdc <USB_HC_StartXfer+0x260>

        default:
          break;
 8006bd4:	bf00      	nop
 8006bd6:	e002      	b.n	8006bde <USB_HC_StartXfer+0x262>
          break;
 8006bd8:	bf00      	nop
 8006bda:	e000      	b.n	8006bde <USB_HC_StartXfer+0x262>
          break;
 8006bdc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	68d9      	ldr	r1, [r3, #12]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	785a      	ldrb	r2, [r3, #1]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	b298      	uxth	r0, r3
 8006bec:	2300      	movs	r3, #0
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff fb72 	bl	80062dc <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3728      	adds	r7, #40	; 0x28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	1ff80000 	.word	0x1ff80000
 8006c08:	200000ec 	.word	0x200000ec

08006c0c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	b29b      	uxth	r3, r3
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c3e:	78fb      	ldrb	r3, [r7, #3]
 8006c40:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	0c9b      	lsrs	r3, r3, #18
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <USB_HC_Halt+0x3a>
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d171      	bne.n	8006d4c <USB_HC_Halt+0x11e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c74:	4619      	mov	r1, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c88:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d146      	bne.n	8006d24 <USB_HC_Halt+0xf6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cb6:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cd8:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cfa:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d08:	d81e      	bhi.n	8006d48 <USB_HC_Halt+0x11a>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d20:	d0ec      	beq.n	8006cfc <USB_HC_Halt+0xce>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d22:	e086      	b.n	8006e32 <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d30:	4619      	mov	r1, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d44:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d46:	e074      	b.n	8006e32 <USB_HC_Halt+0x204>
          break;
 8006d48:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d4a:	e072      	b.n	8006e32 <USB_HC_Halt+0x204>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d58:	4619      	mov	r1, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d6c:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d146      	bne.n	8006e0c <USB_HC_Halt+0x1de>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d9e:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dac:	4619      	mov	r1, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dc0:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dce:	4619      	mov	r1, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006de2:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	3301      	adds	r3, #1
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006df0:	d81e      	bhi.n	8006e30 <USB_HC_Halt+0x202>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e08:	d0ec      	beq.n	8006de4 <USB_HC_Halt+0x1b6>
 8006e0a:	e012      	b.n	8006e32 <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e18:	4619      	mov	r1, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e2c:	600b      	str	r3, [r1, #0]
 8006e2e:	e000      	b.n	8006e32 <USB_HC_Halt+0x204>
          break;
 8006e30:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	371c      	adds	r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006e54:	2301      	movs	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e64:	4619      	mov	r1, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	04da      	lsls	r2, r3, #19
 8006e6a:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <USB_DoPing+0x74>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e72:	610b      	str	r3, [r1, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e8a:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e92:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	1ff80000 	.word	0x1ff80000

08006eb8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff f984 	bl	80061d6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ece:	2110      	movs	r1, #16
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff f9bb 	bl	800624c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff f9de 	bl	8006298 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006edc:	2300      	movs	r3, #0
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	e01f      	b.n	8006f22 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ef8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f00:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f08:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f16:	461a      	mov	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b0f      	cmp	r3, #15
 8006f26:	d9dc      	bls.n	8006ee2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	e034      	b.n	8006f98 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f44:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f4c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f54:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f62:	461a      	mov	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f74:	d80c      	bhi.n	8006f90 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f8c:	d0ec      	beq.n	8006f68 <USB_StopHost+0xb0>
 8006f8e:	e000      	b.n	8006f92 <USB_StopHost+0xda>
        break;
 8006f90:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	3301      	adds	r3, #1
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	2b0f      	cmp	r3, #15
 8006f9c:	d9c7      	bls.n	8006f2e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006faa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb2:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff f8fd 	bl	80061b4 <USB_EnableGlobalInt>

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006fc4:	b590      	push	{r4, r7, lr}
 8006fc6:	b089      	sub	sp, #36	; 0x24
 8006fc8:	af04      	add	r7, sp, #16
 8006fca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fc3a 	bl	8007850 <USBH_FindInterface>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2bff      	cmp	r3, #255	; 0xff
 8006fe4:	f000 812a 	beq.w	800723c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fc13 	bl	8007818 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006ff8:	2050      	movs	r0, #80	; 0x50
 8006ffa:	f004 fe91 	bl	800bd20 <malloc>
 8006ffe:	4603      	mov	r3, r0
 8007000:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	211a      	movs	r1, #26
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	4413      	add	r3, r2
 8007018:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b25b      	sxtb	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	da15      	bge.n	8007050 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	211a      	movs	r1, #26
 800702a:	fb01 f303 	mul.w	r3, r1, r3
 800702e:	4413      	add	r3, r2
 8007030:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007034:	781a      	ldrb	r2, [r3, #0]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	211a      	movs	r1, #26
 8007040:	fb01 f303 	mul.w	r3, r1, r3
 8007044:	4413      	add	r3, r2
 8007046:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800704a:	881a      	ldrh	r2, [r3, #0]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 fd21 	bl	8008a9e <USBH_AllocPipe>
 800705c:	4603      	mov	r3, r0
 800705e:	461a      	mov	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	7819      	ldrb	r1, [r3, #0]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	7858      	ldrb	r0, [r3, #1]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	8952      	ldrh	r2, [r2, #10]
 800707c:	9202      	str	r2, [sp, #8]
 800707e:	2203      	movs	r2, #3
 8007080:	9201      	str	r2, [sp, #4]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	4623      	mov	r3, r4
 8007086:	4602      	mov	r2, r0
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 fcd9 	bl	8008a40 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2200      	movs	r2, #0
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f004 fd68 	bl	800bb6c <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800709c:	2300      	movs	r3, #0
 800709e:	2200      	movs	r2, #0
 80070a0:	210a      	movs	r1, #10
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fbd4 	bl	8007850 <USBH_FindInterface>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2bff      	cmp	r3, #255	; 0xff
 80070b0:	f000 80c4 	beq.w	800723c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	211a      	movs	r1, #26
 80070ba:	fb01 f303 	mul.w	r3, r1, r3
 80070be:	4413      	add	r3, r2
 80070c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	b25b      	sxtb	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	da16      	bge.n	80070fa <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	211a      	movs	r1, #26
 80070d2:	fb01 f303 	mul.w	r3, r1, r3
 80070d6:	4413      	add	r3, r2
 80070d8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80070dc:	781a      	ldrb	r2, [r3, #0]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	211a      	movs	r1, #26
 80070e8:	fb01 f303 	mul.w	r3, r1, r3
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80070f2:	881a      	ldrh	r2, [r3, #0]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	835a      	strh	r2, [r3, #26]
 80070f8:	e015      	b.n	8007126 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	211a      	movs	r1, #26
 8007100:	fb01 f303 	mul.w	r3, r1, r3
 8007104:	4413      	add	r3, r2
 8007106:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800710a:	781a      	ldrb	r2, [r3, #0]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	211a      	movs	r1, #26
 8007116:	fb01 f303 	mul.w	r3, r1, r3
 800711a:	4413      	add	r3, r2
 800711c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007120:	881a      	ldrh	r2, [r3, #0]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	211a      	movs	r1, #26
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	4413      	add	r3, r2
 8007132:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	b25b      	sxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	da16      	bge.n	800716c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	211a      	movs	r1, #26
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	4413      	add	r3, r2
 800714a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800714e:	781a      	ldrb	r2, [r3, #0]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	211a      	movs	r1, #26
 800715a:	fb01 f303 	mul.w	r3, r1, r3
 800715e:	4413      	add	r3, r2
 8007160:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8007164:	881a      	ldrh	r2, [r3, #0]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	835a      	strh	r2, [r3, #26]
 800716a:	e015      	b.n	8007198 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	211a      	movs	r1, #26
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	f203 3352 	addw	r3, r3, #850	; 0x352
 800717c:	781a      	ldrb	r2, [r3, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	211a      	movs	r1, #26
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	4413      	add	r3, r2
 800718e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8007192:	881a      	ldrh	r2, [r3, #0]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	7b9b      	ldrb	r3, [r3, #14]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fc7d 	bl	8008a9e <USBH_AllocPipe>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	7bdb      	ldrb	r3, [r3, #15]
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fc73 	bl	8008a9e <USBH_AllocPipe>
 80071b8:	4603      	mov	r3, r0
 80071ba:	461a      	mov	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	7b59      	ldrb	r1, [r3, #13]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	7b98      	ldrb	r0, [r3, #14]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	8b12      	ldrh	r2, [r2, #24]
 80071d8:	9202      	str	r2, [sp, #8]
 80071da:	2202      	movs	r2, #2
 80071dc:	9201      	str	r2, [sp, #4]
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	4623      	mov	r3, r4
 80071e2:	4602      	mov	r2, r0
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 fc2b 	bl	8008a40 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	7b19      	ldrb	r1, [r3, #12]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	7bd8      	ldrb	r0, [r3, #15]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	8b52      	ldrh	r2, [r2, #26]
 8007202:	9202      	str	r2, [sp, #8]
 8007204:	2202      	movs	r2, #2
 8007206:	9201      	str	r2, [sp, #4]
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	4623      	mov	r3, r4
 800720c:	4602      	mov	r2, r0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fc16 	bl	8008a40 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	7b5b      	ldrb	r3, [r3, #13]
 8007220:	2200      	movs	r2, #0
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f004 fca1 	bl	800bb6c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	7b1b      	ldrb	r3, [r3, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f004 fc9a 	bl	800bb6c <USBH_LL_SetToggle>
      status = USBH_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	bd90      	pop	{r4, r7, pc}

08007246 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00e      	beq.n	800727e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 fc09 	bl	8008a7e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 fc31 	bl	8008ada <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	7b1b      	ldrb	r3, [r3, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00e      	beq.n	80072a4 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	7b1b      	ldrb	r3, [r3, #12]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 fbf6 	bl	8008a7e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	7b1b      	ldrb	r3, [r3, #12]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 fc1e 	bl	8008ada <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	7b5b      	ldrb	r3, [r3, #13]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00e      	beq.n	80072ca <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	7b5b      	ldrb	r3, [r3, #13]
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fbe3 	bl	8008a7e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	7b5b      	ldrb	r3, [r3, #13]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 fc0b 	bl	8008ada <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00b      	beq.n	80072ee <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4618      	mov	r0, r3
 80072e0:	f004 fd26 	bl	800bd30 <free>
    phost->pActiveClass->pData = 0U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072ea:	2200      	movs	r2, #0
 80072ec:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007300:	2302      	movs	r3, #2
 8007302:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	3340      	adds	r3, #64	; 0x40
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f8b2 	bl	800747e <GetLineCoding>
 800731a:	4603      	mov	r3, r0
 800731c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800732a:	2102      	movs	r1, #2
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
  }
  return status;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800735c:	2b04      	cmp	r3, #4
 800735e:	d877      	bhi.n	8007450 <USBH_CDC_Process+0x114>
 8007360:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <USBH_CDC_Process+0x2c>)
 8007362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007366:	bf00      	nop
 8007368:	0800737d 	.word	0x0800737d
 800736c:	08007383 	.word	0x08007383
 8007370:	080073b3 	.word	0x080073b3
 8007374:	08007427 	.word	0x08007427
 8007378:	08007435 	.word	0x08007435
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	73fb      	strb	r3, [r7, #15]
    break;
 8007380:	e06d      	b.n	800745e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f897 	bl	80074bc <SetLineCoding>
 800738e:	4603      	mov	r3, r0
 8007390:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80073a0:	e058      	b.n	8007454 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d055      	beq.n	8007454 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2204      	movs	r2, #4
 80073ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80073b0:	e050      	b.n	8007454 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	3340      	adds	r3, #64	; 0x40
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f860 	bl	800747e <GetLineCoding>
 80073be:	4603      	mov	r3, r0
 80073c0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d126      	bne.n	8007416 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073da:	791b      	ldrb	r3, [r3, #4]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d13b      	bne.n	8007458 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ea:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d133      	bne.n	8007458 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fa:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d12b      	bne.n	8007458 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007408:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800740a:	429a      	cmp	r2, r3
 800740c:	d124      	bne.n	8007458 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f95a 	bl	80076c8 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8007414:	e020      	b.n	8007458 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d01d      	beq.n	8007458 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2204      	movs	r2, #4
 8007420:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8007424:	e018      	b.n	8007458 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f867 	bl	80074fa <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f8dc 	bl	80075ea <CDC_ProcessReception>
    break;
 8007432:	e014      	b.n	800745e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8007434:	2100      	movs	r1, #0
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fece 	bl	80081d8 <USBH_ClrFeature>
 800743c:	4603      	mov	r3, r0
 800743e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8007440:	7bbb      	ldrb	r3, [r7, #14]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800744e:	e005      	b.n	800745c <USBH_CDC_Process+0x120>

  default:
    break;
 8007450:	bf00      	nop
 8007452:	e004      	b.n	800745e <USBH_CDC_Process+0x122>
    break;
 8007454:	bf00      	nop
 8007456:	e002      	b.n	800745e <USBH_CDC_Process+0x122>
    break;
 8007458:	bf00      	nop
 800745a:	e000      	b.n	800745e <USBH_CDC_Process+0x122>
    break;
 800745c:	bf00      	nop

  }

  return status;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	22a1      	movs	r2, #161	; 0xa1
 800748c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2221      	movs	r2, #33	; 0x21
 8007492:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2207      	movs	r2, #7
 80074a4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2207      	movs	r2, #7
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 f873 	bl	8008598 <USBH_CtlReq>
 80074b2:	4603      	mov	r3, r0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2221      	movs	r2, #33	; 0x21
 80074ca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2207      	movs	r2, #7
 80074e2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2207      	movs	r2, #7
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 f854 	bl	8008598 <USBH_CtlReq>
 80074f0:	4603      	mov	r3, r0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b086      	sub	sp, #24
 80074fe:	af02      	add	r7, sp, #8
 8007500:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800750c:	2300      	movs	r3, #0
 800750e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007516:	2b01      	cmp	r3, #1
 8007518:	d002      	beq.n	8007520 <CDC_ProcessTransmission+0x26>
 800751a:	2b02      	cmp	r3, #2
 800751c:	d025      	beq.n	800756a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800751e:	e060      	b.n	80075e2 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	8b12      	ldrh	r2, [r2, #24]
 8007528:	4293      	cmp	r3, r2
 800752a:	d90c      	bls.n	8007546 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	69d9      	ldr	r1, [r3, #28]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8b1a      	ldrh	r2, [r3, #24]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	7b58      	ldrb	r0, [r3, #13]
 8007538:	2301      	movs	r3, #1
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	4603      	mov	r3, r0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 fa3b 	bl	80089ba <USBH_BulkSendData>
 8007544:	e00c      	b.n	8007560 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	7b58      	ldrb	r0, [r3, #13]
 8007554:	2301      	movs	r3, #1
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	4603      	mov	r3, r0
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fa2d 	bl	80089ba <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007568:	e03b      	b.n	80075e2 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	7b5b      	ldrb	r3, [r3, #13]
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f004 fad1 	bl	800bb18 <USBH_LL_GetURBState>
 8007576:	4603      	mov	r3, r0
 8007578:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800757a:	7afb      	ldrb	r3, [r7, #11]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d128      	bne.n	80075d2 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	8b12      	ldrh	r2, [r2, #24]
 8007588:	4293      	cmp	r3, r2
 800758a:	d90e      	bls.n	80075aa <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	8b12      	ldrh	r2, [r2, #24]
 8007594:	1a9a      	subs	r2, r3, r2
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	8b12      	ldrh	r2, [r2, #24]
 80075a2:	441a      	add	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	61da      	str	r2, [r3, #28]
 80075a8:	e002      	b.n	80075b0 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80075c0:	e00e      	b.n	80075e0 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f868 	bl	80076a0 <USBH_CDC_TransmitCallback>
    break;
 80075d0:	e006      	b.n	80075e0 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80075d2:	7afb      	ldrb	r3, [r7, #11]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d103      	bne.n	80075e0 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80075e0:	bf00      	nop
  }
}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b086      	sub	sp, #24
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007606:	2b03      	cmp	r3, #3
 8007608:	d002      	beq.n	8007610 <CDC_ProcessReception+0x26>
 800760a:	2b04      	cmp	r3, #4
 800760c:	d00e      	beq.n	800762c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800760e:	e043      	b.n	8007698 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	6a19      	ldr	r1, [r3, #32]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	8b5a      	ldrh	r2, [r3, #26]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	7b1b      	ldrb	r3, [r3, #12]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f001 f9f1 	bl	8008a04 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2204      	movs	r2, #4
 8007626:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800762a:	e035      	b.n	8007698 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	7b1b      	ldrb	r3, [r3, #12]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f004 fa70 	bl	800bb18 <USBH_LL_GetURBState>
 8007638:	4603      	mov	r3, r0
 800763a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800763c:	7cfb      	ldrb	r3, [r7, #19]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d129      	bne.n	8007696 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	7b1b      	ldrb	r3, [r3, #12]
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f004 f9d3 	bl	800b9f4 <USBH_LL_GetLastXferSize>
 800764e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	429a      	cmp	r2, r3
 8007658:	d016      	beq.n	8007688 <CDC_ProcessReception+0x9e>
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	8b5b      	ldrh	r3, [r3, #26]
 800765e:	461a      	mov	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	429a      	cmp	r2, r3
 8007664:	d210      	bcs.n	8007688 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad2      	subs	r2, r2, r3
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	6a1a      	ldr	r2, [r3, #32]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	441a      	add	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2203      	movs	r2, #3
 8007682:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8007686:	e006      	b.n	8007696 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f80f 	bl	80076b4 <USBH_CDC_ReceiveCallback>
    break;
 8007696:	bf00      	nop
  }
}
 8007698:	bf00      	nop
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]

}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]

}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80076f0:	2302      	movs	r3, #2
 80076f2:	e019      	b.n	8007728 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	79fa      	ldrb	r2, [r7, #7]
 80076f8:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f80f 	bl	8007730 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f004 f8b5 	bl	800b890 <USBH_LL_Init>

  return USBH_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800773c:	e008      	b.n	8007750 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	32e0      	adds	r2, #224	; 0xe0
 8007744:	2100      	movs	r1, #0
 8007746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3301      	adds	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b0e      	cmp	r3, #14
 8007754:	d9f3      	bls.n	800773e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e009      	b.n	8007770 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007776:	d3f1      	bcc.n	800775c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2240      	movs	r2, #64	; 0x40
 800779c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b085      	sub	sp, #20
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d017      	beq.n	8007806 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10f      	bne.n	8007800 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077e6:	1c59      	adds	r1, r3, #1
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	33dc      	adds	r3, #220	; 0xdc
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]
 80077fe:	e004      	b.n	800780a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007800:	2302      	movs	r3, #2
 8007802:	73fb      	strb	r3, [r7, #15]
 8007804:	e001      	b.n	800780a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007806:	2302      	movs	r3, #2
 8007808:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	429a      	cmp	r2, r3
 8007832:	d204      	bcs.n	800783e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	78fa      	ldrb	r2, [r7, #3]
 8007838:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800783c:	e001      	b.n	8007842 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800783e:	2302      	movs	r3, #2
 8007840:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007842:	7bfb      	ldrb	r3, [r7, #15]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	4608      	mov	r0, r1
 800785a:	4611      	mov	r1, r2
 800785c:	461a      	mov	r2, r3
 800785e:	4603      	mov	r3, r0
 8007860:	70fb      	strb	r3, [r7, #3]
 8007862:	460b      	mov	r3, r1
 8007864:	70bb      	strb	r3, [r7, #2]
 8007866:	4613      	mov	r3, r2
 8007868:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800786e:	2300      	movs	r3, #0
 8007870:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007878:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800787a:	e025      	b.n	80078c8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	221a      	movs	r2, #26
 8007880:	fb02 f303 	mul.w	r3, r2, r3
 8007884:	3308      	adds	r3, #8
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4413      	add	r3, r2
 800788a:	3302      	adds	r3, #2
 800788c:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	795b      	ldrb	r3, [r3, #5]
 8007892:	78fa      	ldrb	r2, [r7, #3]
 8007894:	429a      	cmp	r2, r3
 8007896:	d002      	beq.n	800789e <USBH_FindInterface+0x4e>
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	2bff      	cmp	r3, #255	; 0xff
 800789c:	d111      	bne.n	80078c2 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80078a2:	78ba      	ldrb	r2, [r7, #2]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d002      	beq.n	80078ae <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80078a8:	78bb      	ldrb	r3, [r7, #2]
 80078aa:	2bff      	cmp	r3, #255	; 0xff
 80078ac:	d109      	bne.n	80078c2 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80078b2:	787a      	ldrb	r2, [r7, #1]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d002      	beq.n	80078be <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078b8:	787b      	ldrb	r3, [r7, #1]
 80078ba:	2bff      	cmp	r3, #255	; 0xff
 80078bc:	d101      	bne.n	80078c2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	e006      	b.n	80078d0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
 80078c4:	3301      	adds	r3, #1
 80078c6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d9d6      	bls.n	800787c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80078ce:	23ff      	movs	r3, #255	; 0xff
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f004 f80f 	bl	800b908 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80078ea:	2101      	movs	r1, #1
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f004 f926 	bl	800bb3e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af04      	add	r7, sp, #16
 8007902:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007904:	2302      	movs	r3, #2
 8007906:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 faec 	bl	8007eea <USBH_IsPortEnabled>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10c      	bne.n	8007932 <USBH_Process+0x36>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d007      	beq.n	8007932 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b03      	cmp	r3, #3
 800792a:	d002      	beq.n	8007932 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2203      	movs	r2, #3
 8007930:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b0b      	cmp	r3, #11
 800793a:	f200 814c 	bhi.w	8007bd6 <USBH_Process+0x2da>
 800793e:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <USBH_Process+0x48>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	08007975 	.word	0x08007975
 8007948:	08007997 	.word	0x08007997
 800794c:	080079ab 	.word	0x080079ab
 8007950:	08007bb1 	.word	0x08007bb1
 8007954:	08007bd7 	.word	0x08007bd7
 8007958:	08007a39 	.word	0x08007a39
 800795c:	08007b67 	.word	0x08007b67
 8007960:	08007a69 	.word	0x08007a69
 8007964:	08007a89 	.word	0x08007a89
 8007968:	08007aa9 	.word	0x08007aa9
 800796c:	08007ad7 	.word	0x08007ad7
 8007970:	08007b99 	.word	0x08007b99
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 812c 	beq.w	8007bda <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007988:	20c8      	movs	r0, #200	; 0xc8
 800798a:	f004 f922 	bl	800bbd2 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f004 f815 	bl	800b9be <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007994:	e121      	b.n	8007bda <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800799c:	2b01      	cmp	r3, #1
 800799e:	f040 811e 	bne.w	8007bde <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2202      	movs	r2, #2
 80079a6:	701a      	strb	r2, [r3, #0]
    }
    break;
 80079a8:	e119      	b.n	8007bde <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80079aa:	2064      	movs	r0, #100	; 0x64
 80079ac:	f004 f911 	bl	800bbd2 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f003 ffdf 	bl	800b974 <USBH_LL_GetSpeed>
 80079b6:	4603      	mov	r3, r0
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2205      	movs	r2, #5
 80079c4:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80079c6:	2100      	movs	r1, #0
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 f868 	bl	8008a9e <USBH_AllocPipe>
 80079ce:	4603      	mov	r3, r0
 80079d0:	461a      	mov	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80079d6:	2180      	movs	r1, #128	; 0x80
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 f860 	bl	8008a9e <USBH_AllocPipe>
 80079de:	4603      	mov	r3, r0
 80079e0:	461a      	mov	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7919      	ldrb	r1, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80079fa:	b292      	uxth	r2, r2
 80079fc:	9202      	str	r2, [sp, #8]
 80079fe:	2200      	movs	r2, #0
 8007a00:	9201      	str	r2, [sp, #4]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	4603      	mov	r3, r0
 8007a06:	2280      	movs	r2, #128	; 0x80
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 f819 	bl	8008a40 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	7959      	ldrb	r1, [r3, #5]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007a22:	b292      	uxth	r2, r2
 8007a24:	9202      	str	r2, [sp, #8]
 8007a26:	2200      	movs	r2, #0
 8007a28:	9201      	str	r2, [sp, #4]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2200      	movs	r2, #0
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 f805 	bl	8008a40 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007a36:	e0e3      	b.n	8007c00 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f8e7 	bl	8007c0c <USBH_HandleEnum>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f040 80ce 	bne.w	8007be2 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d103      	bne.n	8007a60 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2208      	movs	r2, #8
 8007a5c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007a5e:	e0c0      	b.n	8007be2 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2207      	movs	r2, #7
 8007a64:	701a      	strb	r2, [r3, #0]
    break;
 8007a66:	e0bc      	b.n	8007be2 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 80b9 	beq.w	8007be6 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2208      	movs	r2, #8
 8007a84:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a86:	e0ae      	b.n	8007be6 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fb59 	bl	800814a <USBH_SetCfg>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f040 80a5 	bne.w	8007bea <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2209      	movs	r2, #9
 8007aa4:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007aa6:	e0a0      	b.n	8007bea <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00b      	beq.n	8007ace <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fb69 	bl	8008190 <USBH_SetFeature>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f040 8094 	bne.w	8007bee <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	220a      	movs	r2, #10
 8007aca:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007acc:	e08f      	b.n	8007bee <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	220a      	movs	r2, #10
 8007ad2:	701a      	strb	r2, [r3, #0]
    break;
 8007ad4:	e08b      	b.n	8007bee <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8088 	beq.w	8007bf2 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]
 8007aee:	e017      	b.n	8007b20 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	33dc      	adds	r3, #220	; 0xdc
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	791a      	ldrb	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d108      	bne.n	8007b1a <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	33dc      	adds	r3, #220	; 0xdc
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	73fb      	strb	r3, [r7, #15]
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0e4      	beq.n	8007af0 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d016      	beq.n	8007b5e <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2206      	movs	r2, #6
 8007b46:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b4e:	2103      	movs	r1, #3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007b54:	e04d      	b.n	8007bf2 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	220d      	movs	r2, #13
 8007b5a:	701a      	strb	r2, [r3, #0]
    break;
 8007b5c:	e049      	b.n	8007bf2 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	220d      	movs	r2, #13
 8007b62:	701a      	strb	r2, [r3, #0]
    break;
 8007b64:	e045      	b.n	8007bf2 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00f      	beq.n	8007b90 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d136      	bne.n	8007bf6 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	220b      	movs	r2, #11
 8007b8c:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007b8e:	e032      	b.n	8007bf6 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	220d      	movs	r2, #13
 8007b94:	701a      	strb	r2, [r3, #0]
    break;
 8007b96:	e02e      	b.n	8007bf6 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d02b      	beq.n	8007bfa <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	4798      	blx	r3
    }
    break;
 8007bae:	e024      	b.n	8007bfa <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff fdbd 	bl	8007730 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01e      	beq.n	8007bfe <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007bd4:	e013      	b.n	8007bfe <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8007bd6:	bf00      	nop
 8007bd8:	e012      	b.n	8007c00 <USBH_Process+0x304>
    break;
 8007bda:	bf00      	nop
 8007bdc:	e010      	b.n	8007c00 <USBH_Process+0x304>
    break;
 8007bde:	bf00      	nop
 8007be0:	e00e      	b.n	8007c00 <USBH_Process+0x304>
    break;
 8007be2:	bf00      	nop
 8007be4:	e00c      	b.n	8007c00 <USBH_Process+0x304>
    break;
 8007be6:	bf00      	nop
 8007be8:	e00a      	b.n	8007c00 <USBH_Process+0x304>
    break;
 8007bea:	bf00      	nop
 8007bec:	e008      	b.n	8007c00 <USBH_Process+0x304>
    break;
 8007bee:	bf00      	nop
 8007bf0:	e006      	b.n	8007c00 <USBH_Process+0x304>
    break;
 8007bf2:	bf00      	nop
 8007bf4:	e004      	b.n	8007c00 <USBH_Process+0x304>
    break;
 8007bf6:	bf00      	nop
 8007bf8:	e002      	b.n	8007c00 <USBH_Process+0x304>
    break;
 8007bfa:	bf00      	nop
 8007bfc:	e000      	b.n	8007c00 <USBH_Process+0x304>
    break;
 8007bfe:	bf00      	nop
  }
 return USBH_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop

08007c0c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af04      	add	r7, sp, #16
 8007c12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007c14:	2301      	movs	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	2b07      	cmp	r3, #7
 8007c1e:	f200 80f8 	bhi.w	8007e12 <USBH_HandleEnum+0x206>
 8007c22:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <USBH_HandleEnum+0x1c>)
 8007c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c28:	08007c49 	.word	0x08007c49
 8007c2c:	08007cbb 	.word	0x08007cbb
 8007c30:	08007cd3 	.word	0x08007cd3
 8007c34:	08007d49 	.word	0x08007d49
 8007c38:	08007d5f 	.word	0x08007d5f
 8007c3c:	08007d7b 	.word	0x08007d7b
 8007c40:	08007daf 	.word	0x08007daf
 8007c44:	08007de3 	.word	0x08007de3
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007c48:	2108      	movs	r1, #8
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f9ad 	bl	8007faa <USBH_Get_DevDesc>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f040 80df 	bne.w	8007e16 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	7919      	ldrb	r1, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007c7c:	b292      	uxth	r2, r2
 8007c7e:	9202      	str	r2, [sp, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	9201      	str	r2, [sp, #4]
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	4603      	mov	r3, r0
 8007c88:	2280      	movs	r2, #128	; 0x80
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fed8 	bl	8008a40 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	7959      	ldrb	r1, [r3, #5]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007ca4:	b292      	uxth	r2, r2
 8007ca6:	9202      	str	r2, [sp, #8]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	9201      	str	r2, [sp, #4]
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fec4 	bl	8008a40 <USBH_OpenPipe>

    }
    break;
 8007cb8:	e0ad      	b.n	8007e16 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007cba:	2112      	movs	r1, #18
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f974 	bl	8007faa <USBH_Get_DevDesc>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f040 80a8 	bne.w	8007e1a <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2202      	movs	r2, #2
 8007cce:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007cd0:	e0a3      	b.n	8007e1a <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fa14 	bl	8008102 <USBH_SetAddress>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f040 809e 	bne.w	8007e1e <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007ce2:	2002      	movs	r0, #2
 8007ce4:	f003 ff75 	bl	800bbd2 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	7919      	ldrb	r1, [r3, #4]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007d0a:	b292      	uxth	r2, r2
 8007d0c:	9202      	str	r2, [sp, #8]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	9201      	str	r2, [sp, #4]
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	4603      	mov	r3, r0
 8007d16:	2280      	movs	r2, #128	; 0x80
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fe91 	bl	8008a40 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7959      	ldrb	r1, [r3, #5]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007d32:	b292      	uxth	r2, r2
 8007d34:	9202      	str	r2, [sp, #8]
 8007d36:	2200      	movs	r2, #0
 8007d38:	9201      	str	r2, [sp, #4]
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fe7d 	bl	8008a40 <USBH_OpenPipe>
    }
    break;
 8007d46:	e06a      	b.n	8007e1e <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007d48:	2109      	movs	r1, #9
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f955 	bl	8007ffa <USBH_Get_CfgDesc>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d165      	bne.n	8007e22 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2204      	movs	r2, #4
 8007d5a:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007d5c:	e061      	b.n	8007e22 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f947 	bl	8007ffa <USBH_Get_CfgDesc>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d159      	bne.n	8007e26 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2205      	movs	r2, #5
 8007d76:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007d78:	e055      	b.n	8007e26 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d010      	beq.n	8007da6 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007d90:	23ff      	movs	r3, #255	; 0xff
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f955 	bl	8008042 <USBH_Get_StringDesc>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d145      	bne.n	8007e2a <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2206      	movs	r2, #6
 8007da2:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007da4:	e041      	b.n	8007e2a <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2206      	movs	r2, #6
 8007daa:	705a      	strb	r2, [r3, #1]
    break;
 8007dac:	e03d      	b.n	8007e2a <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d010      	beq.n	8007dda <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007dc4:	23ff      	movs	r3, #255	; 0xff
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f93b 	bl	8008042 <USBH_Get_StringDesc>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d12d      	bne.n	8007e2e <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2207      	movs	r2, #7
 8007dd6:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007dd8:	e029      	b.n	8007e2e <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2207      	movs	r2, #7
 8007dde:	705a      	strb	r2, [r3, #1]
    break;
 8007de0:	e025      	b.n	8007e2e <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00f      	beq.n	8007e0c <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007df8:	23ff      	movs	r3, #255	; 0xff
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f921 	bl	8008042 <USBH_Get_StringDesc>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d115      	bne.n	8007e32 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007e0a:	e012      	b.n	8007e32 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e10:	e00f      	b.n	8007e32 <USBH_HandleEnum+0x226>

  default:
    break;
 8007e12:	bf00      	nop
 8007e14:	e00e      	b.n	8007e34 <USBH_HandleEnum+0x228>
    break;
 8007e16:	bf00      	nop
 8007e18:	e00c      	b.n	8007e34 <USBH_HandleEnum+0x228>
    break;
 8007e1a:	bf00      	nop
 8007e1c:	e00a      	b.n	8007e34 <USBH_HandleEnum+0x228>
    break;
 8007e1e:	bf00      	nop
 8007e20:	e008      	b.n	8007e34 <USBH_HandleEnum+0x228>
    break;
 8007e22:	bf00      	nop
 8007e24:	e006      	b.n	8007e34 <USBH_HandleEnum+0x228>
    break;
 8007e26:	bf00      	nop
 8007e28:	e004      	b.n	8007e34 <USBH_HandleEnum+0x228>
    break;
 8007e2a:	bf00      	nop
 8007e2c:	e002      	b.n	8007e34 <USBH_HandleEnum+0x228>
    break;
 8007e2e:	bf00      	nop
 8007e30:	e000      	b.n	8007e34 <USBH_HandleEnum+0x228>
    break;
 8007e32:	bf00      	nop
  }
  return Status;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop

08007e40 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f804 	bl	8007e82 <USBH_HandleSof>
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b0b      	cmp	r3, #11
 8007e92:	d10a      	bne.n	8007eaa <USBH_HandleSof+0x28>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
  }
}
 8007eaa:	bf00      	nop
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007ec2:	bf00      	nop
}
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007ede:	bf00      	nop
}
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10f      	bne.n	8007f36 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00e      	beq.n	8007f46 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f2e:	2104      	movs	r1, #4
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	4798      	blx	r3
 8007f34:	e007      	b.n	8007f46 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d102      	bne.n	8007f46 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f003 fcf0 	bl	800b93e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	791b      	ldrb	r3, [r3, #4]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fdb8 	bl	8008ada <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	795b      	ldrb	r3, [r3, #5]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fdb2 	bl	8008ada <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d005      	beq.n	8007f94 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f8e:	2105      	movs	r1, #5
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f003 fcb7 	bl	800b908 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b086      	sub	sp, #24
 8007fae:	af02      	add	r7, sp, #8
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fc8:	2100      	movs	r1, #0
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f864 	bl	8008098 <USBH_GetDescriptor>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	b292      	uxth	r2, r2
 8007fea:	4619      	mov	r1, r3
 8007fec:	f000 f918 	bl	8008220 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b086      	sub	sp, #24
 8007ffe:	af02      	add	r7, sp, #8
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	331c      	adds	r3, #28
 800800a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800800c:	887b      	ldrh	r3, [r7, #2]
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008016:	2100      	movs	r1, #0
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f83d 	bl	8008098 <USBH_GetDescriptor>
 800801e:	4603      	mov	r3, r0
 8008020:	72fb      	strb	r3, [r7, #11]
 8008022:	7afb      	ldrb	r3, [r7, #11]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d107      	bne.n	8008038 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800802e:	887a      	ldrh	r2, [r7, #2]
 8008030:	68f9      	ldr	r1, [r7, #12]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f964 	bl	8008300 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8008038:	7afb      	ldrb	r3, [r7, #11]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b088      	sub	sp, #32
 8008046:	af02      	add	r7, sp, #8
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	461a      	mov	r2, r3
 800804e:	460b      	mov	r3, r1
 8008050:	72fb      	strb	r3, [r7, #11]
 8008052:	4613      	mov	r3, r2
 8008054:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8008056:	7afb      	ldrb	r3, [r7, #11]
 8008058:	b29b      	uxth	r3, r3
 800805a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800805e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8008066:	893b      	ldrh	r3, [r7, #8]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	460b      	mov	r3, r1
 800806c:	2100      	movs	r1, #0
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f812 	bl	8008098 <USBH_GetDescriptor>
 8008074:	4603      	mov	r3, r0
 8008076:	75fb      	strb	r3, [r7, #23]
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d107      	bne.n	800808e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008084:	893a      	ldrh	r2, [r7, #8]
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fa37 	bl	80084fc <USBH_ParseStringDesc>
  }
  return status;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	607b      	str	r3, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	72fb      	strb	r3, [r7, #11]
 80080a6:	4613      	mov	r3, r2
 80080a8:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	789b      	ldrb	r3, [r3, #2]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d11c      	bne.n	80080ec <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80080b2:	7afb      	ldrb	r3, [r7, #11]
 80080b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2206      	movs	r2, #6
 80080c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	893a      	ldrh	r2, [r7, #8]
 80080c8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80080ca:	893b      	ldrh	r3, [r7, #8]
 80080cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080d4:	d104      	bne.n	80080e0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f240 4209 	movw	r2, #1033	; 0x409
 80080dc:	829a      	strh	r2, [r3, #20]
 80080de:	e002      	b.n	80080e6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8b3a      	ldrh	r2, [r7, #24]
 80080ea:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80080ec:	8b3b      	ldrh	r3, [r7, #24]
 80080ee:	461a      	mov	r2, r3
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 fa50 	bl	8008598 <USBH_CtlReq>
 80080f8:	4603      	mov	r3, r0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	789b      	ldrb	r3, [r3, #2]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d10f      	bne.n	8008136 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2205      	movs	r2, #5
 8008120:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	b29a      	uxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008136:	2200      	movs	r2, #0
 8008138:	2100      	movs	r1, #0
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa2c 	bl	8008598 <USBH_CtlReq>
 8008140:	4603      	mov	r3, r0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	789b      	ldrb	r3, [r3, #2]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d10e      	bne.n	800817c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2209      	movs	r2, #9
 8008168:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	887a      	ldrh	r2, [r7, #2]
 800816e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800817c:	2200      	movs	r2, #0
 800817e:	2100      	movs	r1, #0
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fa09 	bl	8008598 <USBH_CtlReq>
 8008186:	4603      	mov	r3, r0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	789b      	ldrb	r3, [r3, #2]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d10f      	bne.n	80081c4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2203      	movs	r2, #3
 80081ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80081c4:	2200      	movs	r2, #0
 80081c6:	2100      	movs	r1, #0
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f9e5 	bl	8008598 <USBH_CtlReq>
 80081ce:	4603      	mov	r3, r0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	789b      	ldrb	r3, [r3, #2]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d10f      	bne.n	800820c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800820c:	2200      	movs	r2, #0
 800820e:	2100      	movs	r1, #0
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f9c1 	bl	8008598 <USBH_CtlReq>
 8008216:	4603      	mov	r3, r0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	4613      	mov	r3, r2
 800822c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	781a      	ldrb	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	785a      	ldrb	r2, [r3, #1]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	3302      	adds	r3, #2
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	b29a      	uxth	r2, r3
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	3303      	adds	r3, #3
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	b29b      	uxth	r3, r3
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	b29b      	uxth	r3, r3
 8008252:	4313      	orrs	r3, r2
 8008254:	b29a      	uxth	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	791a      	ldrb	r2, [r3, #4]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	795a      	ldrb	r2, [r3, #5]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	799a      	ldrb	r2, [r3, #6]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	79da      	ldrb	r2, [r3, #7]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	2b08      	cmp	r3, #8
 800827e:	d939      	bls.n	80082f4 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	3308      	adds	r3, #8
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	b29a      	uxth	r2, r3
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	3309      	adds	r3, #9
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	b29b      	uxth	r3, r3
 8008294:	4313      	orrs	r3, r2
 8008296:	b29a      	uxth	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	330a      	adds	r3, #10
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	330b      	adds	r3, #11
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	4313      	orrs	r3, r2
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	330c      	adds	r3, #12
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	330d      	adds	r3, #13
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	7b9a      	ldrb	r2, [r3, #14]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	7bda      	ldrb	r2, [r3, #15]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	7c1a      	ldrb	r2, [r3, #16]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	7c5a      	ldrb	r2, [r3, #17]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	745a      	strb	r2, [r3, #17]
  }
}
 80082f4:	bf00      	nop
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b08a      	sub	sp, #40	; 0x28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	4613      	mov	r3, r2
 800830c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	781a      	ldrb	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	785a      	ldrb	r2, [r3, #1]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	3302      	adds	r3, #2
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	b29a      	uxth	r2, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	3303      	adds	r3, #3
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	b29b      	uxth	r3, r3
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	b29b      	uxth	r3, r3
 8008346:	4313      	orrs	r3, r2
 8008348:	b29a      	uxth	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	791a      	ldrb	r2, [r3, #4]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	795a      	ldrb	r2, [r3, #5]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	799a      	ldrb	r2, [r3, #6]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	79da      	ldrb	r2, [r3, #7]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	7a1a      	ldrb	r2, [r3, #8]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	2b09      	cmp	r3, #9
 800837a:	d95f      	bls.n	800843c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800837c:	2309      	movs	r3, #9
 800837e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008380:	2300      	movs	r3, #0
 8008382:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008384:	e051      	b.n	800842a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008386:	f107 0316 	add.w	r3, r7, #22
 800838a:	4619      	mov	r1, r3
 800838c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800838e:	f000 f8e8 	bl	8008562 <USBH_GetNextDesc>
 8008392:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	785b      	ldrb	r3, [r3, #1]
 8008398:	2b04      	cmp	r3, #4
 800839a:	d146      	bne.n	800842a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800839c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a0:	221a      	movs	r2, #26
 80083a2:	fb02 f303 	mul.w	r3, r2, r3
 80083a6:	3308      	adds	r3, #8
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	4413      	add	r3, r2
 80083ac:	3302      	adds	r3, #2
 80083ae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80083b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083b2:	69f8      	ldr	r0, [r7, #28]
 80083b4:	f000 f846 	bl	8008444 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80083be:	2300      	movs	r3, #0
 80083c0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083c2:	e022      	b.n	800840a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80083c4:	f107 0316 	add.w	r3, r7, #22
 80083c8:	4619      	mov	r1, r3
 80083ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083cc:	f000 f8c9 	bl	8008562 <USBH_GetNextDesc>
 80083d0:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	785b      	ldrb	r3, [r3, #1]
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	d117      	bne.n	800840a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80083da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80083e2:	3201      	adds	r2, #1
 80083e4:	00d2      	lsls	r2, r2, #3
 80083e6:	211a      	movs	r1, #26
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
 80083ec:	4413      	add	r3, r2
 80083ee:	3308      	adds	r3, #8
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	3304      	adds	r3, #4
 80083f6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80083f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083fa:	69b8      	ldr	r0, [r7, #24]
 80083fc:	f000 f851 	bl	80084a2 <USBH_ParseEPDesc>
            ep_ix++;
 8008400:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008404:	3301      	adds	r3, #1
 8008406:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	791b      	ldrb	r3, [r3, #4]
 800840e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008412:	429a      	cmp	r2, r3
 8008414:	d204      	bcs.n	8008420 <USBH_ParseCfgDesc+0x120>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	885a      	ldrh	r2, [r3, #2]
 800841a:	8afb      	ldrh	r3, [r7, #22]
 800841c:	429a      	cmp	r2, r3
 800841e:	d8d1      	bhi.n	80083c4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008424:	3301      	adds	r3, #1
 8008426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800842a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800842e:	2b01      	cmp	r3, #1
 8008430:	d804      	bhi.n	800843c <USBH_ParseCfgDesc+0x13c>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	885a      	ldrh	r2, [r3, #2]
 8008436:	8afb      	ldrh	r3, [r7, #22]
 8008438:	429a      	cmp	r2, r3
 800843a:	d8a4      	bhi.n	8008386 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800843c:	bf00      	nop
 800843e:	3728      	adds	r7, #40	; 0x28
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	785a      	ldrb	r2, [r3, #1]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	789a      	ldrb	r2, [r3, #2]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	78da      	ldrb	r2, [r3, #3]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	791a      	ldrb	r2, [r3, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	795a      	ldrb	r2, [r3, #5]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	799a      	ldrb	r2, [r3, #6]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	79da      	ldrb	r2, [r3, #7]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	7a1a      	ldrb	r2, [r3, #8]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	721a      	strb	r2, [r3, #8]
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781a      	ldrb	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	785a      	ldrb	r2, [r3, #1]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	789a      	ldrb	r2, [r3, #2]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	78da      	ldrb	r2, [r3, #3]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	3304      	adds	r3, #4
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	3305      	adds	r3, #5
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	021b      	lsls	r3, r3, #8
 80084de:	b29b      	uxth	r3, r3
 80084e0:	4313      	orrs	r3, r2
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	799a      	ldrb	r2, [r3, #6]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	719a      	strb	r2, [r3, #6]
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	4613      	mov	r3, r2
 8008508:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3301      	adds	r3, #1
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b03      	cmp	r3, #3
 8008512:	d120      	bne.n	8008556 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	1e9a      	subs	r2, r3, #2
 800851a:	88fb      	ldrh	r3, [r7, #6]
 800851c:	4293      	cmp	r3, r2
 800851e:	bf28      	it	cs
 8008520:	4613      	movcs	r3, r2
 8008522:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3302      	adds	r3, #2
 8008528:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800852a:	2300      	movs	r3, #0
 800852c:	82fb      	strh	r3, [r7, #22]
 800852e:	e00b      	b.n	8008548 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008530:	8afb      	ldrh	r3, [r7, #22]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4413      	add	r3, r2
 8008536:	781a      	ldrb	r2, [r3, #0]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	3301      	adds	r3, #1
 8008540:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008542:	8afb      	ldrh	r3, [r7, #22]
 8008544:	3302      	adds	r3, #2
 8008546:	82fb      	strh	r3, [r7, #22]
 8008548:	8afa      	ldrh	r2, [r7, #22]
 800854a:	8abb      	ldrh	r3, [r7, #20]
 800854c:	429a      	cmp	r2, r3
 800854e:	d3ef      	bcc.n	8008530 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2200      	movs	r2, #0
 8008554:	701a      	strb	r2, [r3, #0]
  }
}
 8008556:	bf00      	nop
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	881a      	ldrh	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	4413      	add	r3, r2
 8008578:	b29a      	uxth	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4413      	add	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800858a:	68fb      	ldr	r3, [r7, #12]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	4613      	mov	r3, r2
 80085a4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80085a6:	2301      	movs	r3, #1
 80085a8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	789b      	ldrb	r3, [r3, #2]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d002      	beq.n	80085b8 <USBH_CtlReq+0x20>
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d00f      	beq.n	80085d6 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80085b6:	e034      	b.n	8008622 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2201      	movs	r2, #1
 80085c8:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2202      	movs	r2, #2
 80085ce:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80085d0:	2301      	movs	r3, #1
 80085d2:	75fb      	strb	r3, [r7, #23]
    break;
 80085d4:	e025      	b.n	8008622 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f828 	bl	800862c <USBH_HandleControl>
 80085dc:	4603      	mov	r3, r0
 80085de:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d108      	bne.n	80085f8 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2201      	movs	r2, #1
 80085ea:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	75fb      	strb	r3, [r7, #23]
    break;
 80085f6:	e013      	b.n	8008620 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d108      	bne.n	8008610 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800860a:	2303      	movs	r3, #3
 800860c:	75fb      	strb	r3, [r7, #23]
    break;
 800860e:	e007      	b.n	8008620 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8008610:	7dfb      	ldrb	r3, [r7, #23]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d104      	bne.n	8008620 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800861c:	2302      	movs	r3, #2
 800861e:	75fb      	strb	r3, [r7, #23]
    break;
 8008620:	bf00      	nop
  }
  return status;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af02      	add	r7, sp, #8
 8008632:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008634:	2301      	movs	r3, #1
 8008636:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008638:	2300      	movs	r3, #0
 800863a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7e1b      	ldrb	r3, [r3, #24]
 8008640:	3b01      	subs	r3, #1
 8008642:	2b0a      	cmp	r3, #10
 8008644:	f200 814c 	bhi.w	80088e0 <USBH_HandleControl+0x2b4>
 8008648:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <USBH_HandleControl+0x24>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	0800867d 	.word	0x0800867d
 8008654:	08008697 	.word	0x08008697
 8008658:	08008701 	.word	0x08008701
 800865c:	08008727 	.word	0x08008727
 8008660:	0800875f 	.word	0x0800875f
 8008664:	0800878b 	.word	0x0800878b
 8008668:	080087dd 	.word	0x080087dd
 800866c:	080087ff 	.word	0x080087ff
 8008670:	0800883b 	.word	0x0800883b
 8008674:	08008863 	.word	0x08008863
 8008678:	080088a1 	.word	0x080088a1
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f103 0110 	add.w	r1, r3, #16
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	795b      	ldrb	r3, [r3, #5]
 8008686:	461a      	mov	r2, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f939 	bl	8008900 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2202      	movs	r2, #2
 8008692:	761a      	strb	r2, [r3, #24]
    break;
 8008694:	e12f      	b.n	80088f6 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	795b      	ldrb	r3, [r3, #5]
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f003 fa3b 	bl	800bb18 <USBH_LL_GetURBState>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d11e      	bne.n	80086ea <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7c1b      	ldrb	r3, [r3, #16]
 80086b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086b4:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	8adb      	ldrh	r3, [r3, #22]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80086be:	7b7b      	ldrb	r3, [r7, #13]
 80086c0:	2b80      	cmp	r3, #128	; 0x80
 80086c2:	d103      	bne.n	80086cc <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2203      	movs	r2, #3
 80086c8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80086ca:	e10b      	b.n	80088e4 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2205      	movs	r2, #5
 80086d0:	761a      	strb	r2, [r3, #24]
    break;
 80086d2:	e107      	b.n	80088e4 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80086d4:	7b7b      	ldrb	r3, [r7, #13]
 80086d6:	2b80      	cmp	r3, #128	; 0x80
 80086d8:	d103      	bne.n	80086e2 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2209      	movs	r2, #9
 80086de:	761a      	strb	r2, [r3, #24]
    break;
 80086e0:	e100      	b.n	80088e4 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2207      	movs	r2, #7
 80086e6:	761a      	strb	r2, [r3, #24]
    break;
 80086e8:	e0fc      	b.n	80088e4 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d003      	beq.n	80086f8 <USBH_HandleControl+0xcc>
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	f040 80f6 	bne.w	80088e4 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	220b      	movs	r2, #11
 80086fc:	761a      	strb	r2, [r3, #24]
    break;
 80086fe:	e0f1      	b.n	80088e4 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008706:	b29a      	uxth	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6899      	ldr	r1, [r3, #8]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	899a      	ldrh	r2, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	791b      	ldrb	r3, [r3, #4]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f930 	bl	800897e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2204      	movs	r2, #4
 8008722:	761a      	strb	r2, [r3, #24]
    break;
 8008724:	e0e7      	b.n	80088f6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	791b      	ldrb	r3, [r3, #4]
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f003 f9f3 	bl	800bb18 <USBH_LL_GetURBState>
 8008732:	4603      	mov	r3, r0
 8008734:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d102      	bne.n	8008742 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2209      	movs	r2, #9
 8008740:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	2b05      	cmp	r3, #5
 8008746:	d102      	bne.n	800874e <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008748:	2303      	movs	r3, #3
 800874a:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800874c:	e0cc      	b.n	80088e8 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	2b04      	cmp	r3, #4
 8008752:	f040 80c9 	bne.w	80088e8 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	220b      	movs	r2, #11
 800875a:	761a      	strb	r2, [r3, #24]
    break;
 800875c:	e0c4      	b.n	80088e8 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6899      	ldr	r1, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	899a      	ldrh	r2, [r3, #12]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7958      	ldrb	r0, [r3, #5]
 800876a:	2301      	movs	r3, #1
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	4603      	mov	r3, r0
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f8df 	bl	8008934 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800877c:	b29a      	uxth	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2206      	movs	r2, #6
 8008786:	761a      	strb	r2, [r3, #24]
    break;
 8008788:	e0b5      	b.n	80088f6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	795b      	ldrb	r3, [r3, #5]
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f003 f9c1 	bl	800bb18 <USBH_LL_GetURBState>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d103      	bne.n	80087a8 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2207      	movs	r2, #7
 80087a4:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80087a6:	e0a1      	b.n	80088ec <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	d105      	bne.n	80087ba <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	220c      	movs	r2, #12
 80087b2:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80087b4:	2303      	movs	r3, #3
 80087b6:	73fb      	strb	r3, [r7, #15]
    break;
 80087b8:	e098      	b.n	80088ec <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d103      	bne.n	80087c8 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2205      	movs	r2, #5
 80087c4:	761a      	strb	r2, [r3, #24]
    break;
 80087c6:	e091      	b.n	80088ec <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	2b04      	cmp	r3, #4
 80087cc:	f040 808e 	bne.w	80088ec <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	220b      	movs	r2, #11
 80087d4:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80087d6:	2302      	movs	r3, #2
 80087d8:	73fb      	strb	r3, [r7, #15]
    break;
 80087da:	e087      	b.n	80088ec <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	791b      	ldrb	r3, [r3, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	2100      	movs	r1, #0
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f8ca 	bl	800897e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2208      	movs	r2, #8
 80087fa:	761a      	strb	r2, [r3, #24]

    break;
 80087fc:	e07b      	b.n	80088f6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	791b      	ldrb	r3, [r3, #4]
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f003 f987 	bl	800bb18 <USBH_LL_GetURBState>
 800880a:	4603      	mov	r3, r0
 800880c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d105      	bne.n	8008820 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	220d      	movs	r2, #13
 8008818:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800881e:	e067      	b.n	80088f0 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b04      	cmp	r3, #4
 8008824:	d103      	bne.n	800882e <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	220b      	movs	r2, #11
 800882a:	761a      	strb	r2, [r3, #24]
    break;
 800882c:	e060      	b.n	80088f0 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	2b05      	cmp	r3, #5
 8008832:	d15d      	bne.n	80088f0 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8008834:	2303      	movs	r3, #3
 8008836:	73fb      	strb	r3, [r7, #15]
    break;
 8008838:	e05a      	b.n	80088f0 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	795a      	ldrb	r2, [r3, #5]
 800883e:	2301      	movs	r3, #1
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	4613      	mov	r3, r2
 8008844:	2200      	movs	r2, #0
 8008846:	2100      	movs	r1, #0
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f873 	bl	8008934 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008854:	b29a      	uxth	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	220a      	movs	r2, #10
 800885e:	761a      	strb	r2, [r3, #24]
    break;
 8008860:	e049      	b.n	80088f6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	795b      	ldrb	r3, [r3, #5]
 8008866:	4619      	mov	r1, r3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f003 f955 	bl	800bb18 <USBH_LL_GetURBState>
 800886e:	4603      	mov	r3, r0
 8008870:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d105      	bne.n	8008884 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	220d      	movs	r2, #13
 8008880:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8008882:	e037      	b.n	80088f4 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	2b02      	cmp	r3, #2
 8008888:	d103      	bne.n	8008892 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2209      	movs	r2, #9
 800888e:	761a      	strb	r2, [r3, #24]
    break;
 8008890:	e030      	b.n	80088f4 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	2b04      	cmp	r3, #4
 8008896:	d12d      	bne.n	80088f4 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	220b      	movs	r2, #11
 800889c:	761a      	strb	r2, [r3, #24]
    break;
 800889e:	e029      	b.n	80088f4 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	7e5b      	ldrb	r3, [r3, #25]
 80088a4:	3301      	adds	r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	765a      	strb	r2, [r3, #25]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7e5b      	ldrb	r3, [r3, #25]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d809      	bhi.n	80088c8 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f003 f842 	bl	800b93e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80088c6:	e016      	b.n	80088f6 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80088ce:	2106      	movs	r1, #6
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80088da:	2302      	movs	r3, #2
 80088dc:	73fb      	strb	r3, [r7, #15]
    break;
 80088de:	e00a      	b.n	80088f6 <USBH_HandleControl+0x2ca>

  default:
    break;
 80088e0:	bf00      	nop
 80088e2:	e008      	b.n	80088f6 <USBH_HandleControl+0x2ca>
    break;
 80088e4:	bf00      	nop
 80088e6:	e006      	b.n	80088f6 <USBH_HandleControl+0x2ca>
    break;
 80088e8:	bf00      	nop
 80088ea:	e004      	b.n	80088f6 <USBH_HandleControl+0x2ca>
    break;
 80088ec:	bf00      	nop
 80088ee:	e002      	b.n	80088f6 <USBH_HandleControl+0x2ca>
    break;
 80088f0:	bf00      	nop
 80088f2:	e000      	b.n	80088f6 <USBH_HandleControl+0x2ca>
    break;
 80088f4:	bf00      	nop
  }
  return status;
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af04      	add	r7, sp, #16
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	4613      	mov	r3, r2
 800890c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800890e:	79f9      	ldrb	r1, [r7, #7]
 8008910:	2300      	movs	r3, #0
 8008912:	9303      	str	r3, [sp, #12]
 8008914:	2308      	movs	r3, #8
 8008916:	9302      	str	r3, [sp, #8]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	9301      	str	r3, [sp, #4]
 800891c:	2300      	movs	r3, #0
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	2300      	movs	r3, #0
 8008922:	2200      	movs	r2, #0
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f003 f8c6 	bl	800bab6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af04      	add	r7, sp, #16
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4611      	mov	r1, r2
 8008940:	461a      	mov	r2, r3
 8008942:	460b      	mov	r3, r1
 8008944:	80fb      	strh	r3, [r7, #6]
 8008946:	4613      	mov	r3, r2
 8008948:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008958:	7979      	ldrb	r1, [r7, #5]
 800895a:	7e3b      	ldrb	r3, [r7, #24]
 800895c:	9303      	str	r3, [sp, #12]
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	9302      	str	r3, [sp, #8]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	2301      	movs	r3, #1
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	2300      	movs	r3, #0
 800896c:	2200      	movs	r2, #0
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f003 f8a1 	bl	800bab6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b088      	sub	sp, #32
 8008982:	af04      	add	r7, sp, #16
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	4611      	mov	r1, r2
 800898a:	461a      	mov	r2, r3
 800898c:	460b      	mov	r3, r1
 800898e:	80fb      	strh	r3, [r7, #6]
 8008990:	4613      	mov	r3, r2
 8008992:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008994:	7979      	ldrb	r1, [r7, #5]
 8008996:	2300      	movs	r3, #0
 8008998:	9303      	str	r3, [sp, #12]
 800899a:	88fb      	ldrh	r3, [r7, #6]
 800899c:	9302      	str	r3, [sp, #8]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	2301      	movs	r3, #1
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	2300      	movs	r3, #0
 80089a8:	2201      	movs	r2, #1
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f003 f883 	bl	800bab6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089b0:	2300      	movs	r3, #0

}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b088      	sub	sp, #32
 80089be:	af04      	add	r7, sp, #16
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	4611      	mov	r1, r2
 80089c6:	461a      	mov	r2, r3
 80089c8:	460b      	mov	r3, r1
 80089ca:	80fb      	strh	r3, [r7, #6]
 80089cc:	4613      	mov	r3, r2
 80089ce:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80089de:	7979      	ldrb	r1, [r7, #5]
 80089e0:	7e3b      	ldrb	r3, [r7, #24]
 80089e2:	9303      	str	r3, [sp, #12]
 80089e4:	88fb      	ldrh	r3, [r7, #6]
 80089e6:	9302      	str	r3, [sp, #8]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	2301      	movs	r3, #1
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	2302      	movs	r3, #2
 80089f2:	2200      	movs	r2, #0
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f003 f85e 	bl	800bab6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af04      	add	r7, sp, #16
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	461a      	mov	r2, r3
 8008a12:	460b      	mov	r3, r1
 8008a14:	80fb      	strh	r3, [r7, #6]
 8008a16:	4613      	mov	r3, r2
 8008a18:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008a1a:	7979      	ldrb	r1, [r7, #5]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	9303      	str	r3, [sp, #12]
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	9302      	str	r3, [sp, #8]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	2301      	movs	r3, #1
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	2201      	movs	r2, #1
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f003 f840 	bl	800bab6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af04      	add	r7, sp, #16
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	4608      	mov	r0, r1
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	70fb      	strb	r3, [r7, #3]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70bb      	strb	r3, [r7, #2]
 8008a56:	4613      	mov	r3, r2
 8008a58:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008a5a:	7878      	ldrb	r0, [r7, #1]
 8008a5c:	78ba      	ldrb	r2, [r7, #2]
 8008a5e:	78f9      	ldrb	r1, [r7, #3]
 8008a60:	8b3b      	ldrh	r3, [r7, #24]
 8008a62:	9302      	str	r3, [sp, #8]
 8008a64:	7d3b      	ldrb	r3, [r7, #20]
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	7c3b      	ldrb	r3, [r7, #16]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f002 ffd3 	bl	800ba1a <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008a74:	2300      	movs	r3, #0

}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f002 fff2 	bl	800ba78 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a94:	2300      	movs	r3, #0

}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f831 	bl	8008b12 <USBH_GetFreePipe>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ab4:	89fb      	ldrh	r3, [r7, #14]
 8008ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d007      	beq.n	8008ace <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008abe:	89fa      	ldrh	r2, [r7, #14]
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	32e0      	adds	r2, #224	; 0xe0
 8008aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008ace:	89fb      	ldrh	r3, [r7, #14]
 8008ad0:	b2db      	uxtb	r3, r3
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	2b0a      	cmp	r3, #10
 8008aea:	d80b      	bhi.n	8008b04 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	78f9      	ldrb	r1, [r7, #3]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	31e0      	adds	r1, #224	; 0xe0
 8008af4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008af8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	32e0      	adds	r2, #224	; 0xe0
 8008b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
 8008b22:	e00e      	b.n	8008b42 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008b24:	7bfa      	ldrb	r2, [r7, #15]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	32e0      	adds	r2, #224	; 0xe0
 8008b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	e007      	b.n	8008b4c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	73fb      	strb	r3, [r7, #15]
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	2b0a      	cmp	r3, #10
 8008b46:	d9ed      	bls.n	8008b24 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <ILI9341_Select>:

extern uint8_t spi4_dma_completed;
HAL_StatusTypeDef errr;
uint16_t test = 0;

static void ILI9341_Select() {
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b62:	4802      	ldr	r0, [pc, #8]	; (8008b6c <ILI9341_Select+0x14>)
 8008b64:	f7f9 fa0c 	bl	8001f80 <HAL_GPIO_WritePin>
}
 8008b68:	bf00      	nop
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40020c00 	.word	0x40020c00

08008b70 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8008b74:	2201      	movs	r2, #1
 8008b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b7a:	4802      	ldr	r0, [pc, #8]	; (8008b84 <ILI9341_Unselect+0x14>)
 8008b7c:	f7f9 fa00 	bl	8001f80 <HAL_GPIO_WritePin>
}
 8008b80:	bf00      	nop
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	40020c00 	.word	0x40020c00

08008b88 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b92:	4807      	ldr	r0, [pc, #28]	; (8008bb0 <ILI9341_Reset+0x28>)
 8008b94:	f7f9 f9f4 	bl	8001f80 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8008b98:	2005      	movs	r0, #5
 8008b9a:	f7f8 f985 	bl	8000ea8 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ba4:	4802      	ldr	r0, [pc, #8]	; (8008bb0 <ILI9341_Reset+0x28>)
 8008ba6:	f7f9 f9eb 	bl	8001f80 <HAL_GPIO_WritePin>
}
 8008baa:	bf00      	nop
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	40020c00 	.word	0x40020c00

08008bb4 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008bc4:	4806      	ldr	r0, [pc, #24]	; (8008be0 <ILI9341_WriteCommand+0x2c>)
 8008bc6:	f7f9 f9db 	bl	8001f80 <HAL_GPIO_WritePin>
//    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
//	while (!spi4_dma_completed)
//	spi4_dma_completed = 0;
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), 10);
 8008bca:	1df9      	adds	r1, r7, #7
 8008bcc:	230a      	movs	r3, #10
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4804      	ldr	r0, [pc, #16]	; (8008be4 <ILI9341_WriteCommand+0x30>)
 8008bd2:	f7fc fa1c 	bl	800500e <HAL_SPI_Transmit>
}
 8008bd6:	bf00      	nop
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	40020c00 	.word	0x40020c00
 8008be4:	2000027c 	.word	0x2000027c

08008be8 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008bf8:	4816      	ldr	r0, [pc, #88]	; (8008c54 <ILI9341_WriteData+0x6c>)
 8008bfa:	f7f9 f9c1 	bl	8001f80 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8008bfe:	e021      	b.n	8008c44 <ILI9341_WriteData+0x5c>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c06:	bf28      	it	cs
 8008c08:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8008c0c:	81fb      	strh	r3, [r7, #14]

		spi4_dma_completed = 0;
 8008c0e:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <ILI9341_WriteData+0x70>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	701a      	strb	r2, [r3, #0]
		errr = HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, chunk_size);
 8008c14:	89fb      	ldrh	r3, [r7, #14]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6879      	ldr	r1, [r7, #4]
 8008c1a:	4810      	ldr	r0, [pc, #64]	; (8008c5c <ILI9341_WriteData+0x74>)
 8008c1c:	f7fc fb2a 	bl	8005274 <HAL_SPI_Transmit_DMA>
 8008c20:	4603      	mov	r3, r0
 8008c22:	461a      	mov	r2, r3
 8008c24:	4b0e      	ldr	r3, [pc, #56]	; (8008c60 <ILI9341_WriteData+0x78>)
 8008c26:	701a      	strb	r2, [r3, #0]
		while (get_spi4_dma_completed() == 0);
 8008c28:	bf00      	nop
 8008c2a:	f002 fcaf 	bl	800b58c <get_spi4_dma_completed>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0fa      	beq.n	8008c2a <ILI9341_WriteData+0x42>

        buff += chunk_size;
 8008c34:	89fb      	ldrh	r3, [r7, #14]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8008c3c:	89fb      	ldrh	r3, [r7, #14]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1da      	bne.n	8008c00 <ILI9341_WriteData+0x18>
    }
}
 8008c4a:	bf00      	nop
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	40020c00 	.word	0x40020c00
 8008c58:	2000010c 	.word	0x2000010c
 8008c5c:	2000027c 	.word	0x2000027c
 8008c60:	20000144 	.word	0x20000144

08008c64 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8008c64:	b590      	push	{r4, r7, lr}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	4611      	mov	r1, r2
 8008c70:	461a      	mov	r2, r3
 8008c72:	4623      	mov	r3, r4
 8008c74:	80fb      	strh	r3, [r7, #6]
 8008c76:	4603      	mov	r3, r0
 8008c78:	80bb      	strh	r3, [r7, #4]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	807b      	strh	r3, [r7, #2]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8008c82:	202a      	movs	r0, #42	; 0x2a
 8008c84:	f7ff ff96 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8008c88:	88fb      	ldrh	r3, [r7, #6]
 8008c8a:	0a1b      	lsrs	r3, r3, #8
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	733b      	strb	r3, [r7, #12]
 8008c92:	88fb      	ldrh	r3, [r7, #6]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	737b      	strb	r3, [r7, #13]
 8008c98:	887b      	ldrh	r3, [r7, #2]
 8008c9a:	0a1b      	lsrs	r3, r3, #8
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	73bb      	strb	r3, [r7, #14]
 8008ca2:	887b      	ldrh	r3, [r7, #2]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8008ca8:	f107 030c 	add.w	r3, r7, #12
 8008cac:	2104      	movs	r1, #4
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff ff9a 	bl	8008be8 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8008cb4:	202b      	movs	r0, #43	; 0x2b
 8008cb6:	f7ff ff7d 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8008cba:	88bb      	ldrh	r3, [r7, #4]
 8008cbc:	0a1b      	lsrs	r3, r3, #8
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	723b      	strb	r3, [r7, #8]
 8008cc4:	88bb      	ldrh	r3, [r7, #4]
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	727b      	strb	r3, [r7, #9]
 8008cca:	883b      	ldrh	r3, [r7, #0]
 8008ccc:	0a1b      	lsrs	r3, r3, #8
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	72bb      	strb	r3, [r7, #10]
 8008cd4:	883b      	ldrh	r3, [r7, #0]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	2104      	movs	r1, #4
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff ff81 	bl	8008be8 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8008ce6:	202c      	movs	r0, #44	; 0x2c
 8008ce8:	f7ff ff64 	bl	8008bb4 <ILI9341_WriteCommand>
}
 8008cec:	bf00      	nop
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd90      	pop	{r4, r7, pc}

08008cf4 <ILI9341_Init>:

void ILI9341_Init() {
 8008cf4:	b590      	push	{r4, r7, lr}
 8008cf6:	b09b      	sub	sp, #108	; 0x6c
 8008cf8:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8008cfa:	f7ff ff2d 	bl	8008b58 <ILI9341_Select>
    ILI9341_Reset();
 8008cfe:	f7ff ff43 	bl	8008b88 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8008d02:	2001      	movs	r0, #1
 8008d04:	f7ff ff56 	bl	8008bb4 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8008d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008d0c:	f7f8 f8cc 	bl	8000ea8 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8008d10:	20cb      	movs	r0, #203	; 0xcb
 8008d12:	f7ff ff4f 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8008d16:	4a8b      	ldr	r2, [pc, #556]	; (8008f44 <ILI9341_Init+0x250>)
 8008d18:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d20:	6018      	str	r0, [r3, #0]
 8008d22:	3304      	adds	r3, #4
 8008d24:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8008d26:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008d2a:	2105      	movs	r1, #5
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff ff5b 	bl	8008be8 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8008d32:	20cf      	movs	r0, #207	; 0xcf
 8008d34:	f7ff ff3e 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8008d38:	4a83      	ldr	r2, [pc, #524]	; (8008f48 <ILI9341_Init+0x254>)
 8008d3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008d3e:	6812      	ldr	r2, [r2, #0]
 8008d40:	4611      	mov	r1, r2
 8008d42:	8019      	strh	r1, [r3, #0]
 8008d44:	3302      	adds	r3, #2
 8008d46:	0c12      	lsrs	r2, r2, #16
 8008d48:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8008d4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008d4e:	2103      	movs	r1, #3
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff ff49 	bl	8008be8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8008d56:	20e8      	movs	r0, #232	; 0xe8
 8008d58:	f7ff ff2c 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8008d5c:	4a7b      	ldr	r2, [pc, #492]	; (8008f4c <ILI9341_Init+0x258>)
 8008d5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d62:	6812      	ldr	r2, [r2, #0]
 8008d64:	4611      	mov	r1, r2
 8008d66:	8019      	strh	r1, [r3, #0]
 8008d68:	3302      	adds	r3, #2
 8008d6a:	0c12      	lsrs	r2, r2, #16
 8008d6c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8008d6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d72:	2103      	movs	r1, #3
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7ff ff37 	bl	8008be8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8008d7a:	20ea      	movs	r0, #234	; 0xea
 8008d7c:	f7ff ff1a 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8008d80:	2300      	movs	r3, #0
 8008d82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8008d86:	2300      	movs	r3, #0
 8008d88:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        ILI9341_WriteData(data, sizeof(data));
 8008d8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d90:	2102      	movs	r1, #2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7ff ff28 	bl	8008be8 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8008d98:	20ed      	movs	r0, #237	; 0xed
 8008d9a:	f7ff ff0b 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8008d9e:	4b6c      	ldr	r3, [pc, #432]	; (8008f50 <ILI9341_Init+0x25c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8008da4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008da8:	2104      	movs	r1, #4
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff ff1c 	bl	8008be8 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8008db0:	20f7      	movs	r0, #247	; 0xf7
 8008db2:	f7ff feff 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8008db6:	2320      	movs	r3, #32
 8008db8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8008dbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff ff10 	bl	8008be8 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8008dc8:	20c0      	movs	r0, #192	; 0xc0
 8008dca:	f7ff fef3 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8008dce:	2323      	movs	r3, #35	; 0x23
 8008dd0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8008dd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008dd8:	2101      	movs	r1, #1
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff ff04 	bl	8008be8 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8008de0:	20c1      	movs	r0, #193	; 0xc1
 8008de2:	f7ff fee7 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8008de6:	2310      	movs	r3, #16
 8008de8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8008dec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008df0:	2101      	movs	r1, #1
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff fef8 	bl	8008be8 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8008df8:	20c5      	movs	r0, #197	; 0xc5
 8008dfa:	f7ff fedb 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8008dfe:	4b55      	ldr	r3, [pc, #340]	; (8008f54 <ILI9341_Init+0x260>)
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8008e06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e0a:	2102      	movs	r1, #2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff feeb 	bl	8008be8 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8008e12:	20c7      	movs	r0, #199	; 0xc7
 8008e14:	f7ff fece 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8008e18:	2386      	movs	r3, #134	; 0x86
 8008e1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8008e1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e22:	2101      	movs	r1, #1
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7ff fedf 	bl	8008be8 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8008e2a:	2036      	movs	r0, #54	; 0x36
 8008e2c:	f7ff fec2 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8008e30:	2348      	movs	r3, #72	; 0x48
 8008e32:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8008e36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff fed3 	bl	8008be8 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8008e42:	203a      	movs	r0, #58	; 0x3a
 8008e44:	f7ff feb6 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8008e48:	2355      	movs	r3, #85	; 0x55
 8008e4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 8008e4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e52:	2101      	movs	r1, #1
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fec7 	bl	8008be8 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8008e5a:	20b1      	movs	r0, #177	; 0xb1
 8008e5c:	f7ff feaa 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008e66:	2318      	movs	r3, #24
 8008e68:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        ILI9341_WriteData(data, sizeof(data));
 8008e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e70:	2102      	movs	r1, #2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff feb8 	bl	8008be8 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8008e78:	20b6      	movs	r0, #182	; 0xb6
 8008e7a:	f7ff fe9b 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8008e7e:	4a36      	ldr	r2, [pc, #216]	; (8008f58 <ILI9341_Init+0x264>)
 8008e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e84:	6812      	ldr	r2, [r2, #0]
 8008e86:	4611      	mov	r1, r2
 8008e88:	8019      	strh	r1, [r3, #0]
 8008e8a:	3302      	adds	r3, #2
 8008e8c:	0c12      	lsrs	r2, r2, #16
 8008e8e:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8008e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e94:	2103      	movs	r1, #3
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fea6 	bl	8008be8 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8008e9c:	20f2      	movs	r0, #242	; 0xf2
 8008e9e:	f7ff fe89 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 8008ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008eac:	2101      	movs	r1, #1
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff fe9a 	bl	8008be8 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8008eb4:	2026      	movs	r0, #38	; 0x26
 8008eb6:	f7ff fe7d 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8008ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff fe8e 	bl	8008be8 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8008ecc:	20e0      	movs	r0, #224	; 0xe0
 8008ece:	f7ff fe71 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8008ed2:	4b22      	ldr	r3, [pc, #136]	; (8008f5c <ILI9341_Init+0x268>)
 8008ed4:	f107 0414 	add.w	r4, r7, #20
 8008ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008eda:	c407      	stmia	r4!, {r0, r1, r2}
 8008edc:	8023      	strh	r3, [r4, #0]
 8008ede:	3402      	adds	r4, #2
 8008ee0:	0c1b      	lsrs	r3, r3, #16
 8008ee2:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8008ee4:	f107 0314 	add.w	r3, r7, #20
 8008ee8:	210f      	movs	r1, #15
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7ff fe7c 	bl	8008be8 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8008ef0:	20e1      	movs	r0, #225	; 0xe1
 8008ef2:	f7ff fe5f 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8008ef6:	4b1a      	ldr	r3, [pc, #104]	; (8008f60 <ILI9341_Init+0x26c>)
 8008ef8:	1d3c      	adds	r4, r7, #4
 8008efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008efc:	c407      	stmia	r4!, {r0, r1, r2}
 8008efe:	8023      	strh	r3, [r4, #0]
 8008f00:	3402      	adds	r4, #2
 8008f02:	0c1b      	lsrs	r3, r3, #16
 8008f04:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8008f06:	1d3b      	adds	r3, r7, #4
 8008f08:	210f      	movs	r1, #15
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff fe6c 	bl	8008be8 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8008f10:	2011      	movs	r0, #17
 8008f12:	f7ff fe4f 	bl	8008bb4 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8008f16:	2078      	movs	r0, #120	; 0x78
 8008f18:	f7f7 ffc6 	bl	8000ea8 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8008f1c:	2029      	movs	r0, #41	; 0x29
 8008f1e:	f7ff fe49 	bl	8008bb4 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8008f22:	2036      	movs	r0, #54	; 0x36
 8008f24:	f7ff fe46 	bl	8008bb4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8008f28:	23e8      	movs	r3, #232	; 0xe8
 8008f2a:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8008f2c:	463b      	mov	r3, r7
 8008f2e:	2101      	movs	r1, #1
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff fe59 	bl	8008be8 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8008f36:	f7ff fe1b 	bl	8008b70 <ILI9341_Unselect>
}
 8008f3a:	bf00      	nop
 8008f3c:	376c      	adds	r7, #108	; 0x6c
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd90      	pop	{r4, r7, pc}
 8008f42:	bf00      	nop
 8008f44:	0800c5c4 	.word	0x0800c5c4
 8008f48:	0800c5cc 	.word	0x0800c5cc
 8008f4c:	0800c5d0 	.word	0x0800c5d0
 8008f50:	0800c5d4 	.word	0x0800c5d4
 8008f54:	0800c5d8 	.word	0x0800c5d8
 8008f58:	0800c5dc 	.word	0x0800c5dc
 8008f5c:	0800c5e0 	.word	0x0800c5e0
 8008f60:	0800c5f0 	.word	0x0800c5f0

08008f64 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8008f64:	b082      	sub	sp, #8
 8008f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f6a:	b088      	sub	sp, #32
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f70:	4603      	mov	r3, r0
 8008f72:	80fb      	strh	r3, [r7, #6]
 8008f74:	460b      	mov	r3, r1
 8008f76:	80bb      	strh	r3, [r7, #4]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	70fb      	strb	r3, [r7, #3]
 8008f7c:	466b      	mov	r3, sp
 8008f7e:	469a      	mov	sl, r3
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8008f80:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	88fb      	ldrh	r3, [r7, #6]
 8008f88:	4413      	add	r3, r2
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b29e      	uxth	r6, r3
 8008f90:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	88bb      	ldrh	r3, [r7, #4]
 8008f98:	4413      	add	r3, r2
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	88b9      	ldrh	r1, [r7, #4]
 8008fa2:	88f8      	ldrh	r0, [r7, #6]
 8008fa4:	4632      	mov	r2, r6
 8008fa6:	f7ff fe5d 	bl	8008c64 <ILI9341_SetAddressWindow>
    uint8_t allData[(font.height * font.width) * 2];
 8008faa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008fae:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8008fb2:	fb02 f303 	mul.w	r3, r2, r3
 8008fb6:	0059      	lsls	r1, r3, #1
 8008fb8:	1e4b      	subs	r3, r1, #1
 8008fba:	613b      	str	r3, [r7, #16]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8008fc8:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8008fcc:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f04f 0300 	mov.w	r3, #0
 8008fd8:	00dd      	lsls	r5, r3, #3
 8008fda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008fde:	00d4      	lsls	r4, r2, #3
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	3307      	adds	r3, #7
 8008fe4:	08db      	lsrs	r3, r3, #3
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	ebad 0d03 	sub.w	sp, sp, r3
 8008fec:	466b      	mov	r3, sp
 8008fee:	3300      	adds	r3, #0
 8008ff0:	60fb      	str	r3, [r7, #12]
    uint32_t line_nr = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	617b      	str	r3, [r7, #20]
    for(i = 0; i < font.height; i++) {
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61fb      	str	r3, [r7, #28]
 8008ffa:	e049      	b.n	8009090 <ILI9341_WriteChar+0x12c>

        b = font.data[(ch - 32) * font.height + i];
 8008ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ffe:	78fb      	ldrb	r3, [r7, #3]
 8009000:	3b20      	subs	r3, #32
 8009002:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
 8009006:	fb00 f303 	mul.w	r3, r0, r3
 800900a:	4618      	mov	r0, r3
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	4403      	add	r3, r0
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	4413      	add	r3, r2
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	60bb      	str	r3, [r7, #8]

        for(j = 0; j < font.width; j++) {
 8009018:	2300      	movs	r3, #0
 800901a:	61bb      	str	r3, [r7, #24]
 800901c:	e02f      	b.n	800907e <ILI9341_WriteChar+0x11a>
            if((b << j) & 0x8000)  {
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	fa02 f303 	lsl.w	r3, r2, r3
 8009026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d012      	beq.n	8009054 <ILI9341_WriteChar+0xf0>
            	allData[line_nr++] = (color >> 8);
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	1c5a      	adds	r2, r3, #1
 8009032:	617a      	str	r2, [r7, #20]
 8009034:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009038:	0a12      	lsrs	r2, r2, #8
 800903a:	b292      	uxth	r2, r2
 800903c:	b2d0      	uxtb	r0, r2
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	54d0      	strb	r0, [r2, r3]
            	allData[line_nr++] = (color & 0xFF);
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	617a      	str	r2, [r7, #20]
 8009048:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800904c:	b2d0      	uxtb	r0, r2
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	54d0      	strb	r0, [r2, r3]
 8009052:	e011      	b.n	8009078 <ILI9341_WriteChar+0x114>
            } else {
            	allData[line_nr++] = (bgcolor >> 8);
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	617a      	str	r2, [r7, #20]
 800905a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800905e:	0a12      	lsrs	r2, r2, #8
 8009060:	b292      	uxth	r2, r2
 8009062:	b2d0      	uxtb	r0, r2
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	54d0      	strb	r0, [r2, r3]
            	allData[line_nr++] = (bgcolor & 0xFF);
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	617a      	str	r2, [r7, #20]
 800906e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009072:	b2d0      	uxtb	r0, r2
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	54d0      	strb	r0, [r2, r3]
        for(j = 0; j < font.width; j++) {
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	3301      	adds	r3, #1
 800907c:	61bb      	str	r3, [r7, #24]
 800907e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009082:	461a      	mov	r2, r3
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	429a      	cmp	r2, r3
 8009088:	d8c9      	bhi.n	800901e <ILI9341_WriteChar+0xba>
    for(i = 0; i < font.height; i++) {
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	3301      	adds	r3, #1
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009094:	461a      	mov	r2, r3
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	429a      	cmp	r2, r3
 800909a:	d8af      	bhi.n	8008ffc <ILI9341_WriteChar+0x98>
            }
        }
    }
    ILI9341_WriteData(allData, sizeof(allData));
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	460a      	mov	r2, r1
 80090a0:	4611      	mov	r1, r2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff fda0 	bl	8008be8 <ILI9341_WriteData>
 80090a8:	46d5      	mov	sp, sl
}
 80090aa:	bf00      	nop
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b4:	b002      	add	sp, #8
 80090b6:	4770      	bx	lr

080090b8 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80090b8:	b082      	sub	sp, #8
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b086      	sub	sp, #24
 80090be:	af04      	add	r7, sp, #16
 80090c0:	603a      	str	r2, [r7, #0]
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	4603      	mov	r3, r0
 80090c6:	80fb      	strh	r3, [r7, #6]
 80090c8:	460b      	mov	r3, r1
 80090ca:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80090cc:	f7ff fd44 	bl	8008b58 <ILI9341_Select>

    while(*str) {
 80090d0:	e02e      	b.n	8009130 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80090d2:	88fb      	ldrh	r3, [r7, #6]
 80090d4:	7d3a      	ldrb	r2, [r7, #20]
 80090d6:	4413      	add	r3, r2
 80090d8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80090dc:	db13      	blt.n	8009106 <ILI9341_WriteString+0x4e>
            x = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80090e2:	7d7b      	ldrb	r3, [r7, #21]
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	88bb      	ldrh	r3, [r7, #4]
 80090e8:	4413      	add	r3, r2
 80090ea:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80090ec:	88bb      	ldrh	r3, [r7, #4]
 80090ee:	7d7a      	ldrb	r2, [r7, #21]
 80090f0:	4413      	add	r3, r2
 80090f2:	2bef      	cmp	r3, #239	; 0xef
 80090f4:	dc21      	bgt.n	800913a <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b20      	cmp	r3, #32
 80090fc:	d103      	bne.n	8009106 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	3301      	adds	r3, #1
 8009102:	603b      	str	r3, [r7, #0]
                continue;
 8009104:	e014      	b.n	8009130 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781a      	ldrb	r2, [r3, #0]
 800910a:	88b9      	ldrh	r1, [r7, #4]
 800910c:	88f8      	ldrh	r0, [r7, #6]
 800910e:	8c3b      	ldrh	r3, [r7, #32]
 8009110:	9302      	str	r3, [sp, #8]
 8009112:	8bbb      	ldrh	r3, [r7, #28]
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f7ff ff22 	bl	8008f64 <ILI9341_WriteChar>
        x += font.width;
 8009120:	7d3b      	ldrb	r3, [r7, #20]
 8009122:	b29a      	uxth	r2, r3
 8009124:	88fb      	ldrh	r3, [r7, #6]
 8009126:	4413      	add	r3, r2
 8009128:	80fb      	strh	r3, [r7, #6]
        str++;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	3301      	adds	r3, #1
 800912e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1cc      	bne.n	80090d2 <ILI9341_WriteString+0x1a>
 8009138:	e000      	b.n	800913c <ILI9341_WriteString+0x84>
                break;
 800913a:	bf00      	nop
    }

    ILI9341_Unselect();
 800913c:	f7ff fd18 	bl	8008b70 <ILI9341_Unselect>
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800914a:	b002      	add	sp, #8
 800914c:	4770      	bx	lr
	...

08009150 <ILI9341_WriteChar8>:

static uint16_t ILI9341_WriteChar8(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8009150:	b082      	sub	sp, #8
 8009152:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009156:	b095      	sub	sp, #84	; 0x54
 8009158:	af00      	add	r7, sp, #0
 800915a:	677b      	str	r3, [r7, #116]	; 0x74
 800915c:	4603      	mov	r3, r0
 800915e:	81fb      	strh	r3, [r7, #14]
 8009160:	460b      	mov	r3, r1
 8009162:	81bb      	strh	r3, [r7, #12]
 8009164:	4613      	mov	r3, r2
 8009166:	72fb      	strb	r3, [r7, #11]

    uint32_t b, j, d_idx, h, font_size_byte, tr2l, tr2r, nr_byte_in_line;
    uint8_t char_nr, px_idx, trl, trr;

    nr_byte_in_line = 4; //font.width / 8;
 8009168:	2304      	movs	r3, #4
 800916a:	633b      	str	r3, [r7, #48]	; 0x30
    font_size_byte = font.height * nr_byte_in_line;
 800916c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8009170:	461a      	mov	r2, r3
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	fb03 f302 	mul.w	r3, r3, r2
 8009178:	62fb      	str	r3, [r7, #44]	; 0x2c

	char_nr = ch - 32;
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	3b20      	subs	r3, #32
 800917e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	float trlf, trrf;

	if (char_nr == 0){										// space font
 8009182:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009186:	2b00      	cmp	r3, #0
 8009188:	d140      	bne.n	800920c <ILI9341_WriteChar8+0xbc>
		trlf = ((20.0 / 100.0 ) * (float)font.width);			//70% font width is space width
 800918a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009196:	ee17 0a90 	vmov	r0, s15
 800919a:	f7f7 f9d5 	bl	8000548 <__aeabi_f2d>
 800919e:	a3f0      	add	r3, pc, #960	; (adr r3, 8009560 <ILI9341_WriteChar8+0x410>)
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	f7f7 fa24 	bl	80005f0 <__aeabi_dmul>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4610      	mov	r0, r2
 80091ae:	4619      	mov	r1, r3
 80091b0:	f7f7 fc30 	bl	8000a14 <__aeabi_d2f>
 80091b4:	4603      	mov	r3, r0
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24
		trrf = ((20.0 / 100.0 ) * (float)font.width);
 80091b8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80091bc:	ee07 3a90 	vmov	s15, r3
 80091c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c4:	ee17 0a90 	vmov	r0, s15
 80091c8:	f7f7 f9be 	bl	8000548 <__aeabi_f2d>
 80091cc:	a3e4      	add	r3, pc, #912	; (adr r3, 8009560 <ILI9341_WriteChar8+0x410>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	f7f7 fa0d 	bl	80005f0 <__aeabi_dmul>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4610      	mov	r0, r2
 80091dc:	4619      	mov	r1, r3
 80091de:	f7f7 fc19 	bl	8000a14 <__aeabi_d2f>
 80091e2:	4603      	mov	r3, r0
 80091e4:	623b      	str	r3, [r7, #32]
		trl = (uint8_t)trlf;
 80091e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80091f2:	793b      	ldrb	r3, [r7, #4]
 80091f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		trr = (uint8_t)trrf;
 80091f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80091fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009200:	edc7 7a01 	vstr	s15, [r7, #4]
 8009204:	793b      	ldrb	r3, [r7, #4]
 8009206:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800920a:	e0b2      	b.n	8009372 <ILI9341_WriteChar8+0x222>
	}
	else{
		trl = 16;
 800920c:	2310      	movs	r3, #16
 800920e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		for(h = 0; h < font.height; h++) {
 8009212:	2300      	movs	r3, #0
 8009214:	647b      	str	r3, [r7, #68]	; 0x44
 8009216:	e043      	b.n	80092a0 <ILI9341_WriteChar8+0x150>

			// osszefuzi az elso ket bajtot
			b = (font.data[(font_size_byte * char_nr) + (h * nr_byte_in_line)] << 8) | (font.data[(font_size_byte * char_nr) + (h * nr_byte_in_line) + 1] & 0xff);
 8009218:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800921a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800921e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009220:	fb01 f103 	mul.w	r1, r1, r3
 8009224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009228:	fb00 f303 	mul.w	r3, r0, r3
 800922c:	440b      	add	r3, r1
 800922e:	005b      	lsls	r3, r3, #1
 8009230:	4413      	add	r3, r2
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	021a      	lsls	r2, r3, #8
 8009236:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800923c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800923e:	fb00 f003 	mul.w	r0, r0, r3
 8009242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009244:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8009246:	fb06 f303 	mul.w	r3, r6, r3
 800924a:	4403      	add	r3, r0
 800924c:	3301      	adds	r3, #1
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	440b      	add	r3, r1
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	4313      	orrs	r3, r2
 8009258:	61fb      	str	r3, [r7, #28]
			tr2l = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	643b      	str	r3, [r7, #64]	; 0x40

			for(j = 0; j < 16; j++) {
 800925e:	2300      	movs	r3, #0
 8009260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009262:	e00d      	b.n	8009280 <ILI9341_WriteChar8+0x130>
				if((b << j) & 0x8000){
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009268:	fa02 f303 	lsl.w	r3, r2, r3
 800926c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d109      	bne.n	8009288 <ILI9341_WriteChar8+0x138>
					break;
				} else {
					tr2l++;
 8009274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009276:	3301      	adds	r3, #1
 8009278:	643b      	str	r3, [r7, #64]	; 0x40
			for(j = 0; j < 16; j++) {
 800927a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800927c:	3301      	adds	r3, #1
 800927e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009282:	2b0f      	cmp	r3, #15
 8009284:	d9ee      	bls.n	8009264 <ILI9341_WriteChar8+0x114>
 8009286:	e000      	b.n	800928a <ILI9341_WriteChar8+0x13a>
					break;
 8009288:	bf00      	nop
				}
			}
			if(trl > tr2l){
 800928a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800928e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009290:	429a      	cmp	r2, r3
 8009292:	d902      	bls.n	800929a <ILI9341_WriteChar8+0x14a>
				trl = tr2l;
 8009294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009296:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		for(h = 0; h < font.height; h++) {
 800929a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800929c:	3301      	adds	r3, #1
 800929e:	647b      	str	r3, [r7, #68]	; 0x44
 80092a0:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80092a4:	461a      	mov	r2, r3
 80092a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d8b5      	bhi.n	8009218 <ILI9341_WriteChar8+0xc8>
			}
		}

		trr = 16;
 80092ac:	2310      	movs	r3, #16
 80092ae:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		for(h = 0; h < font.height; h++) {
 80092b2:	2300      	movs	r3, #0
 80092b4:	647b      	str	r3, [r7, #68]	; 0x44
 80092b6:	e04c      	b.n	8009352 <ILI9341_WriteChar8+0x202>

			// osszefuzi az utolso ket bajtot
			b = (font.data[(font_size_byte * char_nr) + (h * nr_byte_in_line) + nr_byte_in_line-2] << 8) | (font.data[(font_size_byte * char_nr) + (h * nr_byte_in_line) + nr_byte_in_line-1] & 0xff);
 80092b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092c0:	fb01 f103 	mul.w	r1, r1, r3
 80092c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092c8:	fb00 f303 	mul.w	r3, r0, r3
 80092cc:	4419      	add	r1, r3
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	440b      	add	r3, r1
 80092d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80092d6:	3b02      	subs	r3, #2
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	4413      	add	r3, r2
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	021a      	lsls	r2, r3, #8
 80092e0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80092e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e8:	fb00 f003 	mul.w	r0, r0, r3
 80092ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ee:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80092f0:	fb06 f303 	mul.w	r3, r6, r3
 80092f4:	4418      	add	r0, r3
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	4403      	add	r3, r0
 80092fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80092fe:	3b01      	subs	r3, #1
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	440b      	add	r3, r1
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	4313      	orrs	r3, r2
 800930a:	61fb      	str	r3, [r7, #28]

			tr2r = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	63fb      	str	r3, [r7, #60]	; 0x3c

			for(j = 0; j < 16; j++) {
 8009310:	2300      	movs	r3, #0
 8009312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009314:	e00d      	b.n	8009332 <ILI9341_WriteChar8+0x1e2>
				if((b >> j) & 0x0001){
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800931a:	fa22 f303 	lsr.w	r3, r2, r3
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d109      	bne.n	800933a <ILI9341_WriteChar8+0x1ea>
					break;
				} else {
					tr2r++;
 8009326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009328:	3301      	adds	r3, #1
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(j = 0; j < 16; j++) {
 800932c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800932e:	3301      	adds	r3, #1
 8009330:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009334:	2b0f      	cmp	r3, #15
 8009336:	d9ee      	bls.n	8009316 <ILI9341_WriteChar8+0x1c6>
 8009338:	e000      	b.n	800933c <ILI9341_WriteChar8+0x1ec>
					break;
 800933a:	bf00      	nop
				}
			}

			if(trr > tr2r){
 800933c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8009340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009342:	429a      	cmp	r2, r3
 8009344:	d902      	bls.n	800934c <ILI9341_WriteChar8+0x1fc>
				trr = tr2r;
 8009346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009348:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		for(h = 0; h < font.height; h++) {
 800934c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800934e:	3301      	adds	r3, #1
 8009350:	647b      	str	r3, [r7, #68]	; 0x44
 8009352:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8009356:	461a      	mov	r2, r3
 8009358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800935a:	429a      	cmp	r2, r3
 800935c:	d8ac      	bhi.n	80092b8 <ILI9341_WriteChar8+0x168>
			}
		}

		trl = trl - 1;
 800935e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009362:	3b01      	subs	r3, #1
 8009364:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		trr = trr - 1;
 8009368:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800936c:	3b01      	subs	r3, #1
 800936e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	}

	uint16_t new_width = font.width-trl-trr;
 8009372:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8009376:	b29a      	uxth	r2, r3
 8009378:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800937c:	b29b      	uxth	r3, r3
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	b29a      	uxth	r2, r3
 8009382:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009386:	b29b      	uxth	r3, r3
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	837b      	strh	r3, [r7, #26]

    ILI9341_SetAddressWindow(x, y, x+font.width-trl-trr-1, y+font.height-1);
 800938c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8009390:	b29a      	uxth	r2, r3
 8009392:	89fb      	ldrh	r3, [r7, #14]
 8009394:	4413      	add	r3, r2
 8009396:	b29a      	uxth	r2, r3
 8009398:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800939c:	b29b      	uxth	r3, r3
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29e      	uxth	r6, r3
 80093b0:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	89bb      	ldrh	r3, [r7, #12]
 80093b8:	4413      	add	r3, r2
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	3b01      	subs	r3, #1
 80093be:	b29b      	uxth	r3, r3
 80093c0:	89b9      	ldrh	r1, [r7, #12]
 80093c2:	89f8      	ldrh	r0, [r7, #14]
 80093c4:	4632      	mov	r2, r6
 80093c6:	f7ff fc4d 	bl	8008c64 <ILI9341_SetAddressWindow>
    uint8_t allData[(font.height * (font.width-trl-trr)) * 2];
 80093ca:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80093ce:	4619      	mov	r1, r3
 80093d0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80093d4:	461a      	mov	r2, r3
 80093d6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80093da:	1ad2      	subs	r2, r2, r3
 80093dc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	fb03 f301 	mul.w	r3, r3, r1
 80093e6:	0059      	lsls	r1, r3, #1
 80093e8:	466b      	mov	r3, sp
 80093ea:	461e      	mov	r6, r3
 80093ec:	1e4b      	subs	r3, r1, #1
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	460b      	mov	r3, r1
 80093f2:	461a      	mov	r2, r3
 80093f4:	f04f 0300 	mov.w	r3, #0
 80093f8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80093fc:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8009400:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8009404:	460b      	mov	r3, r1
 8009406:	461a      	mov	r2, r3
 8009408:	f04f 0300 	mov.w	r3, #0
 800940c:	00dd      	lsls	r5, r3, #3
 800940e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009412:	00d4      	lsls	r4, r2, #3
 8009414:	460b      	mov	r3, r1
 8009416:	3307      	adds	r3, #7
 8009418:	08db      	lsrs	r3, r3, #3
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	ebad 0d03 	sub.w	sp, sp, r3
 8009420:	466b      	mov	r3, sp
 8009422:	3300      	adds	r3, #0
 8009424:	613b      	str	r3, [r7, #16]
    uint32_t line_nr = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	637b      	str	r3, [r7, #52]	; 0x34

	d_idx = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	64bb      	str	r3, [r7, #72]	; 0x48
	px_idx = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	for(h = 0; h < font_size_byte / 2; h++) {
 8009434:	2300      	movs	r3, #0
 8009436:	647b      	str	r3, [r7, #68]	; 0x44
 8009438:	e07d      	b.n	8009536 <ILI9341_WriteChar8+0x3e6>
		b = (font.data[(font_size_byte * char_nr) + d_idx] << 8) | (font.data[(font_size_byte * char_nr) + d_idx+1] & 0xff);
 800943a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800943c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009442:	fb00 f003 	mul.w	r0, r0, r3
 8009446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009448:	4403      	add	r3, r0
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	4413      	add	r3, r2
 800944e:	881b      	ldrh	r3, [r3, #0]
 8009450:	021a      	lsls	r2, r3, #8
 8009452:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009454:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009458:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800945a:	fb04 f403 	mul.w	r4, r4, r3
 800945e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009460:	4423      	add	r3, r4
 8009462:	3301      	adds	r3, #1
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	4403      	add	r3, r0
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	b2db      	uxtb	r3, r3
 800946c:	4313      	orrs	r3, r2
 800946e:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 16; j++) {
 8009470:	2300      	movs	r3, #0
 8009472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009474:	e044      	b.n	8009500 <ILI9341_WriteChar8+0x3b0>
			// a ket szelet levagja 16bit-ig
			if ((px_idx > 0 || j >= trl) && (px_idx < 1 || j < 16-trr)){
 8009476:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800947a:	2b00      	cmp	r3, #0
 800947c:	d104      	bne.n	8009488 <ILI9341_WriteChar8+0x338>
 800947e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009484:	429a      	cmp	r2, r3
 8009486:	d838      	bhi.n	80094fa <ILI9341_WriteChar8+0x3aa>
 8009488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <ILI9341_WriteChar8+0x350>
 8009490:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009494:	f1c3 0310 	rsb	r3, r3, #16
 8009498:	461a      	mov	r2, r3
 800949a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800949c:	429a      	cmp	r2, r3
 800949e:	d92c      	bls.n	80094fa <ILI9341_WriteChar8+0x3aa>
				if((b << j) & 0x8000)  {
 80094a0:	69fa      	ldr	r2, [r7, #28]
 80094a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a4:	fa02 f303 	lsl.w	r3, r2, r3
 80094a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d012      	beq.n	80094d6 <ILI9341_WriteChar8+0x386>
					allData[line_nr++] = (color >> 8);
 80094b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	637a      	str	r2, [r7, #52]	; 0x34
 80094b6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80094ba:	0a12      	lsrs	r2, r2, #8
 80094bc:	b292      	uxth	r2, r2
 80094be:	b2d0      	uxtb	r0, r2
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	54d0      	strb	r0, [r2, r3]
					allData[line_nr++] = (color & 0xFF);
 80094c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	637a      	str	r2, [r7, #52]	; 0x34
 80094ca:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80094ce:	b2d0      	uxtb	r0, r2
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	54d0      	strb	r0, [r2, r3]
 80094d4:	e011      	b.n	80094fa <ILI9341_WriteChar8+0x3aa>
				} else {
					allData[line_nr++] = (bgcolor >> 8);
 80094d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	637a      	str	r2, [r7, #52]	; 0x34
 80094dc:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80094e0:	0a12      	lsrs	r2, r2, #8
 80094e2:	b292      	uxth	r2, r2
 80094e4:	b2d0      	uxtb	r0, r2
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	54d0      	strb	r0, [r2, r3]
					allData[line_nr++] = (bgcolor & 0xFF);
 80094ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	637a      	str	r2, [r7, #52]	; 0x34
 80094f0:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80094f4:	b2d0      	uxtb	r0, r2
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	54d0      	strb	r0, [r2, r3]
		for(j = 0; j < 16; j++) {
 80094fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094fc:	3301      	adds	r3, #1
 80094fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009502:	2b0f      	cmp	r3, #15
 8009504:	d9b7      	bls.n	8009476 <ILI9341_WriteChar8+0x326>
				}
			}
		}
		d_idx += 2;
 8009506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009508:	3302      	adds	r3, #2
 800950a:	64bb      	str	r3, [r7, #72]	; 0x48
		px_idx++;
 800950c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009510:	3301      	adds	r3, #1
 8009512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if(d_idx % nr_byte_in_line == 0){
 8009516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800951a:	fbb3 f2f2 	udiv	r2, r3, r2
 800951e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009520:	fb00 f202 	mul.w	r2, r0, r2
 8009524:	1a9b      	subs	r3, r3, r2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <ILI9341_WriteChar8+0x3e0>
			px_idx = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	for(h = 0; h < font_size_byte / 2; h++) {
 8009530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009532:	3301      	adds	r3, #1
 8009534:	647b      	str	r3, [r7, #68]	; 0x44
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	085a      	lsrs	r2, r3, #1
 800953a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800953c:	429a      	cmp	r2, r3
 800953e:	f63f af7c 	bhi.w	800943a <ILI9341_WriteChar8+0x2ea>
		}
	}

    ILI9341_WriteData(allData, sizeof(allData));
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	460a      	mov	r2, r1
 8009546:	4611      	mov	r1, r2
 8009548:	4618      	mov	r0, r3
 800954a:	f7ff fb4d 	bl	8008be8 <ILI9341_WriteData>
    return new_width;
 800954e:	8b7b      	ldrh	r3, [r7, #26]
 8009550:	46b5      	mov	sp, r6
}
 8009552:	4618      	mov	r0, r3
 8009554:	3754      	adds	r7, #84	; 0x54
 8009556:	46bd      	mov	sp, r7
 8009558:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800955c:	b002      	add	sp, #8
 800955e:	4770      	bx	lr
 8009560:	9999999a 	.word	0x9999999a
 8009564:	3fc99999 	.word	0x3fc99999

08009568 <ILI9341_WriteString8>:

void ILI9341_WriteString8(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8009568:	b082      	sub	sp, #8
 800956a:	b580      	push	{r7, lr}
 800956c:	b088      	sub	sp, #32
 800956e:	af04      	add	r7, sp, #16
 8009570:	603a      	str	r2, [r7, #0]
 8009572:	61fb      	str	r3, [r7, #28]
 8009574:	4603      	mov	r3, r0
 8009576:	80fb      	strh	r3, [r7, #6]
 8009578:	460b      	mov	r3, r1
 800957a:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 800957c:	f7ff faec 	bl	8008b58 <ILI9341_Select>
    uint16_t new_width;

    while(*str) {
 8009580:	e02f      	b.n	80095e2 <ILI9341_WriteString8+0x7a>
        if(x + font.width >= ILI9341_WIDTH) {
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	7f3a      	ldrb	r2, [r7, #28]
 8009586:	4413      	add	r3, r2
 8009588:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800958c:	db13      	blt.n	80095b6 <ILI9341_WriteString8+0x4e>
            x = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8009592:	7f7b      	ldrb	r3, [r7, #29]
 8009594:	b29a      	uxth	r2, r3
 8009596:	88bb      	ldrh	r3, [r7, #4]
 8009598:	4413      	add	r3, r2
 800959a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800959c:	88bb      	ldrh	r3, [r7, #4]
 800959e:	7f7a      	ldrb	r2, [r7, #29]
 80095a0:	4413      	add	r3, r2
 80095a2:	2bef      	cmp	r3, #239	; 0xef
 80095a4:	dc22      	bgt.n	80095ec <ILI9341_WriteString8+0x84>
                break;
            }

            if(*str == ' ') {
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	d103      	bne.n	80095b6 <ILI9341_WriteString8+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	3301      	adds	r3, #1
 80095b2:	603b      	str	r3, [r7, #0]
                continue;
 80095b4:	e015      	b.n	80095e2 <ILI9341_WriteString8+0x7a>
            }
        }

        new_width = ILI9341_WriteChar8(x, y, *str, font, color, bgcolor);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781a      	ldrb	r2, [r3, #0]
 80095ba:	88b9      	ldrh	r1, [r7, #4]
 80095bc:	88f8      	ldrh	r0, [r7, #6]
 80095be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095c0:	9302      	str	r3, [sp, #8]
 80095c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	f7ff fdc0 	bl	8009150 <ILI9341_WriteChar8>
 80095d0:	4603      	mov	r3, r0
 80095d2:	81fb      	strh	r3, [r7, #14]
        x += new_width; //font.width;
 80095d4:	88fa      	ldrh	r2, [r7, #6]
 80095d6:	89fb      	ldrh	r3, [r7, #14]
 80095d8:	4413      	add	r3, r2
 80095da:	80fb      	strh	r3, [r7, #6]
        str++;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	3301      	adds	r3, #1
 80095e0:	603b      	str	r3, [r7, #0]
    while(*str) {
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1cb      	bne.n	8009582 <ILI9341_WriteString8+0x1a>
 80095ea:	e000      	b.n	80095ee <ILI9341_WriteString8+0x86>
                break;
 80095ec:	bf00      	nop
    }

    ILI9341_Unselect();
 80095ee:	f7ff fabf 	bl	8008b70 <ILI9341_Unselect>
}
 80095f2:	bf00      	nop
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095fc:	b002      	add	sp, #8
 80095fe:	4770      	bx	lr

08009600 <ILI9341_FillRectangle>:


void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8009600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009604:	b086      	sub	sp, #24
 8009606:	af00      	add	r7, sp, #0
 8009608:	4606      	mov	r6, r0
 800960a:	4608      	mov	r0, r1
 800960c:	4611      	mov	r1, r2
 800960e:	461a      	mov	r2, r3
 8009610:	4633      	mov	r3, r6
 8009612:	80fb      	strh	r3, [r7, #6]
 8009614:	4603      	mov	r3, r0
 8009616:	80bb      	strh	r3, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	807b      	strh	r3, [r7, #2]
 800961c:	4613      	mov	r3, r2
 800961e:	803b      	strh	r3, [r7, #0]
 8009620:	466b      	mov	r3, sp
 8009622:	469a      	mov	sl, r3
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8009624:	88fb      	ldrh	r3, [r7, #6]
 8009626:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800962a:	f080 809c 	bcs.w	8009766 <ILI9341_FillRectangle+0x166>
 800962e:	88bb      	ldrh	r3, [r7, #4]
 8009630:	2bef      	cmp	r3, #239	; 0xef
 8009632:	f200 8098 	bhi.w	8009766 <ILI9341_FillRectangle+0x166>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8009636:	88fa      	ldrh	r2, [r7, #6]
 8009638:	887b      	ldrh	r3, [r7, #2]
 800963a:	4413      	add	r3, r2
 800963c:	3b01      	subs	r3, #1
 800963e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009642:	db03      	blt.n	800964c <ILI9341_FillRectangle+0x4c>
 8009644:	88fb      	ldrh	r3, [r7, #6]
 8009646:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800964a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 800964c:	88ba      	ldrh	r2, [r7, #4]
 800964e:	883b      	ldrh	r3, [r7, #0]
 8009650:	4413      	add	r3, r2
 8009652:	3b01      	subs	r3, #1
 8009654:	2bef      	cmp	r3, #239	; 0xef
 8009656:	dd03      	ble.n	8009660 <ILI9341_FillRectangle+0x60>
 8009658:	88bb      	ldrh	r3, [r7, #4]
 800965a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800965e:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8009660:	f7ff fa7a 	bl	8008b58 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8009664:	88fa      	ldrh	r2, [r7, #6]
 8009666:	887b      	ldrh	r3, [r7, #2]
 8009668:	4413      	add	r3, r2
 800966a:	b29b      	uxth	r3, r3
 800966c:	3b01      	subs	r3, #1
 800966e:	b29e      	uxth	r6, r3
 8009670:	88ba      	ldrh	r2, [r7, #4]
 8009672:	883b      	ldrh	r3, [r7, #0]
 8009674:	4413      	add	r3, r2
 8009676:	b29b      	uxth	r3, r3
 8009678:	3b01      	subs	r3, #1
 800967a:	b29b      	uxth	r3, r3
 800967c:	88b9      	ldrh	r1, [r7, #4]
 800967e:	88f8      	ldrh	r0, [r7, #6]
 8009680:	4632      	mov	r2, r6
 8009682:	f7ff faef 	bl	8008c64 <ILI9341_SetAddressWindow>
    uint16_t dlen = w * h * 2;
 8009686:	887a      	ldrh	r2, [r7, #2]
 8009688:	883b      	ldrh	r3, [r7, #0]
 800968a:	fb12 f303 	smulbb	r3, r2, r3
 800968e:	b29b      	uxth	r3, r3
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	82fb      	strh	r3, [r7, #22]
    if (dlen > 19200) dlen = 19200;
 8009694:	8afb      	ldrh	r3, [r7, #22]
 8009696:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800969a:	d902      	bls.n	80096a2 <ILI9341_FillRectangle+0xa2>
 800969c:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80096a0:	82fb      	strh	r3, [r7, #22]
    uint8_t data[dlen]; // = { color >> 8, color & 0xFF };
 80096a2:	8afe      	ldrh	r6, [r7, #22]
 80096a4:	4633      	mov	r3, r6
 80096a6:	3b01      	subs	r3, #1
 80096a8:	60fb      	str	r3, [r7, #12]
 80096aa:	b2b2      	uxth	r2, r6
 80096ac:	f04f 0300 	mov.w	r3, #0
 80096b0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80096b4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80096b8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80096bc:	b2b2      	uxth	r2, r6
 80096be:	f04f 0300 	mov.w	r3, #0
 80096c2:	00dd      	lsls	r5, r3, #3
 80096c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096c8:	00d4      	lsls	r4, r2, #3
 80096ca:	4633      	mov	r3, r6
 80096cc:	3307      	adds	r3, #7
 80096ce:	08db      	lsrs	r3, r3, #3
 80096d0:	00db      	lsls	r3, r3, #3
 80096d2:	ebad 0d03 	sub.w	sp, sp, r3
 80096d6:	466b      	mov	r3, sp
 80096d8:	3300      	adds	r3, #0
 80096da:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80096dc:	2201      	movs	r2, #1
 80096de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096e2:	4824      	ldr	r0, [pc, #144]	; (8009774 <ILI9341_FillRectangle+0x174>)
 80096e4:	f7f8 fc4c 	bl	8001f80 <HAL_GPIO_WritePin>
    uint32_t d_index = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	613b      	str	r3, [r7, #16]

    for(y = h; y > 0; y--) {
 80096ec:	883b      	ldrh	r3, [r7, #0]
 80096ee:	80bb      	strh	r3, [r7, #4]
 80096f0:	e02c      	b.n	800974c <ILI9341_FillRectangle+0x14c>
        for(x = w; x > 0; x--) {
 80096f2:	887b      	ldrh	r3, [r7, #2]
 80096f4:	80fb      	strh	r3, [r7, #6]
 80096f6:	e023      	b.n	8009740 <ILI9341_FillRectangle+0x140>
        	data[d_index++] = (color >> 8);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	613a      	str	r2, [r7, #16]
 80096fe:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009700:	0a12      	lsrs	r2, r2, #8
 8009702:	b292      	uxth	r2, r2
 8009704:	b2d1      	uxtb	r1, r2
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	54d1      	strb	r1, [r2, r3]
        	data[d_index++] = (color & 0xFF);
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	613a      	str	r2, [r7, #16]
 8009710:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009712:	b2d1      	uxtb	r1, r2
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	54d1      	strb	r1, [r2, r3]
            if ((d_index % dlen) == 0){
 8009718:	8afa      	ldrh	r2, [r7, #22]
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009720:	fb02 f201 	mul.w	r2, r2, r1
 8009724:	1a9b      	subs	r3, r3, r2
 8009726:	2b00      	cmp	r3, #0
 8009728:	d107      	bne.n	800973a <ILI9341_FillRectangle+0x13a>
            	ILI9341_WriteData(data, sizeof(data));
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	4632      	mov	r2, r6
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff fa59 	bl	8008be8 <ILI9341_WriteData>
            	d_index = 0;
 8009736:	2300      	movs	r3, #0
 8009738:	613b      	str	r3, [r7, #16]
        for(x = w; x > 0; x--) {
 800973a:	88fb      	ldrh	r3, [r7, #6]
 800973c:	3b01      	subs	r3, #1
 800973e:	80fb      	strh	r3, [r7, #6]
 8009740:	88fb      	ldrh	r3, [r7, #6]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1d8      	bne.n	80096f8 <ILI9341_FillRectangle+0xf8>
    for(y = h; y > 0; y--) {
 8009746:	88bb      	ldrh	r3, [r7, #4]
 8009748:	3b01      	subs	r3, #1
 800974a:	80bb      	strh	r3, [r7, #4]
 800974c:	88bb      	ldrh	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1cf      	bne.n	80096f2 <ILI9341_FillRectangle+0xf2>
            }
        }
    }
    ILI9341_WriteData(data, sizeof(data));
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4632      	mov	r2, r6
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff fa45 	bl	8008be8 <ILI9341_WriteData>
    ILI9341_Unselect();
 800975e:	f7ff fa07 	bl	8008b70 <ILI9341_Unselect>
 8009762:	46d5      	mov	sp, sl
 8009764:	e001      	b.n	800976a <ILI9341_FillRectangle+0x16a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8009766:	bf00      	nop
 8009768:	46d5      	mov	sp, sl
}
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009772:	bf00      	nop
 8009774:	40020c00 	.word	0x40020c00

08009778 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af02      	add	r7, sp, #8
 800977e:	4603      	mov	r3, r0
 8009780:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	23f0      	movs	r3, #240	; 0xf0
 8009788:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800978c:	2100      	movs	r1, #0
 800978e:	2000      	movs	r0, #0
 8009790:	f7ff ff36 	bl	8009600 <ILI9341_FillRectangle>
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <ILI9341_WriteChar_2>:
    ILI9341_Select();
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_Unselect();
}

void ILI9341_WriteChar_2(uint16_t x, uint16_t y, uint8_t number, FontDef font, uint16_t color, uint16_t bgcolor) {
 800979c:	b082      	sub	sp, #8
 800979e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a2:	b08a      	sub	sp, #40	; 0x28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097a8:	4603      	mov	r3, r0
 80097aa:	80fb      	strh	r3, [r7, #6]
 80097ac:	460b      	mov	r3, r1
 80097ae:	80bb      	strh	r3, [r7, #4]
 80097b0:	4613      	mov	r3, r2
 80097b2:	70fb      	strb	r3, [r7, #3]
 80097b4:	466b      	mov	r3, sp
 80097b6:	469a      	mov	sl, r3

	const uint16_t * fdata = &font.data[number * ((font.width / 8) * font.height)];
 80097b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097ba:	78fb      	ldrb	r3, [r7, #3]
 80097bc:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 80097c0:	08c9      	lsrs	r1, r1, #3
 80097c2:	b2c9      	uxtb	r1, r1
 80097c4:	f897 004d 	ldrb.w	r0, [r7, #77]	; 0x4d
 80097c8:	fb00 f101 	mul.w	r1, r0, r1
 80097cc:	fb01 f303 	mul.w	r3, r1, r3
 80097d0:	005b      	lsls	r3, r3, #1
 80097d2:	4413      	add	r3, r2
 80097d4:	61bb      	str	r3, [r7, #24]

	ILI9341_Select();
 80097d6:	f7ff f9bf 	bl	8008b58 <ILI9341_Select>
    if(x + font.width >= ILI9341_WIDTH) {
 80097da:	88fb      	ldrh	r3, [r7, #6]
 80097dc:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80097e0:	4413      	add	r3, r2
 80097e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80097e6:	db0e      	blt.n	8009806 <ILI9341_WriteChar_2+0x6a>
        x = 0;
 80097e8:	2300      	movs	r3, #0
 80097ea:	80fb      	strh	r3, [r7, #6]
        y += font.height;
 80097ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	88bb      	ldrh	r3, [r7, #4]
 80097f4:	4413      	add	r3, r2
 80097f6:	80bb      	strh	r3, [r7, #4]
        if(y + font.height >= ILI9341_HEIGHT) {
 80097f8:	88bb      	ldrh	r3, [r7, #4]
 80097fa:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80097fe:	4413      	add	r3, r2
 8009800:	2bef      	cmp	r3, #239	; 0xef
 8009802:	f300 8094 	bgt.w	800992e <ILI9341_WriteChar_2+0x192>
            return;
        }
    }

    uint32_t  b, j, k;
    uint32_t line_nr = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	61fb      	str	r3, [r7, #28]

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800980a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800980e:	b29a      	uxth	r2, r3
 8009810:	88fb      	ldrh	r3, [r7, #6]
 8009812:	4413      	add	r3, r2
 8009814:	b29b      	uxth	r3, r3
 8009816:	3b01      	subs	r3, #1
 8009818:	b29e      	uxth	r6, r3
 800981a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800981e:	b29a      	uxth	r2, r3
 8009820:	88bb      	ldrh	r3, [r7, #4]
 8009822:	4413      	add	r3, r2
 8009824:	b29b      	uxth	r3, r3
 8009826:	3b01      	subs	r3, #1
 8009828:	b29b      	uxth	r3, r3
 800982a:	88b9      	ldrh	r1, [r7, #4]
 800982c:	88f8      	ldrh	r0, [r7, #6]
 800982e:	4632      	mov	r2, r6
 8009830:	f7ff fa18 	bl	8008c64 <ILI9341_SetAddressWindow>
    uint8_t allData[(font.width * font.height) * 2];
 8009834:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009838:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800983c:	fb02 f303 	mul.w	r3, r2, r3
 8009840:	0059      	lsls	r1, r3, #1
 8009842:	1e4b      	subs	r3, r1, #1
 8009844:	617b      	str	r3, [r7, #20]
 8009846:	460b      	mov	r3, r1
 8009848:	461a      	mov	r2, r3
 800984a:	f04f 0300 	mov.w	r3, #0
 800984e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8009852:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8009856:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800985a:	460b      	mov	r3, r1
 800985c:	461a      	mov	r2, r3
 800985e:	f04f 0300 	mov.w	r3, #0
 8009862:	00dd      	lsls	r5, r3, #3
 8009864:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009868:	00d4      	lsls	r4, r2, #3
 800986a:	460b      	mov	r3, r1
 800986c:	3307      	adds	r3, #7
 800986e:	08db      	lsrs	r3, r3, #3
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	ebad 0d03 	sub.w	sp, sp, r3
 8009876:	466b      	mov	r3, sp
 8009878:	3300      	adds	r3, #0
 800987a:	613b      	str	r3, [r7, #16]

    uint32_t byte_len = (font.width / 8) * font.height;
 800987c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009880:	08db      	lsrs	r3, r3, #3
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8009888:	fb02 f303 	mul.w	r3, r2, r3
 800988c:	60fb      	str	r3, [r7, #12]
	for(j = 0; j < byte_len; j++) {
 800988e:	2300      	movs	r3, #0
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
 8009892:	e03e      	b.n	8009912 <ILI9341_WriteChar_2+0x176>
		b = fdata[j];
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	4413      	add	r3, r2
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	60bb      	str	r3, [r7, #8]
		for(k = 0; k < 8; k++) {
 80098a0:	2300      	movs	r3, #0
 80098a2:	623b      	str	r3, [r7, #32]
 80098a4:	e02f      	b.n	8009906 <ILI9341_WriteChar_2+0x16a>
			if((b << k) & 0x80)  {
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	fa02 f303 	lsl.w	r3, r2, r3
 80098ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d012      	beq.n	80098dc <ILI9341_WriteChar_2+0x140>
				allData[line_nr++] = (color >> 8);
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	61fa      	str	r2, [r7, #28]
 80098bc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80098c0:	0a12      	lsrs	r2, r2, #8
 80098c2:	b292      	uxth	r2, r2
 80098c4:	b2d0      	uxtb	r0, r2
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	54d0      	strb	r0, [r2, r3]
				allData[line_nr++] = (color & 0xFF);
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	1c5a      	adds	r2, r3, #1
 80098ce:	61fa      	str	r2, [r7, #28]
 80098d0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80098d4:	b2d0      	uxtb	r0, r2
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	54d0      	strb	r0, [r2, r3]
 80098da:	e011      	b.n	8009900 <ILI9341_WriteChar_2+0x164>
			} else {
				allData[line_nr++] = (bgcolor >> 8);
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	61fa      	str	r2, [r7, #28]
 80098e2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80098e6:	0a12      	lsrs	r2, r2, #8
 80098e8:	b292      	uxth	r2, r2
 80098ea:	b2d0      	uxtb	r0, r2
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	54d0      	strb	r0, [r2, r3]
				allData[line_nr++] = (bgcolor & 0xFF);
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	61fa      	str	r2, [r7, #28]
 80098f6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80098fa:	b2d0      	uxtb	r0, r2
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	54d0      	strb	r0, [r2, r3]
		for(k = 0; k < 8; k++) {
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	3301      	adds	r3, #1
 8009904:	623b      	str	r3, [r7, #32]
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	2b07      	cmp	r3, #7
 800990a:	d9cc      	bls.n	80098a6 <ILI9341_WriteChar_2+0x10a>
	for(j = 0; j < byte_len; j++) {
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	3301      	adds	r3, #1
 8009910:	627b      	str	r3, [r7, #36]	; 0x24
 8009912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	429a      	cmp	r2, r3
 8009918:	d3bc      	bcc.n	8009894 <ILI9341_WriteChar_2+0xf8>
			}
		}
	}

    ILI9341_WriteData(allData, sizeof(allData));
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	460a      	mov	r2, r1
 800991e:	4611      	mov	r1, r2
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff f961 	bl	8008be8 <ILI9341_WriteData>
    ILI9341_Unselect();
 8009926:	f7ff f923 	bl	8008b70 <ILI9341_Unselect>
 800992a:	46d5      	mov	sp, sl
 800992c:	e001      	b.n	8009932 <ILI9341_WriteChar_2+0x196>
            return;
 800992e:	bf00      	nop
 8009930:	46d5      	mov	sp, sl
}
 8009932:	3728      	adds	r7, #40	; 0x28
 8009934:	46bd      	mov	sp, r7
 8009936:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800993a:	b002      	add	sp, #8
 800993c:	4770      	bx	lr
	...

08009940 <ILI9341_WriteNumber_float>:

void ILI9341_WriteNumber_float(uint16_t x, uint16_t y, uint32_t number_left, uint32_t number_right, uint8_t nr_digit, uint8_t nr_digit_left, FontDef font, uint16_t color, uint16_t bgcolor){
 8009940:	b5b0      	push	{r4, r5, r7, lr}
 8009942:	b08c      	sub	sp, #48	; 0x30
 8009944:	af06      	add	r7, sp, #24
 8009946:	60ba      	str	r2, [r7, #8]
 8009948:	607b      	str	r3, [r7, #4]
 800994a:	4603      	mov	r3, r0
 800994c:	81fb      	strh	r3, [r7, #14]
 800994e:	460b      	mov	r3, r1
 8009950:	81bb      	strh	r3, [r7, #12]

//	uint8_t nrs[10];
//    uint8_t nrs_count = 0;
    uint16_t start_pos_x = x;
 8009952:	89fb      	ldrh	r3, [r7, #14]
 8009954:	827b      	strh	r3, [r7, #18]
    x = font.width * nr_digit;
 8009956:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800995a:	b29a      	uxth	r2, r3
 800995c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009960:	b29b      	uxth	r3, r3
 8009962:	fb12 f303 	smulbb	r3, r2, r3
 8009966:	81fb      	strh	r3, [r7, #14]
    uint32_t number_l = number_left;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	617b      	str	r3, [r7, #20]

    while(number_l) {
 800996c:	e01a      	b.n	80099a4 <ILI9341_WriteNumber_float+0x64>
        if(x + font.width >= ILI9341_WIDTH) {
 800996e:	89fb      	ldrh	r3, [r7, #14]
 8009970:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009974:	4413      	add	r3, r2
 8009976:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800997a:	db0d      	blt.n	8009998 <ILI9341_WriteNumber_float+0x58>
            x = 0;
 800997c:	2300      	movs	r3, #0
 800997e:	81fb      	strh	r3, [r7, #14]
            y += font.height;
 8009980:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009984:	b29a      	uxth	r2, r3
 8009986:	89bb      	ldrh	r3, [r7, #12]
 8009988:	4413      	add	r3, r2
 800998a:	81bb      	strh	r3, [r7, #12]
            if(y + font.height >= ILI9341_HEIGHT) {
 800998c:	89bb      	ldrh	r3, [r7, #12]
 800998e:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8009992:	4413      	add	r3, r2
 8009994:	2bef      	cmp	r3, #239	; 0xef
 8009996:	dc09      	bgt.n	80099ac <ILI9341_WriteNumber_float+0x6c>
                break;
            }
        }
//        nrs[nrs_count++] = number_l % 10;
        number_l /= 10;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	4a31      	ldr	r2, [pc, #196]	; (8009a60 <ILI9341_WriteNumber_float+0x120>)
 800999c:	fba2 2303 	umull	r2, r3, r2, r3
 80099a0:	08db      	lsrs	r3, r3, #3
 80099a2:	617b      	str	r3, [r7, #20]
    while(number_l) {
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e1      	bne.n	800996e <ILI9341_WriteNumber_float+0x2e>
 80099aa:	e000      	b.n	80099ae <ILI9341_WriteNumber_float+0x6e>
                break;
 80099ac:	bf00      	nop
    }

	ILI9341_WriteNumber(start_pos_x, y, number_left, nr_digit, nr_digit, angelcode_28x47_7seg, color, ILI9341_BLACK);
 80099ae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80099b2:	89bd      	ldrh	r5, [r7, #12]
 80099b4:	8a7c      	ldrh	r4, [r7, #18]
 80099b6:	2300      	movs	r3, #0
 80099b8:	9304      	str	r3, [sp, #16]
 80099ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80099bc:	9303      	str	r3, [sp, #12]
 80099be:	4929      	ldr	r1, [pc, #164]	; (8009a64 <ILI9341_WriteNumber_float+0x124>)
 80099c0:	ab01      	add	r3, sp, #4
 80099c2:	c903      	ldmia	r1, {r0, r1}
 80099c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80099c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	4613      	mov	r3, r2
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	4629      	mov	r1, r5
 80099d4:	4620      	mov	r0, r4
 80099d6:	f000 f847 	bl	8009a68 <ILI9341_WriteNumber>
	uint16_t rx = start_pos_x + x;
 80099da:	8a7a      	ldrh	r2, [r7, #18]
 80099dc:	89fb      	ldrh	r3, [r7, #14]
 80099de:	4413      	add	r3, r2
 80099e0:	823b      	strh	r3, [r7, #16]
	if (number_right > 0){
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d032      	beq.n	8009a4e <ILI9341_WriteNumber_float+0x10e>
		ILI9341_WriteNumber(rx, y, number_right, 2, 0, angelcode_28x47_7seg, color, ILI9341_BLACK);
 80099e8:	89bd      	ldrh	r5, [r7, #12]
 80099ea:	8a3c      	ldrh	r4, [r7, #16]
 80099ec:	2300      	movs	r3, #0
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	4a1b      	ldr	r2, [pc, #108]	; (8009a64 <ILI9341_WriteNumber_float+0x124>)
 80099f6:	ab01      	add	r3, sp, #4
 80099f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8009a00:	2300      	movs	r3, #0
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2302      	movs	r3, #2
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f000 f82c 	bl	8009a68 <ILI9341_WriteNumber>
			x = rx + (nr_digit_left * font.width);
			ILI9341_WriteChar_2(x, y, 0, angelcode_28x47_7seg, color, ILI9341_BLACK);
		}
	}

}
 8009a10:	e021      	b.n	8009a56 <ILI9341_WriteNumber_float+0x116>
			nr_digit_left --;
 8009a12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a16:	3b01      	subs	r3, #1
 8009a18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			x = rx + (nr_digit_left * font.width);
 8009a1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	fb12 f303 	smulbb	r3, r2, r3
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	8a3b      	ldrh	r3, [r7, #16]
 8009a30:	4413      	add	r3, r2
 8009a32:	81fb      	strh	r3, [r7, #14]
			ILI9341_WriteChar_2(x, y, 0, angelcode_28x47_7seg, color, ILI9341_BLACK);
 8009a34:	4b0b      	ldr	r3, [pc, #44]	; (8009a64 <ILI9341_WriteNumber_float+0x124>)
 8009a36:	89b9      	ldrh	r1, [r7, #12]
 8009a38:	89f8      	ldrh	r0, [r7, #14]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	9202      	str	r2, [sp, #8]
 8009a3e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009a40:	9201      	str	r2, [sp, #4]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	9200      	str	r2, [sp, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f7ff fea7 	bl	800979c <ILI9341_WriteChar_2>
		while(nr_digit_left){
 8009a4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1dd      	bne.n	8009a12 <ILI9341_WriteNumber_float+0xd2>
}
 8009a56:	bf00      	nop
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	cccccccd 	.word	0xcccccccd
 8009a64:	20000038 	.word	0x20000038

08009a68 <ILI9341_WriteNumber>:

void ILI9341_WriteNumber(uint16_t x, uint16_t y, uint32_t number, uint8_t nr_digit, uint8_t dp_pos, FontDef font, uint16_t color, uint16_t bgcolor) {
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08e      	sub	sp, #56	; 0x38
 8009a6c:	af04      	add	r7, sp, #16
 8009a6e:	60ba      	str	r2, [r7, #8]
 8009a70:	461a      	mov	r2, r3
 8009a72:	4603      	mov	r3, r0
 8009a74:	81fb      	strh	r3, [r7, #14]
 8009a76:	460b      	mov	r3, r1
 8009a78:	81bb      	strh	r3, [r7, #12]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	71fb      	strb	r3, [r7, #7]
    ILI9341_Select();
 8009a7e:	f7ff f86b 	bl	8008b58 <ILI9341_Select>

    uint8_t nrs[10];
    uint8_t nrs_count = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t start_pos_x = x;
 8009a88:	89fb      	ldrh	r3, [r7, #14]
 8009a8a:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint8_t hide_count;

    x = font.width * nr_digit;
 8009a8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	fb12 f303 	smulbb	r3, r2, r3
 8009a9a:	81fb      	strh	r3, [r7, #14]
    if(number > 0){
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d071      	beq.n	8009b86 <ILI9341_WriteNumber+0x11e>
		while(number) {
 8009aa2:	e030      	b.n	8009b06 <ILI9341_WriteNumber+0x9e>
			if(x + font.width >= ILI9341_WIDTH) {
 8009aa4:	89fb      	ldrh	r3, [r7, #14]
 8009aa6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8009aaa:	4413      	add	r3, r2
 8009aac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009ab0:	db0d      	blt.n	8009ace <ILI9341_WriteNumber+0x66>
				x = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	81fb      	strh	r3, [r7, #14]
				y += font.height;
 8009ab6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	89bb      	ldrh	r3, [r7, #12]
 8009abe:	4413      	add	r3, r2
 8009ac0:	81bb      	strh	r3, [r7, #12]
				if(y + font.height >= ILI9341_HEIGHT) {
 8009ac2:	89bb      	ldrh	r3, [r7, #12]
 8009ac4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009ac8:	4413      	add	r3, r2
 8009aca:	2bef      	cmp	r3, #239	; 0xef
 8009acc:	dc1f      	bgt.n	8009b0e <ILI9341_WriteNumber+0xa6>
					break;
				}
			}
			nrs[nrs_count++] = number % 10;
 8009ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8009ad8:	4618      	mov	r0, r3
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	4b69      	ldr	r3, [pc, #420]	; (8009c84 <ILI9341_WriteNumber+0x21c>)
 8009ade:	fba3 2301 	umull	r2, r3, r3, r1
 8009ae2:	08da      	lsrs	r2, r3, #3
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	1aca      	subs	r2, r1, r3
 8009aee:	b2d2      	uxtb	r2, r2
 8009af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009af4:	4403      	add	r3, r0
 8009af6:	f803 2c14 	strb.w	r2, [r3, #-20]
			number /= 10;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	4a61      	ldr	r2, [pc, #388]	; (8009c84 <ILI9341_WriteNumber+0x21c>)
 8009afe:	fba2 2303 	umull	r2, r3, r2, r3
 8009b02:	08db      	lsrs	r3, r3, #3
 8009b04:	60bb      	str	r3, [r7, #8]
		while(number) {
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1cb      	bne.n	8009aa4 <ILI9341_WriteNumber+0x3c>
 8009b0c:	e000      	b.n	8009b10 <ILI9341_WriteNumber+0xa8>
					break;
 8009b0e:	bf00      	nop
		}

		x = font.width * (nr_digit - nrs_count);
 8009b10:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	79f9      	ldrb	r1, [r7, #7]
 8009b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b1c:	1acb      	subs	r3, r1, r3
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	fb12 f303 	smulbb	r3, r2, r3
 8009b24:	81fb      	strh	r3, [r7, #14]
		uint8_t nrs_count_disp = nrs_count;
 8009b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while(nrs_count_disp){
 8009b2e:	e01f      	b.n	8009b70 <ILI9341_WriteNumber+0x108>
			nrs_count_disp--;
 8009b30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b34:	3b01      	subs	r3, #1
 8009b36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			ILI9341_WriteChar_2(start_pos_x+x, y, nrs[nrs_count_disp], font, color, ILI9341_BLACK);
 8009b3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b3c:	89fb      	ldrh	r3, [r7, #14]
 8009b3e:	4413      	add	r3, r2
 8009b40:	b298      	uxth	r0, r3
 8009b42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8009b50:	89b9      	ldrh	r1, [r7, #12]
 8009b52:	2300      	movs	r3, #0
 8009b54:	9302      	str	r3, [sp, #8]
 8009b56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b60:	f7ff fe1c 	bl	800979c <ILI9341_WriteChar_2>
			x += font.width;
 8009b64:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	89fb      	ldrh	r3, [r7, #14]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	81fb      	strh	r3, [r7, #14]
		while(nrs_count_disp){
 8009b70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1db      	bne.n	8009b30 <ILI9341_WriteNumber+0xc8>
		}

		hide_count = nr_digit - nrs_count;
 8009b78:	79fa      	ldrb	r2, [r7, #7]
 8009b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b84:	e01b      	b.n	8009bbe <ILI9341_WriteNumber+0x156>
    }
    else{
    	x = start_pos_x + ((nr_digit - 1) * font.width);
 8009b86:	79fb      	ldrb	r3, [r7, #7]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	fb12 f303 	smulbb	r3, r2, r3
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b9a:	4413      	add	r3, r2
 8009b9c:	81fb      	strh	r3, [r7, #14]
    	ILI9341_WriteChar_2(x, y, 0, font, color, ILI9341_BLACK);
 8009b9e:	89b9      	ldrh	r1, [r7, #12]
 8009ba0:	89f8      	ldrh	r0, [r7, #14]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	9302      	str	r3, [sp, #8]
 8009ba6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f7ff fdf3 	bl	800979c <ILI9341_WriteChar_2>
    	hide_count = nr_digit - 1;
 8009bb6:	79fb      	ldrb	r3, [r7, #7]
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

	if (dp_pos > 0){
 8009bbe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d053      	beq.n	8009c6e <ILI9341_WriteNumber+0x206>
		uint8_t dpp = font.width * dp_pos;
 8009bc6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8009bca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009bce:	fb12 f303 	smulbb	r3, r2, r3
 8009bd2:	77fb      	strb	r3, [r7, #31]
		ILI9341_FillRectangle(start_pos_x+dpp-4, y+font.height-2, 4, 4, color);
 8009bd4:	7ffb      	ldrb	r3, [r7, #31]
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bda:	4413      	add	r3, r2
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	3b04      	subs	r3, #4
 8009be0:	b298      	uxth	r0, r3
 8009be2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	89bb      	ldrh	r3, [r7, #12]
 8009bea:	4413      	add	r3, r2
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3b02      	subs	r3, #2
 8009bf0:	b299      	uxth	r1, r3
 8009bf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	2304      	movs	r3, #4
 8009bf8:	2204      	movs	r2, #4
 8009bfa:	f7ff fd01 	bl	8009600 <ILI9341_FillRectangle>
	}

	while(hide_count){
 8009bfe:	e036      	b.n	8009c6e <ILI9341_WriteNumber+0x206>
		uint16_t hide_color;
		if (dp_pos == 0){
 8009c00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <ILI9341_WriteNumber+0x1a6>
			hide_color = color;
 8009c08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009c0a:	843b      	strh	r3, [r7, #32]
 8009c0c:	e002      	b.n	8009c14 <ILI9341_WriteNumber+0x1ac>
		}
		else{
			hide_color = ILI9341_COLOR565(25,58,0);
 8009c0e:	f44f 53ce 	mov.w	r3, #6592	; 0x19c0
 8009c12:	843b      	strh	r3, [r7, #32]
		}
		hide_count--;
 8009c14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//    	ILI9341_FillRectangle(start_pos_x, y, font.width, font.height, ILI9341_BLACK);
		ILI9341_WriteChar_2(start_pos_x, y, 0, font, hide_color, ILI9341_BLACK);
 8009c1e:	89b9      	ldrh	r1, [r7, #12]
 8009c20:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8009c22:	2300      	movs	r3, #0
 8009c24:	9302      	str	r3, [sp, #8]
 8009c26:	8c3b      	ldrh	r3, [r7, #32]
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c30:	2200      	movs	r2, #0
 8009c32:	f7ff fdb3 	bl	800979c <ILI9341_WriteChar_2>
		ILI9341_FillRectangle(start_pos_x+font.width-4, y+font.height-2, 4, 4, ILI9341_BLACK);
 8009c36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c3e:	4413      	add	r3, r2
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	3b04      	subs	r3, #4
 8009c44:	b298      	uxth	r0, r3
 8009c46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	89bb      	ldrh	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	3b02      	subs	r3, #2
 8009c54:	b299      	uxth	r1, r3
 8009c56:	2300      	movs	r3, #0
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	2304      	movs	r3, #4
 8009c5c:	2204      	movs	r2, #4
 8009c5e:	f7ff fccf 	bl	8009600 <ILI9341_FillRectangle>
		start_pos_x += font.width;
 8009c62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c6a:	4413      	add	r3, r2
 8009c6c:	84bb      	strh	r3, [r7, #36]	; 0x24
	while(hide_count){
 8009c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1c4      	bne.n	8009c00 <ILI9341_WriteNumber+0x198>
	}

    ILI9341_Unselect();
 8009c76:	f7fe ff7b 	bl	8008b70 <ILI9341_Unselect>
}
 8009c7a:	bf00      	nop
 8009c7c:	3728      	adds	r7, #40	; 0x28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	cccccccd 	.word	0xcccccccd

08009c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009c8c:	f7f7 f89a 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009c90:	f000 f856 	bl	8009d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009c94:	f000 fb1a 	bl	800a2cc <MX_GPIO_Init>
  MX_DMA_Init();
 8009c98:	f000 f998 	bl	8009fcc <MX_DMA_Init>
  MX_I2C1_Init();
 8009c9c:	f000 f8d4 	bl	8009e48 <MX_I2C1_Init>
  MX_I2S2_Init();
 8009ca0:	f000 f900 	bl	8009ea4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8009ca4:	f000 f92c 	bl	8009f00 <MX_I2S3_Init>
//  MX_SPI1_Init();
  MX_USB_HOST_Init();
 8009ca8:	f001 fcde 	bl	800b668 <MX_USB_HOST_Init>
  MX_SPI4_Init();
 8009cac:	f000 f958 	bl	8009f60 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  ILI_Init();
 8009cb0:	f000 fc74 	bl	800a59c <ILI_Init>
  MX_TIM1_Init();
 8009cb4:	f000 f9aa 	bl	800a00c <MX_TIM1_Init>
  MX_TIM2_Init();
 8009cb8:	f000 fa02 	bl	800a0c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009cbc:	f000 fa58 	bl	800a170 <MX_TIM3_Init>
  MX_TIM4_Init();
 8009cc0:	f000 faac 	bl	800a21c <MX_TIM4_Init>
  FLASH_init();
 8009cc4:	f000 fc3d 	bl	800a542 <FLASH_init>
  init_stepperdrive();
 8009cc8:	f000 ff5c 	bl	800ab84 <init_stepperdrive>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_display();
 8009ccc:	f000 fc6c 	bl	800a5a8 <init_display>
  GPIO_PinState button_state;

  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8009cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009cd4:	4819      	ldr	r0, [pc, #100]	; (8009d3c <main+0xb4>)
 8009cd6:	f7f8 f96c 	bl	8001fb2 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 8009cda:	2064      	movs	r0, #100	; 0x64
 8009cdc:	f7f7 f8e4 	bl	8000ea8 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8009ce0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009ce4:	4815      	ldr	r0, [pc, #84]	; (8009d3c <main+0xb4>)
 8009ce6:	f7f8 f964 	bl	8001fb2 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 8009cea:	2064      	movs	r0, #100	; 0x64
 8009cec:	f7f7 f8dc 	bl	8000ea8 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8009cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009cf4:	4811      	ldr	r0, [pc, #68]	; (8009d3c <main+0xb4>)
 8009cf6:	f7f8 f95c 	bl	8001fb2 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 8009cfa:	2064      	movs	r0, #100	; 0x64
 8009cfc:	f7f7 f8d4 	bl	8000ea8 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8009d00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009d04:	480d      	ldr	r0, [pc, #52]	; (8009d3c <main+0xb4>)
 8009d06:	f7f8 f954 	bl	8001fb2 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 8009d0a:	2064      	movs	r0, #100	; 0x64
 8009d0c:	f7f7 f8cc 	bl	8000ea8 <HAL_Delay>
//  __HAL_TIM_SetAutoreload(&htim3, 20);

  data_init();
 8009d10:	f000 fc52 	bl	800a5b8 <data_init>

//  uint16_t delay_val = 65500;
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8009d14:	f001 fcce 	bl	800b6b4 <MX_USB_HOST_Process>
//	encoder_pos_raw = __HAL_TIM_GetCounter(&htim2);
//	snprintf(disp_str, sizeof(disp_str), "%10lu", (encoder_pos_raw));
//	ILI9341_WriteString(0, 0, disp_str, Font_16x26, ILI9341_BLACK, ILI9341_WHITE);

//    menu_value = getMenuValue(menu_1);
    display_menu(!HAL_GPIO_ReadPin(GPIOD, ENCODER_BUTTON_Pin));
 8009d18:	2101      	movs	r1, #1
 8009d1a:	4808      	ldr	r0, [pc, #32]	; (8009d3c <main+0xb4>)
 8009d1c:	f7f8 f918 	bl	8001f50 <HAL_GPIO_ReadPin>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	bf0c      	ite	eq
 8009d26:	2301      	moveq	r3, #1
 8009d28:	2300      	movne	r3, #0
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 feb7 	bl	800aaa0 <display_menu>
    HAL_Delay(100);
 8009d32:	2064      	movs	r0, #100	; 0x64
 8009d34:	f7f7 f8b8 	bl	8000ea8 <HAL_Delay>
    MX_USB_HOST_Process();
 8009d38:	e7ec      	b.n	8009d14 <main+0x8c>
 8009d3a:	bf00      	nop
 8009d3c:	40020c00 	.word	0x40020c00

08009d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b09a      	sub	sp, #104	; 0x68
 8009d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009d4a:	2230      	movs	r2, #48	; 0x30
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 fff6 	bl	800bd40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	605a      	str	r2, [r3, #4]
 8009d5e:	609a      	str	r2, [r3, #8]
 8009d60:	60da      	str	r2, [r3, #12]
 8009d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009d64:	f107 030c 	add.w	r3, r7, #12
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	605a      	str	r2, [r3, #4]
 8009d6e:	609a      	str	r2, [r3, #8]
 8009d70:	60da      	str	r2, [r3, #12]
 8009d72:	611a      	str	r2, [r3, #16]
 8009d74:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d76:	2300      	movs	r3, #0
 8009d78:	60bb      	str	r3, [r7, #8]
 8009d7a:	4a31      	ldr	r2, [pc, #196]	; (8009e40 <SystemClock_Config+0x100>)
 8009d7c:	4b30      	ldr	r3, [pc, #192]	; (8009e40 <SystemClock_Config+0x100>)
 8009d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d84:	6413      	str	r3, [r2, #64]	; 0x40
 8009d86:	4b2e      	ldr	r3, [pc, #184]	; (8009e40 <SystemClock_Config+0x100>)
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d8e:	60bb      	str	r3, [r7, #8]
 8009d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d92:	2300      	movs	r3, #0
 8009d94:	607b      	str	r3, [r7, #4]
 8009d96:	4a2b      	ldr	r2, [pc, #172]	; (8009e44 <SystemClock_Config+0x104>)
 8009d98:	4b2a      	ldr	r3, [pc, #168]	; (8009e44 <SystemClock_Config+0x104>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	4b28      	ldr	r3, [pc, #160]	; (8009e44 <SystemClock_Config+0x104>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009daa:	607b      	str	r3, [r7, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009dae:	2301      	movs	r3, #1
 8009db0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009db8:	2302      	movs	r3, #2
 8009dba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009dbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009dc0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009dc2:	2304      	movs	r3, #4
 8009dc4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8009dc6:	23c0      	movs	r3, #192	; 0xc0
 8009dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8009dca:	2304      	movs	r3, #4
 8009dcc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8009dce:	2308      	movs	r3, #8
 8009dd0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009dd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fa fb4c 	bl	8004474 <HAL_RCC_OscConfig>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8009de2:	f000 fba7 	bl	800a534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009de6:	230f      	movs	r3, #15
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009dea:	2302      	movs	r3, #2
 8009dec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009dee:	2300      	movs	r3, #0
 8009df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009df2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009df6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8009dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e00:	2103      	movs	r1, #3
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fa fd78 	bl	80048f8 <HAL_RCC_ClockConfig>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8009e0e:	f000 fb91 	bl	800a534 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8009e12:	2301      	movs	r3, #1
 8009e14:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8009e16:	23c8      	movs	r3, #200	; 0xc8
 8009e18:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8009e1a:	2305      	movs	r3, #5
 8009e1c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009e1e:	2302      	movs	r3, #2
 8009e20:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e22:	f107 030c 	add.w	r3, r7, #12
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fa ff40 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8009e32:	f000 fb7f 	bl	800a534 <Error_Handler>
  }
}
 8009e36:	bf00      	nop
 8009e38:	3768      	adds	r7, #104	; 0x68
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	40023800 	.word	0x40023800
 8009e44:	40007000 	.word	0x40007000

08009e48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009e4c:	4b12      	ldr	r3, [pc, #72]	; (8009e98 <MX_I2C1_Init+0x50>)
 8009e4e:	4a13      	ldr	r2, [pc, #76]	; (8009e9c <MX_I2C1_Init+0x54>)
 8009e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009e52:	4b11      	ldr	r3, [pc, #68]	; (8009e98 <MX_I2C1_Init+0x50>)
 8009e54:	4a12      	ldr	r2, [pc, #72]	; (8009ea0 <MX_I2C1_Init+0x58>)
 8009e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009e58:	4b0f      	ldr	r3, [pc, #60]	; (8009e98 <MX_I2C1_Init+0x50>)
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009e5e:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <MX_I2C1_Init+0x50>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009e64:	4b0c      	ldr	r3, [pc, #48]	; (8009e98 <MX_I2C1_Init+0x50>)
 8009e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009e6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <MX_I2C1_Init+0x50>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009e72:	4b09      	ldr	r3, [pc, #36]	; (8009e98 <MX_I2C1_Init+0x50>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009e78:	4b07      	ldr	r3, [pc, #28]	; (8009e98 <MX_I2C1_Init+0x50>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009e7e:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <MX_I2C1_Init+0x50>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009e84:	4804      	ldr	r0, [pc, #16]	; (8009e98 <MX_I2C1_Init+0x50>)
 8009e86:	f7f9 fd2f 	bl	80038e8 <HAL_I2C_Init>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009e90:	f000 fb50 	bl	800a534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009e94:	bf00      	nop
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000188 	.word	0x20000188
 8009e9c:	40005400 	.word	0x40005400
 8009ea0:	000186a0 	.word	0x000186a0

08009ea4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8009ea8:	4b12      	ldr	r3, [pc, #72]	; (8009ef4 <MX_I2S2_Init+0x50>)
 8009eaa:	4a13      	ldr	r2, [pc, #76]	; (8009ef8 <MX_I2S2_Init+0x54>)
 8009eac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8009eae:	4b11      	ldr	r3, [pc, #68]	; (8009ef4 <MX_I2S2_Init+0x50>)
 8009eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009eb4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8009eb6:	4b0f      	ldr	r3, [pc, #60]	; (8009ef4 <MX_I2S2_Init+0x50>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8009ebc:	4b0d      	ldr	r3, [pc, #52]	; (8009ef4 <MX_I2S2_Init+0x50>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	; (8009ef4 <MX_I2S2_Init+0x50>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <MX_I2S2_Init+0x50>)
 8009eca:	4a0c      	ldr	r2, [pc, #48]	; (8009efc <MX_I2S2_Init+0x58>)
 8009ecc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8009ece:	4b09      	ldr	r3, [pc, #36]	; (8009ef4 <MX_I2S2_Init+0x50>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8009ed4:	4b07      	ldr	r3, [pc, #28]	; (8009ef4 <MX_I2S2_Init+0x50>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8009eda:	4b06      	ldr	r3, [pc, #24]	; (8009ef4 <MX_I2S2_Init+0x50>)
 8009edc:	2201      	movs	r2, #1
 8009ede:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8009ee0:	4804      	ldr	r0, [pc, #16]	; (8009ef4 <MX_I2S2_Init+0x50>)
 8009ee2:	f7f9 fe29 	bl	8003b38 <HAL_I2S_Init>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8009eec:	f000 fb22 	bl	800a534 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8009ef0:	bf00      	nop
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	200003ac 	.word	0x200003ac
 8009ef8:	40003800 	.word	0x40003800
 8009efc:	00017700 	.word	0x00017700

08009f00 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8009f04:	4b13      	ldr	r3, [pc, #76]	; (8009f54 <MX_I2S3_Init+0x54>)
 8009f06:	4a14      	ldr	r2, [pc, #80]	; (8009f58 <MX_I2S3_Init+0x58>)
 8009f08:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8009f0a:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <MX_I2S3_Init+0x54>)
 8009f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f10:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8009f12:	4b10      	ldr	r3, [pc, #64]	; (8009f54 <MX_I2S3_Init+0x54>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8009f18:	4b0e      	ldr	r3, [pc, #56]	; (8009f54 <MX_I2S3_Init+0x54>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8009f1e:	4b0d      	ldr	r3, [pc, #52]	; (8009f54 <MX_I2S3_Init+0x54>)
 8009f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f24:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8009f26:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <MX_I2S3_Init+0x54>)
 8009f28:	4a0c      	ldr	r2, [pc, #48]	; (8009f5c <MX_I2S3_Init+0x5c>)
 8009f2a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8009f2c:	4b09      	ldr	r3, [pc, #36]	; (8009f54 <MX_I2S3_Init+0x54>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8009f32:	4b08      	ldr	r3, [pc, #32]	; (8009f54 <MX_I2S3_Init+0x54>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8009f38:	4b06      	ldr	r3, [pc, #24]	; (8009f54 <MX_I2S3_Init+0x54>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8009f3e:	4805      	ldr	r0, [pc, #20]	; (8009f54 <MX_I2S3_Init+0x54>)
 8009f40:	f7f9 fdfa 	bl	8003b38 <HAL_I2S_Init>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8009f4a:	f000 faf3 	bl	800a534 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8009f4e:	bf00      	nop
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	200003f4 	.word	0x200003f4
 8009f58:	40003c00 	.word	0x40003c00
 8009f5c:	00017700 	.word	0x00017700

08009f60 <MX_SPI4_Init>:

/**
ILI9341 display interface
  */
static void MX_SPI4_Init(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8009f64:	4b17      	ldr	r3, [pc, #92]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009f66:	4a18      	ldr	r2, [pc, #96]	; (8009fc8 <MX_SPI4_Init+0x68>)
 8009f68:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8009f6a:	4b16      	ldr	r3, [pc, #88]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009f6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009f70:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8009f72:	4b14      	ldr	r3, [pc, #80]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8009f78:	4b12      	ldr	r3, [pc, #72]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f7e:	4b11      	ldr	r3, [pc, #68]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009f84:	4b0f      	ldr	r3, [pc, #60]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009f86:	2200      	movs	r2, #0
 8009f88:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8009f8a:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f90:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f92:	4b0c      	ldr	r3, [pc, #48]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009f98:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8009f9e:	4b09      	ldr	r3, [pc, #36]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fa4:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8009faa:	4b06      	ldr	r3, [pc, #24]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009fac:	220a      	movs	r2, #10
 8009fae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8009fb0:	4804      	ldr	r0, [pc, #16]	; (8009fc4 <MX_SPI4_Init+0x64>)
 8009fb2:	f7fa ffc9 	bl	8004f48 <HAL_SPI_Init>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8009fbc:	f000 faba 	bl	800a534 <Error_Handler>
  }

}
 8009fc0:	bf00      	nop
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	2000027c 	.word	0x2000027c
 8009fc8:	40013400 	.word	0x40013400

08009fcc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	607b      	str	r3, [r7, #4]
 8009fd6:	4a0c      	ldr	r2, [pc, #48]	; (800a008 <MX_DMA_Init+0x3c>)
 8009fd8:	4b0b      	ldr	r3, [pc, #44]	; (800a008 <MX_DMA_Init+0x3c>)
 8009fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8009fe2:	4b09      	ldr	r3, [pc, #36]	; (800a008 <MX_DMA_Init+0x3c>)
 8009fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fea:	607b      	str	r3, [r7, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	2039      	movs	r0, #57	; 0x39
 8009ff4:	f7f7 f853 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8009ff8:	2039      	movs	r0, #57	; 0x39
 8009ffa:	f7f7 f86c 	bl	80010d6 <HAL_NVIC_EnableIRQ>

}
 8009ffe:	bf00      	nop
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	40023800 	.word	0x40023800

0800a00c <MX_TIM1_Init>:

/**
Menu encoder
  */
static void MX_TIM1_Init(void)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08c      	sub	sp, #48	; 0x30
 800a010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a012:	f107 030c 	add.w	r3, r7, #12
 800a016:	2224      	movs	r2, #36	; 0x24
 800a018:	2100      	movs	r1, #0
 800a01a:	4618      	mov	r0, r3
 800a01c:	f001 fe90 	bl	800bd40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a020:	1d3b      	adds	r3, r7, #4
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a028:	4b23      	ldr	r3, [pc, #140]	; (800a0b8 <MX_TIM1_Init+0xac>)
 800a02a:	4a24      	ldr	r2, [pc, #144]	; (800a0bc <MX_TIM1_Init+0xb0>)
 800a02c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a02e:	4b22      	ldr	r3, [pc, #136]	; (800a0b8 <MX_TIM1_Init+0xac>)
 800a030:	2200      	movs	r2, #0
 800a032:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a034:	4b20      	ldr	r3, [pc, #128]	; (800a0b8 <MX_TIM1_Init+0xac>)
 800a036:	2200      	movs	r2, #0
 800a038:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800a03a:	4b1f      	ldr	r3, [pc, #124]	; (800a0b8 <MX_TIM1_Init+0xac>)
 800a03c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a040:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a042:	4b1d      	ldr	r3, [pc, #116]	; (800a0b8 <MX_TIM1_Init+0xac>)
 800a044:	2200      	movs	r2, #0
 800a046:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a048:	4b1b      	ldr	r3, [pc, #108]	; (800a0b8 <MX_TIM1_Init+0xac>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a04e:	4b1a      	ldr	r3, [pc, #104]	; (800a0b8 <MX_TIM1_Init+0xac>)
 800a050:	2200      	movs	r2, #0
 800a052:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a054:	2303      	movs	r3, #3
 800a056:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a058:	2300      	movs	r3, #0
 800a05a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a05c:	2301      	movs	r3, #1
 800a05e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a060:	2300      	movs	r3, #0
 800a062:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a064:	2300      	movs	r3, #0
 800a066:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a068:	2300      	movs	r3, #0
 800a06a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a06c:	2301      	movs	r3, #1
 800a06e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a070:	2300      	movs	r3, #0
 800a072:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800a078:	f107 030c 	add.w	r3, r7, #12
 800a07c:	4619      	mov	r1, r3
 800a07e:	480e      	ldr	r0, [pc, #56]	; (800a0b8 <MX_TIM1_Init+0xac>)
 800a080:	f7fb fc4b 	bl	800591a <HAL_TIM_Encoder_Init>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800a08a:	f000 fa53 	bl	800a534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a08e:	2300      	movs	r3, #0
 800a090:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a092:	2300      	movs	r3, #0
 800a094:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a096:	1d3b      	adds	r3, r7, #4
 800a098:	4619      	mov	r1, r3
 800a09a:	4807      	ldr	r0, [pc, #28]	; (800a0b8 <MX_TIM1_Init+0xac>)
 800a09c:	f7fb ffd0 	bl	8006040 <HAL_TIMEx_MasterConfigSynchronization>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d001      	beq.n	800a0aa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800a0a6:	f000 fa45 	bl	800a534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CR1 = 1;
 800a0aa:	4b04      	ldr	r3, [pc, #16]	; (800a0bc <MX_TIM1_Init+0xb0>)
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 800a0b0:	bf00      	nop
 800a0b2:	3730      	adds	r7, #48	; 0x30
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	200002d4 	.word	0x200002d4
 800a0bc:	40010000 	.word	0x40010000

0800a0c0 <MX_TIM2_Init>:

/**
Spindle position encoder
  */
static void MX_TIM2_Init(void)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08c      	sub	sp, #48	; 0x30
 800a0c4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800a0c6:	f107 030c 	add.w	r3, r7, #12
 800a0ca:	2224      	movs	r2, #36	; 0x24
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f001 fe36 	bl	800bd40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a0d4:	1d3b      	adds	r3, r7, #4
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800a0dc:	4b23      	ldr	r3, [pc, #140]	; (800a16c <MX_TIM2_Init+0xac>)
 800a0de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a0e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a0e4:	4b21      	ldr	r3, [pc, #132]	; (800a16c <MX_TIM2_Init+0xac>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0ea:	4b20      	ldr	r3, [pc, #128]	; (800a16c <MX_TIM2_Init+0xac>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x00FFFFFF;
 800a0f0:	4b1e      	ldr	r3, [pc, #120]	; (800a16c <MX_TIM2_Init+0xac>)
 800a0f2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800a0f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0f8:	4b1c      	ldr	r3, [pc, #112]	; (800a16c <MX_TIM2_Init+0xac>)
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0fe:	4b1b      	ldr	r3, [pc, #108]	; (800a16c <MX_TIM2_Init+0xac>)
 800a100:	2200      	movs	r2, #0
 800a102:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a104:	2303      	movs	r3, #3
 800a106:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a108:	2300      	movs	r3, #0
 800a10a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a10c:	2301      	movs	r3, #1
 800a10e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a110:	2300      	movs	r3, #0
 800a112:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800a114:	230a      	movs	r3, #10
 800a116:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a118:	2300      	movs	r3, #0
 800a11a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a11c:	2301      	movs	r3, #1
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a120:	2300      	movs	r3, #0
 800a122:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800a124:	230a      	movs	r3, #10
 800a126:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800a128:	f107 030c 	add.w	r3, r7, #12
 800a12c:	4619      	mov	r1, r3
 800a12e:	480f      	ldr	r0, [pc, #60]	; (800a16c <MX_TIM2_Init+0xac>)
 800a130:	f7fb fbf3 	bl	800591a <HAL_TIM_Encoder_Init>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800a13a:	f000 f9fb 	bl	800a534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a13e:	2300      	movs	r3, #0
 800a140:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a142:	2300      	movs	r3, #0
 800a144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a146:	1d3b      	adds	r3, r7, #4
 800a148:	4619      	mov	r1, r3
 800a14a:	4808      	ldr	r0, [pc, #32]	; (800a16c <MX_TIM2_Init+0xac>)
 800a14c:	f7fb ff78 	bl	8006040 <HAL_TIMEx_MasterConfigSynchronization>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800a156:	f000 f9ed 	bl	800a534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 = 1;
 800a15a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a15e:	2201      	movs	r2, #1
 800a160:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_Init 2 */

}
 800a162:	bf00      	nop
 800a164:	3730      	adds	r7, #48	; 0x30
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	2000036c 	.word	0x2000036c

0800a170 <MX_TIM3_Init>:

/**
Position update timer
  */
static void MX_TIM3_Init(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0

//  10us = 100000Hz

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a176:	f107 0308 	add.w	r3, r7, #8
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	605a      	str	r2, [r3, #4]
 800a180:	609a      	str	r2, [r3, #8]
 800a182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a184:	463b      	mov	r3, r7
 800a186:	2200      	movs	r2, #0
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800a18c:	4b21      	ldr	r3, [pc, #132]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a18e:	4a22      	ldr	r2, [pc, #136]	; (800a218 <MX_TIM3_Init+0xa8>)
 800a190:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 800a192:	4b20      	ldr	r3, [pc, #128]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a194:	2230      	movs	r2, #48	; 0x30
 800a196:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a198:	4b1e      	ldr	r3, [pc, #120]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 800a19e:	4b1d      	ldr	r3, [pc, #116]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a1a0:	220a      	movs	r2, #10
 800a1a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1a4:	4b1b      	ldr	r3, [pc, #108]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a1aa:	4b1a      	ldr	r3, [pc, #104]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a1ac:	2280      	movs	r2, #128	; 0x80
 800a1ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a1b0:	4818      	ldr	r0, [pc, #96]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a1b2:	f7fb fb63 	bl	800587c <HAL_TIM_Base_Init>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800a1bc:	f000 f9ba 	bl	800a534 <Error_Handler>
 800a1c0:	e007      	b.n	800a1d2 <MX_TIM3_Init+0x62>
  }
  else{
    // Clear the update interrupt flag during timer initialization to avoid interruption as soon as the timer starts
    __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 800a1c2:	4b14      	ldr	r3, [pc, #80]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f06f 0201 	mvn.w	r2, #1
 800a1ca:	611a      	str	r2, [r3, #16]
	/* Start the TIM time Base generation in interrupt mode */
	HAL_TIM_Base_Start_IT(&htim3);
 800a1cc:	4811      	ldr	r0, [pc, #68]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a1ce:	f7fb fb80 	bl	80058d2 <HAL_TIM_Base_Start_IT>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a1d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a1d8:	f107 0308 	add.w	r3, r7, #8
 800a1dc:	4619      	mov	r1, r3
 800a1de:	480d      	ldr	r0, [pc, #52]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a1e0:	f7fb fd35 	bl	8005c4e <HAL_TIM_ConfigClockSource>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800a1ea:	f000 f9a3 	bl	800a534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a1f6:	463b      	mov	r3, r7
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4806      	ldr	r0, [pc, #24]	; (800a214 <MX_TIM3_Init+0xa4>)
 800a1fc:	f7fb ff20 	bl	8006040 <HAL_TIMEx_MasterConfigSynchronization>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800a206:	f000 f995 	bl	800a534 <Error_Handler>
  }

}
 800a20a:	bf00      	nop
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	200001dc 	.word	0x200001dc
 800a218:	40000400 	.word	0x40000400

0800a21c <MX_TIM4_Init>:

/**
Spindle RPM Measuring 100 ms
  */
static void MX_TIM4_Init(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	605a      	str	r2, [r3, #4]
 800a22c:	609a      	str	r2, [r3, #8]
 800a22e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a230:	463b      	mov	r3, r7
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a238:	4b21      	ldr	r3, [pc, #132]	; (800a2c0 <MX_TIM4_Init+0xa4>)
 800a23a:	4a22      	ldr	r2, [pc, #136]	; (800a2c4 <MX_TIM4_Init+0xa8>)
 800a23c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000;
 800a23e:	4b20      	ldr	r3, [pc, #128]	; (800a2c0 <MX_TIM4_Init+0xa4>)
 800a240:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800a244:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a246:	4b1e      	ldr	r3, [pc, #120]	; (800a2c0 <MX_TIM4_Init+0xa4>)
 800a248:	2200      	movs	r2, #0
 800a24a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800a24c:	4b1c      	ldr	r3, [pc, #112]	; (800a2c0 <MX_TIM4_Init+0xa4>)
 800a24e:	2264      	movs	r2, #100	; 0x64
 800a250:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a252:	4b1b      	ldr	r3, [pc, #108]	; (800a2c0 <MX_TIM4_Init+0xa4>)
 800a254:	2200      	movs	r2, #0
 800a256:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a258:	4b19      	ldr	r3, [pc, #100]	; (800a2c0 <MX_TIM4_Init+0xa4>)
 800a25a:	2280      	movs	r2, #128	; 0x80
 800a25c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a25e:	4818      	ldr	r0, [pc, #96]	; (800a2c0 <MX_TIM4_Init+0xa4>)
 800a260:	f7fb fb0c 	bl	800587c <HAL_TIM_Base_Init>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800a26a:	f000 f963 	bl	800a534 <Error_Handler>
 800a26e:	e007      	b.n	800a280 <MX_TIM4_Init+0x64>
  }
  else{
    // Clear the update interrupt flag during timer initialization to avoid interruption as soon as the timer starts
    __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 800a270:	4b15      	ldr	r3, [pc, #84]	; (800a2c8 <MX_TIM4_Init+0xac>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f06f 0201 	mvn.w	r2, #1
 800a278:	611a      	str	r2, [r3, #16]
	/* Start the TIM time Base generation in interrupt mode */
	HAL_TIM_Base_Start_IT(&htim4);
 800a27a:	4811      	ldr	r0, [pc, #68]	; (800a2c0 <MX_TIM4_Init+0xa4>)
 800a27c:	f7fb fb29 	bl	80058d2 <HAL_TIM_Base_Start_IT>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a284:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a286:	f107 0308 	add.w	r3, r7, #8
 800a28a:	4619      	mov	r1, r3
 800a28c:	480c      	ldr	r0, [pc, #48]	; (800a2c0 <MX_TIM4_Init+0xa4>)
 800a28e:	f7fb fcde 	bl	8005c4e <HAL_TIM_ConfigClockSource>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800a298:	f000 f94c 	bl	800a534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a29c:	2300      	movs	r3, #0
 800a29e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a2a4:	463b      	mov	r3, r7
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4805      	ldr	r0, [pc, #20]	; (800a2c0 <MX_TIM4_Init+0xa4>)
 800a2aa:	f7fb fec9 	bl	8006040 <HAL_TIMEx_MasterConfigSynchronization>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800a2b4:	f000 f93e 	bl	800a534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a2b8:	bf00      	nop
 800a2ba:	3718      	adds	r7, #24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	20000148 	.word	0x20000148
 800a2c4:	40000800 	.word	0x40000800
 800a2c8:	200001dc 	.word	0x200001dc

0800a2cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08c      	sub	sp, #48	; 0x30
 800a2d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2d2:	f107 031c 	add.w	r3, r7, #28
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	605a      	str	r2, [r3, #4]
 800a2dc:	609a      	str	r2, [r3, #8]
 800a2de:	60da      	str	r2, [r3, #12]
 800a2e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	61bb      	str	r3, [r7, #24]
 800a2e6:	4a8d      	ldr	r2, [pc, #564]	; (800a51c <MX_GPIO_Init+0x250>)
 800a2e8:	4b8c      	ldr	r3, [pc, #560]	; (800a51c <MX_GPIO_Init+0x250>)
 800a2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ec:	f043 0310 	orr.w	r3, r3, #16
 800a2f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a2f2:	4b8a      	ldr	r3, [pc, #552]	; (800a51c <MX_GPIO_Init+0x250>)
 800a2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f6:	f003 0310 	and.w	r3, r3, #16
 800a2fa:	61bb      	str	r3, [r7, #24]
 800a2fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2fe:	2300      	movs	r3, #0
 800a300:	617b      	str	r3, [r7, #20]
 800a302:	4a86      	ldr	r2, [pc, #536]	; (800a51c <MX_GPIO_Init+0x250>)
 800a304:	4b85      	ldr	r3, [pc, #532]	; (800a51c <MX_GPIO_Init+0x250>)
 800a306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a308:	f043 0304 	orr.w	r3, r3, #4
 800a30c:	6313      	str	r3, [r2, #48]	; 0x30
 800a30e:	4b83      	ldr	r3, [pc, #524]	; (800a51c <MX_GPIO_Init+0x250>)
 800a310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a312:	f003 0304 	and.w	r3, r3, #4
 800a316:	617b      	str	r3, [r7, #20]
 800a318:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a31a:	2300      	movs	r3, #0
 800a31c:	613b      	str	r3, [r7, #16]
 800a31e:	4a7f      	ldr	r2, [pc, #508]	; (800a51c <MX_GPIO_Init+0x250>)
 800a320:	4b7e      	ldr	r3, [pc, #504]	; (800a51c <MX_GPIO_Init+0x250>)
 800a322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a328:	6313      	str	r3, [r2, #48]	; 0x30
 800a32a:	4b7c      	ldr	r3, [pc, #496]	; (800a51c <MX_GPIO_Init+0x250>)
 800a32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a332:	613b      	str	r3, [r7, #16]
 800a334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	4a78      	ldr	r2, [pc, #480]	; (800a51c <MX_GPIO_Init+0x250>)
 800a33c:	4b77      	ldr	r3, [pc, #476]	; (800a51c <MX_GPIO_Init+0x250>)
 800a33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a340:	f043 0301 	orr.w	r3, r3, #1
 800a344:	6313      	str	r3, [r2, #48]	; 0x30
 800a346:	4b75      	ldr	r3, [pc, #468]	; (800a51c <MX_GPIO_Init+0x250>)
 800a348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a352:	2300      	movs	r3, #0
 800a354:	60bb      	str	r3, [r7, #8]
 800a356:	4a71      	ldr	r2, [pc, #452]	; (800a51c <MX_GPIO_Init+0x250>)
 800a358:	4b70      	ldr	r3, [pc, #448]	; (800a51c <MX_GPIO_Init+0x250>)
 800a35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35c:	f043 0302 	orr.w	r3, r3, #2
 800a360:	6313      	str	r3, [r2, #48]	; 0x30
 800a362:	4b6e      	ldr	r3, [pc, #440]	; (800a51c <MX_GPIO_Init+0x250>)
 800a364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	60bb      	str	r3, [r7, #8]
 800a36c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a36e:	2300      	movs	r3, #0
 800a370:	607b      	str	r3, [r7, #4]
 800a372:	4a6a      	ldr	r2, [pc, #424]	; (800a51c <MX_GPIO_Init+0x250>)
 800a374:	4b69      	ldr	r3, [pc, #420]	; (800a51c <MX_GPIO_Init+0x250>)
 800a376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a378:	f043 0308 	orr.w	r3, r3, #8
 800a37c:	6313      	str	r3, [r2, #48]	; 0x30
 800a37e:	4b67      	ldr	r3, [pc, #412]	; (800a51c <MX_GPIO_Init+0x250>)
 800a380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a382:	f003 0308 	and.w	r3, r3, #8
 800a386:	607b      	str	r3, [r7, #4]
 800a388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800a38a:	2200      	movs	r2, #0
 800a38c:	2108      	movs	r1, #8
 800a38e:	4864      	ldr	r0, [pc, #400]	; (800a520 <MX_GPIO_Init+0x254>)
 800a390:	f7f7 fdf6 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a394:	2201      	movs	r2, #1
 800a396:	2101      	movs	r1, #1
 800a398:	4862      	ldr	r0, [pc, #392]	; (800a524 <MX_GPIO_Init+0x258>)
 800a39a:	f7f7 fdf1 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ILI_CS_Pin|ILI_RESET_Pin|ILI_LED_Pin|ILI_DC_RS_Pin
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f64f 7110 	movw	r1, #65296	; 0xff10
 800a3a4:	4860      	ldr	r0, [pc, #384]	; (800a528 <MX_GPIO_Init+0x25c>)
 800a3a6:	f7f7 fdeb 	bl	8001f80 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800a3aa:	2304      	movs	r3, #4
 800a3ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800a3b6:	f107 031c 	add.w	r3, r7, #28
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	4858      	ldr	r0, [pc, #352]	; (800a520 <MX_GPIO_Init+0x254>)
 800a3be:	f7f7 fc45 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800a3c2:	2308      	movs	r3, #8
 800a3c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800a3d2:	f107 031c 	add.w	r3, r7, #28
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4851      	ldr	r0, [pc, #324]	; (800a520 <MX_GPIO_Init+0x254>)
 800a3da:	f7f7 fc37 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800a3de:	2332      	movs	r3, #50	; 0x32
 800a3e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a3e2:	4b52      	ldr	r3, [pc, #328]	; (800a52c <MX_GPIO_Init+0x260>)
 800a3e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a3ea:	f107 031c 	add.w	r3, r7, #28
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	484b      	ldr	r0, [pc, #300]	; (800a520 <MX_GPIO_Init+0x254>)
 800a3f2:	f7f7 fc2b 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a402:	2300      	movs	r3, #0
 800a404:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a406:	f107 031c 	add.w	r3, r7, #28
 800a40a:	4619      	mov	r1, r3
 800a40c:	4845      	ldr	r0, [pc, #276]	; (800a524 <MX_GPIO_Init+0x258>)
 800a40e:	f7f7 fc1d 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a412:	2301      	movs	r3, #1
 800a414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a416:	4b45      	ldr	r3, [pc, #276]	; (800a52c <MX_GPIO_Init+0x260>)
 800a418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a41e:	f107 031c 	add.w	r3, r7, #28
 800a422:	4619      	mov	r1, r3
 800a424:	4842      	ldr	r0, [pc, #264]	; (800a530 <MX_GPIO_Init+0x264>)
 800a426:	f7f7 fc11 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI_CS_Pin ILI_RESET_Pin ILI_LED_Pin ILI_DC_RS_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = ILI_CS_Pin|ILI_RESET_Pin|ILI_LED_Pin|ILI_DC_RS_Pin
 800a42a:	f64f 7310 	movw	r3, #65296	; 0xff10
 800a42e:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a430:	2301      	movs	r3, #1
 800a432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a434:	2300      	movs	r3, #0
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a438:	2303      	movs	r3, #3
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a43c:	f107 031c 	add.w	r3, r7, #28
 800a440:	4619      	mov	r1, r3
 800a442:	4839      	ldr	r0, [pc, #228]	; (800a528 <MX_GPIO_Init+0x25c>)
 800a444:	f7f7 fc02 	bl	8001c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 800a448:	2301      	movs	r3, #1
 800a44a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a44c:	2300      	movs	r3, #0
 800a44e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a450:	2300      	movs	r3, #0
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a454:	f107 031c 	add.w	r3, r7, #28
 800a458:	4619      	mov	r1, r3
 800a45a:	4833      	ldr	r0, [pc, #204]	; (800a528 <MX_GPIO_Init+0x25c>)
 800a45c:	f7f7 fbf6 	bl	8001c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = NUTLOCK_OFF_LEFT_Pin;
 800a460:	2308      	movs	r3, #8
 800a462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a464:	2300      	movs	r3, #0
 800a466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a468:	2301      	movs	r3, #1
 800a46a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a46c:	f107 031c 	add.w	r3, r7, #28
 800a470:	4619      	mov	r1, r3
 800a472:	482d      	ldr	r0, [pc, #180]	; (800a528 <MX_GPIO_Init+0x25c>)
 800a474:	f7f7 fbea 	bl	8001c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = NUTLOCK_OFF_RIGHT_Pin;
 800a478:	2340      	movs	r3, #64	; 0x40
 800a47a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a47c:	2300      	movs	r3, #0
 800a47e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a480:	2301      	movs	r3, #1
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a484:	f107 031c 	add.w	r3, r7, #28
 800a488:	4619      	mov	r1, r3
 800a48a:	4827      	ldr	r0, [pc, #156]	; (800a528 <MX_GPIO_Init+0x25c>)
 800a48c:	f7f7 fbde 	bl	8001c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = STEPPER_STEP_Pin;
 800a490:	2302      	movs	r3, #2
 800a492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a494:	2301      	movs	r3, #1
 800a496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a49c:	2303      	movs	r3, #3
 800a49e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a4a0:	f107 031c 	add.w	r3, r7, #28
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4820      	ldr	r0, [pc, #128]	; (800a528 <MX_GPIO_Init+0x25c>)
 800a4a8:	f7f7 fbd0 	bl	8001c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = STEPPER_DIR_Pin;
 800a4ac:	2304      	movs	r3, #4
 800a4ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a4bc:	f107 031c 	add.w	r3, r7, #28
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4819      	ldr	r0, [pc, #100]	; (800a528 <MX_GPIO_Init+0x25c>)
 800a4c4:	f7f7 fbc2 	bl	8001c4c <HAL_GPIO_Init>

//encoder selection - spindle or handwheel
  GPIO_InitStruct.Pin = JOG_Pin;
 800a4c8:	2380      	movs	r3, #128	; 0x80
 800a4ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a4d8:	f107 031c 	add.w	r3, r7, #28
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4812      	ldr	r0, [pc, #72]	; (800a528 <MX_GPIO_Init+0x25c>)
 800a4e0:	f7f7 fbb4 	bl	8001c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FEED_DIR_GPIO_Pin;
 800a4e4:	2310      	movs	r3, #16
 800a4e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4f0:	f107 031c 	add.w	r3, r7, #28
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	480b      	ldr	r0, [pc, #44]	; (800a524 <MX_GPIO_Init+0x258>)
 800a4f8:	f7f7 fba8 	bl	8001c4c <HAL_GPIO_Init>


  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a4fc:	2320      	movs	r3, #32
 800a4fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a500:	2300      	movs	r3, #0
 800a502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a504:	2300      	movs	r3, #0
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a508:	f107 031c 	add.w	r3, r7, #28
 800a50c:	4619      	mov	r1, r3
 800a50e:	4806      	ldr	r0, [pc, #24]	; (800a528 <MX_GPIO_Init+0x25c>)
 800a510:	f7f7 fb9c 	bl	8001c4c <HAL_GPIO_Init>

}
 800a514:	bf00      	nop
 800a516:	3730      	adds	r7, #48	; 0x30
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	40023800 	.word	0x40023800
 800a520:	40021000 	.word	0x40021000
 800a524:	40020800 	.word	0x40020800
 800a528:	40020c00 	.word	0x40020c00
 800a52c:	10120000 	.word	0x10120000
 800a530:	40020000 	.word	0x40020000

0800a534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a534:	b480      	push	{r7}
 800a536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a538:	bf00      	nop
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <FLASH_init>:

void FLASH_init(void){
 800a542:	b480      	push	{r7}
 800a544:	af00      	add	r7, sp, #0
//        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
//        HAL_FLASHEx_Erase(&pEraseInit, 0);
//        HAL_FLASH_Lock();
//    }

}
 800a546:	bf00      	nop
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <flash_write>:
float slow_pitch = 1.0;
float fast_pitch = 5.0;				// pitch for fast movement

FLASH_ProcessTypeDef Flash;

void flash_write(uint32_t address, uint32_t value){
 800a550:	b590      	push	{r4, r7, lr}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 800a55a:	f7f7 f9c3 	bl	80018e4 <HAL_FLASH_Unlock>
    FLASH_Erase_Sector(FLASH_SECTOR_4, VOLTAGE_RANGE_3);
 800a55e:	2102      	movs	r1, #2
 800a560:	2004      	movs	r0, #4
 800a562:	f7f7 fb2b 	bl	8001bbc <FLASH_Erase_Sector>
//    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGPERR);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, value);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	f04f 0400 	mov.w	r4, #0
 800a56c:	461a      	mov	r2, r3
 800a56e:	4623      	mov	r3, r4
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	2002      	movs	r0, #2
 800a574:	f7f7 f962 	bl	800183c <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 800a578:	f7f7 f9d6 	bl	8001928 <HAL_FLASH_Lock>
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	bd90      	pop	{r4, r7, pc}

0800a584 <readFromEEPROM>:

uint32_t readFromEEPROM(uint32_t address)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  return (*(__IO uint32_t *)address);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <ILI_Init>:

void ILI_Init(void){
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
	ILI9341_Init();
 800a5a0:	f7fe fba8 	bl	8008cf4 <ILI9341_Init>
}
 800a5a4:	bf00      	nop
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <init_display>:

void init_display(void){
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	af00      	add	r7, sp, #0
	ILI9341_FillScreen(ILI9341_BLACK);
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f7ff f8e3 	bl	8009778 <ILI9341_FillScreen>
}
 800a5b2:	bf00      	nop
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <data_init>:
//		__HAL_TIM_SetCounter(&htim1, counter_pos);
//		systemState = Idle;
//	}
//}

void data_init(void){
 800a5b8:	b598      	push	{r3, r4, r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCounter(&htim1, readFromEEPROM(0x08010000));
 800a5bc:	4b11      	ldr	r3, [pc, #68]	; (800a604 <data_init+0x4c>)
 800a5be:	681c      	ldr	r4, [r3, #0]
 800a5c0:	4811      	ldr	r0, [pc, #68]	; (800a608 <data_init+0x50>)
 800a5c2:	f7ff ffdf 	bl	800a584 <readFromEEPROM>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	6263      	str	r3, [r4, #36]	; 0x24
	encoder_pos_raw = __HAL_TIM_GetCounter(&htim1);
 800a5ca:	4b0e      	ldr	r3, [pc, #56]	; (800a604 <data_init+0x4c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	4a0e      	ldr	r2, [pc, #56]	; (800a60c <data_init+0x54>)
 800a5d2:	6013      	str	r3, [r2, #0]
	menu_encoder_pos = encoder_pos_raw / 4;
 800a5d4:	4b0d      	ldr	r3, [pc, #52]	; (800a60c <data_init+0x54>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	089b      	lsrs	r3, r3, #2
 800a5da:	4a0d      	ldr	r2, [pc, #52]	; (800a610 <data_init+0x58>)
 800a5dc:	6013      	str	r3, [r2, #0]
	pitch = get_pitch_selection(menu_encoder_pos);
 800a5de:	4b0c      	ldr	r3, [pc, #48]	; (800a610 <data_init+0x58>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 faea 	bl	800abbc <get_pitch_selection>
 800a5e8:	eef0 7a40 	vmov.f32	s15, s0
 800a5ec:	4b09      	ldr	r3, [pc, #36]	; (800a614 <data_init+0x5c>)
 800a5ee:	edc3 7a00 	vstr	s15, [r3]
	setFeedVal(pitch);
 800a5f2:	4b08      	ldr	r3, [pc, #32]	; (800a614 <data_init+0x5c>)
 800a5f4:	edd3 7a00 	vldr	s15, [r3]
 800a5f8:	eeb0 0a67 	vmov.f32	s0, s15
 800a5fc:	f000 faf2 	bl	800abe4 <setFeedVal>
}
 800a600:	bf00      	nop
 800a602:	bd98      	pop	{r3, r4, r7, pc}
 800a604:	200002d4 	.word	0x200002d4
 800a608:	08010000 	.word	0x08010000
 800a60c:	200000f4 	.word	0x200000f4
 800a610:	200000f8 	.word	0x200000f8
 800a614:	20000480 	.word	0x20000480

0800a618 <render>:

void render(menu_item * menu_root, GPIO_PinState button_state){
 800a618:	b590      	push	{r4, r7, lr}
 800a61a:	b093      	sub	sp, #76	; 0x4c
 800a61c:	af06      	add	r7, sp, #24
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	460b      	mov	r3, r1
 800a622:	70fb      	strb	r3, [r7, #3]
	char disp_str[20];

	snprintf(disp_str, sizeof(disp_str), "%s", "Feed:");
 800a624:	f107 030c 	add.w	r3, r7, #12
 800a628:	4a32      	ldr	r2, [pc, #200]	; (800a6f4 <render+0xdc>)
 800a62a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a62e:	6018      	str	r0, [r3, #0]
 800a630:	3304      	adds	r3, #4
 800a632:	8019      	strh	r1, [r3, #0]
	ILI9341_WriteString(0, 0, disp_str, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 800a634:	4b30      	ldr	r3, [pc, #192]	; (800a6f8 <render+0xe0>)
 800a636:	f107 010c 	add.w	r1, r7, #12
 800a63a:	2200      	movs	r2, #0
 800a63c:	9202      	str	r2, [sp, #8]
 800a63e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a642:	9201      	str	r2, [sp, #4]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	9200      	str	r2, [sp, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	460a      	mov	r2, r1
 800a64c:	2100      	movs	r1, #0
 800a64e:	2000      	movs	r0, #0
 800a650:	f7fe fd32 	bl	80090b8 <ILI9341_WriteString>

	if (edit_state == 0){
 800a654:	4b29      	ldr	r3, [pc, #164]	; (800a6fc <render+0xe4>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d15f      	bne.n	800a71c <render+0x104>
		if (previous_edit_state != edit_state){
 800a65c:	4b28      	ldr	r3, [pc, #160]	; (800a700 <render+0xe8>)
 800a65e:	781a      	ldrb	r2, [r3, #0]
 800a660:	4b26      	ldr	r3, [pc, #152]	; (800a6fc <render+0xe4>)
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	429a      	cmp	r2, r3
 800a666:	d010      	beq.n	800a68a <render+0x72>
			flash_write(0x08010000, encoder_pos_raw);
 800a668:	4b26      	ldr	r3, [pc, #152]	; (800a704 <render+0xec>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4619      	mov	r1, r3
 800a66e:	4826      	ldr	r0, [pc, #152]	; (800a708 <render+0xf0>)
 800a670:	f7ff ff6e 	bl	800a550 <flash_write>
			setFeedVal(pitch);
 800a674:	4b25      	ldr	r3, [pc, #148]	; (800a70c <render+0xf4>)
 800a676:	edd3 7a00 	vldr	s15, [r3]
 800a67a:	eeb0 0a67 	vmov.f32	s0, s15
 800a67e:	f000 fab1 	bl	800abe4 <setFeedVal>
			previous_edit_state = edit_state;
 800a682:	4b1e      	ldr	r3, [pc, #120]	; (800a6fc <render+0xe4>)
 800a684:	781a      	ldrb	r2, [r3, #0]
 800a686:	4b1e      	ldr	r3, [pc, #120]	; (800a700 <render+0xe8>)
 800a688:	701a      	strb	r2, [r3, #0]
		}
		uint32_t pitchlefts = (uint32_t)pitch;
 800a68a:	4b20      	ldr	r3, [pc, #128]	; (800a70c <render+0xf4>)
 800a68c:	edd3 7a00 	vldr	s15, [r3]
 800a690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a694:	ee17 3a90 	vmov	r3, s15
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t pitchrights = abs(((uint32_t)(pitch * 100)) % 100);
 800a69a:	4b1c      	ldr	r3, [pc, #112]	; (800a70c <render+0xf4>)
 800a69c:	edd3 7a00 	vldr	s15, [r3]
 800a6a0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800a710 <render+0xf8>
 800a6a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ac:	ee17 2a90 	vmov	r2, s15
 800a6b0:	4b18      	ldr	r3, [pc, #96]	; (800a714 <render+0xfc>)
 800a6b2:	fba3 1302 	umull	r1, r3, r3, r2
 800a6b6:	095b      	lsrs	r3, r3, #5
 800a6b8:	2164      	movs	r1, #100	; 0x64
 800a6ba:	fb01 f303 	mul.w	r3, r1, r3
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	bfb8      	it	lt
 800a6c4:	425b      	neglt	r3, r3
 800a6c6:	62bb      	str	r3, [r7, #40]	; 0x28
		ILI9341_WriteNumber_float(88, 0, pitchlefts, pitchrights, 2, 2, angelcode_28x47_7seg, ILI9341_GREEN, ILI9341_BLACK);
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	9305      	str	r3, [sp, #20]
 800a6cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	4a11      	ldr	r2, [pc, #68]	; (800a718 <render+0x100>)
 800a6d4:	ab02      	add	r3, sp, #8
 800a6d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6da:	e883 0003 	stmia.w	r3, {r0, r1}
 800a6de:	2302      	movs	r3, #2
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	2058      	movs	r0, #88	; 0x58
 800a6ee:	f7ff f927 	bl	8009940 <ILI9341_WriteNumber_float>
 800a6f2:	e086      	b.n	800a802 <render+0x1ea>
 800a6f4:	0800c600 	.word	0x0800c600
 800a6f8:	20000028 	.word	0x20000028
 800a6fc:	200000f0 	.word	0x200000f0
 800a700:	200000f1 	.word	0x200000f1
 800a704:	200000f4 	.word	0x200000f4
 800a708:	08010000 	.word	0x08010000
 800a70c:	20000480 	.word	0x20000480
 800a710:	42c80000 	.word	0x42c80000
 800a714:	51eb851f 	.word	0x51eb851f
 800a718:	20000038 	.word	0x20000038
	}else{
		if ((previous_edit_state != edit_state)){
 800a71c:	4bb3      	ldr	r3, [pc, #716]	; (800a9ec <render+0x3d4>)
 800a71e:	781a      	ldrb	r2, [r3, #0]
 800a720:	4bb3      	ldr	r3, [pc, #716]	; (800a9f0 <render+0x3d8>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d00a      	beq.n	800a73e <render+0x126>
			__HAL_TIM_SetCounter(&htim1, readFromEEPROM(0x08010000));
 800a728:	4bb2      	ldr	r3, [pc, #712]	; (800a9f4 <render+0x3dc>)
 800a72a:	681c      	ldr	r4, [r3, #0]
 800a72c:	48b2      	ldr	r0, [pc, #712]	; (800a9f8 <render+0x3e0>)
 800a72e:	f7ff ff29 	bl	800a584 <readFromEEPROM>
 800a732:	4603      	mov	r3, r0
 800a734:	6263      	str	r3, [r4, #36]	; 0x24
			previous_edit_state = edit_state;
 800a736:	4bae      	ldr	r3, [pc, #696]	; (800a9f0 <render+0x3d8>)
 800a738:	781a      	ldrb	r2, [r3, #0]
 800a73a:	4bac      	ldr	r3, [pc, #688]	; (800a9ec <render+0x3d4>)
 800a73c:	701a      	strb	r2, [r3, #0]
		}
		encoder_pos_raw = __HAL_TIM_GetCounter(&htim1);
 800a73e:	4bad      	ldr	r3, [pc, #692]	; (800a9f4 <render+0x3dc>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	4aad      	ldr	r2, [pc, #692]	; (800a9fc <render+0x3e4>)
 800a746:	6013      	str	r3, [r2, #0]
		menu_encoder_pos = encoder_pos_raw / 4;
 800a748:	4bac      	ldr	r3, [pc, #688]	; (800a9fc <render+0x3e4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	089b      	lsrs	r3, r3, #2
 800a74e:	4aac      	ldr	r2, [pc, #688]	; (800aa00 <render+0x3e8>)
 800a750:	6013      	str	r3, [r2, #0]

		if (menu_encoder_pos > 50){
 800a752:	4bab      	ldr	r3, [pc, #684]	; (800aa00 <render+0x3e8>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b32      	cmp	r3, #50	; 0x32
 800a758:	d906      	bls.n	800a768 <render+0x150>
			__HAL_TIM_SetCounter(&htim1, 0);
 800a75a:	4ba6      	ldr	r3, [pc, #664]	; (800a9f4 <render+0x3dc>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2200      	movs	r2, #0
 800a760:	625a      	str	r2, [r3, #36]	; 0x24
			menu_encoder_pos = 0;
 800a762:	4ba7      	ldr	r3, [pc, #668]	; (800aa00 <render+0x3e8>)
 800a764:	2200      	movs	r2, #0
 800a766:	601a      	str	r2, [r3, #0]
		}

		if (menu_encoder_pos > 25 && menu_encoder_pos <= 50){
 800a768:	4ba5      	ldr	r3, [pc, #660]	; (800aa00 <render+0x3e8>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b19      	cmp	r3, #25
 800a76e:	d90a      	bls.n	800a786 <render+0x16e>
 800a770:	4ba3      	ldr	r3, [pc, #652]	; (800aa00 <render+0x3e8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b32      	cmp	r3, #50	; 0x32
 800a776:	d806      	bhi.n	800a786 <render+0x16e>
			__HAL_TIM_SetCounter(&htim1, 25*4);
 800a778:	4b9e      	ldr	r3, [pc, #632]	; (800a9f4 <render+0x3dc>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2264      	movs	r2, #100	; 0x64
 800a77e:	625a      	str	r2, [r3, #36]	; 0x24
			menu_encoder_pos = 25;
 800a780:	4b9f      	ldr	r3, [pc, #636]	; (800aa00 <render+0x3e8>)
 800a782:	2219      	movs	r2, #25
 800a784:	601a      	str	r2, [r3, #0]
		}

		pitch = get_pitch_selection(menu_encoder_pos);
 800a786:	4b9e      	ldr	r3, [pc, #632]	; (800aa00 <render+0x3e8>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 fa16 	bl	800abbc <get_pitch_selection>
 800a790:	eef0 7a40 	vmov.f32	s15, s0
 800a794:	4b9b      	ldr	r3, [pc, #620]	; (800aa04 <render+0x3ec>)
 800a796:	edc3 7a00 	vstr	s15, [r3]
		uint32_t pitchlefts = (uint32_t)pitch;
 800a79a:	4b9a      	ldr	r3, [pc, #616]	; (800aa04 <render+0x3ec>)
 800a79c:	edd3 7a00 	vldr	s15, [r3]
 800a7a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7a4:	ee17 3a90 	vmov	r3, s15
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t pitchrights = abs(((uint32_t)(pitch * 100)) % 100);
 800a7aa:	4b96      	ldr	r3, [pc, #600]	; (800aa04 <render+0x3ec>)
 800a7ac:	edd3 7a00 	vldr	s15, [r3]
 800a7b0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800aa08 <render+0x3f0>
 800a7b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7bc:	ee17 2a90 	vmov	r2, s15
 800a7c0:	4b92      	ldr	r3, [pc, #584]	; (800aa0c <render+0x3f4>)
 800a7c2:	fba3 1302 	umull	r1, r3, r3, r2
 800a7c6:	095b      	lsrs	r3, r3, #5
 800a7c8:	2164      	movs	r1, #100	; 0x64
 800a7ca:	fb01 f303 	mul.w	r3, r1, r3
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bfb8      	it	lt
 800a7d4:	425b      	neglt	r3, r3
 800a7d6:	623b      	str	r3, [r7, #32]
		ILI9341_WriteNumber_float(88, 0, pitchlefts, pitchrights, 2, 2, angelcode_28x47_7seg, ILI9341_RED, ILI9341_BLACK);
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9305      	str	r3, [sp, #20]
 800a7dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800a7e0:	9304      	str	r3, [sp, #16]
 800a7e2:	4a8b      	ldr	r2, [pc, #556]	; (800aa10 <render+0x3f8>)
 800a7e4:	ab02      	add	r3, sp, #8
 800a7e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7ea:	e883 0003 	stmia.w	r3, {r0, r1}
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	9301      	str	r3, [sp, #4]
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	2058      	movs	r0, #88	; 0x58
 800a7fe:	f7ff f89f 	bl	8009940 <ILI9341_WriteNumber_float>
	}

	snprintf(disp_str, sizeof(disp_str), "%s", "Speed:");
 800a802:	f107 030c 	add.w	r3, r7, #12
 800a806:	4a83      	ldr	r2, [pc, #524]	; (800aa14 <render+0x3fc>)
 800a808:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a80c:	6018      	str	r0, [r3, #0]
 800a80e:	3304      	adds	r3, #4
 800a810:	8019      	strh	r1, [r3, #0]
 800a812:	3302      	adds	r3, #2
 800a814:	0c0a      	lsrs	r2, r1, #16
 800a816:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteString(0, 50, disp_str, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 800a818:	4b7f      	ldr	r3, [pc, #508]	; (800aa18 <render+0x400>)
 800a81a:	f107 010c 	add.w	r1, r7, #12
 800a81e:	2200      	movs	r2, #0
 800a820:	9202      	str	r2, [sp, #8]
 800a822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a826:	9201      	str	r2, [sp, #4]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	9200      	str	r2, [sp, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	460a      	mov	r2, r1
 800a830:	2132      	movs	r1, #50	; 0x32
 800a832:	2000      	movs	r0, #0
 800a834:	f7fe fc40 	bl	80090b8 <ILI9341_WriteString>

	snprintf(disp_str, sizeof(disp_str), "%s", "Encoder:");
 800a838:	f107 030c 	add.w	r3, r7, #12
 800a83c:	4a77      	ldr	r2, [pc, #476]	; (800aa1c <render+0x404>)
 800a83e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a840:	c303      	stmia	r3!, {r0, r1}
 800a842:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteString(0, 100, disp_str, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 800a844:	4b74      	ldr	r3, [pc, #464]	; (800aa18 <render+0x400>)
 800a846:	f107 010c 	add.w	r1, r7, #12
 800a84a:	2200      	movs	r2, #0
 800a84c:	9202      	str	r2, [sp, #8]
 800a84e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a852:	9201      	str	r2, [sp, #4]
 800a854:	685a      	ldr	r2, [r3, #4]
 800a856:	9200      	str	r2, [sp, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	460a      	mov	r2, r1
 800a85c:	2164      	movs	r1, #100	; 0x64
 800a85e:	2000      	movs	r0, #0
 800a860:	f7fe fc2a 	bl	80090b8 <ILI9341_WriteString>

	ILI9341_WriteNumber(88, 50, rpm, 4, 4, angelcode_28x47_7seg, ILI9341_GREEN, ILI9341_BLACK);
 800a864:	4b6e      	ldr	r3, [pc, #440]	; (800aa20 <render+0x408>)
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	2300      	movs	r3, #0
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a870:	9303      	str	r3, [sp, #12]
 800a872:	4967      	ldr	r1, [pc, #412]	; (800aa10 <render+0x3f8>)
 800a874:	ab01      	add	r3, sp, #4
 800a876:	c903      	ldmia	r1, {r0, r1}
 800a878:	e883 0003 	stmia.w	r3, {r0, r1}
 800a87c:	2304      	movs	r3, #4
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	2304      	movs	r3, #4
 800a882:	2132      	movs	r1, #50	; 0x32
 800a884:	2058      	movs	r0, #88	; 0x58
 800a886:	f7ff f8ef 	bl	8009a68 <ILI9341_WriteNumber>

	snprintf(disp_str, sizeof(disp_str), "%10lu", (get_spindlePosition()));
 800a88a:	f000 f9fb 	bl	800ac84 <get_spindlePosition>
 800a88e:	4603      	mov	r3, r0
 800a890:	f107 000c 	add.w	r0, r7, #12
 800a894:	4a63      	ldr	r2, [pc, #396]	; (800aa24 <render+0x40c>)
 800a896:	2114      	movs	r1, #20
 800a898:	f001 fb16 	bl	800bec8 <sniprintf>
	ILI9341_WriteString(88, 100, disp_str, Font_16x26, ILI9341_BLACK, ILI9341_WHITE);
 800a89c:	4b62      	ldr	r3, [pc, #392]	; (800aa28 <render+0x410>)
 800a89e:	f107 010c 	add.w	r1, r7, #12
 800a8a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8a6:	9202      	str	r2, [sp, #8]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	9201      	str	r2, [sp, #4]
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	9200      	str	r2, [sp, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	460a      	mov	r2, r1
 800a8b4:	2164      	movs	r1, #100	; 0x64
 800a8b6:	2058      	movs	r0, #88	; 0x58
 800a8b8:	f7fe fbfe 	bl	80090b8 <ILI9341_WriteString>

//	snprintf(disp_str, sizeof(disp_str), "%10lu", (lathe_encoder_pos_raw));
//	ILI9341_WriteString(88, 100, disp_str, Font_16x26, ILI9341_BLACK, ILI9341_WHITE);


	if (!HAL_GPIO_ReadPin(GPIOD, NUTLOCK_OFF_LEFT_Pin) && (previous_fast_btn_state != 1)){
 800a8bc:	2108      	movs	r1, #8
 800a8be:	485b      	ldr	r0, [pc, #364]	; (800aa2c <render+0x414>)
 800a8c0:	f7f7 fb46 	bl	8001f50 <HAL_GPIO_ReadPin>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d128      	bne.n	800a91c <render+0x304>
 800a8ca:	4b59      	ldr	r3, [pc, #356]	; (800aa30 <render+0x418>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d024      	beq.n	800a91c <render+0x304>
			HAL_GPIO_WritePin(GPIOD, JOG_Pin, GPIO_PIN_SET);
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	2180      	movs	r1, #128	; 0x80
 800a8d6:	4855      	ldr	r0, [pc, #340]	; (800aa2c <render+0x414>)
 800a8d8:	f7f7 fb52 	bl	8001f80 <HAL_GPIO_WritePin>
			setFeedVal(slow_pitch);
 800a8dc:	4b55      	ldr	r3, [pc, #340]	; (800aa34 <render+0x41c>)
 800a8de:	edd3 7a00 	vldr	s15, [r3]
 800a8e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a8e6:	f000 f97d 	bl	800abe4 <setFeedVal>
//			set_move_left();
//			unset_lock_nut();
			snprintf(disp_str, sizeof(disp_str), "%s", "SLOW JOG");
 800a8ea:	f107 030c 	add.w	r3, r7, #12
 800a8ee:	4a52      	ldr	r2, [pc, #328]	; (800aa38 <render+0x420>)
 800a8f0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a8f2:	c303      	stmia	r3!, {r0, r1}
 800a8f4:	701a      	strb	r2, [r3, #0]
			ILI9341_WriteString8(0, 150, disp_str, FontLiberationMono50, ILI9341_WHITE, ILI9341_BLACK);
 800a8f6:	4b51      	ldr	r3, [pc, #324]	; (800aa3c <render+0x424>)
 800a8f8:	f107 010c 	add.w	r1, r7, #12
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	9202      	str	r2, [sp, #8]
 800a900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a904:	9201      	str	r2, [sp, #4]
 800a906:	685a      	ldr	r2, [r3, #4]
 800a908:	9200      	str	r2, [sp, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	460a      	mov	r2, r1
 800a90e:	2196      	movs	r1, #150	; 0x96
 800a910:	2000      	movs	r0, #0
 800a912:	f7fe fe29 	bl	8009568 <ILI9341_WriteString8>
			previous_fast_btn_state = 1;
 800a916:	4b46      	ldr	r3, [pc, #280]	; (800aa30 <render+0x418>)
 800a918:	2201      	movs	r2, #1
 800a91a:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(GPIOD, NUTLOCK_OFF_RIGHT_Pin) && (previous_fast_btn_state != 2)){
 800a91c:	2140      	movs	r1, #64	; 0x40
 800a91e:	4843      	ldr	r0, [pc, #268]	; (800aa2c <render+0x414>)
 800a920:	f7f7 fb16 	bl	8001f50 <HAL_GPIO_ReadPin>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d128      	bne.n	800a97c <render+0x364>
 800a92a:	4b41      	ldr	r3, [pc, #260]	; (800aa30 <render+0x418>)
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d024      	beq.n	800a97c <render+0x364>
			HAL_GPIO_WritePin(GPIOD, JOG_Pin, GPIO_PIN_SET);
 800a932:	2201      	movs	r2, #1
 800a934:	2180      	movs	r1, #128	; 0x80
 800a936:	483d      	ldr	r0, [pc, #244]	; (800aa2c <render+0x414>)
 800a938:	f7f7 fb22 	bl	8001f80 <HAL_GPIO_WritePin>
			setFeedVal(fast_pitch);
 800a93c:	4b40      	ldr	r3, [pc, #256]	; (800aa40 <render+0x428>)
 800a93e:	edd3 7a00 	vldr	s15, [r3]
 800a942:	eeb0 0a67 	vmov.f32	s0, s15
 800a946:	f000 f94d 	bl	800abe4 <setFeedVal>
//			set_move_right();
//			unset_lock_nut();
			snprintf(disp_str, sizeof(disp_str), "%s", "FAST JOG");
 800a94a:	f107 030c 	add.w	r3, r7, #12
 800a94e:	4a3d      	ldr	r2, [pc, #244]	; (800aa44 <render+0x42c>)
 800a950:	ca07      	ldmia	r2, {r0, r1, r2}
 800a952:	c303      	stmia	r3!, {r0, r1}
 800a954:	701a      	strb	r2, [r3, #0]
			ILI9341_WriteString8(0, 150, disp_str, FontLiberationMono50, ILI9341_WHITE, ILI9341_BLACK);
 800a956:	4b39      	ldr	r3, [pc, #228]	; (800aa3c <render+0x424>)
 800a958:	f107 010c 	add.w	r1, r7, #12
 800a95c:	2200      	movs	r2, #0
 800a95e:	9202      	str	r2, [sp, #8]
 800a960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a964:	9201      	str	r2, [sp, #4]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	9200      	str	r2, [sp, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	460a      	mov	r2, r1
 800a96e:	2196      	movs	r1, #150	; 0x96
 800a970:	2000      	movs	r0, #0
 800a972:	f7fe fdf9 	bl	8009568 <ILI9341_WriteString8>
			previous_fast_btn_state = 2;
 800a976:	4b2e      	ldr	r3, [pc, #184]	; (800aa30 <render+0x418>)
 800a978:	2202      	movs	r2, #2
 800a97a:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(GPIOD, NUTLOCK_OFF_LEFT_Pin) && HAL_GPIO_ReadPin(GPIOD, NUTLOCK_OFF_RIGHT_Pin) && (previous_fast_btn_state != 0)){
 800a97c:	2108      	movs	r1, #8
 800a97e:	482b      	ldr	r0, [pc, #172]	; (800aa2c <render+0x414>)
 800a980:	f7f7 fae6 	bl	8001f50 <HAL_GPIO_ReadPin>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d060      	beq.n	800aa4c <render+0x434>
 800a98a:	2140      	movs	r1, #64	; 0x40
 800a98c:	4827      	ldr	r0, [pc, #156]	; (800aa2c <render+0x414>)
 800a98e:	f7f7 fadf 	bl	8001f50 <HAL_GPIO_ReadPin>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d059      	beq.n	800aa4c <render+0x434>
 800a998:	4b25      	ldr	r3, [pc, #148]	; (800aa30 <render+0x418>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d055      	beq.n	800aa4c <render+0x434>
			HAL_GPIO_WritePin(GPIOD, JOG_Pin, GPIO_PIN_RESET);
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2180      	movs	r1, #128	; 0x80
 800a9a4:	4821      	ldr	r0, [pc, #132]	; (800aa2c <render+0x414>)
 800a9a6:	f7f7 faeb 	bl	8001f80 <HAL_GPIO_WritePin>
			setFeedVal(pitch);
 800a9aa:	4b16      	ldr	r3, [pc, #88]	; (800aa04 <render+0x3ec>)
 800a9ac:	edd3 7a00 	vldr	s15, [r3]
 800a9b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a9b4:	f000 f916 	bl	800abe4 <setFeedVal>
//			set_lock_nut();
			snprintf(disp_str, sizeof(disp_str), "%s", "Jog off ");
 800a9b8:	f107 030c 	add.w	r3, r7, #12
 800a9bc:	4a22      	ldr	r2, [pc, #136]	; (800aa48 <render+0x430>)
 800a9be:	ca07      	ldmia	r2, {r0, r1, r2}
 800a9c0:	c303      	stmia	r3!, {r0, r1}
 800a9c2:	701a      	strb	r2, [r3, #0]
			ILI9341_WriteString8(0, 150, disp_str, FontLiberationMono50, ILI9341_WHITE, ILI9341_BLACK);
 800a9c4:	4b1d      	ldr	r3, [pc, #116]	; (800aa3c <render+0x424>)
 800a9c6:	f107 010c 	add.w	r1, r7, #12
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	9202      	str	r2, [sp, #8]
 800a9ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9d2:	9201      	str	r2, [sp, #4]
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	9200      	str	r2, [sp, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	460a      	mov	r2, r1
 800a9dc:	2196      	movs	r1, #150	; 0x96
 800a9de:	2000      	movs	r0, #0
 800a9e0:	f7fe fdc2 	bl	8009568 <ILI9341_WriteString8>
			previous_fast_btn_state = 0;
 800a9e4:	4b12      	ldr	r3, [pc, #72]	; (800aa30 <render+0x418>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	e02f      	b.n	800aa4c <render+0x434>
 800a9ec:	200000f1 	.word	0x200000f1
 800a9f0:	200000f0 	.word	0x200000f0
 800a9f4:	200002d4 	.word	0x200002d4
 800a9f8:	08010000 	.word	0x08010000
 800a9fc:	200000f4 	.word	0x200000f4
 800aa00:	200000f8 	.word	0x200000f8
 800aa04:	20000480 	.word	0x20000480
 800aa08:	42c80000 	.word	0x42c80000
 800aa0c:	51eb851f 	.word	0x51eb851f
 800aa10:	20000038 	.word	0x20000038
 800aa14:	0800c608 	.word	0x0800c608
 800aa18:	20000028 	.word	0x20000028
 800aa1c:	0800c610 	.word	0x0800c610
 800aa20:	20000100 	.word	0x20000100
 800aa24:	0800c61c 	.word	0x0800c61c
 800aa28:	20000030 	.word	0x20000030
 800aa2c:	40020c00 	.word	0x40020c00
 800aa30:	20000048 	.word	0x20000048
 800aa34:	2000004c 	.word	0x2000004c
 800aa38:	0800c624 	.word	0x0800c624
 800aa3c:	20000040 	.word	0x20000040
 800aa40:	20000050 	.word	0x20000050
 800aa44:	0800c630 	.word	0x0800c630
 800aa48:	0800c63c 	.word	0x0800c63c
*/

//	snprintf(disp_str, sizeof(disp_str), "%s", "Az aki");
//	ILI9341_WriteString8(0, 150, disp_str, FontLiberationMono50, ILI9341_WHITE, ILI9341_BLACK);

	if ((button_state == 1) & (buttonDown == 0)){
 800aa4c:	78fb      	ldrb	r3, [r7, #3]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	bf0c      	ite	eq
 800aa52:	2301      	moveq	r3, #1
 800aa54:	2300      	movne	r3, #0
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	4b0f      	ldr	r3, [pc, #60]	; (800aa98 <render+0x480>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bf0c      	ite	eq
 800aa60:	2301      	moveq	r3, #1
 800aa62:	2300      	movne	r3, #0
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	4013      	ands	r3, r2
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d006      	beq.n	800aa7c <render+0x464>
		edit_state ^= 1;
 800aa6e:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <render+0x484>)
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	f083 0301 	eor.w	r3, r3, #1
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	4b08      	ldr	r3, [pc, #32]	; (800aa9c <render+0x484>)
 800aa7a:	701a      	strb	r2, [r3, #0]
	}

	buttonDown = (button_state == 1);
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	bf0c      	ite	eq
 800aa82:	2301      	moveq	r3, #1
 800aa84:	2300      	movne	r3, #0
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	461a      	mov	r2, r3
 800aa8a:	4b03      	ldr	r3, [pc, #12]	; (800aa98 <render+0x480>)
 800aa8c:	701a      	strb	r2, [r3, #0]
}
 800aa8e:	bf00      	nop
 800aa90:	3734      	adds	r7, #52	; 0x34
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd90      	pop	{r4, r7, pc}
 800aa96:	bf00      	nop
 800aa98:	2000043c 	.word	0x2000043c
 800aa9c:	200000f0 	.word	0x200000f0

0800aaa0 <display_menu>:

void display_menu(GPIO_PinState button_state){
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	71fb      	strb	r3, [r7, #7]

	render(display_menu_head, button_state);
 800aaaa:	4b05      	ldr	r3, [pc, #20]	; (800aac0 <display_menu+0x20>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	79fa      	ldrb	r2, [r7, #7]
 800aab0:	4611      	mov	r1, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7ff fdb0 	bl	800a618 <render>


}
 800aab8:	bf00      	nop
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000464 	.word	0x20000464

0800aac4 <compute_rpm>:

void compute_rpm(void){
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800aaca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aace:	4826      	ldr	r0, [pc, #152]	; (800ab68 <compute_rpm+0xa4>)
 800aad0:	f7f7 fa6f 	bl	8001fb2 <HAL_GPIO_TogglePin>
	uint32_t lathe_encoder_pos_raw = __HAL_TIM_GetCounter(&htim2);
 800aad4:	4b25      	ldr	r3, [pc, #148]	; (800ab6c <compute_rpm+0xa8>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aada:	607b      	str	r3, [r7, #4]
	count = (lathe_encoder_pos_raw > previous_encoder_value) ? lathe_encoder_pos_raw - previous_encoder_value : previous_encoder_value - lathe_encoder_pos_raw;
 800aadc:	4b24      	ldr	r3, [pc, #144]	; (800ab70 <compute_rpm+0xac>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d904      	bls.n	800aaf0 <compute_rpm+0x2c>
 800aae6:	4b22      	ldr	r3, [pc, #136]	; (800ab70 <compute_rpm+0xac>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	e003      	b.n	800aaf8 <compute_rpm+0x34>
 800aaf0:	4b1f      	ldr	r3, [pc, #124]	; (800ab70 <compute_rpm+0xac>)
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	4a1e      	ldr	r2, [pc, #120]	; (800ab74 <compute_rpm+0xb0>)
 800aafa:	6013      	str	r3, [r2, #0]
	// deal with over/underflow
	if( count > _ENCODER_MAX_COUNT/2 ) {
 800aafc:	4b1d      	ldr	r3, [pc, #116]	; (800ab74 <compute_rpm+0xb0>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab04:	d307      	bcc.n	800ab16 <compute_rpm+0x52>
		count = _ENCODER_MAX_COUNT - count; // just subtract from max value
 800ab06:	4b1b      	ldr	r3, [pc, #108]	; (800ab74 <compute_rpm+0xb0>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 800ab0e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800ab12:	4a18      	ldr	r2, [pc, #96]	; (800ab74 <compute_rpm+0xb0>)
 800ab14:	6013      	str	r3, [r2, #0]
	}

	if (count < previous_count + 100){					// avoid big number display switching between rapid move and threading
 800ab16:	4b18      	ldr	r3, [pc, #96]	; (800ab78 <compute_rpm+0xb4>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800ab1e:	4b15      	ldr	r3, [pc, #84]	; (800ab74 <compute_rpm+0xb0>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d915      	bls.n	800ab52 <compute_rpm+0x8e>

		rpm = count * 60 * 10 / ENCODER_RESOLUTION;		// 10 = calc rate in Hz
 800ab26:	4b13      	ldr	r3, [pc, #76]	; (800ab74 <compute_rpm+0xb0>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab2e:	fb02 f303 	mul.w	r3, r2, r3
 800ab32:	4a12      	ldr	r2, [pc, #72]	; (800ab7c <compute_rpm+0xb8>)
 800ab34:	fba2 2303 	umull	r2, r3, r2, r3
 800ab38:	0a1b      	lsrs	r3, r3, #8
 800ab3a:	4a11      	ldr	r2, [pc, #68]	; (800ab80 <compute_rpm+0xbc>)
 800ab3c:	6013      	str	r3, [r2, #0]
		if (rpm > 9999){								// avoid display extra digits
 800ab3e:	4b10      	ldr	r3, [pc, #64]	; (800ab80 <compute_rpm+0xbc>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f242 720f 	movw	r2, #9999	; 0x270f
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d903      	bls.n	800ab52 <compute_rpm+0x8e>
			rpm = 9999;
 800ab4a:	4b0d      	ldr	r3, [pc, #52]	; (800ab80 <compute_rpm+0xbc>)
 800ab4c:	f242 720f 	movw	r2, #9999	; 0x270f
 800ab50:	601a      	str	r2, [r3, #0]
		}
	}
	previous_encoder_value = lathe_encoder_pos_raw;
 800ab52:	4a07      	ldr	r2, [pc, #28]	; (800ab70 <compute_rpm+0xac>)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6013      	str	r3, [r2, #0]
	previous_count = count;
 800ab58:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <compute_rpm+0xb0>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a06      	ldr	r2, [pc, #24]	; (800ab78 <compute_rpm+0xb4>)
 800ab5e:	6013      	str	r3, [r2, #0]

}
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	40020c00 	.word	0x40020c00
 800ab6c:	2000036c 	.word	0x2000036c
 800ab70:	200000fc 	.word	0x200000fc
 800ab74:	2000047c 	.word	0x2000047c
 800ab78:	20000474 	.word	0x20000474
 800ab7c:	10624dd3 	.word	0x10624dd3
 800ab80:	20000100 	.word	0x20000100

0800ab84 <init_stepperdrive>:

void init_stepperdrive(void){
 800ab84:	b580      	push	{r7, lr}
 800ab86:	af00      	add	r7, sp, #0
	set_lock_nut();
 800ab88:	f000 f802 	bl	800ab90 <set_lock_nut>
}
 800ab8c:	bf00      	nop
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <set_lock_nut>:

void setEnabled();

uint8_t isAlarm();

void set_lock_nut(void){
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0
	lock_nut = 1;
 800ab94:	4b06      	ldr	r3, [pc, #24]	; (800abb0 <set_lock_nut+0x20>)
 800ab96:	2201      	movs	r2, #1
 800ab98:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SetCounter(&htim2, spindlePosition);			// left/right rapid move end, start threading process on this position
 800ab9a:	4b06      	ldr	r3, [pc, #24]	; (800abb4 <set_lock_nut+0x24>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a06      	ldr	r2, [pc, #24]	; (800abb8 <set_lock_nut+0x28>)
 800aba0:	6812      	ldr	r2, [r2, #0]
 800aba2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800aba4:	bf00      	nop
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	20000064 	.word	0x20000064
 800abb4:	2000036c 	.word	0x2000036c
 800abb8:	20000108 	.word	0x20000108

0800abbc <get_pitch_selection>:
void set_feed_direction_left(void){
	feedDirection = 1;
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
}

float get_pitch_selection(uint32_t value){
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
	return pitch_selection_values[value];
 800abc4:	4a06      	ldr	r2, [pc, #24]	; (800abe0 <get_pitch_selection+0x24>)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	ee07 3a90 	vmov	s15, r3
}
 800abd2:	eeb0 0a67 	vmov.f32	s0, s15
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	08018a18 	.word	0x08018a18

0800abe4 <setFeedVal>:

void setFeedVal(float feedv)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	ed87 0a01 	vstr	s0, [r7, #4]
	feedval = feed * (feedv / LEADSCREW_PITCH);
 800abee:	edd7 7a01 	vldr	s15, [r7, #4]
 800abf2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800abf6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800abfa:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <setFeedVal+0x34>)
 800abfc:	edd3 7a00 	vldr	s15, [r3]
 800ac00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac04:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <setFeedVal+0x38>)
 800ac06:	edc3 7a00 	vstr	s15, [r3]
}
 800ac0a:	bf00      	nop
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	20000058 	.word	0x20000058
 800ac1c:	20000060 	.word	0x20000060

0800ac20 <setDesiredPosition>:

void setDesiredPosition(int32_t steps)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
    desiredPosition = steps;
 800ac28:	4a04      	ldr	r2, [pc, #16]	; (800ac3c <setDesiredPosition+0x1c>)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6013      	str	r3, [r2, #0]
}
 800ac2e:	bf00      	nop
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	20000498 	.word	0x20000498

0800ac40 <incrementCurrentPosition>:

void incrementCurrentPosition(int32_t increment)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
    currentPosition += increment;
 800ac48:	4b05      	ldr	r3, [pc, #20]	; (800ac60 <incrementCurrentPosition+0x20>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4413      	add	r3, r2
 800ac50:	4a03      	ldr	r2, [pc, #12]	; (800ac60 <incrementCurrentPosition+0x20>)
 800ac52:	6013      	str	r3, [r2, #0]
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	20000494 	.word	0x20000494

0800ac64 <setCurrentPosition>:

void setCurrentPosition(int32_t position)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
    currentPosition = position;
 800ac6c:	4a04      	ldr	r2, [pc, #16]	; (800ac80 <setCurrentPosition+0x1c>)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6013      	str	r3, [r2, #0]
}
 800ac72:	bf00      	nop
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	20000494 	.word	0x20000494

0800ac84 <get_spindlePosition>:

uint32_t get_spindlePosition(void){
 800ac84:	b480      	push	{r7}
 800ac86:	af00      	add	r7, sp, #0
	return spindlePosition;
 800ac88:	4b03      	ldr	r3, [pc, #12]	; (800ac98 <get_spindlePosition+0x14>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	20000108 	.word	0x20000108

0800ac9c <feedRatio>:

int32_t feedRatio(uint32_t count)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
#ifdef USE_FLOATING_POINT
    return ((float)count) * feedval * feedDirection;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acae:	4b0c      	ldr	r3, [pc, #48]	; (800ace0 <feedRatio+0x44>)
 800acb0:	edd3 7a00 	vldr	s15, [r3]
 800acb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acb8:	4b0a      	ldr	r3, [pc, #40]	; (800ace4 <feedRatio+0x48>)
 800acba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800acce:	ee17 3a90 	vmov	r3, s15
#else // USE_FLOATING_POINT
    return ((long long)count) * feed->numerator / feed->denominator * feedDirection;
#endif // USE_FLOATING_POINT
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	20000060 	.word	0x20000060
 800ace4:	2000005c 	.word	0x2000005c

0800ace8 <HAL_TIM_PeriodElapsedCallback>:

// Timer update interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM3)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a73      	ldr	r2, [pc, #460]	; (800aec4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	f040 80d9 	bne.w	800aeae <HAL_TIM_PeriodElapsedCallback+0x1c6>
	{

		spindlePosition = __HAL_TIM_GetCounter(&htim2);
 800acfc:	4b72      	ldr	r3, [pc, #456]	; (800aec8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad02:	4a72      	ldr	r2, [pc, #456]	; (800aecc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800ad04:	6013      	str	r3, [r2, #0]
//				}
//			}
//		}

		// calculate the desired stepper position
		int32_t desiredSteps = feedRatio(spindlePosition);
 800ad06:	4b71      	ldr	r3, [pc, #452]	; (800aecc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7ff ffc6 	bl	800ac9c <feedRatio>
 800ad10:	60f8      	str	r0, [r7, #12]
		setDesiredPosition(desiredSteps);
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f7ff ff84 	bl	800ac20 <setDesiredPosition>

		// compensate for encoder overflow/underflow
		if( spindlePosition < previousSpindlePosition && previousSpindlePosition - spindlePosition > _ENCODER_MAX_COUNT/2 ) {
 800ad18:	4b6c      	ldr	r3, [pc, #432]	; (800aecc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	4b6c      	ldr	r3, [pc, #432]	; (800aed0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d210      	bcs.n	800ad46 <HAL_TIM_PeriodElapsedCallback+0x5e>
 800ad24:	4b6a      	ldr	r3, [pc, #424]	; (800aed0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	4b68      	ldr	r3, [pc, #416]	; (800aecc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad32:	d308      	bcc.n	800ad46 <HAL_TIM_PeriodElapsedCallback+0x5e>
			incrementCurrentPosition(-1 * feedRatio(_ENCODER_MAX_COUNT));
 800ad34:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ad38:	f7ff ffb0 	bl	800ac9c <feedRatio>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	425b      	negs	r3, r3
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7ff ff7d 	bl	800ac40 <incrementCurrentPosition>
		}
		if( spindlePosition > previousSpindlePosition && spindlePosition - previousSpindlePosition > _ENCODER_MAX_COUNT/2 ) {
 800ad46:	4b61      	ldr	r3, [pc, #388]	; (800aecc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	4b61      	ldr	r3, [pc, #388]	; (800aed0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d90f      	bls.n	800ad72 <HAL_TIM_PeriodElapsedCallback+0x8a>
 800ad52:	4b5e      	ldr	r3, [pc, #376]	; (800aecc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	4b5e      	ldr	r3, [pc, #376]	; (800aed0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad60:	d307      	bcc.n	800ad72 <HAL_TIM_PeriodElapsedCallback+0x8a>
			incrementCurrentPosition(feedRatio(_ENCODER_MAX_COUNT));
 800ad62:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ad66:	f7ff ff99 	bl	800ac9c <feedRatio>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7ff ff67 	bl	800ac40 <incrementCurrentPosition>
		}

		// if the feed or direction changed, reset sync to avoid a big step
		if( feedval != previousFeed || feedDirection != previousFeedDirection) {
 800ad72:	4b58      	ldr	r3, [pc, #352]	; (800aed4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800ad74:	ed93 7a00 	vldr	s14, [r3]
 800ad78:	4b57      	ldr	r3, [pc, #348]	; (800aed8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800ad7a:	edd3 7a00 	vldr	s15, [r3]
 800ad7e:	eeb4 7a67 	vcmp.f32	s14, s15
 800ad82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad86:	d107      	bne.n	800ad98 <HAL_TIM_PeriodElapsedCallback+0xb0>
 800ad88:	4b54      	ldr	r3, [pc, #336]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800ad8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ad8e:	4b54      	ldr	r3, [pc, #336]	; (800aee0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800ad90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d002      	beq.n	800ad9e <HAL_TIM_PeriodElapsedCallback+0xb6>
			setCurrentPosition(desiredSteps);
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f7ff ff63 	bl	800ac64 <setCurrentPosition>
		}

		// remember values for next time
		previousSpindlePosition = spindlePosition;
 800ad9e:	4b4b      	ldr	r3, [pc, #300]	; (800aecc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a4b      	ldr	r2, [pc, #300]	; (800aed0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800ada4:	6013      	str	r3, [r2, #0]
		previousFeedDirection = feedDirection;
 800ada6:	4b4d      	ldr	r3, [pc, #308]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800ada8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800adac:	4b4c      	ldr	r3, [pc, #304]	; (800aee0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800adae:	801a      	strh	r2, [r3, #0]
		previousFeed = feedval;
 800adb0:	4b48      	ldr	r3, [pc, #288]	; (800aed4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a48      	ldr	r2, [pc, #288]	; (800aed8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800adb6:	6013      	str	r3, [r2, #0]

		if(enabled) {
 800adb8:	4b4a      	ldr	r3, [pc, #296]	; (800aee4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d068      	beq.n	800ae92 <HAL_TIM_PeriodElapsedCallback+0x1aa>

			switch(state) {
 800adc0:	4b49      	ldr	r3, [pc, #292]	; (800aee8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	2b03      	cmp	r3, #3
 800adc6:	d86c      	bhi.n	800aea2 <HAL_TIM_PeriodElapsedCallback+0x1ba>
 800adc8:	a201      	add	r2, pc, #4	; (adr r2, 800add0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800adca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adce:	bf00      	nop
 800add0:	0800ade1 	.word	0x0800ade1
 800add4:	0800ae1d 	.word	0x0800ae1d
 800add8:	0800ae59 	.word	0x0800ae59
 800addc:	0800ae75 	.word	0x0800ae75

			case 0:
				// Step = 0; Dir = 0
				if( desiredPosition < currentPosition ) {
 800ade0:	4b42      	ldr	r3, [pc, #264]	; (800aeec <HAL_TIM_PeriodElapsedCallback+0x204>)
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	4b42      	ldr	r3, [pc, #264]	; (800aef0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	429a      	cmp	r2, r3
 800adea:	da08      	bge.n	800adfe <HAL_TIM_PeriodElapsedCallback+0x116>
					HAL_GPIO_WritePin(GPIOD, STEPPER_STEP_Pin, GPIO_PIN_SET);
 800adec:	2201      	movs	r2, #1
 800adee:	2102      	movs	r1, #2
 800adf0:	4840      	ldr	r0, [pc, #256]	; (800aef4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800adf2:	f7f7 f8c5 	bl	8001f80 <HAL_GPIO_WritePin>
					state = 2;
 800adf6:	4b3c      	ldr	r3, [pc, #240]	; (800aee8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800adf8:	2202      	movs	r2, #2
 800adfa:	801a      	strh	r2, [r3, #0]
				else if(desiredPosition > currentPosition) {
	//                GPIO_SET_DIRECTION;
					HAL_GPIO_WritePin(GPIOD, STEPPER_DIR_Pin, GPIO_PIN_SET);
					state = 1;
				}
				break;
 800adfc:	e04e      	b.n	800ae9c <HAL_TIM_PeriodElapsedCallback+0x1b4>
				else if(desiredPosition > currentPosition) {
 800adfe:	4b3b      	ldr	r3, [pc, #236]	; (800aeec <HAL_TIM_PeriodElapsedCallback+0x204>)
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	4b3b      	ldr	r3, [pc, #236]	; (800aef0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	dd48      	ble.n	800ae9c <HAL_TIM_PeriodElapsedCallback+0x1b4>
					HAL_GPIO_WritePin(GPIOD, STEPPER_DIR_Pin, GPIO_PIN_SET);
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	2104      	movs	r1, #4
 800ae0e:	4839      	ldr	r0, [pc, #228]	; (800aef4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800ae10:	f7f7 f8b6 	bl	8001f80 <HAL_GPIO_WritePin>
					state = 1;
 800ae14:	4b34      	ldr	r3, [pc, #208]	; (800aee8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800ae16:	2201      	movs	r2, #1
 800ae18:	801a      	strh	r2, [r3, #0]
				break;
 800ae1a:	e03f      	b.n	800ae9c <HAL_TIM_PeriodElapsedCallback+0x1b4>

			case 1:
				// Step = 0; Dir = 1
				if( desiredPosition > currentPosition ) {
 800ae1c:	4b33      	ldr	r3, [pc, #204]	; (800aeec <HAL_TIM_PeriodElapsedCallback+0x204>)
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	4b33      	ldr	r3, [pc, #204]	; (800aef0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	dd08      	ble.n	800ae3a <HAL_TIM_PeriodElapsedCallback+0x152>
	//                GPIO_SET_STEP;
					HAL_GPIO_WritePin(GPIOD, STEPPER_STEP_Pin, GPIO_PIN_SET);
 800ae28:	2201      	movs	r2, #1
 800ae2a:	2102      	movs	r1, #2
 800ae2c:	4831      	ldr	r0, [pc, #196]	; (800aef4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800ae2e:	f7f7 f8a7 	bl	8001f80 <HAL_GPIO_WritePin>
					state = 3;
 800ae32:	4b2d      	ldr	r3, [pc, #180]	; (800aee8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800ae34:	2203      	movs	r2, #3
 800ae36:	801a      	strh	r2, [r3, #0]
				else if( desiredPosition < currentPosition ) {
	//                GPIO_CLEAR_DIRECTION;
					HAL_GPIO_WritePin(GPIOD, STEPPER_DIR_Pin, GPIO_PIN_RESET);
					state = 0;
				}
				break;
 800ae38:	e032      	b.n	800aea0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
				else if( desiredPosition < currentPosition ) {
 800ae3a:	4b2c      	ldr	r3, [pc, #176]	; (800aeec <HAL_TIM_PeriodElapsedCallback+0x204>)
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	4b2c      	ldr	r3, [pc, #176]	; (800aef0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	da2c      	bge.n	800aea0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
					HAL_GPIO_WritePin(GPIOD, STEPPER_DIR_Pin, GPIO_PIN_RESET);
 800ae46:	2200      	movs	r2, #0
 800ae48:	2104      	movs	r1, #4
 800ae4a:	482a      	ldr	r0, [pc, #168]	; (800aef4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800ae4c:	f7f7 f898 	bl	8001f80 <HAL_GPIO_WritePin>
					state = 0;
 800ae50:	4b25      	ldr	r3, [pc, #148]	; (800aee8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	801a      	strh	r2, [r3, #0]
				break;
 800ae56:	e023      	b.n	800aea0 <HAL_TIM_PeriodElapsedCallback+0x1b8>

			case 2:
				// Step = 1; Dir = 0
	//            GPIO_CLEAR_STEP;
				HAL_GPIO_WritePin(GPIOD, STEPPER_STEP_Pin, GPIO_PIN_RESET);
 800ae58:	2200      	movs	r2, #0
 800ae5a:	2102      	movs	r1, #2
 800ae5c:	4825      	ldr	r0, [pc, #148]	; (800aef4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800ae5e:	f7f7 f88f 	bl	8001f80 <HAL_GPIO_WritePin>
				currentPosition--;
 800ae62:	4b23      	ldr	r3, [pc, #140]	; (800aef0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	4a21      	ldr	r2, [pc, #132]	; (800aef0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800ae6a:	6013      	str	r3, [r2, #0]
				state = 0;
 800ae6c:	4b1e      	ldr	r3, [pc, #120]	; (800aee8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	801a      	strh	r2, [r3, #0]
				break;
 800ae72:	e016      	b.n	800aea2 <HAL_TIM_PeriodElapsedCallback+0x1ba>

			case 3:
				// Step = 1; Dir = 1
	//            GPIO_CLEAR_STEP;
				HAL_GPIO_WritePin(GPIOD, STEPPER_STEP_Pin, GPIO_PIN_RESET);
 800ae74:	2200      	movs	r2, #0
 800ae76:	2102      	movs	r1, #2
 800ae78:	481e      	ldr	r0, [pc, #120]	; (800aef4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800ae7a:	f7f7 f881 	bl	8001f80 <HAL_GPIO_WritePin>
				currentPosition++;
 800ae7e:	4b1c      	ldr	r3, [pc, #112]	; (800aef0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3301      	adds	r3, #1
 800ae84:	4a1a      	ldr	r2, [pc, #104]	; (800aef0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800ae86:	6013      	str	r3, [r2, #0]
				state = 1;
 800ae88:	4b17      	ldr	r3, [pc, #92]	; (800aee8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	801a      	strh	r2, [r3, #0]
				break;
 800ae8e:	bf00      	nop
 800ae90:	e007      	b.n	800aea2 <HAL_TIM_PeriodElapsedCallback+0x1ba>
			}

		} else {
			// not enabled; just keep current position in sync
			currentPosition = desiredPosition;
 800ae92:	4b16      	ldr	r3, [pc, #88]	; (800aeec <HAL_TIM_PeriodElapsedCallback+0x204>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a16      	ldr	r2, [pc, #88]	; (800aef0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800ae98:	6013      	str	r3, [r2, #0]
 800ae9a:	e002      	b.n	800aea2 <HAL_TIM_PeriodElapsedCallback+0x1ba>
				break;
 800ae9c:	bf00      	nop
 800ae9e:	e000      	b.n	800aea2 <HAL_TIM_PeriodElapsedCallback+0x1ba>
				break;
 800aea0:	bf00      	nop
		}
		update_counter++;
 800aea2:	4b15      	ldr	r3, [pc, #84]	; (800aef8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3301      	adds	r3, #1
 800aea8:	4a13      	ldr	r2, [pc, #76]	; (800aef8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800aeaa:	6013      	str	r3, [r2, #0]
	else if (htim->Instance==TIM4){

		compute_rpm();

	}
}
 800aeac:	e006      	b.n	800aebc <HAL_TIM_PeriodElapsedCallback+0x1d4>
	else if (htim->Instance==TIM4){
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a12      	ldr	r2, [pc, #72]	; (800aefc <HAL_TIM_PeriodElapsedCallback+0x214>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d101      	bne.n	800aebc <HAL_TIM_PeriodElapsedCallback+0x1d4>
		compute_rpm();
 800aeb8:	f7ff fe04 	bl	800aac4 <compute_rpm>
}
 800aebc:	bf00      	nop
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	40000400 	.word	0x40000400
 800aec8:	2000036c 	.word	0x2000036c
 800aecc:	20000108 	.word	0x20000108
 800aed0:	2000048c 	.word	0x2000048c
 800aed4:	20000060 	.word	0x20000060
 800aed8:	20000488 	.word	0x20000488
 800aedc:	2000005c 	.word	0x2000005c
 800aee0:	20000492 	.word	0x20000492
 800aee4:	20000054 	.word	0x20000054
 800aee8:	20000490 	.word	0x20000490
 800aeec:	20000498 	.word	0x20000498
 800aef0:	20000494 	.word	0x20000494
 800aef4:	40020c00 	.word	0x40020c00
 800aef8:	20000104 	.word	0x20000104
 800aefc:	40000800 	.word	0x40000800

0800af00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af06:	2300      	movs	r3, #0
 800af08:	607b      	str	r3, [r7, #4]
 800af0a:	4a10      	ldr	r2, [pc, #64]	; (800af4c <HAL_MspInit+0x4c>)
 800af0c:	4b0f      	ldr	r3, [pc, #60]	; (800af4c <HAL_MspInit+0x4c>)
 800af0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af14:	6453      	str	r3, [r2, #68]	; 0x44
 800af16:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <HAL_MspInit+0x4c>)
 800af18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af1e:	607b      	str	r3, [r7, #4]
 800af20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800af22:	2300      	movs	r3, #0
 800af24:	603b      	str	r3, [r7, #0]
 800af26:	4a09      	ldr	r2, [pc, #36]	; (800af4c <HAL_MspInit+0x4c>)
 800af28:	4b08      	ldr	r3, [pc, #32]	; (800af4c <HAL_MspInit+0x4c>)
 800af2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af30:	6413      	str	r3, [r2, #64]	; 0x40
 800af32:	4b06      	ldr	r3, [pc, #24]	; (800af4c <HAL_MspInit+0x4c>)
 800af34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af3a:	603b      	str	r3, [r7, #0]
 800af3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800af3e:	2007      	movs	r0, #7
 800af40:	f7f6 f8a2 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800af44:	bf00      	nop
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	40023800 	.word	0x40023800

0800af50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08a      	sub	sp, #40	; 0x28
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af58:	f107 0314 	add.w	r3, r7, #20
 800af5c:	2200      	movs	r2, #0
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	605a      	str	r2, [r3, #4]
 800af62:	609a      	str	r2, [r3, #8]
 800af64:	60da      	str	r2, [r3, #12]
 800af66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a19      	ldr	r2, [pc, #100]	; (800afd4 <HAL_I2C_MspInit+0x84>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d12c      	bne.n	800afcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af72:	2300      	movs	r3, #0
 800af74:	613b      	str	r3, [r7, #16]
 800af76:	4a18      	ldr	r2, [pc, #96]	; (800afd8 <HAL_I2C_MspInit+0x88>)
 800af78:	4b17      	ldr	r3, [pc, #92]	; (800afd8 <HAL_I2C_MspInit+0x88>)
 800af7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7c:	f043 0302 	orr.w	r3, r3, #2
 800af80:	6313      	str	r3, [r2, #48]	; 0x30
 800af82:	4b15      	ldr	r3, [pc, #84]	; (800afd8 <HAL_I2C_MspInit+0x88>)
 800af84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af86:	f003 0302 	and.w	r3, r3, #2
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800af8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 800af92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800af94:	2312      	movs	r3, #18
 800af96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800af98:	2301      	movs	r3, #1
 800af9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af9c:	2300      	movs	r3, #0
 800af9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800afa0:	2304      	movs	r3, #4
 800afa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800afa4:	f107 0314 	add.w	r3, r7, #20
 800afa8:	4619      	mov	r1, r3
 800afaa:	480c      	ldr	r0, [pc, #48]	; (800afdc <HAL_I2C_MspInit+0x8c>)
 800afac:	f7f6 fe4e 	bl	8001c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800afb0:	2300      	movs	r3, #0
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	4a08      	ldr	r2, [pc, #32]	; (800afd8 <HAL_I2C_MspInit+0x88>)
 800afb6:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <HAL_I2C_MspInit+0x88>)
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800afbe:	6413      	str	r3, [r2, #64]	; 0x40
 800afc0:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <HAL_I2C_MspInit+0x88>)
 800afc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800afcc:	bf00      	nop
 800afce:	3728      	adds	r7, #40	; 0x28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	40005400 	.word	0x40005400
 800afd8:	40023800 	.word	0x40023800
 800afdc:	40020400 	.word	0x40020400

0800afe0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b08e      	sub	sp, #56	; 0x38
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	605a      	str	r2, [r3, #4]
 800aff2:	609a      	str	r2, [r3, #8]
 800aff4:	60da      	str	r2, [r3, #12]
 800aff6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a59      	ldr	r2, [pc, #356]	; (800b164 <HAL_I2S_MspInit+0x184>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d15b      	bne.n	800b0ba <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b002:	2300      	movs	r3, #0
 800b004:	623b      	str	r3, [r7, #32]
 800b006:	4a58      	ldr	r2, [pc, #352]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b008:	4b57      	ldr	r3, [pc, #348]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b010:	6413      	str	r3, [r2, #64]	; 0x40
 800b012:	4b55      	ldr	r3, [pc, #340]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b01a:	623b      	str	r3, [r7, #32]
 800b01c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b01e:	2300      	movs	r3, #0
 800b020:	61fb      	str	r3, [r7, #28]
 800b022:	4a51      	ldr	r2, [pc, #324]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b024:	4b50      	ldr	r3, [pc, #320]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b028:	f043 0304 	orr.w	r3, r3, #4
 800b02c:	6313      	str	r3, [r2, #48]	; 0x30
 800b02e:	4b4e      	ldr	r3, [pc, #312]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b032:	f003 0304 	and.w	r3, r3, #4
 800b036:	61fb      	str	r3, [r7, #28]
 800b038:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b03a:	2300      	movs	r3, #0
 800b03c:	61bb      	str	r3, [r7, #24]
 800b03e:	4a4a      	ldr	r2, [pc, #296]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b040:	4b49      	ldr	r3, [pc, #292]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b044:	f043 0302 	orr.w	r3, r3, #2
 800b048:	6313      	str	r3, [r2, #48]	; 0x30
 800b04a:	4b47      	ldr	r3, [pc, #284]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b04e:	f003 0302 	and.w	r3, r3, #2
 800b052:	61bb      	str	r3, [r7, #24]
 800b054:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b056:	2304      	movs	r3, #4
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b05a:	2302      	movs	r3, #2
 800b05c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b05e:	2300      	movs	r3, #0
 800b060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b062:	2300      	movs	r3, #0
 800b064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800b066:	2306      	movs	r3, #6
 800b068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b06a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b06e:	4619      	mov	r1, r3
 800b070:	483e      	ldr	r0, [pc, #248]	; (800b16c <HAL_I2S_MspInit+0x18c>)
 800b072:	f7f6 fdeb 	bl	8001c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800b076:	2308      	movs	r3, #8
 800b078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b07a:	2302      	movs	r3, #2
 800b07c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b07e:	2300      	movs	r3, #0
 800b080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b082:	2300      	movs	r3, #0
 800b084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b086:	2305      	movs	r3, #5
 800b088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800b08a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b08e:	4619      	mov	r1, r3
 800b090:	4836      	ldr	r0, [pc, #216]	; (800b16c <HAL_I2S_MspInit+0x18c>)
 800b092:	f7f6 fddb 	bl	8001c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800b096:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b09a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b09c:	2302      	movs	r3, #2
 800b09e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b0a8:	2305      	movs	r3, #5
 800b0aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	482f      	ldr	r0, [pc, #188]	; (800b170 <HAL_I2S_MspInit+0x190>)
 800b0b4:	f7f6 fdca 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800b0b8:	e04f      	b.n	800b15a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a2d      	ldr	r2, [pc, #180]	; (800b174 <HAL_I2S_MspInit+0x194>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d14a      	bne.n	800b15a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	617b      	str	r3, [r7, #20]
 800b0c8:	4a27      	ldr	r2, [pc, #156]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b0ca:	4b27      	ldr	r3, [pc, #156]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0d2:	6413      	str	r3, [r2, #64]	; 0x40
 800b0d4:	4b24      	ldr	r3, [pc, #144]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0dc:	617b      	str	r3, [r7, #20]
 800b0de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	613b      	str	r3, [r7, #16]
 800b0e4:	4a20      	ldr	r2, [pc, #128]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b0e6:	4b20      	ldr	r3, [pc, #128]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	f043 0301 	orr.w	r3, r3, #1
 800b0ee:	6313      	str	r3, [r2, #48]	; 0x30
 800b0f0:	4b1d      	ldr	r3, [pc, #116]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	613b      	str	r3, [r7, #16]
 800b0fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	4a19      	ldr	r2, [pc, #100]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b102:	4b19      	ldr	r3, [pc, #100]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b106:	f043 0304 	orr.w	r3, r3, #4
 800b10a:	6313      	str	r3, [r2, #48]	; 0x30
 800b10c:	4b16      	ldr	r3, [pc, #88]	; (800b168 <HAL_I2S_MspInit+0x188>)
 800b10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b110:	f003 0304 	and.w	r3, r3, #4
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800b118:	2310      	movs	r3, #16
 800b11a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b11c:	2302      	movs	r3, #2
 800b11e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b120:	2300      	movs	r3, #0
 800b122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b124:	2300      	movs	r3, #0
 800b126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b128:	2306      	movs	r3, #6
 800b12a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800b12c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b130:	4619      	mov	r1, r3
 800b132:	4811      	ldr	r0, [pc, #68]	; (800b178 <HAL_I2S_MspInit+0x198>)
 800b134:	f7f6 fd8a 	bl	8001c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800b138:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800b13c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b13e:	2302      	movs	r3, #2
 800b140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b142:	2300      	movs	r3, #0
 800b144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b146:	2300      	movs	r3, #0
 800b148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b14a:	2306      	movs	r3, #6
 800b14c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b14e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b152:	4619      	mov	r1, r3
 800b154:	4805      	ldr	r0, [pc, #20]	; (800b16c <HAL_I2S_MspInit+0x18c>)
 800b156:	f7f6 fd79 	bl	8001c4c <HAL_GPIO_Init>
}
 800b15a:	bf00      	nop
 800b15c:	3738      	adds	r7, #56	; 0x38
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	40003800 	.word	0x40003800
 800b168:	40023800 	.word	0x40023800
 800b16c:	40020800 	.word	0x40020800
 800b170:	40020400 	.word	0x40020400
 800b174:	40003c00 	.word	0x40003c00
 800b178:	40020000 	.word	0x40020000

0800b17c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08c      	sub	sp, #48	; 0x30
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b184:	f107 031c 	add.w	r3, r7, #28
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]
 800b18c:	605a      	str	r2, [r3, #4]
 800b18e:	609a      	str	r2, [r3, #8]
 800b190:	60da      	str	r2, [r3, #12]
 800b192:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a4d      	ldr	r2, [pc, #308]	; (800b2d0 <HAL_SPI_MspInit+0x154>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d12c      	bne.n	800b1f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b19e:	2300      	movs	r3, #0
 800b1a0:	61bb      	str	r3, [r7, #24]
 800b1a2:	4a4c      	ldr	r2, [pc, #304]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b1a4:	4b4b      	ldr	r3, [pc, #300]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b1a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b1ac:	6453      	str	r3, [r2, #68]	; 0x44
 800b1ae:	4b49      	ldr	r3, [pc, #292]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b1b6:	61bb      	str	r3, [r7, #24]
 800b1b8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	617b      	str	r3, [r7, #20]
 800b1be:	4a45      	ldr	r2, [pc, #276]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b1c0:	4b44      	ldr	r3, [pc, #272]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c4:	f043 0301 	orr.w	r3, r3, #1
 800b1c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b1ca:	4b42      	ldr	r3, [pc, #264]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	617b      	str	r3, [r7, #20]
 800b1d4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800b1d6:	23e0      	movs	r3, #224	; 0xe0
 800b1d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1da:	2302      	movs	r3, #2
 800b1dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b1e6:	2305      	movs	r3, #5
 800b1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1ea:	f107 031c 	add.w	r3, r7, #28
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	4839      	ldr	r0, [pc, #228]	; (800b2d8 <HAL_SPI_MspInit+0x15c>)
 800b1f2:	f7f6 fd2b 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800b1f6:	e067      	b.n	800b2c8 <HAL_SPI_MspInit+0x14c>
  else if(hspi->Instance==SPI4)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a37      	ldr	r2, [pc, #220]	; (800b2dc <HAL_SPI_MspInit+0x160>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d162      	bne.n	800b2c8 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800b202:	2300      	movs	r3, #0
 800b204:	613b      	str	r3, [r7, #16]
 800b206:	4a33      	ldr	r2, [pc, #204]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b208:	4b32      	ldr	r3, [pc, #200]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b20c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b210:	6453      	str	r3, [r2, #68]	; 0x44
 800b212:	4b30      	ldr	r3, [pc, #192]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b21a:	613b      	str	r3, [r7, #16]
 800b21c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b21e:	2300      	movs	r3, #0
 800b220:	60fb      	str	r3, [r7, #12]
 800b222:	4a2c      	ldr	r2, [pc, #176]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b224:	4b2b      	ldr	r3, [pc, #172]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b228:	f043 0310 	orr.w	r3, r3, #16
 800b22c:	6313      	str	r3, [r2, #48]	; 0x30
 800b22e:	4b29      	ldr	r3, [pc, #164]	; (800b2d4 <HAL_SPI_MspInit+0x158>)
 800b230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b232:	f003 0310 	and.w	r3, r3, #16
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 800b23a:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 800b23e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b240:	2302      	movs	r3, #2
 800b242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b244:	2300      	movs	r3, #0
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b248:	2303      	movs	r3, #3
 800b24a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800b24c:	2305      	movs	r3, #5
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b250:	f107 031c 	add.w	r3, r7, #28
 800b254:	4619      	mov	r1, r3
 800b256:	4822      	ldr	r0, [pc, #136]	; (800b2e0 <HAL_SPI_MspInit+0x164>)
 800b258:	f7f6 fcf8 	bl	8001c4c <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800b25c:	4b21      	ldr	r3, [pc, #132]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b25e:	4a22      	ldr	r2, [pc, #136]	; (800b2e8 <HAL_SPI_MspInit+0x16c>)
 800b260:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800b262:	4b20      	ldr	r3, [pc, #128]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b264:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b268:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b26a:	4b1e      	ldr	r3, [pc, #120]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b26c:	2240      	movs	r2, #64	; 0x40
 800b26e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b270:	4b1c      	ldr	r3, [pc, #112]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b272:	2200      	movs	r2, #0
 800b274:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b276:	4b1b      	ldr	r3, [pc, #108]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b27c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b27e:	4b19      	ldr	r3, [pc, #100]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b280:	2200      	movs	r2, #0
 800b282:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b284:	4b17      	ldr	r3, [pc, #92]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b286:	2200      	movs	r2, #0
 800b288:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800b28a:	4b16      	ldr	r3, [pc, #88]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b290:	4b14      	ldr	r3, [pc, #80]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b292:	2200      	movs	r2, #0
 800b294:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b296:	4b13      	ldr	r3, [pc, #76]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b298:	2200      	movs	r2, #0
 800b29a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800b29c:	4811      	ldr	r0, [pc, #68]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b29e:	f7f5 ff35 	bl	800110c <HAL_DMA_Init>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <HAL_SPI_MspInit+0x130>
      Error_Handler();
 800b2a8:	f7ff f944 	bl	800a534 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4a0d      	ldr	r2, [pc, #52]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b2b0:	649a      	str	r2, [r3, #72]	; 0x48
 800b2b2:	4a0c      	ldr	r2, [pc, #48]	; (800b2e4 <HAL_SPI_MspInit+0x168>)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	2054      	movs	r0, #84	; 0x54
 800b2be:	f7f5 feee 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800b2c2:	2054      	movs	r0, #84	; 0x54
 800b2c4:	f7f5 ff07 	bl	80010d6 <HAL_NVIC_EnableIRQ>
}
 800b2c8:	bf00      	nop
 800b2ca:	3730      	adds	r7, #48	; 0x30
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	40013000 	.word	0x40013000
 800b2d4:	40023800 	.word	0x40023800
 800b2d8:	40020000 	.word	0x40020000
 800b2dc:	40013400 	.word	0x40013400
 800b2e0:	40021000 	.word	0x40021000
 800b2e4:	2000021c 	.word	0x2000021c
 800b2e8:	40026428 	.word	0x40026428

0800b2ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08c      	sub	sp, #48	; 0x30
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2f4:	f107 031c 	add.w	r3, r7, #28
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	605a      	str	r2, [r3, #4]
 800b2fe:	609a      	str	r2, [r3, #8]
 800b300:	60da      	str	r2, [r3, #12]
 800b302:	611a      	str	r2, [r3, #16]

  if(htim_encoder->Instance==TIM1)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a37      	ldr	r2, [pc, #220]	; (800b3e8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d12d      	bne.n	800b36a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b30e:	2300      	movs	r3, #0
 800b310:	61bb      	str	r3, [r7, #24]
 800b312:	4a36      	ldr	r2, [pc, #216]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b314:	4b35      	ldr	r3, [pc, #212]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b318:	f043 0301 	orr.w	r3, r3, #1
 800b31c:	6453      	str	r3, [r2, #68]	; 0x44
 800b31e:	4b33      	ldr	r3, [pc, #204]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	61bb      	str	r3, [r7, #24]
 800b328:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b32a:	2300      	movs	r3, #0
 800b32c:	617b      	str	r3, [r7, #20]
 800b32e:	4a2f      	ldr	r2, [pc, #188]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b330:	4b2e      	ldr	r3, [pc, #184]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b334:	f043 0310 	orr.w	r3, r3, #16
 800b338:	6313      	str	r3, [r2, #48]	; 0x30
 800b33a:	4b2c      	ldr	r3, [pc, #176]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33e:	f003 0310 	and.w	r3, r3, #16
 800b342:	617b      	str	r3, [r7, #20]
 800b344:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800b346:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800b34a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b34c:	2302      	movs	r3, #2
 800b34e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b350:	2300      	movs	r3, #0
 800b352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b354:	2300      	movs	r3, #0
 800b356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b358:	2301      	movs	r3, #1
 800b35a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b35c:	f107 031c 	add.w	r3, r7, #28
 800b360:	4619      	mov	r1, r3
 800b362:	4823      	ldr	r0, [pc, #140]	; (800b3f0 <HAL_TIM_Encoder_MspInit+0x104>)
 800b364:	f7f6 fc72 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b368:	e039      	b.n	800b3de <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM2)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b372:	d134      	bne.n	800b3de <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b374:	2300      	movs	r3, #0
 800b376:	613b      	str	r3, [r7, #16]
 800b378:	4a1c      	ldr	r2, [pc, #112]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b37a:	4b1c      	ldr	r3, [pc, #112]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37e:	f043 0301 	orr.w	r3, r3, #1
 800b382:	6413      	str	r3, [r2, #64]	; 0x40
 800b384:	4b19      	ldr	r3, [pc, #100]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	613b      	str	r3, [r7, #16]
 800b38e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b390:	2300      	movs	r3, #0
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	4a15      	ldr	r2, [pc, #84]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b396:	4b15      	ldr	r3, [pc, #84]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39a:	f043 0301 	orr.w	r3, r3, #1
 800b39e:	6313      	str	r3, [r2, #48]	; 0x30
 800b3a0:	4b12      	ldr	r3, [pc, #72]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x100>)
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a4:	f003 0301 	and.w	r3, r3, #1
 800b3a8:	60fb      	str	r3, [r7, #12]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800b3ac:	f248 0302 	movw	r3, #32770	; 0x8002
 800b3b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3c2:	f107 031c 	add.w	r3, r7, #28
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	480a      	ldr	r0, [pc, #40]	; (800b3f4 <HAL_TIM_Encoder_MspInit+0x108>)
 800b3ca:	f7f6 fc3f 	bl	8001c4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	201c      	movs	r0, #28
 800b3d4:	f7f5 fe63 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b3d8:	201c      	movs	r0, #28
 800b3da:	f7f5 fe7c 	bl	80010d6 <HAL_NVIC_EnableIRQ>
}
 800b3de:	bf00      	nop
 800b3e0:	3730      	adds	r7, #48	; 0x30
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	40010000 	.word	0x40010000
 800b3ec:	40023800 	.word	0x40023800
 800b3f0:	40021000 	.word	0x40021000
 800b3f4:	40020000 	.word	0x40020000

0800b3f8 <HAL_TIM_Base_MspInit>:

}


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a27      	ldr	r2, [pc, #156]	; (800b4a4 <HAL_TIM_Base_MspInit+0xac>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d12c      	bne.n	800b464 <HAL_TIM_Base_MspInit+0x6c>
  {

    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b40a:	2300      	movs	r3, #0
 800b40c:	617b      	str	r3, [r7, #20]
 800b40e:	4a26      	ldr	r2, [pc, #152]	; (800b4a8 <HAL_TIM_Base_MspInit+0xb0>)
 800b410:	4b25      	ldr	r3, [pc, #148]	; (800b4a8 <HAL_TIM_Base_MspInit+0xb0>)
 800b412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b414:	f043 0302 	orr.w	r3, r3, #2
 800b418:	6413      	str	r3, [r2, #64]	; 0x40
 800b41a:	4b23      	ldr	r3, [pc, #140]	; (800b4a8 <HAL_TIM_Base_MspInit+0xb0>)
 800b41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41e:	f003 0302 	and.w	r3, r3, #2
 800b422:	617b      	str	r3, [r7, #20]
 800b424:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b426:	2200      	movs	r2, #0
 800b428:	2100      	movs	r1, #0
 800b42a:	201d      	movs	r0, #29
 800b42c:	f7f5 fe37 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b430:	201d      	movs	r0, #29
 800b432:	f7f5 fe50 	bl	80010d6 <HAL_NVIC_EnableIRQ>

    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b436:	2300      	movs	r3, #0
 800b438:	613b      	str	r3, [r7, #16]
 800b43a:	4a1b      	ldr	r2, [pc, #108]	; (800b4a8 <HAL_TIM_Base_MspInit+0xb0>)
 800b43c:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <HAL_TIM_Base_MspInit+0xb0>)
 800b43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b440:	f043 0302 	orr.w	r3, r3, #2
 800b444:	6413      	str	r3, [r2, #64]	; 0x40
 800b446:	4b18      	ldr	r3, [pc, #96]	; (800b4a8 <HAL_TIM_Base_MspInit+0xb0>)
 800b448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44a:	f003 0302 	and.w	r3, r3, #2
 800b44e:	613b      	str	r3, [r7, #16]
 800b450:	693b      	ldr	r3, [r7, #16]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b452:	2200      	movs	r2, #0
 800b454:	2100      	movs	r1, #0
 800b456:	201d      	movs	r0, #29
 800b458:	f7f5 fe21 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b45c:	201d      	movs	r0, #29
 800b45e:	f7f5 fe3a 	bl	80010d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);

  }

}
 800b462:	e01a      	b.n	800b49a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a10      	ldr	r2, [pc, #64]	; (800b4ac <HAL_TIM_Base_MspInit+0xb4>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d115      	bne.n	800b49a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b46e:	2300      	movs	r3, #0
 800b470:	60fb      	str	r3, [r7, #12]
 800b472:	4a0d      	ldr	r2, [pc, #52]	; (800b4a8 <HAL_TIM_Base_MspInit+0xb0>)
 800b474:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <HAL_TIM_Base_MspInit+0xb0>)
 800b476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b478:	f043 0304 	orr.w	r3, r3, #4
 800b47c:	6413      	str	r3, [r2, #64]	; 0x40
 800b47e:	4b0a      	ldr	r3, [pc, #40]	; (800b4a8 <HAL_TIM_Base_MspInit+0xb0>)
 800b480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	60fb      	str	r3, [r7, #12]
 800b488:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800b48a:	2200      	movs	r2, #0
 800b48c:	2101      	movs	r1, #1
 800b48e:	201e      	movs	r0, #30
 800b490:	f7f5 fe05 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b494:	201e      	movs	r0, #30
 800b496:	f7f5 fe1e 	bl	80010d6 <HAL_NVIC_EnableIRQ>
}
 800b49a:	bf00      	nop
 800b49c:	3718      	adds	r7, #24
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	40000400 	.word	0x40000400
 800b4a8:	40023800 	.word	0x40023800
 800b4ac:	40000800 	.word	0x40000800

0800b4b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b4b4:	bf00      	nop
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)

{
 800b4be:	b480      	push	{r7}
 800b4c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b4c2:	e7fe      	b.n	800b4c2 <HardFault_Handler+0x4>

0800b4c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b4c8:	e7fe      	b.n	800b4c8 <MemManage_Handler+0x4>

0800b4ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b4ce:	e7fe      	b.n	800b4ce <BusFault_Handler+0x4>

0800b4d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b4d4:	e7fe      	b.n	800b4d4 <UsageFault_Handler+0x4>

0800b4d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b4da:	bf00      	nop
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b4e8:	bf00      	nop
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b4f6:	bf00      	nop
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b504:	f7f5 fcb0 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b508:	bf00      	nop
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b510:	4802      	ldr	r0, [pc, #8]	; (800b51c <TIM2_IRQHandler+0x10>)
 800b512:	f7fa fa94 	bl	8005a3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b516:	bf00      	nop
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	2000036c 	.word	0x2000036c

0800b520 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b524:	4802      	ldr	r0, [pc, #8]	; (800b530 <TIM3_IRQHandler+0x10>)
 800b526:	f7fa fa8a 	bl	8005a3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 800b52a:	bf00      	nop
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	200001dc 	.word	0x200001dc

0800b534 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b538:	4802      	ldr	r0, [pc, #8]	; (800b544 <TIM4_IRQHandler+0x10>)
 800b53a:	f7fa fa80 	bl	8005a3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b53e:	bf00      	nop
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20000148 	.word	0x20000148

0800b548 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
  spi4_dma_completed = 1;
 800b54c:	4b03      	ldr	r3, [pc, #12]	; (800b55c <DMA2_Stream1_IRQHandler+0x14>)
 800b54e:	2201      	movs	r2, #1
 800b550:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800b552:	4803      	ldr	r0, [pc, #12]	; (800b560 <DMA2_Stream1_IRQHandler+0x18>)
 800b554:	f7f5 ff0a 	bl	800136c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800b558:	bf00      	nop
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	2000010c 	.word	0x2000010c
 800b560:	2000021c 	.word	0x2000021c

0800b564 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800b568:	4802      	ldr	r0, [pc, #8]	; (800b574 <OTG_FS_IRQHandler+0x10>)
 800b56a:	f7f6 ffc3 	bl	80024f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b56e:	bf00      	nop
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	20000868 	.word	0x20000868

0800b578 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800b57c:	4802      	ldr	r0, [pc, #8]	; (800b588 <SPI4_IRQHandler+0x10>)
 800b57e:	f7f9 ff27 	bl	80053d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800b582:	bf00      	nop
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	2000027c 	.word	0x2000027c

0800b58c <get_spi4_dma_completed>:

/* USER CODE BEGIN 1 */
uint8_t get_spi4_dma_completed(void){
 800b58c:	b480      	push	{r7}
 800b58e:	af00      	add	r7, sp, #0
	return spi4_dma_completed;
 800b590:	4b03      	ldr	r3, [pc, #12]	; (800b5a0 <get_spi4_dma_completed+0x14>)
 800b592:	781b      	ldrb	r3, [r3, #0]
}
 800b594:	4618      	mov	r0, r3
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	2000010c 	.word	0x2000010c

0800b5a4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b5ac:	4b11      	ldr	r3, [pc, #68]	; (800b5f4 <_sbrk+0x50>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d102      	bne.n	800b5ba <_sbrk+0x16>
		heap_end = &end;
 800b5b4:	4b0f      	ldr	r3, [pc, #60]	; (800b5f4 <_sbrk+0x50>)
 800b5b6:	4a10      	ldr	r2, [pc, #64]	; (800b5f8 <_sbrk+0x54>)
 800b5b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b5ba:	4b0e      	ldr	r3, [pc, #56]	; (800b5f4 <_sbrk+0x50>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b5c0:	4b0c      	ldr	r3, [pc, #48]	; (800b5f4 <_sbrk+0x50>)
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	466a      	mov	r2, sp
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d907      	bls.n	800b5de <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800b5ce:	f000 fb7d 	bl	800bccc <__errno>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	230c      	movs	r3, #12
 800b5d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5dc:	e006      	b.n	800b5ec <_sbrk+0x48>
	}

	heap_end += incr;
 800b5de:	4b05      	ldr	r3, [pc, #20]	; (800b5f4 <_sbrk+0x50>)
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	4a03      	ldr	r2, [pc, #12]	; (800b5f4 <_sbrk+0x50>)
 800b5e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	20000110 	.word	0x20000110
 800b5f8:	20000b30 	.word	0x20000b30

0800b5fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b600:	4a16      	ldr	r2, [pc, #88]	; (800b65c <SystemInit+0x60>)
 800b602:	4b16      	ldr	r3, [pc, #88]	; (800b65c <SystemInit+0x60>)
 800b604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b60c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b610:	4a13      	ldr	r2, [pc, #76]	; (800b660 <SystemInit+0x64>)
 800b612:	4b13      	ldr	r3, [pc, #76]	; (800b660 <SystemInit+0x64>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f043 0301 	orr.w	r3, r3, #1
 800b61a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b61c:	4b10      	ldr	r3, [pc, #64]	; (800b660 <SystemInit+0x64>)
 800b61e:	2200      	movs	r2, #0
 800b620:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b622:	4a0f      	ldr	r2, [pc, #60]	; (800b660 <SystemInit+0x64>)
 800b624:	4b0e      	ldr	r3, [pc, #56]	; (800b660 <SystemInit+0x64>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b62c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b630:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <SystemInit+0x64>)
 800b634:	4a0b      	ldr	r2, [pc, #44]	; (800b664 <SystemInit+0x68>)
 800b636:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b638:	4a09      	ldr	r2, [pc, #36]	; (800b660 <SystemInit+0x64>)
 800b63a:	4b09      	ldr	r3, [pc, #36]	; (800b660 <SystemInit+0x64>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b642:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b644:	4b06      	ldr	r3, [pc, #24]	; (800b660 <SystemInit+0x64>)
 800b646:	2200      	movs	r2, #0
 800b648:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b64a:	4b04      	ldr	r3, [pc, #16]	; (800b65c <SystemInit+0x60>)
 800b64c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b650:	609a      	str	r2, [r3, #8]
#endif
}
 800b652:	bf00      	nop
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	e000ed00 	.word	0xe000ed00
 800b660:	40023800 	.word	0x40023800
 800b664:	24003010 	.word	0x24003010

0800b668 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b66c:	2201      	movs	r2, #1
 800b66e:	490e      	ldr	r1, [pc, #56]	; (800b6a8 <MX_USB_HOST_Init+0x40>)
 800b670:	480e      	ldr	r0, [pc, #56]	; (800b6ac <MX_USB_HOST_Init+0x44>)
 800b672:	f7fc f833 	bl	80076dc <USBH_Init>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b67c:	f7fe ff5a 	bl	800a534 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b680:	490b      	ldr	r1, [pc, #44]	; (800b6b0 <MX_USB_HOST_Init+0x48>)
 800b682:	480a      	ldr	r0, [pc, #40]	; (800b6ac <MX_USB_HOST_Init+0x44>)
 800b684:	f7fc f89d 	bl	80077c2 <USBH_RegisterClass>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b68e:	f7fe ff51 	bl	800a534 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b692:	4806      	ldr	r0, [pc, #24]	; (800b6ac <MX_USB_HOST_Init+0x44>)
 800b694:	f7fc f922 	bl	80078dc <USBH_Start>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b69e:	f7fe ff49 	bl	800a534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b6a2:	bf00      	nop
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	0800b6c9 	.word	0x0800b6c9
 800b6ac:	2000049c 	.word	0x2000049c
 800b6b0:	20000008 	.word	0x20000008

0800b6b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b6b8:	4802      	ldr	r0, [pc, #8]	; (800b6c4 <MX_USB_HOST_Process+0x10>)
 800b6ba:	f7fc f91f 	bl	80078fc <USBH_Process>
}
 800b6be:	bf00      	nop
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	2000049c 	.word	0x2000049c

0800b6c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b6d4:	78fb      	ldrb	r3, [r7, #3]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d819      	bhi.n	800b710 <USBH_UserProcess+0x48>
 800b6dc:	a201      	add	r2, pc, #4	; (adr r2, 800b6e4 <USBH_UserProcess+0x1c>)
 800b6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e2:	bf00      	nop
 800b6e4:	0800b711 	.word	0x0800b711
 800b6e8:	0800b701 	.word	0x0800b701
 800b6ec:	0800b711 	.word	0x0800b711
 800b6f0:	0800b709 	.word	0x0800b709
 800b6f4:	0800b6f9 	.word	0x0800b6f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b6f8:	4b09      	ldr	r3, [pc, #36]	; (800b720 <USBH_UserProcess+0x58>)
 800b6fa:	2203      	movs	r2, #3
 800b6fc:	701a      	strb	r2, [r3, #0]
  break;
 800b6fe:	e008      	b.n	800b712 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b700:	4b07      	ldr	r3, [pc, #28]	; (800b720 <USBH_UserProcess+0x58>)
 800b702:	2202      	movs	r2, #2
 800b704:	701a      	strb	r2, [r3, #0]
  break;
 800b706:	e004      	b.n	800b712 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b708:	4b05      	ldr	r3, [pc, #20]	; (800b720 <USBH_UserProcess+0x58>)
 800b70a:	2201      	movs	r2, #1
 800b70c:	701a      	strb	r2, [r3, #0]
  break;
 800b70e:	e000      	b.n	800b712 <USBH_UserProcess+0x4a>

  default:
  break;
 800b710:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b712:	bf00      	nop
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	20000114 	.word	0x20000114

0800b724 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b08a      	sub	sp, #40	; 0x28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b72c:	f107 0314 	add.w	r3, r7, #20
 800b730:	2200      	movs	r2, #0
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	605a      	str	r2, [r3, #4]
 800b736:	609a      	str	r2, [r3, #8]
 800b738:	60da      	str	r2, [r3, #12]
 800b73a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b744:	d147      	bne.n	800b7d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b746:	2300      	movs	r3, #0
 800b748:	613b      	str	r3, [r7, #16]
 800b74a:	4a25      	ldr	r2, [pc, #148]	; (800b7e0 <HAL_HCD_MspInit+0xbc>)
 800b74c:	4b24      	ldr	r3, [pc, #144]	; (800b7e0 <HAL_HCD_MspInit+0xbc>)
 800b74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b750:	f043 0301 	orr.w	r3, r3, #1
 800b754:	6313      	str	r3, [r2, #48]	; 0x30
 800b756:	4b22      	ldr	r3, [pc, #136]	; (800b7e0 <HAL_HCD_MspInit+0xbc>)
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	613b      	str	r3, [r7, #16]
 800b760:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b762:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b768:	2300      	movs	r3, #0
 800b76a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b76c:	2300      	movs	r3, #0
 800b76e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b770:	f107 0314 	add.w	r3, r7, #20
 800b774:	4619      	mov	r1, r3
 800b776:	481b      	ldr	r0, [pc, #108]	; (800b7e4 <HAL_HCD_MspInit+0xc0>)
 800b778:	f7f6 fa68 	bl	8001c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b77c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b782:	2302      	movs	r3, #2
 800b784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b786:	2300      	movs	r3, #0
 800b788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b78a:	2303      	movs	r3, #3
 800b78c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b78e:	230a      	movs	r3, #10
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b792:	f107 0314 	add.w	r3, r7, #20
 800b796:	4619      	mov	r1, r3
 800b798:	4812      	ldr	r0, [pc, #72]	; (800b7e4 <HAL_HCD_MspInit+0xc0>)
 800b79a:	f7f6 fa57 	bl	8001c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b79e:	4a10      	ldr	r2, [pc, #64]	; (800b7e0 <HAL_HCD_MspInit+0xbc>)
 800b7a0:	4b0f      	ldr	r3, [pc, #60]	; (800b7e0 <HAL_HCD_MspInit+0xbc>)
 800b7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7a8:	6353      	str	r3, [r2, #52]	; 0x34
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60fb      	str	r3, [r7, #12]
 800b7ae:	4a0c      	ldr	r2, [pc, #48]	; (800b7e0 <HAL_HCD_MspInit+0xbc>)
 800b7b0:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <HAL_HCD_MspInit+0xbc>)
 800b7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b7b8:	6453      	str	r3, [r2, #68]	; 0x44
 800b7ba:	4b09      	ldr	r3, [pc, #36]	; (800b7e0 <HAL_HCD_MspInit+0xbc>)
 800b7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	2043      	movs	r0, #67	; 0x43
 800b7cc:	f7f5 fc67 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b7d0:	2043      	movs	r0, #67	; 0x43
 800b7d2:	f7f5 fc80 	bl	80010d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b7d6:	bf00      	nop
 800b7d8:	3728      	adds	r7, #40	; 0x28
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	40023800 	.word	0x40023800
 800b7e4:	40020000 	.word	0x40020000

0800b7e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fc fb31 	bl	8007e5e <USBH_LL_IncTimer>
}
 800b7fc:	bf00      	nop
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b812:	4618      	mov	r0, r3
 800b814:	f7fc fb76 	bl	8007f04 <USBH_LL_Connect>
}
 800b818:	bf00      	nop
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fc fb8e 	bl	8007f50 <USBH_LL_Disconnect>
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	70fb      	strb	r3, [r7, #3]
 800b848:	4613      	mov	r3, r2
 800b84a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b866:	4618      	mov	r0, r3
 800b868:	f7fc fb23 	bl	8007eb2 <USBH_LL_PortEnabled>
} 
 800b86c:	bf00      	nop
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b882:	4618      	mov	r0, r3
 800b884:	f7fc fb23 	bl	8007ece <USBH_LL_PortDisabled>
} 
 800b888:	bf00      	nop
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d12a      	bne.n	800b8f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b8a2:	4a18      	ldr	r2, [pc, #96]	; (800b904 <USBH_LL_Init+0x74>)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a15      	ldr	r2, [pc, #84]	; (800b904 <USBH_LL_Init+0x74>)
 800b8ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8b2:	4b14      	ldr	r3, [pc, #80]	; (800b904 <USBH_LL_Init+0x74>)
 800b8b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b8b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b8ba:	4b12      	ldr	r3, [pc, #72]	; (800b904 <USBH_LL_Init+0x74>)
 800b8bc:	2208      	movs	r2, #8
 800b8be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b8c0:	4b10      	ldr	r3, [pc, #64]	; (800b904 <USBH_LL_Init+0x74>)
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8c6:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <USBH_LL_Init+0x74>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <USBH_LL_Init+0x74>)
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <USBH_LL_Init+0x74>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b8d8:	480a      	ldr	r0, [pc, #40]	; (800b904 <USBH_LL_Init+0x74>)
 800b8da:	f7f6 fb85 	bl	8001fe8 <HAL_HCD_Init>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b8e4:	f7fe fe26 	bl	800a534 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b8e8:	4806      	ldr	r0, [pc, #24]	; (800b904 <USBH_LL_Init+0x74>)
 800b8ea:	f7f6 ff82 	bl	80027f2 <HAL_HCD_GetCurrentFrame>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7fc faa4 	bl	8007e40 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20000868 	.word	0x20000868

0800b908 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b91e:	4618      	mov	r0, r3
 800b920:	f7f6 feef 	bl	8002702 <HAL_HCD_Start>
 800b924:	4603      	mov	r3, r0
 800b926:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b928:	7bfb      	ldrb	r3, [r7, #15]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 f95c 	bl	800bbe8 <USBH_Get_USB_Status>
 800b930:	4603      	mov	r3, r0
 800b932:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b934:	7bbb      	ldrb	r3, [r7, #14]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b084      	sub	sp, #16
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b954:	4618      	mov	r0, r3
 800b956:	f7f6 fef7 	bl	8002748 <HAL_HCD_Stop>
 800b95a:	4603      	mov	r3, r0
 800b95c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
 800b960:	4618      	mov	r0, r3
 800b962:	f000 f941 	bl	800bbe8 <USBH_Get_USB_Status>
 800b966:	4603      	mov	r3, r0
 800b968:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b97c:	2301      	movs	r3, #1
 800b97e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b986:	4618      	mov	r0, r3
 800b988:	f7f6 ff41 	bl	800280e <HAL_HCD_GetCurrentSpeed>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d007      	beq.n	800b9a2 <USBH_LL_GetSpeed+0x2e>
 800b992:	2b01      	cmp	r3, #1
 800b994:	d302      	bcc.n	800b99c <USBH_LL_GetSpeed+0x28>
 800b996:	2b02      	cmp	r3, #2
 800b998:	d006      	beq.n	800b9a8 <USBH_LL_GetSpeed+0x34>
 800b99a:	e008      	b.n	800b9ae <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b99c:	2300      	movs	r3, #0
 800b99e:	73fb      	strb	r3, [r7, #15]
    break;
 800b9a0:	e008      	b.n	800b9b4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9a6:	e005      	b.n	800b9b4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ac:	e002      	b.n	800b9b4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b2:	bf00      	nop
  }
  return  speed;
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7f6 fed4 	bl	8002782 <HAL_HCD_ResetPort>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 f901 	bl	800bbe8 <USBH_Get_USB_Status>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b9ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba06:	78fa      	ldrb	r2, [r7, #3]
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f6 fedc 	bl	80027c8 <HAL_HCD_HC_GetXferCount>
 800ba10:	4603      	mov	r3, r0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ba1a:	b590      	push	{r4, r7, lr}
 800ba1c:	b089      	sub	sp, #36	; 0x24
 800ba1e:	af04      	add	r7, sp, #16
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	4608      	mov	r0, r1
 800ba24:	4611      	mov	r1, r2
 800ba26:	461a      	mov	r2, r3
 800ba28:	4603      	mov	r3, r0
 800ba2a:	70fb      	strb	r3, [r7, #3]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70bb      	strb	r3, [r7, #2]
 800ba30:	4613      	mov	r3, r2
 800ba32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800ba42:	787c      	ldrb	r4, [r7, #1]
 800ba44:	78ba      	ldrb	r2, [r7, #2]
 800ba46:	78f9      	ldrb	r1, [r7, #3]
 800ba48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ba4a:	9302      	str	r3, [sp, #8]
 800ba4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	4623      	mov	r3, r4
 800ba5a:	f7f6 fb27 	bl	80020ac <HAL_HCD_HC_Init>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 f8bf 	bl	800bbe8 <USBH_Get_USB_Status>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ba6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd90      	pop	{r4, r7, pc}

0800ba78 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba92:	78fa      	ldrb	r2, [r7, #3]
 800ba94:	4611      	mov	r1, r2
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7f6 fba0 	bl	80021dc <HAL_HCD_HC_Halt>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f000 f8a0 	bl	800bbe8 <USBH_Get_USB_Status>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800baac:	7bbb      	ldrb	r3, [r7, #14]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bab6:	b590      	push	{r4, r7, lr}
 800bab8:	b089      	sub	sp, #36	; 0x24
 800baba:	af04      	add	r7, sp, #16
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	4608      	mov	r0, r1
 800bac0:	4611      	mov	r1, r2
 800bac2:	461a      	mov	r2, r3
 800bac4:	4603      	mov	r3, r0
 800bac6:	70fb      	strb	r3, [r7, #3]
 800bac8:	460b      	mov	r3, r1
 800baca:	70bb      	strb	r3, [r7, #2]
 800bacc:	4613      	mov	r3, r2
 800bace:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800bade:	787c      	ldrb	r4, [r7, #1]
 800bae0:	78ba      	ldrb	r2, [r7, #2]
 800bae2:	78f9      	ldrb	r1, [r7, #3]
 800bae4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bae8:	9303      	str	r3, [sp, #12]
 800baea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800baec:	9302      	str	r3, [sp, #8]
 800baee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf0:	9301      	str	r3, [sp, #4]
 800baf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	4623      	mov	r3, r4
 800bafa:	f7f6 fb93 	bl	8002224 <HAL_HCD_HC_SubmitRequest>
 800bafe:	4603      	mov	r3, r0
 800bb00:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f000 f86f 	bl	800bbe8 <USBH_Get_USB_Status>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bb0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd90      	pop	{r4, r7, pc}

0800bb18 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb2a:	78fa      	ldrb	r2, [r7, #3]
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7f6 fe35 	bl	800279e <HAL_HCD_HC_GetURBState>
 800bb34:	4603      	mov	r3, r0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b082      	sub	sp, #8
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	460b      	mov	r3, r1
 800bb48:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d103      	bne.n	800bb5c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bb54:	78fb      	ldrb	r3, [r7, #3]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f872 	bl	800bc40 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bb5c:	20c8      	movs	r0, #200	; 0xc8
 800bb5e:	f7f5 f9a3 	bl	8000ea8 <HAL_Delay>
  return USBH_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	460b      	mov	r3, r1
 800bb76:	70fb      	strb	r3, [r7, #3]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb82:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bb84:	78fa      	ldrb	r2, [r7, #3]
 800bb86:	68f9      	ldr	r1, [r7, #12]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	440b      	add	r3, r1
 800bb92:	333b      	adds	r3, #59	; 0x3b
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00a      	beq.n	800bbb0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bb9a:	78fa      	ldrb	r2, [r7, #3]
 800bb9c:	68f9      	ldr	r1, [r7, #12]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4413      	add	r3, r2
 800bba4:	00db      	lsls	r3, r3, #3
 800bba6:	440b      	add	r3, r1
 800bba8:	3350      	adds	r3, #80	; 0x50
 800bbaa:	78ba      	ldrb	r2, [r7, #2]
 800bbac:	701a      	strb	r2, [r3, #0]
 800bbae:	e009      	b.n	800bbc4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bbb0:	78fa      	ldrb	r2, [r7, #3]
 800bbb2:	68f9      	ldr	r1, [r7, #12]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	440b      	add	r3, r1
 800bbbe:	3351      	adds	r3, #81	; 0x51
 800bbc0:	78ba      	ldrb	r2, [r7, #2]
 800bbc2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7f5 f964 	bl	8000ea8 <HAL_Delay>
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbf6:	79fb      	ldrb	r3, [r7, #7]
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d817      	bhi.n	800bc2c <USBH_Get_USB_Status+0x44>
 800bbfc:	a201      	add	r2, pc, #4	; (adr r2, 800bc04 <USBH_Get_USB_Status+0x1c>)
 800bbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc02:	bf00      	nop
 800bc04:	0800bc15 	.word	0x0800bc15
 800bc08:	0800bc1b 	.word	0x0800bc1b
 800bc0c:	0800bc21 	.word	0x0800bc21
 800bc10:	0800bc27 	.word	0x0800bc27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bc14:	2300      	movs	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]
    break;
 800bc18:	e00b      	b.n	800bc32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc1e:	e008      	b.n	800bc32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bc20:	2301      	movs	r3, #1
 800bc22:	73fb      	strb	r3, [r7, #15]
    break;
 800bc24:	e005      	b.n	800bc32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bc26:	2302      	movs	r3, #2
 800bc28:	73fb      	strb	r3, [r7, #15]
    break;
 800bc2a:	e002      	b.n	800bc32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc30:	bf00      	nop
  }
  return usb_status;
 800bc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4603      	mov	r3, r0
 800bc48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800bc4a:	79fb      	ldrb	r3, [r7, #7]
 800bc4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bc4e:	79fb      	ldrb	r3, [r7, #7]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800bc54:	2301      	movs	r3, #1
 800bc56:	73fb      	strb	r3, [r7, #15]
 800bc58:	e001      	b.n	800bc5e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
 800bc60:	461a      	mov	r2, r3
 800bc62:	2101      	movs	r1, #1
 800bc64:	4803      	ldr	r0, [pc, #12]	; (800bc74 <MX_DriverVbusFS+0x34>)
 800bc66:	f7f6 f98b 	bl	8001f80 <HAL_GPIO_WritePin>
}
 800bc6a:	bf00      	nop
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	40020800 	.word	0x40020800

0800bc78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800bc78:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bcb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bc7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bc7e:	e003      	b.n	800bc88 <LoopCopyDataInit>

0800bc80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bc80:	4b0c      	ldr	r3, [pc, #48]	; (800bcb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bc82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bc84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bc86:	3104      	adds	r1, #4

0800bc88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bc88:	480b      	ldr	r0, [pc, #44]	; (800bcb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bc8a:	4b0c      	ldr	r3, [pc, #48]	; (800bcbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bc8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bc8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bc90:	d3f6      	bcc.n	800bc80 <CopyDataInit>
  ldr  r2, =_sbss
 800bc92:	4a0b      	ldr	r2, [pc, #44]	; (800bcc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bc94:	e002      	b.n	800bc9c <LoopFillZerobss>

0800bc96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bc96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bc98:	f842 3b04 	str.w	r3, [r2], #4

0800bc9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bc9c:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bc9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bca0:	d3f9      	bcc.n	800bc96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bca2:	f7ff fcab 	bl	800b5fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bca6:	f000 f817 	bl	800bcd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bcaa:	f7fd ffed 	bl	8009c88 <main>
  bx  lr    
 800bcae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800bcb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bcb4:	08018adc 	.word	0x08018adc
  ldr  r0, =_sdata
 800bcb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bcbc:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 800bcc0:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 800bcc4:	20000b30 	.word	0x20000b30

0800bcc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bcc8:	e7fe      	b.n	800bcc8 <ADC_IRQHandler>
	...

0800bccc <__errno>:
 800bccc:	4b01      	ldr	r3, [pc, #4]	; (800bcd4 <__errno+0x8>)
 800bcce:	6818      	ldr	r0, [r3, #0]
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	2000006c 	.word	0x2000006c

0800bcd8 <__libc_init_array>:
 800bcd8:	b570      	push	{r4, r5, r6, lr}
 800bcda:	4e0d      	ldr	r6, [pc, #52]	; (800bd10 <__libc_init_array+0x38>)
 800bcdc:	4c0d      	ldr	r4, [pc, #52]	; (800bd14 <__libc_init_array+0x3c>)
 800bcde:	1ba4      	subs	r4, r4, r6
 800bce0:	10a4      	asrs	r4, r4, #2
 800bce2:	2500      	movs	r5, #0
 800bce4:	42a5      	cmp	r5, r4
 800bce6:	d109      	bne.n	800bcfc <__libc_init_array+0x24>
 800bce8:	4e0b      	ldr	r6, [pc, #44]	; (800bd18 <__libc_init_array+0x40>)
 800bcea:	4c0c      	ldr	r4, [pc, #48]	; (800bd1c <__libc_init_array+0x44>)
 800bcec:	f000 fc5c 	bl	800c5a8 <_init>
 800bcf0:	1ba4      	subs	r4, r4, r6
 800bcf2:	10a4      	asrs	r4, r4, #2
 800bcf4:	2500      	movs	r5, #0
 800bcf6:	42a5      	cmp	r5, r4
 800bcf8:	d105      	bne.n	800bd06 <__libc_init_array+0x2e>
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd00:	4798      	blx	r3
 800bd02:	3501      	adds	r5, #1
 800bd04:	e7ee      	b.n	800bce4 <__libc_init_array+0xc>
 800bd06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd0a:	4798      	blx	r3
 800bd0c:	3501      	adds	r5, #1
 800bd0e:	e7f2      	b.n	800bcf6 <__libc_init_array+0x1e>
 800bd10:	08018ad4 	.word	0x08018ad4
 800bd14:	08018ad4 	.word	0x08018ad4
 800bd18:	08018ad4 	.word	0x08018ad4
 800bd1c:	08018ad8 	.word	0x08018ad8

0800bd20 <malloc>:
 800bd20:	4b02      	ldr	r3, [pc, #8]	; (800bd2c <malloc+0xc>)
 800bd22:	4601      	mov	r1, r0
 800bd24:	6818      	ldr	r0, [r3, #0]
 800bd26:	f000 b861 	b.w	800bdec <_malloc_r>
 800bd2a:	bf00      	nop
 800bd2c:	2000006c 	.word	0x2000006c

0800bd30 <free>:
 800bd30:	4b02      	ldr	r3, [pc, #8]	; (800bd3c <free+0xc>)
 800bd32:	4601      	mov	r1, r0
 800bd34:	6818      	ldr	r0, [r3, #0]
 800bd36:	f000 b80b 	b.w	800bd50 <_free_r>
 800bd3a:	bf00      	nop
 800bd3c:	2000006c 	.word	0x2000006c

0800bd40 <memset>:
 800bd40:	4402      	add	r2, r0
 800bd42:	4603      	mov	r3, r0
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d100      	bne.n	800bd4a <memset+0xa>
 800bd48:	4770      	bx	lr
 800bd4a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd4e:	e7f9      	b.n	800bd44 <memset+0x4>

0800bd50 <_free_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4605      	mov	r5, r0
 800bd54:	2900      	cmp	r1, #0
 800bd56:	d045      	beq.n	800bde4 <_free_r+0x94>
 800bd58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd5c:	1f0c      	subs	r4, r1, #4
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	bfb8      	it	lt
 800bd62:	18e4      	addlt	r4, r4, r3
 800bd64:	f000 f8e4 	bl	800bf30 <__malloc_lock>
 800bd68:	4a1f      	ldr	r2, [pc, #124]	; (800bde8 <_free_r+0x98>)
 800bd6a:	6813      	ldr	r3, [r2, #0]
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	b933      	cbnz	r3, 800bd7e <_free_r+0x2e>
 800bd70:	6063      	str	r3, [r4, #4]
 800bd72:	6014      	str	r4, [r2, #0]
 800bd74:	4628      	mov	r0, r5
 800bd76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd7a:	f000 b8da 	b.w	800bf32 <__malloc_unlock>
 800bd7e:	42a3      	cmp	r3, r4
 800bd80:	d90c      	bls.n	800bd9c <_free_r+0x4c>
 800bd82:	6821      	ldr	r1, [r4, #0]
 800bd84:	1862      	adds	r2, r4, r1
 800bd86:	4293      	cmp	r3, r2
 800bd88:	bf04      	itt	eq
 800bd8a:	681a      	ldreq	r2, [r3, #0]
 800bd8c:	685b      	ldreq	r3, [r3, #4]
 800bd8e:	6063      	str	r3, [r4, #4]
 800bd90:	bf04      	itt	eq
 800bd92:	1852      	addeq	r2, r2, r1
 800bd94:	6022      	streq	r2, [r4, #0]
 800bd96:	6004      	str	r4, [r0, #0]
 800bd98:	e7ec      	b.n	800bd74 <_free_r+0x24>
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	b10a      	cbz	r2, 800bda4 <_free_r+0x54>
 800bda0:	42a2      	cmp	r2, r4
 800bda2:	d9fa      	bls.n	800bd9a <_free_r+0x4a>
 800bda4:	6819      	ldr	r1, [r3, #0]
 800bda6:	1858      	adds	r0, r3, r1
 800bda8:	42a0      	cmp	r0, r4
 800bdaa:	d10b      	bne.n	800bdc4 <_free_r+0x74>
 800bdac:	6820      	ldr	r0, [r4, #0]
 800bdae:	4401      	add	r1, r0
 800bdb0:	1858      	adds	r0, r3, r1
 800bdb2:	4282      	cmp	r2, r0
 800bdb4:	6019      	str	r1, [r3, #0]
 800bdb6:	d1dd      	bne.n	800bd74 <_free_r+0x24>
 800bdb8:	6810      	ldr	r0, [r2, #0]
 800bdba:	6852      	ldr	r2, [r2, #4]
 800bdbc:	605a      	str	r2, [r3, #4]
 800bdbe:	4401      	add	r1, r0
 800bdc0:	6019      	str	r1, [r3, #0]
 800bdc2:	e7d7      	b.n	800bd74 <_free_r+0x24>
 800bdc4:	d902      	bls.n	800bdcc <_free_r+0x7c>
 800bdc6:	230c      	movs	r3, #12
 800bdc8:	602b      	str	r3, [r5, #0]
 800bdca:	e7d3      	b.n	800bd74 <_free_r+0x24>
 800bdcc:	6820      	ldr	r0, [r4, #0]
 800bdce:	1821      	adds	r1, r4, r0
 800bdd0:	428a      	cmp	r2, r1
 800bdd2:	bf04      	itt	eq
 800bdd4:	6811      	ldreq	r1, [r2, #0]
 800bdd6:	6852      	ldreq	r2, [r2, #4]
 800bdd8:	6062      	str	r2, [r4, #4]
 800bdda:	bf04      	itt	eq
 800bddc:	1809      	addeq	r1, r1, r0
 800bdde:	6021      	streq	r1, [r4, #0]
 800bde0:	605c      	str	r4, [r3, #4]
 800bde2:	e7c7      	b.n	800bd74 <_free_r+0x24>
 800bde4:	bd38      	pop	{r3, r4, r5, pc}
 800bde6:	bf00      	nop
 800bde8:	20000118 	.word	0x20000118

0800bdec <_malloc_r>:
 800bdec:	b570      	push	{r4, r5, r6, lr}
 800bdee:	1ccd      	adds	r5, r1, #3
 800bdf0:	f025 0503 	bic.w	r5, r5, #3
 800bdf4:	3508      	adds	r5, #8
 800bdf6:	2d0c      	cmp	r5, #12
 800bdf8:	bf38      	it	cc
 800bdfa:	250c      	movcc	r5, #12
 800bdfc:	2d00      	cmp	r5, #0
 800bdfe:	4606      	mov	r6, r0
 800be00:	db01      	blt.n	800be06 <_malloc_r+0x1a>
 800be02:	42a9      	cmp	r1, r5
 800be04:	d903      	bls.n	800be0e <_malloc_r+0x22>
 800be06:	230c      	movs	r3, #12
 800be08:	6033      	str	r3, [r6, #0]
 800be0a:	2000      	movs	r0, #0
 800be0c:	bd70      	pop	{r4, r5, r6, pc}
 800be0e:	f000 f88f 	bl	800bf30 <__malloc_lock>
 800be12:	4a23      	ldr	r2, [pc, #140]	; (800bea0 <_malloc_r+0xb4>)
 800be14:	6814      	ldr	r4, [r2, #0]
 800be16:	4621      	mov	r1, r4
 800be18:	b991      	cbnz	r1, 800be40 <_malloc_r+0x54>
 800be1a:	4c22      	ldr	r4, [pc, #136]	; (800bea4 <_malloc_r+0xb8>)
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	b91b      	cbnz	r3, 800be28 <_malloc_r+0x3c>
 800be20:	4630      	mov	r0, r6
 800be22:	f000 f841 	bl	800bea8 <_sbrk_r>
 800be26:	6020      	str	r0, [r4, #0]
 800be28:	4629      	mov	r1, r5
 800be2a:	4630      	mov	r0, r6
 800be2c:	f000 f83c 	bl	800bea8 <_sbrk_r>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d126      	bne.n	800be82 <_malloc_r+0x96>
 800be34:	230c      	movs	r3, #12
 800be36:	6033      	str	r3, [r6, #0]
 800be38:	4630      	mov	r0, r6
 800be3a:	f000 f87a 	bl	800bf32 <__malloc_unlock>
 800be3e:	e7e4      	b.n	800be0a <_malloc_r+0x1e>
 800be40:	680b      	ldr	r3, [r1, #0]
 800be42:	1b5b      	subs	r3, r3, r5
 800be44:	d41a      	bmi.n	800be7c <_malloc_r+0x90>
 800be46:	2b0b      	cmp	r3, #11
 800be48:	d90f      	bls.n	800be6a <_malloc_r+0x7e>
 800be4a:	600b      	str	r3, [r1, #0]
 800be4c:	50cd      	str	r5, [r1, r3]
 800be4e:	18cc      	adds	r4, r1, r3
 800be50:	4630      	mov	r0, r6
 800be52:	f000 f86e 	bl	800bf32 <__malloc_unlock>
 800be56:	f104 000b 	add.w	r0, r4, #11
 800be5a:	1d23      	adds	r3, r4, #4
 800be5c:	f020 0007 	bic.w	r0, r0, #7
 800be60:	1ac3      	subs	r3, r0, r3
 800be62:	d01b      	beq.n	800be9c <_malloc_r+0xb0>
 800be64:	425a      	negs	r2, r3
 800be66:	50e2      	str	r2, [r4, r3]
 800be68:	bd70      	pop	{r4, r5, r6, pc}
 800be6a:	428c      	cmp	r4, r1
 800be6c:	bf0d      	iteet	eq
 800be6e:	6863      	ldreq	r3, [r4, #4]
 800be70:	684b      	ldrne	r3, [r1, #4]
 800be72:	6063      	strne	r3, [r4, #4]
 800be74:	6013      	streq	r3, [r2, #0]
 800be76:	bf18      	it	ne
 800be78:	460c      	movne	r4, r1
 800be7a:	e7e9      	b.n	800be50 <_malloc_r+0x64>
 800be7c:	460c      	mov	r4, r1
 800be7e:	6849      	ldr	r1, [r1, #4]
 800be80:	e7ca      	b.n	800be18 <_malloc_r+0x2c>
 800be82:	1cc4      	adds	r4, r0, #3
 800be84:	f024 0403 	bic.w	r4, r4, #3
 800be88:	42a0      	cmp	r0, r4
 800be8a:	d005      	beq.n	800be98 <_malloc_r+0xac>
 800be8c:	1a21      	subs	r1, r4, r0
 800be8e:	4630      	mov	r0, r6
 800be90:	f000 f80a 	bl	800bea8 <_sbrk_r>
 800be94:	3001      	adds	r0, #1
 800be96:	d0cd      	beq.n	800be34 <_malloc_r+0x48>
 800be98:	6025      	str	r5, [r4, #0]
 800be9a:	e7d9      	b.n	800be50 <_malloc_r+0x64>
 800be9c:	bd70      	pop	{r4, r5, r6, pc}
 800be9e:	bf00      	nop
 800bea0:	20000118 	.word	0x20000118
 800bea4:	2000011c 	.word	0x2000011c

0800bea8 <_sbrk_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4c06      	ldr	r4, [pc, #24]	; (800bec4 <_sbrk_r+0x1c>)
 800beac:	2300      	movs	r3, #0
 800beae:	4605      	mov	r5, r0
 800beb0:	4608      	mov	r0, r1
 800beb2:	6023      	str	r3, [r4, #0]
 800beb4:	f7ff fb76 	bl	800b5a4 <_sbrk>
 800beb8:	1c43      	adds	r3, r0, #1
 800beba:	d102      	bne.n	800bec2 <_sbrk_r+0x1a>
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	b103      	cbz	r3, 800bec2 <_sbrk_r+0x1a>
 800bec0:	602b      	str	r3, [r5, #0]
 800bec2:	bd38      	pop	{r3, r4, r5, pc}
 800bec4:	20000b2c 	.word	0x20000b2c

0800bec8 <sniprintf>:
 800bec8:	b40c      	push	{r2, r3}
 800beca:	b530      	push	{r4, r5, lr}
 800becc:	4b17      	ldr	r3, [pc, #92]	; (800bf2c <sniprintf+0x64>)
 800bece:	1e0c      	subs	r4, r1, #0
 800bed0:	b09d      	sub	sp, #116	; 0x74
 800bed2:	681d      	ldr	r5, [r3, #0]
 800bed4:	da08      	bge.n	800bee8 <sniprintf+0x20>
 800bed6:	238b      	movs	r3, #139	; 0x8b
 800bed8:	602b      	str	r3, [r5, #0]
 800beda:	f04f 30ff 	mov.w	r0, #4294967295
 800bede:	b01d      	add	sp, #116	; 0x74
 800bee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bee4:	b002      	add	sp, #8
 800bee6:	4770      	bx	lr
 800bee8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800beec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bef0:	bf14      	ite	ne
 800bef2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bef6:	4623      	moveq	r3, r4
 800bef8:	9304      	str	r3, [sp, #16]
 800befa:	9307      	str	r3, [sp, #28]
 800befc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf00:	9002      	str	r0, [sp, #8]
 800bf02:	9006      	str	r0, [sp, #24]
 800bf04:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bf08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bf0a:	ab21      	add	r3, sp, #132	; 0x84
 800bf0c:	a902      	add	r1, sp, #8
 800bf0e:	4628      	mov	r0, r5
 800bf10:	9301      	str	r3, [sp, #4]
 800bf12:	f000 f86b 	bl	800bfec <_svfiprintf_r>
 800bf16:	1c43      	adds	r3, r0, #1
 800bf18:	bfbc      	itt	lt
 800bf1a:	238b      	movlt	r3, #139	; 0x8b
 800bf1c:	602b      	strlt	r3, [r5, #0]
 800bf1e:	2c00      	cmp	r4, #0
 800bf20:	d0dd      	beq.n	800bede <sniprintf+0x16>
 800bf22:	9b02      	ldr	r3, [sp, #8]
 800bf24:	2200      	movs	r2, #0
 800bf26:	701a      	strb	r2, [r3, #0]
 800bf28:	e7d9      	b.n	800bede <sniprintf+0x16>
 800bf2a:	bf00      	nop
 800bf2c:	2000006c 	.word	0x2000006c

0800bf30 <__malloc_lock>:
 800bf30:	4770      	bx	lr

0800bf32 <__malloc_unlock>:
 800bf32:	4770      	bx	lr

0800bf34 <__ssputs_r>:
 800bf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf38:	688e      	ldr	r6, [r1, #8]
 800bf3a:	429e      	cmp	r6, r3
 800bf3c:	4682      	mov	sl, r0
 800bf3e:	460c      	mov	r4, r1
 800bf40:	4691      	mov	r9, r2
 800bf42:	4698      	mov	r8, r3
 800bf44:	d835      	bhi.n	800bfb2 <__ssputs_r+0x7e>
 800bf46:	898a      	ldrh	r2, [r1, #12]
 800bf48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf4c:	d031      	beq.n	800bfb2 <__ssputs_r+0x7e>
 800bf4e:	6825      	ldr	r5, [r4, #0]
 800bf50:	6909      	ldr	r1, [r1, #16]
 800bf52:	1a6f      	subs	r7, r5, r1
 800bf54:	6965      	ldr	r5, [r4, #20]
 800bf56:	2302      	movs	r3, #2
 800bf58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf5c:	fb95 f5f3 	sdiv	r5, r5, r3
 800bf60:	f108 0301 	add.w	r3, r8, #1
 800bf64:	443b      	add	r3, r7
 800bf66:	429d      	cmp	r5, r3
 800bf68:	bf38      	it	cc
 800bf6a:	461d      	movcc	r5, r3
 800bf6c:	0553      	lsls	r3, r2, #21
 800bf6e:	d531      	bpl.n	800bfd4 <__ssputs_r+0xa0>
 800bf70:	4629      	mov	r1, r5
 800bf72:	f7ff ff3b 	bl	800bdec <_malloc_r>
 800bf76:	4606      	mov	r6, r0
 800bf78:	b950      	cbnz	r0, 800bf90 <__ssputs_r+0x5c>
 800bf7a:	230c      	movs	r3, #12
 800bf7c:	f8ca 3000 	str.w	r3, [sl]
 800bf80:	89a3      	ldrh	r3, [r4, #12]
 800bf82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf86:	81a3      	strh	r3, [r4, #12]
 800bf88:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf90:	463a      	mov	r2, r7
 800bf92:	6921      	ldr	r1, [r4, #16]
 800bf94:	f000 fab4 	bl	800c500 <memcpy>
 800bf98:	89a3      	ldrh	r3, [r4, #12]
 800bf9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfa2:	81a3      	strh	r3, [r4, #12]
 800bfa4:	6126      	str	r6, [r4, #16]
 800bfa6:	6165      	str	r5, [r4, #20]
 800bfa8:	443e      	add	r6, r7
 800bfaa:	1bed      	subs	r5, r5, r7
 800bfac:	6026      	str	r6, [r4, #0]
 800bfae:	60a5      	str	r5, [r4, #8]
 800bfb0:	4646      	mov	r6, r8
 800bfb2:	4546      	cmp	r6, r8
 800bfb4:	bf28      	it	cs
 800bfb6:	4646      	movcs	r6, r8
 800bfb8:	4632      	mov	r2, r6
 800bfba:	4649      	mov	r1, r9
 800bfbc:	6820      	ldr	r0, [r4, #0]
 800bfbe:	f000 faaa 	bl	800c516 <memmove>
 800bfc2:	68a3      	ldr	r3, [r4, #8]
 800bfc4:	1b9b      	subs	r3, r3, r6
 800bfc6:	60a3      	str	r3, [r4, #8]
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	441e      	add	r6, r3
 800bfcc:	6026      	str	r6, [r4, #0]
 800bfce:	2000      	movs	r0, #0
 800bfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd4:	462a      	mov	r2, r5
 800bfd6:	f000 fab8 	bl	800c54a <_realloc_r>
 800bfda:	4606      	mov	r6, r0
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d1e1      	bne.n	800bfa4 <__ssputs_r+0x70>
 800bfe0:	6921      	ldr	r1, [r4, #16]
 800bfe2:	4650      	mov	r0, sl
 800bfe4:	f7ff feb4 	bl	800bd50 <_free_r>
 800bfe8:	e7c7      	b.n	800bf7a <__ssputs_r+0x46>
	...

0800bfec <_svfiprintf_r>:
 800bfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff0:	b09d      	sub	sp, #116	; 0x74
 800bff2:	4680      	mov	r8, r0
 800bff4:	9303      	str	r3, [sp, #12]
 800bff6:	898b      	ldrh	r3, [r1, #12]
 800bff8:	061c      	lsls	r4, r3, #24
 800bffa:	460d      	mov	r5, r1
 800bffc:	4616      	mov	r6, r2
 800bffe:	d50f      	bpl.n	800c020 <_svfiprintf_r+0x34>
 800c000:	690b      	ldr	r3, [r1, #16]
 800c002:	b96b      	cbnz	r3, 800c020 <_svfiprintf_r+0x34>
 800c004:	2140      	movs	r1, #64	; 0x40
 800c006:	f7ff fef1 	bl	800bdec <_malloc_r>
 800c00a:	6028      	str	r0, [r5, #0]
 800c00c:	6128      	str	r0, [r5, #16]
 800c00e:	b928      	cbnz	r0, 800c01c <_svfiprintf_r+0x30>
 800c010:	230c      	movs	r3, #12
 800c012:	f8c8 3000 	str.w	r3, [r8]
 800c016:	f04f 30ff 	mov.w	r0, #4294967295
 800c01a:	e0c5      	b.n	800c1a8 <_svfiprintf_r+0x1bc>
 800c01c:	2340      	movs	r3, #64	; 0x40
 800c01e:	616b      	str	r3, [r5, #20]
 800c020:	2300      	movs	r3, #0
 800c022:	9309      	str	r3, [sp, #36]	; 0x24
 800c024:	2320      	movs	r3, #32
 800c026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c02a:	2330      	movs	r3, #48	; 0x30
 800c02c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c030:	f04f 0b01 	mov.w	fp, #1
 800c034:	4637      	mov	r7, r6
 800c036:	463c      	mov	r4, r7
 800c038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d13c      	bne.n	800c0ba <_svfiprintf_r+0xce>
 800c040:	ebb7 0a06 	subs.w	sl, r7, r6
 800c044:	d00b      	beq.n	800c05e <_svfiprintf_r+0x72>
 800c046:	4653      	mov	r3, sl
 800c048:	4632      	mov	r2, r6
 800c04a:	4629      	mov	r1, r5
 800c04c:	4640      	mov	r0, r8
 800c04e:	f7ff ff71 	bl	800bf34 <__ssputs_r>
 800c052:	3001      	adds	r0, #1
 800c054:	f000 80a3 	beq.w	800c19e <_svfiprintf_r+0x1b2>
 800c058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c05a:	4453      	add	r3, sl
 800c05c:	9309      	str	r3, [sp, #36]	; 0x24
 800c05e:	783b      	ldrb	r3, [r7, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 809c 	beq.w	800c19e <_svfiprintf_r+0x1b2>
 800c066:	2300      	movs	r3, #0
 800c068:	f04f 32ff 	mov.w	r2, #4294967295
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	9307      	str	r3, [sp, #28]
 800c070:	9205      	str	r2, [sp, #20]
 800c072:	9306      	str	r3, [sp, #24]
 800c074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c078:	931a      	str	r3, [sp, #104]	; 0x68
 800c07a:	2205      	movs	r2, #5
 800c07c:	7821      	ldrb	r1, [r4, #0]
 800c07e:	4850      	ldr	r0, [pc, #320]	; (800c1c0 <_svfiprintf_r+0x1d4>)
 800c080:	f7f4 f8ae 	bl	80001e0 <memchr>
 800c084:	1c67      	adds	r7, r4, #1
 800c086:	9b04      	ldr	r3, [sp, #16]
 800c088:	b9d8      	cbnz	r0, 800c0c2 <_svfiprintf_r+0xd6>
 800c08a:	06d9      	lsls	r1, r3, #27
 800c08c:	bf44      	itt	mi
 800c08e:	2220      	movmi	r2, #32
 800c090:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c094:	071a      	lsls	r2, r3, #28
 800c096:	bf44      	itt	mi
 800c098:	222b      	movmi	r2, #43	; 0x2b
 800c09a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c09e:	7822      	ldrb	r2, [r4, #0]
 800c0a0:	2a2a      	cmp	r2, #42	; 0x2a
 800c0a2:	d016      	beq.n	800c0d2 <_svfiprintf_r+0xe6>
 800c0a4:	9a07      	ldr	r2, [sp, #28]
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	200a      	movs	r0, #10
 800c0aa:	4627      	mov	r7, r4
 800c0ac:	3401      	adds	r4, #1
 800c0ae:	783b      	ldrb	r3, [r7, #0]
 800c0b0:	3b30      	subs	r3, #48	; 0x30
 800c0b2:	2b09      	cmp	r3, #9
 800c0b4:	d951      	bls.n	800c15a <_svfiprintf_r+0x16e>
 800c0b6:	b1c9      	cbz	r1, 800c0ec <_svfiprintf_r+0x100>
 800c0b8:	e011      	b.n	800c0de <_svfiprintf_r+0xf2>
 800c0ba:	2b25      	cmp	r3, #37	; 0x25
 800c0bc:	d0c0      	beq.n	800c040 <_svfiprintf_r+0x54>
 800c0be:	4627      	mov	r7, r4
 800c0c0:	e7b9      	b.n	800c036 <_svfiprintf_r+0x4a>
 800c0c2:	4a3f      	ldr	r2, [pc, #252]	; (800c1c0 <_svfiprintf_r+0x1d4>)
 800c0c4:	1a80      	subs	r0, r0, r2
 800c0c6:	fa0b f000 	lsl.w	r0, fp, r0
 800c0ca:	4318      	orrs	r0, r3
 800c0cc:	9004      	str	r0, [sp, #16]
 800c0ce:	463c      	mov	r4, r7
 800c0d0:	e7d3      	b.n	800c07a <_svfiprintf_r+0x8e>
 800c0d2:	9a03      	ldr	r2, [sp, #12]
 800c0d4:	1d11      	adds	r1, r2, #4
 800c0d6:	6812      	ldr	r2, [r2, #0]
 800c0d8:	9103      	str	r1, [sp, #12]
 800c0da:	2a00      	cmp	r2, #0
 800c0dc:	db01      	blt.n	800c0e2 <_svfiprintf_r+0xf6>
 800c0de:	9207      	str	r2, [sp, #28]
 800c0e0:	e004      	b.n	800c0ec <_svfiprintf_r+0x100>
 800c0e2:	4252      	negs	r2, r2
 800c0e4:	f043 0302 	orr.w	r3, r3, #2
 800c0e8:	9207      	str	r2, [sp, #28]
 800c0ea:	9304      	str	r3, [sp, #16]
 800c0ec:	783b      	ldrb	r3, [r7, #0]
 800c0ee:	2b2e      	cmp	r3, #46	; 0x2e
 800c0f0:	d10e      	bne.n	800c110 <_svfiprintf_r+0x124>
 800c0f2:	787b      	ldrb	r3, [r7, #1]
 800c0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f6:	f107 0101 	add.w	r1, r7, #1
 800c0fa:	d132      	bne.n	800c162 <_svfiprintf_r+0x176>
 800c0fc:	9b03      	ldr	r3, [sp, #12]
 800c0fe:	1d1a      	adds	r2, r3, #4
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	9203      	str	r2, [sp, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	bfb8      	it	lt
 800c108:	f04f 33ff 	movlt.w	r3, #4294967295
 800c10c:	3702      	adds	r7, #2
 800c10e:	9305      	str	r3, [sp, #20]
 800c110:	4c2c      	ldr	r4, [pc, #176]	; (800c1c4 <_svfiprintf_r+0x1d8>)
 800c112:	7839      	ldrb	r1, [r7, #0]
 800c114:	2203      	movs	r2, #3
 800c116:	4620      	mov	r0, r4
 800c118:	f7f4 f862 	bl	80001e0 <memchr>
 800c11c:	b138      	cbz	r0, 800c12e <_svfiprintf_r+0x142>
 800c11e:	2340      	movs	r3, #64	; 0x40
 800c120:	1b00      	subs	r0, r0, r4
 800c122:	fa03 f000 	lsl.w	r0, r3, r0
 800c126:	9b04      	ldr	r3, [sp, #16]
 800c128:	4303      	orrs	r3, r0
 800c12a:	9304      	str	r3, [sp, #16]
 800c12c:	3701      	adds	r7, #1
 800c12e:	7839      	ldrb	r1, [r7, #0]
 800c130:	4825      	ldr	r0, [pc, #148]	; (800c1c8 <_svfiprintf_r+0x1dc>)
 800c132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c136:	2206      	movs	r2, #6
 800c138:	1c7e      	adds	r6, r7, #1
 800c13a:	f7f4 f851 	bl	80001e0 <memchr>
 800c13e:	2800      	cmp	r0, #0
 800c140:	d035      	beq.n	800c1ae <_svfiprintf_r+0x1c2>
 800c142:	4b22      	ldr	r3, [pc, #136]	; (800c1cc <_svfiprintf_r+0x1e0>)
 800c144:	b9fb      	cbnz	r3, 800c186 <_svfiprintf_r+0x19a>
 800c146:	9b03      	ldr	r3, [sp, #12]
 800c148:	3307      	adds	r3, #7
 800c14a:	f023 0307 	bic.w	r3, r3, #7
 800c14e:	3308      	adds	r3, #8
 800c150:	9303      	str	r3, [sp, #12]
 800c152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c154:	444b      	add	r3, r9
 800c156:	9309      	str	r3, [sp, #36]	; 0x24
 800c158:	e76c      	b.n	800c034 <_svfiprintf_r+0x48>
 800c15a:	fb00 3202 	mla	r2, r0, r2, r3
 800c15e:	2101      	movs	r1, #1
 800c160:	e7a3      	b.n	800c0aa <_svfiprintf_r+0xbe>
 800c162:	2300      	movs	r3, #0
 800c164:	9305      	str	r3, [sp, #20]
 800c166:	4618      	mov	r0, r3
 800c168:	240a      	movs	r4, #10
 800c16a:	460f      	mov	r7, r1
 800c16c:	3101      	adds	r1, #1
 800c16e:	783a      	ldrb	r2, [r7, #0]
 800c170:	3a30      	subs	r2, #48	; 0x30
 800c172:	2a09      	cmp	r2, #9
 800c174:	d903      	bls.n	800c17e <_svfiprintf_r+0x192>
 800c176:	2b00      	cmp	r3, #0
 800c178:	d0ca      	beq.n	800c110 <_svfiprintf_r+0x124>
 800c17a:	9005      	str	r0, [sp, #20]
 800c17c:	e7c8      	b.n	800c110 <_svfiprintf_r+0x124>
 800c17e:	fb04 2000 	mla	r0, r4, r0, r2
 800c182:	2301      	movs	r3, #1
 800c184:	e7f1      	b.n	800c16a <_svfiprintf_r+0x17e>
 800c186:	ab03      	add	r3, sp, #12
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	462a      	mov	r2, r5
 800c18c:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <_svfiprintf_r+0x1e4>)
 800c18e:	a904      	add	r1, sp, #16
 800c190:	4640      	mov	r0, r8
 800c192:	f3af 8000 	nop.w
 800c196:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c19a:	4681      	mov	r9, r0
 800c19c:	d1d9      	bne.n	800c152 <_svfiprintf_r+0x166>
 800c19e:	89ab      	ldrh	r3, [r5, #12]
 800c1a0:	065b      	lsls	r3, r3, #25
 800c1a2:	f53f af38 	bmi.w	800c016 <_svfiprintf_r+0x2a>
 800c1a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1a8:	b01d      	add	sp, #116	; 0x74
 800c1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ae:	ab03      	add	r3, sp, #12
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	462a      	mov	r2, r5
 800c1b4:	4b06      	ldr	r3, [pc, #24]	; (800c1d0 <_svfiprintf_r+0x1e4>)
 800c1b6:	a904      	add	r1, sp, #16
 800c1b8:	4640      	mov	r0, r8
 800c1ba:	f000 f881 	bl	800c2c0 <_printf_i>
 800c1be:	e7ea      	b.n	800c196 <_svfiprintf_r+0x1aa>
 800c1c0:	08018a98 	.word	0x08018a98
 800c1c4:	08018a9e 	.word	0x08018a9e
 800c1c8:	08018aa2 	.word	0x08018aa2
 800c1cc:	00000000 	.word	0x00000000
 800c1d0:	0800bf35 	.word	0x0800bf35

0800c1d4 <_printf_common>:
 800c1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d8:	4691      	mov	r9, r2
 800c1da:	461f      	mov	r7, r3
 800c1dc:	688a      	ldr	r2, [r1, #8]
 800c1de:	690b      	ldr	r3, [r1, #16]
 800c1e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	bfb8      	it	lt
 800c1e8:	4613      	movlt	r3, r2
 800c1ea:	f8c9 3000 	str.w	r3, [r9]
 800c1ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	b112      	cbz	r2, 800c1fe <_printf_common+0x2a>
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	f8c9 3000 	str.w	r3, [r9]
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	0699      	lsls	r1, r3, #26
 800c202:	bf42      	ittt	mi
 800c204:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c208:	3302      	addmi	r3, #2
 800c20a:	f8c9 3000 	strmi.w	r3, [r9]
 800c20e:	6825      	ldr	r5, [r4, #0]
 800c210:	f015 0506 	ands.w	r5, r5, #6
 800c214:	d107      	bne.n	800c226 <_printf_common+0x52>
 800c216:	f104 0a19 	add.w	sl, r4, #25
 800c21a:	68e3      	ldr	r3, [r4, #12]
 800c21c:	f8d9 2000 	ldr.w	r2, [r9]
 800c220:	1a9b      	subs	r3, r3, r2
 800c222:	429d      	cmp	r5, r3
 800c224:	db29      	blt.n	800c27a <_printf_common+0xa6>
 800c226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c22a:	6822      	ldr	r2, [r4, #0]
 800c22c:	3300      	adds	r3, #0
 800c22e:	bf18      	it	ne
 800c230:	2301      	movne	r3, #1
 800c232:	0692      	lsls	r2, r2, #26
 800c234:	d42e      	bmi.n	800c294 <_printf_common+0xc0>
 800c236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c23a:	4639      	mov	r1, r7
 800c23c:	4630      	mov	r0, r6
 800c23e:	47c0      	blx	r8
 800c240:	3001      	adds	r0, #1
 800c242:	d021      	beq.n	800c288 <_printf_common+0xb4>
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	68e5      	ldr	r5, [r4, #12]
 800c248:	f8d9 2000 	ldr.w	r2, [r9]
 800c24c:	f003 0306 	and.w	r3, r3, #6
 800c250:	2b04      	cmp	r3, #4
 800c252:	bf08      	it	eq
 800c254:	1aad      	subeq	r5, r5, r2
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	6922      	ldr	r2, [r4, #16]
 800c25a:	bf0c      	ite	eq
 800c25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c260:	2500      	movne	r5, #0
 800c262:	4293      	cmp	r3, r2
 800c264:	bfc4      	itt	gt
 800c266:	1a9b      	subgt	r3, r3, r2
 800c268:	18ed      	addgt	r5, r5, r3
 800c26a:	f04f 0900 	mov.w	r9, #0
 800c26e:	341a      	adds	r4, #26
 800c270:	454d      	cmp	r5, r9
 800c272:	d11b      	bne.n	800c2ac <_printf_common+0xd8>
 800c274:	2000      	movs	r0, #0
 800c276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c27a:	2301      	movs	r3, #1
 800c27c:	4652      	mov	r2, sl
 800c27e:	4639      	mov	r1, r7
 800c280:	4630      	mov	r0, r6
 800c282:	47c0      	blx	r8
 800c284:	3001      	adds	r0, #1
 800c286:	d103      	bne.n	800c290 <_printf_common+0xbc>
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c290:	3501      	adds	r5, #1
 800c292:	e7c2      	b.n	800c21a <_printf_common+0x46>
 800c294:	18e1      	adds	r1, r4, r3
 800c296:	1c5a      	adds	r2, r3, #1
 800c298:	2030      	movs	r0, #48	; 0x30
 800c29a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c29e:	4422      	add	r2, r4
 800c2a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2a8:	3302      	adds	r3, #2
 800c2aa:	e7c4      	b.n	800c236 <_printf_common+0x62>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	47c0      	blx	r8
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	d0e6      	beq.n	800c288 <_printf_common+0xb4>
 800c2ba:	f109 0901 	add.w	r9, r9, #1
 800c2be:	e7d7      	b.n	800c270 <_printf_common+0x9c>

0800c2c0 <_printf_i>:
 800c2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	4617      	mov	r7, r2
 800c2c6:	7e0a      	ldrb	r2, [r1, #24]
 800c2c8:	b085      	sub	sp, #20
 800c2ca:	2a6e      	cmp	r2, #110	; 0x6e
 800c2cc:	4698      	mov	r8, r3
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2d4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800c2d8:	f000 80bc 	beq.w	800c454 <_printf_i+0x194>
 800c2dc:	d81a      	bhi.n	800c314 <_printf_i+0x54>
 800c2de:	2a63      	cmp	r2, #99	; 0x63
 800c2e0:	d02e      	beq.n	800c340 <_printf_i+0x80>
 800c2e2:	d80a      	bhi.n	800c2fa <_printf_i+0x3a>
 800c2e4:	2a00      	cmp	r2, #0
 800c2e6:	f000 80c8 	beq.w	800c47a <_printf_i+0x1ba>
 800c2ea:	2a58      	cmp	r2, #88	; 0x58
 800c2ec:	f000 808a 	beq.w	800c404 <_printf_i+0x144>
 800c2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c2f8:	e02a      	b.n	800c350 <_printf_i+0x90>
 800c2fa:	2a64      	cmp	r2, #100	; 0x64
 800c2fc:	d001      	beq.n	800c302 <_printf_i+0x42>
 800c2fe:	2a69      	cmp	r2, #105	; 0x69
 800c300:	d1f6      	bne.n	800c2f0 <_printf_i+0x30>
 800c302:	6821      	ldr	r1, [r4, #0]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c30a:	d023      	beq.n	800c354 <_printf_i+0x94>
 800c30c:	1d11      	adds	r1, r2, #4
 800c30e:	6019      	str	r1, [r3, #0]
 800c310:	6813      	ldr	r3, [r2, #0]
 800c312:	e027      	b.n	800c364 <_printf_i+0xa4>
 800c314:	2a73      	cmp	r2, #115	; 0x73
 800c316:	f000 80b4 	beq.w	800c482 <_printf_i+0x1c2>
 800c31a:	d808      	bhi.n	800c32e <_printf_i+0x6e>
 800c31c:	2a6f      	cmp	r2, #111	; 0x6f
 800c31e:	d02a      	beq.n	800c376 <_printf_i+0xb6>
 800c320:	2a70      	cmp	r2, #112	; 0x70
 800c322:	d1e5      	bne.n	800c2f0 <_printf_i+0x30>
 800c324:	680a      	ldr	r2, [r1, #0]
 800c326:	f042 0220 	orr.w	r2, r2, #32
 800c32a:	600a      	str	r2, [r1, #0]
 800c32c:	e003      	b.n	800c336 <_printf_i+0x76>
 800c32e:	2a75      	cmp	r2, #117	; 0x75
 800c330:	d021      	beq.n	800c376 <_printf_i+0xb6>
 800c332:	2a78      	cmp	r2, #120	; 0x78
 800c334:	d1dc      	bne.n	800c2f0 <_printf_i+0x30>
 800c336:	2278      	movs	r2, #120	; 0x78
 800c338:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c33c:	496e      	ldr	r1, [pc, #440]	; (800c4f8 <_printf_i+0x238>)
 800c33e:	e064      	b.n	800c40a <_printf_i+0x14a>
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800c346:	1d11      	adds	r1, r2, #4
 800c348:	6019      	str	r1, [r3, #0]
 800c34a:	6813      	ldr	r3, [r2, #0]
 800c34c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c350:	2301      	movs	r3, #1
 800c352:	e0a3      	b.n	800c49c <_printf_i+0x1dc>
 800c354:	f011 0f40 	tst.w	r1, #64	; 0x40
 800c358:	f102 0104 	add.w	r1, r2, #4
 800c35c:	6019      	str	r1, [r3, #0]
 800c35e:	d0d7      	beq.n	800c310 <_printf_i+0x50>
 800c360:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c364:	2b00      	cmp	r3, #0
 800c366:	da03      	bge.n	800c370 <_printf_i+0xb0>
 800c368:	222d      	movs	r2, #45	; 0x2d
 800c36a:	425b      	negs	r3, r3
 800c36c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c370:	4962      	ldr	r1, [pc, #392]	; (800c4fc <_printf_i+0x23c>)
 800c372:	220a      	movs	r2, #10
 800c374:	e017      	b.n	800c3a6 <_printf_i+0xe6>
 800c376:	6820      	ldr	r0, [r4, #0]
 800c378:	6819      	ldr	r1, [r3, #0]
 800c37a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c37e:	d003      	beq.n	800c388 <_printf_i+0xc8>
 800c380:	1d08      	adds	r0, r1, #4
 800c382:	6018      	str	r0, [r3, #0]
 800c384:	680b      	ldr	r3, [r1, #0]
 800c386:	e006      	b.n	800c396 <_printf_i+0xd6>
 800c388:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c38c:	f101 0004 	add.w	r0, r1, #4
 800c390:	6018      	str	r0, [r3, #0]
 800c392:	d0f7      	beq.n	800c384 <_printf_i+0xc4>
 800c394:	880b      	ldrh	r3, [r1, #0]
 800c396:	4959      	ldr	r1, [pc, #356]	; (800c4fc <_printf_i+0x23c>)
 800c398:	2a6f      	cmp	r2, #111	; 0x6f
 800c39a:	bf14      	ite	ne
 800c39c:	220a      	movne	r2, #10
 800c39e:	2208      	moveq	r2, #8
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c3a6:	6865      	ldr	r5, [r4, #4]
 800c3a8:	60a5      	str	r5, [r4, #8]
 800c3aa:	2d00      	cmp	r5, #0
 800c3ac:	f2c0 809c 	blt.w	800c4e8 <_printf_i+0x228>
 800c3b0:	6820      	ldr	r0, [r4, #0]
 800c3b2:	f020 0004 	bic.w	r0, r0, #4
 800c3b6:	6020      	str	r0, [r4, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d13f      	bne.n	800c43c <_printf_i+0x17c>
 800c3bc:	2d00      	cmp	r5, #0
 800c3be:	f040 8095 	bne.w	800c4ec <_printf_i+0x22c>
 800c3c2:	4675      	mov	r5, lr
 800c3c4:	2a08      	cmp	r2, #8
 800c3c6:	d10b      	bne.n	800c3e0 <_printf_i+0x120>
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	07da      	lsls	r2, r3, #31
 800c3cc:	d508      	bpl.n	800c3e0 <_printf_i+0x120>
 800c3ce:	6923      	ldr	r3, [r4, #16]
 800c3d0:	6862      	ldr	r2, [r4, #4]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	bfde      	ittt	le
 800c3d6:	2330      	movle	r3, #48	; 0x30
 800c3d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3e0:	ebae 0305 	sub.w	r3, lr, r5
 800c3e4:	6123      	str	r3, [r4, #16]
 800c3e6:	f8cd 8000 	str.w	r8, [sp]
 800c3ea:	463b      	mov	r3, r7
 800c3ec:	aa03      	add	r2, sp, #12
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f7ff feef 	bl	800c1d4 <_printf_common>
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	d155      	bne.n	800c4a6 <_printf_i+0x1e6>
 800c3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fe:	b005      	add	sp, #20
 800c400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c404:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800c408:	493c      	ldr	r1, [pc, #240]	; (800c4fc <_printf_i+0x23c>)
 800c40a:	6822      	ldr	r2, [r4, #0]
 800c40c:	6818      	ldr	r0, [r3, #0]
 800c40e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c412:	f100 0504 	add.w	r5, r0, #4
 800c416:	601d      	str	r5, [r3, #0]
 800c418:	d001      	beq.n	800c41e <_printf_i+0x15e>
 800c41a:	6803      	ldr	r3, [r0, #0]
 800c41c:	e002      	b.n	800c424 <_printf_i+0x164>
 800c41e:	0655      	lsls	r5, r2, #25
 800c420:	d5fb      	bpl.n	800c41a <_printf_i+0x15a>
 800c422:	8803      	ldrh	r3, [r0, #0]
 800c424:	07d0      	lsls	r0, r2, #31
 800c426:	bf44      	itt	mi
 800c428:	f042 0220 	orrmi.w	r2, r2, #32
 800c42c:	6022      	strmi	r2, [r4, #0]
 800c42e:	b91b      	cbnz	r3, 800c438 <_printf_i+0x178>
 800c430:	6822      	ldr	r2, [r4, #0]
 800c432:	f022 0220 	bic.w	r2, r2, #32
 800c436:	6022      	str	r2, [r4, #0]
 800c438:	2210      	movs	r2, #16
 800c43a:	e7b1      	b.n	800c3a0 <_printf_i+0xe0>
 800c43c:	4675      	mov	r5, lr
 800c43e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c442:	fb02 3310 	mls	r3, r2, r0, r3
 800c446:	5ccb      	ldrb	r3, [r1, r3]
 800c448:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c44c:	4603      	mov	r3, r0
 800c44e:	2800      	cmp	r0, #0
 800c450:	d1f5      	bne.n	800c43e <_printf_i+0x17e>
 800c452:	e7b7      	b.n	800c3c4 <_printf_i+0x104>
 800c454:	6808      	ldr	r0, [r1, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	6949      	ldr	r1, [r1, #20]
 800c45a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c45e:	d004      	beq.n	800c46a <_printf_i+0x1aa>
 800c460:	1d10      	adds	r0, r2, #4
 800c462:	6018      	str	r0, [r3, #0]
 800c464:	6813      	ldr	r3, [r2, #0]
 800c466:	6019      	str	r1, [r3, #0]
 800c468:	e007      	b.n	800c47a <_printf_i+0x1ba>
 800c46a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c46e:	f102 0004 	add.w	r0, r2, #4
 800c472:	6018      	str	r0, [r3, #0]
 800c474:	6813      	ldr	r3, [r2, #0]
 800c476:	d0f6      	beq.n	800c466 <_printf_i+0x1a6>
 800c478:	8019      	strh	r1, [r3, #0]
 800c47a:	2300      	movs	r3, #0
 800c47c:	6123      	str	r3, [r4, #16]
 800c47e:	4675      	mov	r5, lr
 800c480:	e7b1      	b.n	800c3e6 <_printf_i+0x126>
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	1d11      	adds	r1, r2, #4
 800c486:	6019      	str	r1, [r3, #0]
 800c488:	6815      	ldr	r5, [r2, #0]
 800c48a:	6862      	ldr	r2, [r4, #4]
 800c48c:	2100      	movs	r1, #0
 800c48e:	4628      	mov	r0, r5
 800c490:	f7f3 fea6 	bl	80001e0 <memchr>
 800c494:	b108      	cbz	r0, 800c49a <_printf_i+0x1da>
 800c496:	1b40      	subs	r0, r0, r5
 800c498:	6060      	str	r0, [r4, #4]
 800c49a:	6863      	ldr	r3, [r4, #4]
 800c49c:	6123      	str	r3, [r4, #16]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4a4:	e79f      	b.n	800c3e6 <_printf_i+0x126>
 800c4a6:	6923      	ldr	r3, [r4, #16]
 800c4a8:	462a      	mov	r2, r5
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	47c0      	blx	r8
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d0a2      	beq.n	800c3fa <_printf_i+0x13a>
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	079b      	lsls	r3, r3, #30
 800c4b8:	d507      	bpl.n	800c4ca <_printf_i+0x20a>
 800c4ba:	2500      	movs	r5, #0
 800c4bc:	f104 0919 	add.w	r9, r4, #25
 800c4c0:	68e3      	ldr	r3, [r4, #12]
 800c4c2:	9a03      	ldr	r2, [sp, #12]
 800c4c4:	1a9b      	subs	r3, r3, r2
 800c4c6:	429d      	cmp	r5, r3
 800c4c8:	db05      	blt.n	800c4d6 <_printf_i+0x216>
 800c4ca:	68e0      	ldr	r0, [r4, #12]
 800c4cc:	9b03      	ldr	r3, [sp, #12]
 800c4ce:	4298      	cmp	r0, r3
 800c4d0:	bfb8      	it	lt
 800c4d2:	4618      	movlt	r0, r3
 800c4d4:	e793      	b.n	800c3fe <_printf_i+0x13e>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	464a      	mov	r2, r9
 800c4da:	4639      	mov	r1, r7
 800c4dc:	4630      	mov	r0, r6
 800c4de:	47c0      	blx	r8
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	d08a      	beq.n	800c3fa <_printf_i+0x13a>
 800c4e4:	3501      	adds	r5, #1
 800c4e6:	e7eb      	b.n	800c4c0 <_printf_i+0x200>
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1a7      	bne.n	800c43c <_printf_i+0x17c>
 800c4ec:	780b      	ldrb	r3, [r1, #0]
 800c4ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4f6:	e765      	b.n	800c3c4 <_printf_i+0x104>
 800c4f8:	08018aba 	.word	0x08018aba
 800c4fc:	08018aa9 	.word	0x08018aa9

0800c500 <memcpy>:
 800c500:	b510      	push	{r4, lr}
 800c502:	1e43      	subs	r3, r0, #1
 800c504:	440a      	add	r2, r1
 800c506:	4291      	cmp	r1, r2
 800c508:	d100      	bne.n	800c50c <memcpy+0xc>
 800c50a:	bd10      	pop	{r4, pc}
 800c50c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c510:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c514:	e7f7      	b.n	800c506 <memcpy+0x6>

0800c516 <memmove>:
 800c516:	4288      	cmp	r0, r1
 800c518:	b510      	push	{r4, lr}
 800c51a:	eb01 0302 	add.w	r3, r1, r2
 800c51e:	d803      	bhi.n	800c528 <memmove+0x12>
 800c520:	1e42      	subs	r2, r0, #1
 800c522:	4299      	cmp	r1, r3
 800c524:	d10c      	bne.n	800c540 <memmove+0x2a>
 800c526:	bd10      	pop	{r4, pc}
 800c528:	4298      	cmp	r0, r3
 800c52a:	d2f9      	bcs.n	800c520 <memmove+0xa>
 800c52c:	1881      	adds	r1, r0, r2
 800c52e:	1ad2      	subs	r2, r2, r3
 800c530:	42d3      	cmn	r3, r2
 800c532:	d100      	bne.n	800c536 <memmove+0x20>
 800c534:	bd10      	pop	{r4, pc}
 800c536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c53a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c53e:	e7f7      	b.n	800c530 <memmove+0x1a>
 800c540:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c544:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c548:	e7eb      	b.n	800c522 <memmove+0xc>

0800c54a <_realloc_r>:
 800c54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54c:	4607      	mov	r7, r0
 800c54e:	4614      	mov	r4, r2
 800c550:	460e      	mov	r6, r1
 800c552:	b921      	cbnz	r1, 800c55e <_realloc_r+0x14>
 800c554:	4611      	mov	r1, r2
 800c556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c55a:	f7ff bc47 	b.w	800bdec <_malloc_r>
 800c55e:	b922      	cbnz	r2, 800c56a <_realloc_r+0x20>
 800c560:	f7ff fbf6 	bl	800bd50 <_free_r>
 800c564:	4625      	mov	r5, r4
 800c566:	4628      	mov	r0, r5
 800c568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c56a:	f000 f814 	bl	800c596 <_malloc_usable_size_r>
 800c56e:	4284      	cmp	r4, r0
 800c570:	d90f      	bls.n	800c592 <_realloc_r+0x48>
 800c572:	4621      	mov	r1, r4
 800c574:	4638      	mov	r0, r7
 800c576:	f7ff fc39 	bl	800bdec <_malloc_r>
 800c57a:	4605      	mov	r5, r0
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d0f2      	beq.n	800c566 <_realloc_r+0x1c>
 800c580:	4631      	mov	r1, r6
 800c582:	4622      	mov	r2, r4
 800c584:	f7ff ffbc 	bl	800c500 <memcpy>
 800c588:	4631      	mov	r1, r6
 800c58a:	4638      	mov	r0, r7
 800c58c:	f7ff fbe0 	bl	800bd50 <_free_r>
 800c590:	e7e9      	b.n	800c566 <_realloc_r+0x1c>
 800c592:	4635      	mov	r5, r6
 800c594:	e7e7      	b.n	800c566 <_realloc_r+0x1c>

0800c596 <_malloc_usable_size_r>:
 800c596:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800c59a:	2800      	cmp	r0, #0
 800c59c:	f1a0 0004 	sub.w	r0, r0, #4
 800c5a0:	bfbc      	itt	lt
 800c5a2:	580b      	ldrlt	r3, [r1, r0]
 800c5a4:	18c0      	addlt	r0, r0, r3
 800c5a6:	4770      	bx	lr

0800c5a8 <_init>:
 800c5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5aa:	bf00      	nop
 800c5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ae:	bc08      	pop	{r3}
 800c5b0:	469e      	mov	lr, r3
 800c5b2:	4770      	bx	lr

0800c5b4 <_fini>:
 800c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b6:	bf00      	nop
 800c5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ba:	bc08      	pop	{r3}
 800c5bc:	469e      	mov	lr, r3
 800c5be:	4770      	bx	lr
