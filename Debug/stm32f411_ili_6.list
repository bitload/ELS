
stm32f411_ili_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001488  08005fe8  08005fe8  00015fe8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  20000000  08007480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009f4  200000a4  08007524  000200a4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a98  08007524  00020a98  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000281d2  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005569  00000000  00000000  000482a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000117e0  00000000  00000000  0004d80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001488  00000000  00000000  0005eff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001fa8  00000000  00000000  00060478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ba37  00000000  00000000  00062420  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007b65  00000000  00000000  0006de57  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000759bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004098  00000000  00000000  00075a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fd0 	.word	0x08005fd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08005fd0 	.word	0x08005fd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 f8aa 	bl	8000700 <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f85e 	bl	800067c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	2000003c 	.word	0x2000003c
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f82f 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f004 fcac 	bl	8004f5c <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200000dc 	.word	0x200000dc
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200000dc 	.word	0x200000dc

08000630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b538      	push	{r3, r4, r5, lr}
 8000632:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff fff6 	bl	8000624 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000638:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	bf1c      	itt	ne
 800063c:	4b05      	ldrne	r3, [pc, #20]	; (8000654 <HAL_Delay+0x24>)
 800063e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000640:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000642:	bf18      	it	ne
 8000644:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000646:	f7ff ffed 	bl	8000624 <HAL_GetTick>
 800064a:	1b40      	subs	r0, r0, r5
 800064c:	4284      	cmp	r4, r0
 800064e:	d8fa      	bhi.n	8000646 <HAL_Delay+0x16>
  {
  }
}
 8000650:	bd38      	pop	{r3, r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000

08000658 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800065a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	0c1b      	lsrs	r3, r3, #16
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	0200      	lsls	r0, r0, #8
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000672:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000674:	60d3      	str	r3, [r2, #12]
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	68dc      	ldr	r4, [r3, #12]
 8000682:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000686:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	2b04      	cmp	r3, #4
 800068e:	bf28      	it	cs
 8000690:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 0501 	mov.w	r5, #1
 8000698:	fa05 f303 	lsl.w	r3, r5, r3
 800069c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	bf8c      	ite	hi
 80006a2:	3c03      	subhi	r4, #3
 80006a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	4019      	ands	r1, r3
 80006a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006aa:	fa05 f404 	lsl.w	r4, r5, r4
 80006ae:	3c01      	subs	r4, #1
 80006b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	ea42 0201 	orr.w	r2, r2, r1
 80006b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfad      	iteet	ge
 80006be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	f000 000f 	andlt.w	r0, r0, #15
 80006c6:	4b06      	ldrlt	r3, [pc, #24]	; (80006e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	bfb5      	itete	lt
 80006ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000ed14 	.word	0xe000ed14

080006e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006e4:	2800      	cmp	r0, #0
 80006e6:	db08      	blt.n	80006fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e8:	0942      	lsrs	r2, r0, #5
 80006ea:	2301      	movs	r3, #1
 80006ec:	f000 001f 	and.w	r0, r0, #31
 80006f0:	fa03 f000 	lsl.w	r0, r3, r0
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <HAL_NVIC_EnableIRQ+0x18>)
 80006f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100

08000700 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000700:	3801      	subs	r0, #1
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d20a      	bcs.n	800071e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	21f0      	movs	r1, #240	; 0xf0
 8000710:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800072c:	6803      	ldr	r3, [r0, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000734:	f023 0303 	bic.w	r3, r3, #3
 8000738:	2118      	movs	r1, #24
 800073a:	3a10      	subs	r2, #16
 800073c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000740:	4904      	ldr	r1, [pc, #16]	; (8000754 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000742:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000744:	bf88      	it	hi
 8000746:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000748:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800074a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800074c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800074e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	0800601a 	.word	0x0800601a

08000758 <HAL_DMA_Init>:
{
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800075c:	f7ff ff62 	bl	8000624 <HAL_GetTick>
 8000760:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000762:	2c00      	cmp	r4, #0
 8000764:	d071      	beq.n	800084a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000766:	2300      	movs	r3, #0
 8000768:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800076c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800076e:	2302      	movs	r3, #2
 8000770:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000774:	6813      	ldr	r3, [r2, #0]
 8000776:	f023 0301 	bic.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800077c:	6821      	ldr	r1, [r4, #0]
 800077e:	680b      	ldr	r3, [r1, #0]
 8000780:	07d8      	lsls	r0, r3, #31
 8000782:	d43c      	bmi.n	80007fe <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000784:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000786:	4d32      	ldr	r5, [pc, #200]	; (8000850 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000788:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800078a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800078c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800078e:	68a3      	ldr	r3, [r4, #8]
 8000790:	4313      	orrs	r3, r2
 8000792:	68e2      	ldr	r2, [r4, #12]
 8000794:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000796:	6922      	ldr	r2, [r4, #16]
 8000798:	4313      	orrs	r3, r2
 800079a:	6962      	ldr	r2, [r4, #20]
 800079c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800079e:	69e2      	ldr	r2, [r4, #28]
 80007a0:	4303      	orrs	r3, r0
 80007a2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007a4:	6a22      	ldr	r2, [r4, #32]
 80007a6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007aa:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007ac:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007b0:	bf01      	itttt	eq
 80007b2:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80007b4:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80007b6:	4335      	orreq	r5, r6
 80007b8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80007ba:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007bc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007be:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007c0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007c8:	d10b      	bne.n	80007e2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80007ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007cc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80007ce:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007d0:	b13d      	cbz	r5, 80007e2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007d2:	b9f8      	cbnz	r0, 8000814 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80007d4:	2a01      	cmp	r2, #1
 80007d6:	d02d      	beq.n	8000834 <HAL_DMA_Init+0xdc>
 80007d8:	d301      	bcc.n	80007de <HAL_DMA_Init+0x86>
 80007da:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80007dc:	d101      	bne.n	80007e2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007de:	01ea      	lsls	r2, r5, #7
 80007e0:	d42b      	bmi.n	800083a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80007e2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80007e4:	4620      	mov	r0, r4
 80007e6:	f7ff ffa1 	bl	800072c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80007ec:	233f      	movs	r3, #63	; 0x3f
 80007ee:	4093      	lsls	r3, r2
 80007f0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80007f4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80007f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007fe:	f7ff ff11 	bl	8000624 <HAL_GetTick>
 8000802:	1b40      	subs	r0, r0, r5
 8000804:	2805      	cmp	r0, #5
 8000806:	d9b9      	bls.n	800077c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000808:	2320      	movs	r3, #32
 800080a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800080c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800080e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000812:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000814:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000818:	d113      	bne.n	8000842 <HAL_DMA_Init+0xea>
    switch (tmp)
 800081a:	2a03      	cmp	r2, #3
 800081c:	d8e1      	bhi.n	80007e2 <HAL_DMA_Init+0x8a>
 800081e:	a001      	add	r0, pc, #4	; (adr r0, 8000824 <HAL_DMA_Init+0xcc>)
 8000820:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000824:	0800083b 	.word	0x0800083b
 8000828:	080007df 	.word	0x080007df
 800082c:	0800083b 	.word	0x0800083b
 8000830:	08000835 	.word	0x08000835
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000834:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000838:	d1d3      	bne.n	80007e2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800083e:	2001      	movs	r0, #1
 8000840:	e7e5      	b.n	800080e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000842:	2a02      	cmp	r2, #2
 8000844:	d9f9      	bls.n	800083a <HAL_DMA_Init+0xe2>
 8000846:	2a03      	cmp	r2, #3
 8000848:	e7c8      	b.n	80007dc <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800084a:	2001      	movs	r0, #1
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	bf00      	nop
 8000850:	f010803f 	.word	0xf010803f

08000854 <HAL_DMA_Start_IT>:
{
 8000854:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000856:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800085a:	2c01      	cmp	r4, #1
 800085c:	d036      	beq.n	80008cc <HAL_DMA_Start_IT+0x78>
 800085e:	2401      	movs	r4, #1
 8000860:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000864:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000868:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800086a:	2c01      	cmp	r4, #1
 800086c:	f04f 0500 	mov.w	r5, #0
 8000870:	f04f 0402 	mov.w	r4, #2
 8000874:	d128      	bne.n	80008c8 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000876:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800087a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800087c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800087e:	6825      	ldr	r5, [r4, #0]
 8000880:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000884:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000886:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000888:	6883      	ldr	r3, [r0, #8]
 800088a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800088c:	bf0e      	itee	eq
 800088e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000890:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000892:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000894:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000896:	bf08      	it	eq
 8000898:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800089a:	233f      	movs	r3, #63	; 0x3f
 800089c:	4093      	lsls	r3, r2
 800089e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	f043 0316 	orr.w	r3, r3, #22
 80008a6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80008a8:	6963      	ldr	r3, [r4, #20]
 80008aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ae:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80008b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008b2:	b11b      	cbz	r3, 80008bc <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80008b4:	6823      	ldr	r3, [r4, #0]
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008c4:	2000      	movs	r0, #0
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80008c8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80008cc:	2002      	movs	r0, #2
}
 80008ce:	bd70      	pop	{r4, r5, r6, pc}

080008d0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008d0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d003      	beq.n	80008e0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
 80008de:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80008e0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80008e2:	2305      	movs	r3, #5
 80008e4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80008e8:	6813      	ldr	r3, [r2, #0]
 80008ea:	f023 0301 	bic.w	r3, r3, #1
 80008ee:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80008f0:	2000      	movs	r0, #0
}
 80008f2:	4770      	bx	lr

080008f4 <HAL_DMA_IRQHandler>:
{
 80008f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008fa:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008fc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80008fe:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000900:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000902:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000904:	2208      	movs	r2, #8
 8000906:	409a      	lsls	r2, r3
 8000908:	4216      	tst	r6, r2
{
 800090a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800090c:	d00c      	beq.n	8000928 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800090e:	6801      	ldr	r1, [r0, #0]
 8000910:	6808      	ldr	r0, [r1, #0]
 8000912:	0740      	lsls	r0, r0, #29
 8000914:	d508      	bpl.n	8000928 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000916:	6808      	ldr	r0, [r1, #0]
 8000918:	f020 0004 	bic.w	r0, r0, #4
 800091c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800091e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000920:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000922:	f042 0201 	orr.w	r2, r2, #1
 8000926:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000928:	2201      	movs	r2, #1
 800092a:	409a      	lsls	r2, r3
 800092c:	4216      	tst	r6, r2
 800092e:	d008      	beq.n	8000942 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000930:	6821      	ldr	r1, [r4, #0]
 8000932:	6949      	ldr	r1, [r1, #20]
 8000934:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000936:	bf41      	itttt	mi
 8000938:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800093a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800093c:	f042 0202 	orrmi.w	r2, r2, #2
 8000940:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000942:	2204      	movs	r2, #4
 8000944:	409a      	lsls	r2, r3
 8000946:	4216      	tst	r6, r2
 8000948:	d008      	beq.n	800095c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800094a:	6821      	ldr	r1, [r4, #0]
 800094c:	6809      	ldr	r1, [r1, #0]
 800094e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000950:	bf41      	itttt	mi
 8000952:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000954:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000956:	f042 0204 	orrmi.w	r2, r2, #4
 800095a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800095c:	2210      	movs	r2, #16
 800095e:	409a      	lsls	r2, r3
 8000960:	4216      	tst	r6, r2
 8000962:	d010      	beq.n	8000986 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	6819      	ldr	r1, [r3, #0]
 8000968:	0709      	lsls	r1, r1, #28
 800096a:	d50c      	bpl.n	8000986 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800096c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	0350      	lsls	r0, r2, #13
 8000972:	d535      	bpl.n	80009e0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	0319      	lsls	r1, r3, #12
 8000978:	d401      	bmi.n	800097e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800097a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800097c:	e000      	b.n	8000980 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800097e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000980:	b10b      	cbz	r3, 8000986 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000982:	4620      	mov	r0, r4
 8000984:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000986:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000988:	2220      	movs	r2, #32
 800098a:	408a      	lsls	r2, r1
 800098c:	4216      	tst	r6, r2
 800098e:	d038      	beq.n	8000a02 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	06c6      	lsls	r6, r0, #27
 8000996:	d534      	bpl.n	8000a02 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000998:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800099a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800099e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009a0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009a2:	d125      	bne.n	80009f0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009a4:	f022 0216 	bic.w	r2, r2, #22
 80009a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009b0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009b4:	b90a      	cbnz	r2, 80009ba <HAL_DMA_IRQHandler+0xc6>
 80009b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009b8:	b11a      	cbz	r2, 80009c2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	f022 0208 	bic.w	r2, r2, #8
 80009c0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009c2:	233f      	movs	r3, #63	; 0x3f
 80009c4:	408b      	lsls	r3, r1
 80009c6:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80009c8:	2300      	movs	r3, #0
 80009ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80009ce:	2301      	movs	r3, #1
 80009d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80009d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80009d6:	b10b      	cbz	r3, 80009dc <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80009d8:	4620      	mov	r0, r4
 80009da:	4798      	blx	r3
}
 80009dc:	b003      	add	sp, #12
 80009de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009e4:	bf5e      	ittt	pl
 80009e6:	681a      	ldrpl	r2, [r3, #0]
 80009e8:	f022 0208 	bicpl.w	r2, r2, #8
 80009ec:	601a      	strpl	r2, [r3, #0]
 80009ee:	e7c4      	b.n	800097a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009f0:	0350      	lsls	r0, r2, #13
 80009f2:	d528      	bpl.n	8000a46 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	0319      	lsls	r1, r3, #12
 80009f8:	d432      	bmi.n	8000a60 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80009fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80009fc:	b10b      	cbz	r3, 8000a02 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80009fe:	4620      	mov	r0, r4
 8000a00:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0e9      	beq.n	80009dc <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a0a:	07da      	lsls	r2, r3, #31
 8000a0c:	d519      	bpl.n	8000a42 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a0e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000a10:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a16:	6813      	ldr	r3, [r2, #0]
 8000a18:	f023 0301 	bic.w	r3, r3, #1
 8000a1c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a1e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a22:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000a26:	9b01      	ldr	r3, [sp, #4]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	429f      	cmp	r7, r3
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	d302      	bcc.n	8000a36 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a30:	6813      	ldr	r3, [r2, #0]
 8000a32:	07db      	lsls	r3, r3, #31
 8000a34:	d4f7      	bmi.n	8000a26 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000a36:	2300      	movs	r3, #0
 8000a38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000a42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a44:	e7c7      	b.n	80009d6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a4c:	d108      	bne.n	8000a60 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a4e:	6819      	ldr	r1, [r3, #0]
 8000a50:	f021 0110 	bic.w	r1, r1, #16
 8000a54:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a56:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000a58:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a62:	e7cb      	b.n	80009fc <HAL_DMA_IRQHandler+0x108>
 8000a64:	2000003c 	.word	0x2000003c

08000a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a6c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a70:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000c10 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a74:	4a64      	ldr	r2, [pc, #400]	; (8000c08 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a76:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000a78:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a7c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a80:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a84:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000a88:	42b7      	cmp	r7, r6
 8000a8a:	f040 80ad 	bne.w	8000be8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a8e:	684c      	ldr	r4, [r1, #4]
 8000a90:	f024 0a10 	bic.w	sl, r4, #16
 8000a94:	f1ba 0f02 	cmp.w	sl, #2
 8000a98:	d116      	bne.n	8000ac8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000a9a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000a9e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aa2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000aa6:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aaa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000aae:	f04f 0e0f 	mov.w	lr, #15
 8000ab2:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000ab6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000aba:	690d      	ldr	r5, [r1, #16]
 8000abc:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ac0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000ac4:	f8cc 5020 	str.w	r5, [ip, #32]
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000acc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ace:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ad2:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ad6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ad8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000adc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ae0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ae8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aec:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000af0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000af2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af6:	d815      	bhi.n	8000b24 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000af8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000afc:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b00:	68cd      	ldr	r5, [r1, #12]
 8000b02:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000b06:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000b0a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b0e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b12:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b16:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000b1a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000b1e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000b22:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b24:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b26:	9d00      	ldr	r5, [sp, #0]
 8000b28:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b2a:	688f      	ldr	r7, [r1, #8]
 8000b2c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000b30:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b32:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b34:	00e5      	lsls	r5, r4, #3
 8000b36:	d557      	bpl.n	8000be8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b38:	f04f 0b00 	mov.w	fp, #0
 8000b3c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b40:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b44:	4d31      	ldr	r5, [pc, #196]	; (8000c0c <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b4a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b4e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b52:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b56:	9703      	str	r7, [sp, #12]
 8000b58:	9f03      	ldr	r7, [sp, #12]
 8000b5a:	f023 0703 	bic.w	r7, r3, #3
 8000b5e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b62:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b66:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b6a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b6e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b72:	f04f 0e0f 	mov.w	lr, #15
 8000b76:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b7a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b7c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b80:	d039      	beq.n	8000bf6 <HAL_GPIO_Init+0x18e>
 8000b82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b86:	42a8      	cmp	r0, r5
 8000b88:	d037      	beq.n	8000bfa <HAL_GPIO_Init+0x192>
 8000b8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b8e:	42a8      	cmp	r0, r5
 8000b90:	d035      	beq.n	8000bfe <HAL_GPIO_Init+0x196>
 8000b92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b96:	42a8      	cmp	r0, r5
 8000b98:	d033      	beq.n	8000c02 <HAL_GPIO_Init+0x19a>
 8000b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b9e:	42a8      	cmp	r0, r5
 8000ba0:	bf14      	ite	ne
 8000ba2:	2507      	movne	r5, #7
 8000ba4:	2504      	moveq	r5, #4
 8000ba6:	fa05 f50c 	lsl.w	r5, r5, ip
 8000baa:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bae:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000bb0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bb2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000bb8:	bf0c      	ite	eq
 8000bba:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bbc:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000bbe:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000bc0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000bc6:	bf0c      	ite	eq
 8000bc8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bca:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000bcc:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bce:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bd4:	bf0c      	ite	eq
 8000bd6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bd8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000bda:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000bdc:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bde:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000be0:	bf54      	ite	pl
 8000be2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000be4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000be6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be8:	3301      	adds	r3, #1
 8000bea:	2b10      	cmp	r3, #16
 8000bec:	f47f af47 	bne.w	8000a7e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000bf0:	b005      	add	sp, #20
 8000bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bf6:	465d      	mov	r5, fp
 8000bf8:	e7d5      	b.n	8000ba6 <HAL_GPIO_Init+0x13e>
 8000bfa:	2501      	movs	r5, #1
 8000bfc:	e7d3      	b.n	8000ba6 <HAL_GPIO_Init+0x13e>
 8000bfe:	2502      	movs	r5, #2
 8000c00:	e7d1      	b.n	8000ba6 <HAL_GPIO_Init+0x13e>
 8000c02:	2503      	movs	r5, #3
 8000c04:	e7cf      	b.n	8000ba6 <HAL_GPIO_Init+0x13e>
 8000c06:	bf00      	nop
 8000c08:	40013c00 	.word	0x40013c00
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c14:	6903      	ldr	r3, [r0, #16]
 8000c16:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c18:	bf14      	ite	ne
 8000c1a:	2001      	movne	r0, #1
 8000c1c:	2000      	moveq	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c20:	b10a      	cbz	r2, 8000c26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c22:	6181      	str	r1, [r0, #24]
 8000c24:	4770      	bx	lr
 8000c26:	0409      	lsls	r1, r1, #16
 8000c28:	e7fb      	b.n	8000c22 <HAL_GPIO_WritePin+0x2>

08000c2a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000c2a:	6943      	ldr	r3, [r0, #20]
 8000c2c:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c30:	bf08      	it	eq
 8000c32:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c34:	6181      	str	r1, [r0, #24]
 8000c36:	4770      	bx	lr

08000c38 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c3e:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8000c42:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8000c46:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8000c4a:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8000c4e:	2801      	cmp	r0, #1
 8000c50:	d028      	beq.n	8000ca4 <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 8000c52:	2028      	movs	r0, #40	; 0x28
 8000c54:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8000c58:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8000c5a:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000c5c:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8000c60:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000c64:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000c68:	bf08      	it	eq
 8000c6a:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8000c6c:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000c70:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8000c74:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000c78:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000c7c:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000c80:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8000c84:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8000c88:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8000c8c:	f8cd c008 	str.w	ip, [sp, #8]
 8000c90:	e88d 4080 	stmia.w	sp, {r7, lr}
 8000c94:	6820      	ldr	r0, [r4, #0]
 8000c96:	f002 f86d 	bl	8002d74 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000c9a:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8000c9e:	b004      	add	sp, #16
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	e7fa      	b.n	8000c9e <HAL_HCD_HC_Init+0x66>

08000ca8 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8000ca8:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8000cac:	2b01      	cmp	r3, #1
{
 8000cae:	b510      	push	{r4, lr}
 8000cb0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000cb2:	d009      	beq.n	8000cc8 <HAL_HCD_HC_Halt+0x20>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000cba:	6800      	ldr	r0, [r0, #0]
 8000cbc:	f002 f8e4 	bl	8002e88 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8000cc6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8000cc8:	2002      	movs	r0, #2
}
 8000cca:	bd10      	pop	{r4, pc}

08000ccc <HAL_HCD_Init>:
{
 8000ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8000cd0:	4607      	mov	r7, r0
{
 8000cd2:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d041      	beq.n	8000d5c <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000cd8:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8000cdc:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000cde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ce2:	b91b      	cbnz	r3, 8000cec <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8000ce4:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8000ce8:	f004 fbac 	bl	8005444 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000cec:	2303      	movs	r3, #3
 8000cee:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000cf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8000cf4:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000cf6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8000cfa:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8000cfe:	bf08      	it	eq
 8000d00:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000d02:	f001 fef3 	bl	8002aec <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d08:	466d      	mov	r5, sp
 8000d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d18:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000d1c:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000d1e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000d22:	6838      	ldr	r0, [r7, #0]
 8000d24:	f001 fe9c 	bl	8002a60 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000d28:	f856 0b10 	ldr.w	r0, [r6], #16
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	f001 fee3 	bl	8002af8 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000d32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d34:	466d      	mov	r5, sp
 8000d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d40:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d44:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000d48:	6838      	ldr	r0, [r7, #0]
 8000d4a:	f001 ff93 	bl	8002c74 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8000d54:	2000      	movs	r0, #0
}
 8000d56:	b00a      	add	sp, #40	; 0x28
 8000d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	e7fa      	b.n	8000d56 <HAL_HCD_Init+0x8a>

08000d60 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000d60:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000d62:	2428      	movs	r4, #40	; 0x28
 8000d64:	fb04 0401 	mla	r4, r4, r1, r0
{
 8000d68:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8000d6c:	9e06      	ldr	r6, [sp, #24]
 8000d6e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000d72:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000d76:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8000d7a:	b96f      	cbnz	r7, 8000d98 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000d7c:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000d7e:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8000d84:	d02b      	beq.n	8000dde <HAL_HCD_HC_SubmitRequest+0x7e>
 8000d86:	42bb      	cmp	r3, r7
 8000d88:	d029      	beq.n	8000dde <HAL_HCD_HC_SubmitRequest+0x7e>
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d131      	bne.n	8000df2 <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000d8e:	2328      	movs	r3, #40	; 0x28
 8000d90:	fb03 0301 	mla	r3, r3, r1, r0
 8000d94:	2200      	movs	r2, #0
 8000d96:	e02a      	b.n	8000dee <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000d98:	f04f 0e02 	mov.w	lr, #2
 8000d9c:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d826      	bhi.n	8000df2 <HAL_HCD_HC_SubmitRequest+0x92>
 8000da4:	a401      	add	r4, pc, #4	; (adr r4, 8000dac <HAL_HCD_HC_SubmitRequest+0x4c>)
 8000da6:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8000daa:	bf00      	nop
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000d8f 	.word	0x08000d8f
 8000db4:	08000ddf 	.word	0x08000ddf
 8000db8:	08000ddf 	.word	0x08000ddf
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000dbc:	2f01      	cmp	r7, #1
 8000dbe:	d118      	bne.n	8000df2 <HAL_HCD_HC_SubmitRequest+0x92>
 8000dc0:	b9ba      	cbnz	r2, 8000df2 <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8000dc2:	b925      	cbnz	r5, 8000dce <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8000dc4:	2328      	movs	r3, #40	; 0x28
 8000dc6:	fb03 0301 	mla	r3, r3, r1, r0
 8000dca:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000dce:	2328      	movs	r3, #40	; 0x28
 8000dd0:	fb03 0301 	mla	r3, r3, r1, r0
 8000dd4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000dd8:	b14a      	cbz	r2, 8000dee <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000dda:	2202      	movs	r2, #2
 8000ddc:	e007      	b.n	8000dee <HAL_HCD_HC_SubmitRequest+0x8e>
 8000dde:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000de0:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8000de4:	b9d2      	cbnz	r2, 8000e1c <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000de6:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8000dea:	2c00      	cmp	r4, #0
 8000dec:	d1f5      	bne.n	8000dda <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000df2:	2428      	movs	r4, #40	; 0x28
 8000df4:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000df8:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8000dfa:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000dfe:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000e00:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000e02:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000e04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8000e08:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8000e0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000e0e:	3138      	adds	r1, #56	; 0x38
 8000e10:	7c02      	ldrb	r2, [r0, #16]
 8000e12:	6800      	ldr	r0, [r0, #0]
}
 8000e14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000e18:	f002 b89a 	b.w	8002f50 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000e1c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000e20:	e7da      	b.n	8000dd8 <HAL_HCD_HC_SubmitRequest+0x78>
 8000e22:	bf00      	nop

08000e24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000e28:	6806      	ldr	r6, [r0, #0]
{
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f001 fec2 	bl	8002bb8 <USB_GetMode>
 8000e34:	2801      	cmp	r0, #1
 8000e36:	f040 80b4 	bne.w	8000fa2 <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000e3a:	6820      	ldr	r0, [r4, #0]
 8000e3c:	f001 feb8 	bl	8002bb0 <USB_ReadInterrupts>
 8000e40:	2800      	cmp	r0, #0
 8000e42:	f000 80ae 	beq.w	8000fa2 <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000e46:	6820      	ldr	r0, [r4, #0]
 8000e48:	f001 feb2 	bl	8002bb0 <USB_ReadInterrupts>
 8000e4c:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000e4e:	bf48      	it	mi
 8000e50:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000e52:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000e54:	bf44      	itt	mi
 8000e56:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8000e5a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000e5c:	f001 fea8 	bl	8002bb0 <USB_ReadInterrupts>
 8000e60:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000e62:	bf48      	it	mi
 8000e64:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000e66:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000e68:	bf44      	itt	mi
 8000e6a:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8000e6e:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000e70:	f001 fe9e 	bl	8002bb0 <USB_ReadInterrupts>
 8000e74:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000e76:	bf48      	it	mi
 8000e78:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000e7a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000e7c:	bf44      	itt	mi
 8000e7e:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8000e82:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000e84:	f001 fe94 	bl	8002bb0 <USB_ReadInterrupts>
 8000e88:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000e8a:	bf48      	it	mi
 8000e8c:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000e8e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000e90:	bf44      	itt	mi
 8000e92:	2202      	movmi	r2, #2
 8000e94:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000e96:	f001 fe8b 	bl	8002bb0 <USB_ReadInterrupts>
 8000e9a:	0082      	lsls	r2, r0, #2
 8000e9c:	d510      	bpl.n	8000ec0 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000e9e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8000ea2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000ea6:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f004 fb1c 	bl	80054e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	6820      	ldr	r0, [r4, #0]
 8000eb4:	f001 fe84 	bl	8002bc0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000ec0:	6820      	ldr	r0, [r4, #0]
 8000ec2:	f001 fe75 	bl	8002bb0 <USB_ReadInterrupts>
 8000ec6:	01c3      	lsls	r3, r0, #7
 8000ec8:	d542      	bpl.n	8000f50 <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000eca:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000ecc:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000ed0:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8000ed2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000ed6:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000ed8:	9b05      	ldr	r3, [sp, #20]
 8000eda:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000ede:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000ee0:	9b04      	ldr	r3, [sp, #16]
 8000ee2:	079f      	lsls	r7, r3, #30
 8000ee4:	d50d      	bpl.n	8000f02 <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000ee6:	9b04      	ldr	r3, [sp, #16]
 8000ee8:	07d8      	lsls	r0, r3, #31
 8000eea:	d506      	bpl.n	8000efa <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000eec:	69ab      	ldr	r3, [r5, #24]
 8000eee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000ef2:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f004 faf3 	bl	80054e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000efa:	9b05      	ldr	r3, [sp, #20]
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000f02:	9b04      	ldr	r3, [sp, #16]
 8000f04:	0719      	lsls	r1, r3, #28
 8000f06:	d519      	bpl.n	8000f3c <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000f08:	9b05      	ldr	r3, [sp, #20]
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000f10:	9b04      	ldr	r3, [sp, #16]
 8000f12:	075a      	lsls	r2, r3, #29
 8000f14:	d550      	bpl.n	8000fb8 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000f16:	69a1      	ldr	r1, [r4, #24]
 8000f18:	2902      	cmp	r1, #2
 8000f1a:	d145      	bne.n	8000fa8 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000f1c:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000f1e:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000f20:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000f24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000f28:	bf18      	it	ne
 8000f2a:	2101      	movne	r1, #1
 8000f2c:	f001 fe48 	bl	8002bc0 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8000f30:	4620      	mov	r0, r4
 8000f32:	f004 fade 	bl	80054f2 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8000f36:	4620      	mov	r0, r4
 8000f38:	f004 fad2 	bl	80054e0 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000f3c:	9b04      	ldr	r3, [sp, #16]
 8000f3e:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000f40:	bf42      	ittt	mi
 8000f42:	9b05      	ldrmi	r3, [sp, #20]
 8000f44:	f043 0320 	orrmi.w	r3, r3, #32
 8000f48:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000f4a:	9b05      	ldr	r3, [sp, #20]
 8000f4c:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000f50:	6820      	ldr	r0, [r4, #0]
 8000f52:	f001 fe2d 	bl	8002bb0 <USB_ReadInterrupts>
 8000f56:	0707      	lsls	r7, r0, #28
 8000f58:	d505      	bpl.n	8000f66 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f004 fabc 	bl	80054d8 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	2208      	movs	r2, #8
 8000f64:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000f66:	6820      	ldr	r0, [r4, #0]
 8000f68:	f001 fe22 	bl	8002bb0 <USB_ReadInterrupts>
 8000f6c:	0185      	lsls	r5, r0, #6
 8000f6e:	d512      	bpl.n	8000f96 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000f70:	6820      	ldr	r0, [r4, #0]
 8000f72:	f001 ff84 	bl	8002e7e <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000f76:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000f7a:	9001      	str	r0, [sp, #4]
 8000f7c:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000f80:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000f82:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000f86:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000f88:	68a3      	ldr	r3, [r4, #8]
 8000f8a:	459a      	cmp	sl, r3
 8000f8c:	d323      	bcc.n	8000fd6 <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f94:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000f96:	6820      	ldr	r0, [r4, #0]
 8000f98:	f001 fe0a 	bl	8002bb0 <USB_ReadInterrupts>
 8000f9c:	06c3      	lsls	r3, r0, #27
 8000f9e:	f100 8220 	bmi.w	80013e2 <HAL_HCD_IRQHandler+0x5be>
}
 8000fa2:	b007      	add	sp, #28
 8000fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000fa8:	68e3      	ldr	r3, [r4, #12]
 8000faa:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8000fac:	bf04      	itt	eq
 8000fae:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8000fb2:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8000fb6:	e7bb      	b.n	8000f30 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f004 fa9e 	bl	80054fa <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000fbe:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000fc2:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000fc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000fc8:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000fcc:	6993      	ldr	r3, [r2, #24]
 8000fce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	e7b2      	b.n	8000f3c <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000fd6:	9a01      	ldr	r2, [sp, #4]
 8000fd8:	f00a 030f 	and.w	r3, sl, #15
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	07d8      	lsls	r0, r3, #31
 8000fe2:	f140 808a 	bpl.w	80010fa <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8000fea:	6820      	ldr	r0, [r4, #0]
 8000fec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000ff0:	fa5f f58a 	uxtb.w	r5, sl
 8000ff4:	f000 8104 	beq.w	8001200 <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000ff8:	016a      	lsls	r2, r5, #5
 8000ffa:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8000ffe:	18d6      	adds	r6, r2, r3
 8001000:	68b1      	ldr	r1, [r6, #8]
 8001002:	0749      	lsls	r1, r1, #29
 8001004:	d513      	bpl.n	800102e <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001006:	2104      	movs	r1, #4
 8001008:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800100a:	68f1      	ldr	r1, [r6, #12]
 800100c:	f041 0102 	orr.w	r1, r1, #2
 8001010:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001012:	68b1      	ldr	r1, [r6, #8]
 8001014:	0589      	lsls	r1, r1, #22
 8001016:	d542      	bpl.n	800109e <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001018:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800101a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001022:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001024:	f001 ff30 	bl	8002e88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102c:	e0c7      	b.n	80011be <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800102e:	68b1      	ldr	r1, [r6, #8]
 8001030:	0689      	lsls	r1, r1, #26
 8001032:	d502      	bpl.n	800103a <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001034:	2120      	movs	r1, #32
 8001036:	60b1      	str	r1, [r6, #8]
 8001038:	e7eb      	b.n	8001012 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800103a:	68b1      	ldr	r1, [r6, #8]
 800103c:	0709      	lsls	r1, r1, #28
 800103e:	d515      	bpl.n	800106c <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001040:	68f1      	ldr	r1, [r6, #12]
 8001042:	9303      	str	r3, [sp, #12]
 8001044:	f041 0102 	orr.w	r1, r1, #2
 8001048:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800104a:	fb07 4105 	mla	r1, r7, r5, r4
 800104e:	f04f 0e05 	mov.w	lr, #5
 8001052:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001056:	2110      	movs	r1, #16
 8001058:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800105a:	2108      	movs	r1, #8
 800105c:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800105e:	4629      	mov	r1, r5
 8001060:	9202      	str	r2, [sp, #8]
 8001062:	f001 ff11 	bl	8002e88 <USB_HC_Halt>
 8001066:	9a02      	ldr	r2, [sp, #8]
 8001068:	9b03      	ldr	r3, [sp, #12]
 800106a:	e7d2      	b.n	8001012 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800106c:	68b1      	ldr	r1, [r6, #8]
 800106e:	0549      	lsls	r1, r1, #21
 8001070:	d5cf      	bpl.n	8001012 <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001072:	68f1      	ldr	r1, [r6, #12]
 8001074:	9303      	str	r3, [sp, #12]
 8001076:	f041 0102 	orr.w	r1, r1, #2
 800107a:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800107c:	4629      	mov	r1, r5
 800107e:	9202      	str	r2, [sp, #8]
 8001080:	f001 ff02 	bl	8002e88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001084:	2110      	movs	r1, #16
 8001086:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001088:	fb07 4105 	mla	r1, r7, r5, r4
 800108c:	2008      	movs	r0, #8
 800108e:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001096:	60b1      	str	r1, [r6, #8]
 8001098:	9b03      	ldr	r3, [sp, #12]
 800109a:	9a02      	ldr	r2, [sp, #8]
 800109c:	e7b9      	b.n	8001012 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800109e:	68b1      	ldr	r1, [r6, #8]
 80010a0:	07c8      	lsls	r0, r1, #31
 80010a2:	d53d      	bpl.n	8001120 <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 80010a4:	6921      	ldr	r1, [r4, #16]
 80010a6:	b149      	cbz	r1, 80010bc <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80010a8:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80010ac:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80010ae:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80010b2:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80010b6:	1a09      	subs	r1, r1, r0
 80010b8:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 80010bc:	fb07 4e05 	mla	lr, r7, r5, r4
 80010c0:	2001      	movs	r0, #1
 80010c2:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80010c6:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80010ca:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80010cc:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 80010d0:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80010d4:	d116      	bne.n	8001104 <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010d6:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010d8:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010e0:	4629      	mov	r1, r5
 80010e2:	f001 fed1 	bl	8002e88 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80010e6:	2310      	movs	r3, #16
 80010e8:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80010ea:	fb07 4505 	mla	r5, r7, r5, r4
 80010ee:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80010fa:	f10a 0a01 	add.w	sl, sl, #1
 80010fe:	f108 0820 	add.w	r8, r8, #32
 8001102:	e741      	b.n	8000f88 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001104:	2903      	cmp	r1, #3
 8001106:	d1f0      	bne.n	80010ea <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001108:	58d1      	ldr	r1, [r2, r3]
 800110a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800110e:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001110:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001114:	4602      	mov	r2, r0
 8001116:	4629      	mov	r1, r5
 8001118:	4620      	mov	r0, r4
 800111a:	f004 f9e9 	bl	80054f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800111e:	e7e4      	b.n	80010ea <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001120:	68b1      	ldr	r1, [r6, #8]
 8001122:	0789      	lsls	r1, r1, #30
 8001124:	d536      	bpl.n	8001194 <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001126:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001128:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800112c:	f021 0102 	bic.w	r1, r1, #2
 8001130:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001132:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8001136:	2901      	cmp	r1, #1
 8001138:	d10c      	bne.n	8001154 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800113a:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800113e:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001142:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001146:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800114a:	4629      	mov	r1, r5
 800114c:	4620      	mov	r0, r4
 800114e:	f004 f9cf 	bl	80054f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001152:	e7d2      	b.n	80010fa <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001154:	2905      	cmp	r1, #5
 8001156:	d0f0      	beq.n	800113a <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001158:	2906      	cmp	r1, #6
 800115a:	d001      	beq.n	8001160 <HAL_HCD_IRQHandler+0x33c>
 800115c:	2908      	cmp	r1, #8
 800115e:	d114      	bne.n	800118a <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 8001160:	fb07 4105 	mla	r1, r7, r5, r4
 8001164:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001166:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001168:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 800116a:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800116c:	bf83      	ittte	hi
 800116e:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001170:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001174:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001178:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800117c:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800117e:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001182:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001186:	50d1      	str	r1, [r2, r3]
 8001188:	e7d9      	b.n	800113e <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800118a:	2903      	cmp	r1, #3
 800118c:	d1d7      	bne.n	800113e <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800118e:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8001192:	e7f3      	b.n	800117c <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001194:	68b1      	ldr	r1, [r6, #8]
 8001196:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800119a:	d012      	beq.n	80011c2 <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800119c:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800119e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80011a6:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011aa:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 80011ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011ae:	3201      	adds	r2, #1
 80011b0:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 80011b2:	2206      	movs	r2, #6
 80011b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011b8:	f001 fe66 	bl	8002e88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	60b3      	str	r3, [r6, #8]
 80011c0:	e79b      	b.n	80010fa <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80011c2:	68b3      	ldr	r3, [r6, #8]
 80011c4:	06da      	lsls	r2, r3, #27
 80011c6:	d598      	bpl.n	80010fa <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80011c8:	fb07 4205 	mla	r2, r7, r5, r4
 80011cc:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d10a      	bne.n	80011ea <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80011d4:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80011d6:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011d8:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011e0:	4629      	mov	r1, r5
 80011e2:	f001 fe51 	bl	8002e88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80011e6:	2310      	movs	r3, #16
 80011e8:	e7e9      	b.n	80011be <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80011ea:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80011ee:	d1fa      	bne.n	80011e6 <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80011f0:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80011f2:	6923      	ldr	r3, [r4, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f6      	bne.n	80011e6 <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 80011f8:	2303      	movs	r3, #3
 80011fa:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 80011fe:	e7ea      	b.n	80011d6 <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001200:	0169      	lsls	r1, r5, #5
 8001202:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8001206:	188e      	adds	r6, r1, r2
 8001208:	68b3      	ldr	r3, [r6, #8]
 800120a:	f013 0e04 	ands.w	lr, r3, #4
 800120e:	d006      	beq.n	800121e <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001210:	2304      	movs	r3, #4
 8001212:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001214:	68f3      	ldr	r3, [r6, #12]
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	60f3      	str	r3, [r6, #12]
 800121c:	e76d      	b.n	80010fa <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800121e:	68b3      	ldr	r3, [r6, #8]
 8001220:	f013 0320 	ands.w	r3, r3, #32
 8001224:	d014      	beq.n	8001250 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001226:	2320      	movs	r3, #32
 8001228:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800122a:	fb07 4305 	mla	r3, r7, r5, r4
 800122e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001232:	2a01      	cmp	r2, #1
 8001234:	f47f af61 	bne.w	80010fa <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8001238:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800123c:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001240:	68f3      	ldr	r3, [r6, #12]
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001248:	4629      	mov	r1, r5
 800124a:	f001 fe1d 	bl	8002e88 <USB_HC_Halt>
 800124e:	e754      	b.n	80010fa <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001250:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8001254:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001258:	d011      	beq.n	800127e <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 800125a:	fb07 4205 	mla	r2, r7, r5, r4
 800125e:	2104      	movs	r1, #4
 8001260:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8001264:	2101      	movs	r1, #1
 8001266:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800126a:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800126c:	68f3      	ldr	r3, [r6, #12]
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001274:	4629      	mov	r1, r5
 8001276:	f001 fe07 	bl	8002e88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800127a:	2340      	movs	r3, #64	; 0x40
 800127c:	e79f      	b.n	80011be <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800127e:	68b3      	ldr	r3, [r6, #8]
 8001280:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8001284:	d005      	beq.n	8001292 <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001286:	68f3      	ldr	r3, [r6, #12]
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800128e:	4629      	mov	r1, r5
 8001290:	e6c8      	b.n	8001024 <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001292:	68b3      	ldr	r3, [r6, #8]
 8001294:	07db      	lsls	r3, r3, #31
 8001296:	d511      	bpl.n	80012bc <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001298:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800129a:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800129e:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 80012a2:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012a6:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012a8:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80012aa:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012ac:	f001 fdec 	bl	8002e88 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 80012b0:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80012b2:	2201      	movs	r2, #1
 80012b4:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80012b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80012ba:	e71e      	b.n	80010fa <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80012bc:	68b3      	ldr	r3, [r6, #8]
 80012be:	071b      	lsls	r3, r3, #28
 80012c0:	d50e      	bpl.n	80012e0 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80012c2:	2308      	movs	r3, #8
 80012c4:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012c6:	68f3      	ldr	r3, [r6, #12]
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012ce:	4629      	mov	r1, r5
 80012d0:	f001 fdda 	bl	8002e88 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80012d4:	fb07 4505 	mla	r5, r7, r5, r4
 80012d8:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80012da:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80012de:	e70c      	b.n	80010fa <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80012e0:	68b3      	ldr	r3, [r6, #8]
 80012e2:	06db      	lsls	r3, r3, #27
 80012e4:	d515      	bpl.n	8001312 <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80012e6:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 80012ea:	2203      	movs	r2, #3
 80012ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 80012f0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80012f4:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 80012f8:	b92a      	cbnz	r2, 8001306 <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80012fa:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80012fe:	b912      	cbnz	r2, 8001306 <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 8001300:	2201      	movs	r2, #1
 8001302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001306:	68f3      	ldr	r3, [r6, #12]
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800130e:	4629      	mov	r1, r5
 8001310:	e767      	b.n	80011e2 <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001312:	68b3      	ldr	r3, [r6, #8]
 8001314:	061b      	lsls	r3, r3, #24
 8001316:	d50c      	bpl.n	8001332 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001318:	68f3      	ldr	r3, [r6, #12]
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001320:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001322:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001326:	f001 fdaf 	bl	8002e88 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800132a:	2306      	movs	r3, #6
 800132c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001330:	e744      	b.n	80011bc <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001332:	68b3      	ldr	r3, [r6, #8]
 8001334:	055b      	lsls	r3, r3, #21
 8001336:	d50f      	bpl.n	8001358 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001338:	68f3      	ldr	r3, [r6, #12]
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001340:	4629      	mov	r1, r5
 8001342:	f001 fda1 	bl	8002e88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001346:	2310      	movs	r3, #16
 8001348:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800134a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134e:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001350:	fb07 4505 	mla	r5, r7, r5, r4
 8001354:	2308      	movs	r3, #8
 8001356:	e7c0      	b.n	80012da <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001358:	68b3      	ldr	r3, [r6, #8]
 800135a:	0798      	lsls	r0, r3, #30
 800135c:	f57f aecd 	bpl.w	80010fa <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001360:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001362:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001366:	f023 0302 	bic.w	r3, r3, #2
 800136a:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800136c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001370:	2b01      	cmp	r3, #1
 8001372:	d10e      	bne.n	8001392 <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001374:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001378:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800137c:	3b02      	subs	r3, #2
 800137e:	2b01      	cmp	r3, #1
 8001380:	f63f aedd 	bhi.w	800113e <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001384:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001388:	f083 0301 	eor.w	r3, r3, #1
 800138c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8001390:	e6d5      	b.n	800113e <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001392:	2b03      	cmp	r3, #3
 8001394:	d102      	bne.n	800139c <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001396:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 800139a:	e6d0      	b.n	800113e <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800139c:	2b04      	cmp	r3, #4
 800139e:	d0fa      	beq.n	8001396 <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d102      	bne.n	80013aa <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80013a4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 80013a8:	e6c9      	b.n	800113e <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d002      	beq.n	80013b4 <HAL_HCD_IRQHandler+0x590>
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	f47f aec5 	bne.w	800113e <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 80013b4:	fb07 4005 	mla	r0, r7, r5, r4
 80013b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80013ba:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80013bc:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 80013be:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80013c0:	bf84      	itt	hi
 80013c2:	2304      	movhi	r3, #4
 80013c4:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80013c8:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 80013ca:	bf88      	it	hi
 80013cc:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80013d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80013d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80013d8:	bf98      	it	ls
 80013da:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80013de:	508b      	str	r3, [r1, r2]
 80013e0:	e6ad      	b.n	800113e <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013e2:	6826      	ldr	r6, [r4, #0]
 80013e4:	69b3      	ldr	r3, [r6, #24]
 80013e6:	f023 0310 	bic.w	r3, r3, #16
 80013ea:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 80013ec:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80013ee:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 80013f2:	2a02      	cmp	r2, #2
 80013f4:	d129      	bne.n	800144a <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f6:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80013fa:	f1b8 0f00 	cmp.w	r8, #0
 80013fe:	d024      	beq.n	800144a <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001400:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001404:	2728      	movs	r7, #40	; 0x28
 8001406:	fb07 4705 	mla	r7, r7, r5, r4
 800140a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800140c:	b1e9      	cbz	r1, 800144a <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800140e:	4642      	mov	r2, r8
 8001410:	4630      	mov	r0, r6
 8001412:	f001 fbbf 	bl	8002b94 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001418:	4443      	add	r3, r8
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800141c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800141e:	4443      	add	r3, r8
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001422:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8001426:	016b      	lsls	r3, r5, #5
 8001428:	199a      	adds	r2, r3, r6
 800142a:	6911      	ldr	r1, [r2, #16]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_HCD_IRQHandler+0x634>)
 800142e:	400a      	ands	r2, r1
 8001430:	b15a      	cbz	r2, 800144a <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001432:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001434:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001438:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800143c:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800143e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001442:	f083 0301 	eor.w	r3, r3, #1
 8001446:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800144a:	6822      	ldr	r2, [r4, #0]
 800144c:	6993      	ldr	r3, [r2, #24]
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	e5a5      	b.n	8000fa2 <HAL_HCD_IRQHandler+0x17e>
 8001456:	bf00      	nop
 8001458:	1ff80000 	.word	0x1ff80000

0800145c <HAL_HCD_Start>:
{
 800145c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 800145e:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001462:	2b01      	cmp	r3, #1
{
 8001464:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001466:	d00d      	beq.n	8001484 <HAL_HCD_Start+0x28>
 8001468:	2501      	movs	r5, #1
 800146a:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800146e:	6800      	ldr	r0, [r0, #0]
 8001470:	f001 fb36 	bl	8002ae0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001474:	4629      	mov	r1, r5
 8001476:	6820      	ldr	r0, [r4, #0]
 8001478:	f001 fbdc 	bl	8002c34 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800147c:	2000      	movs	r0, #0
 800147e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8001482:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8001484:	2002      	movs	r0, #2
}
 8001486:	bd38      	pop	{r3, r4, r5, pc}

08001488 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8001488:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800148c:	2b01      	cmp	r3, #1
{
 800148e:	b510      	push	{r4, lr}
 8001490:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001492:	d009      	beq.n	80014a8 <HAL_HCD_Stop+0x20>
 8001494:	2301      	movs	r3, #1
 8001496:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800149a:	6800      	ldr	r0, [r0, #0]
 800149c:	f001 fe0a 	bl	80030b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80014a6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80014a8:	2002      	movs	r0, #2
}
 80014aa:	bd10      	pop	{r4, pc}

080014ac <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80014ac:	6800      	ldr	r0, [r0, #0]
 80014ae:	f001 bba3 	b.w	8002bf8 <USB_ResetPort>

080014b2 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80014b2:	2328      	movs	r3, #40	; 0x28
 80014b4:	fb03 0101 	mla	r1, r3, r1, r0
}
 80014b8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80014bc:	4770      	bx	lr

080014be <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80014be:	2328      	movs	r3, #40	; 0x28
 80014c0:	fb03 0101 	mla	r1, r3, r1, r0
}
 80014c4:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80014c6:	4770      	bx	lr

080014c8 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80014c8:	6800      	ldr	r0, [r0, #0]
 80014ca:	f001 bc4e 	b.w	8002d6a <USB_GetCurrentFrame>

080014ce <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80014ce:	6800      	ldr	r0, [r0, #0]
 80014d0:	f001 bc40 	b.w	8002d54 <USB_GetHostSpeed>

080014d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d6:	4604      	mov	r4, r0
 80014d8:	b908      	cbnz	r0, 80014de <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80014da:	2001      	movs	r0, #1
 80014dc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014e6:	b91b      	cbnz	r3, 80014f0 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ec:	f003 fd56 	bl	8004f9c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f0:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f2:	2324      	movs	r3, #36	; 0x24
 80014f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001500:	f000 fd0e 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001504:	6865      	ldr	r5, [r4, #4]
 8001506:	4b41      	ldr	r3, [pc, #260]	; (800160c <HAL_I2C_Init+0x138>)
 8001508:	429d      	cmp	r5, r3
 800150a:	d84d      	bhi.n	80015a8 <HAL_I2C_Init+0xd4>
 800150c:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_I2C_Init+0x13c>)
 800150e:	4298      	cmp	r0, r3
 8001510:	d9e3      	bls.n	80014da <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001512:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001514:	493f      	ldr	r1, [pc, #252]	; (8001614 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001516:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001518:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800151c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001520:	430b      	orrs	r3, r1
 8001522:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001524:	6a13      	ldr	r3, [r2, #32]
 8001526:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800152a:	3101      	adds	r1, #1
 800152c:	4319      	orrs	r1, r3
 800152e:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001530:	69d1      	ldr	r1, [r2, #28]
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_I2C_Init+0x138>)
 8001534:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001538:	429d      	cmp	r5, r3
 800153a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800153e:	f100 30ff 	add.w	r0, r0, #4294967295
 8001542:	d848      	bhi.n	80015d6 <HAL_I2C_Init+0x102>
 8001544:	006d      	lsls	r5, r5, #1
 8001546:	fbb0 f0f5 	udiv	r0, r0, r5
 800154a:	3001      	adds	r0, #1
 800154c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001550:	2b04      	cmp	r3, #4
 8001552:	bf38      	it	cc
 8001554:	2304      	movcc	r3, #4
 8001556:	430b      	orrs	r3, r1
 8001558:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800155a:	6811      	ldr	r1, [r2, #0]
 800155c:	6a20      	ldr	r0, [r4, #32]
 800155e:	69e3      	ldr	r3, [r4, #28]
 8001560:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001564:	4303      	orrs	r3, r0
 8001566:	430b      	orrs	r3, r1
 8001568:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800156a:	6891      	ldr	r1, [r2, #8]
 800156c:	68e0      	ldr	r0, [r4, #12]
 800156e:	6923      	ldr	r3, [r4, #16]
 8001570:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001574:	4303      	orrs	r3, r0
 8001576:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800157a:	430b      	orrs	r3, r1
 800157c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800157e:	68d1      	ldr	r1, [r2, #12]
 8001580:	69a0      	ldr	r0, [r4, #24]
 8001582:	6963      	ldr	r3, [r4, #20]
 8001584:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001588:	4303      	orrs	r3, r0
 800158a:	430b      	orrs	r3, r1
 800158c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800158e:	6813      	ldr	r3, [r2, #0]
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001596:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001598:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800159c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_I2C_Init+0x144>)
 80015aa:	4298      	cmp	r0, r3
 80015ac:	d995      	bls.n	80014da <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ae:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80015b0:	4e18      	ldr	r6, [pc, #96]	; (8001614 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015b2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80015b4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015bc:	4333      	orrs	r3, r6
 80015be:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015c0:	6a13      	ldr	r3, [r2, #32]
 80015c2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80015c6:	4371      	muls	r1, r6
 80015c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015cc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80015d0:	fbb1 f1f6 	udiv	r1, r1, r6
 80015d4:	e7a9      	b.n	800152a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015d6:	68a3      	ldr	r3, [r4, #8]
 80015d8:	b953      	cbnz	r3, 80015f0 <HAL_I2C_Init+0x11c>
 80015da:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80015de:	fbb0 f0f3 	udiv	r0, r0, r3
 80015e2:	1c43      	adds	r3, r0, #1
 80015e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e8:	b16b      	cbz	r3, 8001606 <HAL_I2C_Init+0x132>
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ee:	e7b2      	b.n	8001556 <HAL_I2C_Init+0x82>
 80015f0:	2319      	movs	r3, #25
 80015f2:	436b      	muls	r3, r5
 80015f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015f8:	1c43      	adds	r3, r0, #1
 80015fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fe:	b113      	cbz	r3, 8001606 <HAL_I2C_Init+0x132>
 8001600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001604:	e7a7      	b.n	8001556 <HAL_I2C_Init+0x82>
 8001606:	2301      	movs	r3, #1
 8001608:	e7a5      	b.n	8001556 <HAL_I2C_Init+0x82>
 800160a:	bf00      	nop
 800160c:	000186a0 	.word	0x000186a0
 8001610:	001e847f 	.word	0x001e847f
 8001614:	000f4240 	.word	0x000f4240
 8001618:	003d08ff 	.word	0x003d08ff

0800161c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800161e:	4604      	mov	r4, r0
 8001620:	2800      	cmp	r0, #0
 8001622:	d041      	beq.n	80016a8 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001624:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001628:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800162c:	b92b      	cbnz	r3, 800163a <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800162e:	4b42      	ldr	r3, [pc, #264]	; (8001738 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8001630:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001634:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001636:	f003 fce9 	bl	800500c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800163a:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800163c:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 800163e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001642:	69d3      	ldr	r3, [r2, #28]
 8001644:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001648:	f023 030f 	bic.w	r3, r3, #15
 800164c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800164e:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001650:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001652:	428b      	cmp	r3, r1
 8001654:	d031      	beq.n	80016ba <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001656:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001658:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800165a:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 800165c:	bf0c      	ite	eq
 800165e:	2510      	moveq	r5, #16
 8001660:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001662:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001664:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001666:	bf98      	it	ls
 8001668:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800166a:	f000 fd09 	bl	8002080 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800166e:	6923      	ldr	r3, [r4, #16]
 8001670:	6961      	ldr	r1, [r4, #20]
 8001672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001676:	d11b      	bne.n	80016b0 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001678:	68e3      	ldr	r3, [r4, #12]
 800167a:	220a      	movs	r2, #10
 800167c:	b1b3      	cbz	r3, 80016ac <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800167e:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001680:	fbb0 f3f3 	udiv	r3, r0, r3
 8001684:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001686:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001688:	fbb3 f3f1 	udiv	r3, r3, r1
 800168c:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 800168e:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001692:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001696:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001698:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800169a:	1e99      	subs	r1, r3, #2
 800169c:	29fd      	cmp	r1, #253	; 0xfd
 800169e:	d90e      	bls.n	80016be <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80016a8:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 80016aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016ac:	00eb      	lsls	r3, r5, #3
 80016ae:	e7e7      	b.n	8001680 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016b0:	230a      	movs	r3, #10
 80016b2:	fbb0 f0f5 	udiv	r0, r0, r5
 80016b6:	4343      	muls	r3, r0
 80016b8:	e7e5      	b.n	8001686 <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 80016ba:	2200      	movs	r2, #0
 80016bc:	e7ed      	b.n	800169a <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016be:	4313      	orrs	r3, r2
 80016c0:	6922      	ldr	r2, [r4, #16]
 80016c2:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016c4:	6866      	ldr	r6, [r4, #4]
 80016c6:	68e5      	ldr	r5, [r4, #12]
 80016c8:	69a0      	ldr	r0, [r4, #24]
 80016ca:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8001748 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016ce:	4313      	orrs	r3, r2
 80016d0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016d2:	68a3      	ldr	r3, [r4, #8]
 80016d4:	69cf      	ldr	r7, [r1, #28]
 80016d6:	ea46 0203 	orr.w	r2, r6, r3
 80016da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016de:	432a      	orrs	r2, r5
 80016e0:	4302      	orrs	r2, r0
 80016e2:	ea07 070e 	and.w	r7, r7, lr
 80016e6:	433a      	orrs	r2, r7
 80016e8:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80016ea:	6a22      	ldr	r2, [r4, #32]
 80016ec:	2a01      	cmp	r2, #1
 80016ee:	d11d      	bne.n	800172c <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <HAL_I2S_Init+0x120>)
 80016f2:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80016f4:	4f12      	ldr	r7, [pc, #72]	; (8001740 <HAL_I2S_Init+0x124>)
 80016f6:	4a13      	ldr	r2, [pc, #76]	; (8001744 <HAL_I2S_Init+0x128>)
 80016f8:	42b9      	cmp	r1, r7
 80016fa:	bf18      	it	ne
 80016fc:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001700:	432b      	orrs	r3, r5
 8001702:	69d1      	ldr	r1, [r2, #28]
 8001704:	ea01 010e 	and.w	r1, r1, lr
 8001708:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800170a:	2102      	movs	r1, #2
 800170c:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800170e:	69d7      	ldr	r7, [r2, #28]
 8001710:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001714:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 8001716:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 800171a:	ea43 0307 	orr.w	r3, r3, r7
 800171e:	bf0c      	ite	eq
 8001720:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8001724:	2100      	movne	r1, #0
 8001726:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001728:	430b      	orrs	r3, r1
 800172a:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800172c:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 800172e:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001730:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001732:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 8001736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001738:	08001753 	.word	0x08001753
 800173c:	08001851 	.word	0x08001851
 8001740:	40003800 	.word	0x40003800
 8001744:	40003400 	.word	0x40003400
 8001748:	fffff040 	.word	0xfffff040

0800174c <HAL_I2S_TxCpltCallback>:
 800174c:	4770      	bx	lr

0800174e <HAL_I2S_RxCpltCallback>:
 800174e:	4770      	bx	lr

08001750 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001750:	4770      	bx	lr

08001752 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001752:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001754:	6803      	ldr	r3, [r0, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800175a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800175e:	2a04      	cmp	r2, #4
{
 8001760:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001762:	d136      	bne.n	80017d2 <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001764:	9a01      	ldr	r2, [sp, #4]
 8001766:	07d1      	lsls	r1, r2, #31
 8001768:	d517      	bpl.n	800179a <I2S_IRQHandler+0x48>
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	0652      	lsls	r2, r2, #25
 800176e:	d514      	bpl.n	800179a <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001770:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001772:	68d9      	ldr	r1, [r3, #12]
 8001774:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8001778:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 800177a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800177c:	3a01      	subs	r2, #1
 800177e:	b292      	uxth	r2, r2
 8001780:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001782:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001784:	b292      	uxth	r2, r2
 8001786:	b942      	cbnz	r2, 800179a <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800178e:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001790:	2301      	movs	r3, #1
 8001792:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001796:	f7ff ffda 	bl	800174e <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800179a:	9b01      	ldr	r3, [sp, #4]
 800179c:	0659      	lsls	r1, r3, #25
 800179e:	d518      	bpl.n	80017d2 <I2S_IRQHandler+0x80>
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	0692      	lsls	r2, r2, #26
 80017a6:	d514      	bpl.n	80017d2 <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80017b0:	2200      	movs	r2, #0
 80017b2:	9202      	str	r2, [sp, #8]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	9202      	str	r2, [sp, #8]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80017be:	2301      	movs	r3, #1
 80017c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80017c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff ffbf 	bl	8001750 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80017d2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d136      	bne.n	8001848 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80017da:	9b01      	ldr	r3, [sp, #4]
 80017dc:	079b      	lsls	r3, r3, #30
 80017de:	d519      	bpl.n	8001814 <I2S_IRQHandler+0xc2>
 80017e0:	6822      	ldr	r2, [r4, #0]
 80017e2:	6853      	ldr	r3, [r2, #4]
 80017e4:	0618      	lsls	r0, r3, #24
 80017e6:	d515      	bpl.n	8001814 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80017e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017ea:	f833 1b02 	ldrh.w	r1, [r3], #2
 80017ee:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 80017f0:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 80017f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80017fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b94b      	cbnz	r3, 8001814 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001800:	6853      	ldr	r3, [r2, #4]
 8001802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001806:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001808:	2301      	movs	r3, #1
 800180a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff ff9c 	bl	800174c <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001814:	9b01      	ldr	r3, [sp, #4]
 8001816:	0719      	lsls	r1, r3, #28
 8001818:	d516      	bpl.n	8001848 <I2S_IRQHandler+0xf6>
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	0692      	lsls	r2, r2, #26
 8001820:	d512      	bpl.n	8001848 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001828:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800182a:	2200      	movs	r2, #0
 800182c:	9203      	str	r2, [sp, #12]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	9303      	str	r3, [sp, #12]
 8001832:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001834:	2301      	movs	r3, #1
 8001836:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800183a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001842:	4620      	mov	r0, r4
 8001844:	f7ff ff84 	bl	8001750 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001848:	b004      	add	sp, #16
 800184a:	bd10      	pop	{r4, pc}

0800184c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800184c:	4770      	bx	lr
	...

08001850 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001850:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001852:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001854:	498b      	ldr	r1, [pc, #556]	; (8001a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001856:	6893      	ldr	r3, [r2, #8]
{
 8001858:	b086      	sub	sp, #24
 800185a:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800185c:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800185e:	4b8a      	ldr	r3, [pc, #552]	; (8001a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001860:	428a      	cmp	r2, r1
 8001862:	bf18      	it	ne
 8001864:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001868:	6899      	ldr	r1, [r3, #8]
 800186a:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800186c:	6851      	ldr	r1, [r2, #4]
 800186e:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001870:	6859      	ldr	r1, [r3, #4]
 8001872:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001874:	6841      	ldr	r1, [r0, #4]
 8001876:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 800187a:	f040 8090 	bne.w	800199e <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800187e:	9b00      	ldr	r3, [sp, #0]
 8001880:	0799      	lsls	r1, r3, #30
 8001882:	d51a      	bpl.n	80018ba <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8001884:	9b02      	ldr	r3, [sp, #8]
 8001886:	061b      	lsls	r3, r3, #24
 8001888:	d517      	bpl.n	80018ba <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800188a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800188c:	1c99      	adds	r1, r3, #2
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	6241      	str	r1, [r0, #36]	; 0x24
 8001892:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001894:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001896:	3b01      	subs	r3, #1
 8001898:	b29b      	uxth	r3, r3
 800189a:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800189c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b95b      	cbnz	r3, 80018ba <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018a2:	6853      	ldr	r3, [r2, #4]
 80018a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80018a8:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 80018aa:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	b923      	cbnz	r3, 80018ba <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80018b6:	f7ff ffc9 	bl	800184c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80018ba:	9b01      	ldr	r3, [sp, #4]
 80018bc:	07d8      	lsls	r0, r3, #31
 80018be:	d522      	bpl.n	8001906 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 80018c0:	9b03      	ldr	r3, [sp, #12]
 80018c2:	0659      	lsls	r1, r3, #25
 80018c4:	d51f      	bpl.n	8001906 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80018c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018c8:	6820      	ldr	r0, [r4, #0]
 80018ca:	496e      	ldr	r1, [pc, #440]	; (8001a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 80018cc:	1c93      	adds	r3, r2, #2
 80018ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018d0:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80018d2:	4288      	cmp	r0, r1
 80018d4:	bf18      	it	ne
 80018d6:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80018da:	68d9      	ldr	r1, [r3, #12]
 80018dc:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 80018de:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80018e0:	3a01      	subs	r2, #1
 80018e2:	b292      	uxth	r2, r2
 80018e4:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80018e6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80018e8:	b292      	uxth	r2, r2
 80018ea:	b962      	cbnz	r2, 8001906 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80018f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	b92b      	cbnz	r3, 8001906 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001900:	4620      	mov	r0, r4
 8001902:	f7ff ffa3 	bl	800184c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	065a      	lsls	r2, r3, #25
 800190a:	d522      	bpl.n	8001952 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 800190c:	9b03      	ldr	r3, [sp, #12]
 800190e:	069b      	lsls	r3, r3, #26
 8001910:	d51f      	bpl.n	8001952 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	495b      	ldr	r1, [pc, #364]	; (8001a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001916:	4a5c      	ldr	r2, [pc, #368]	; (8001a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001918:	428b      	cmp	r3, r1
 800191a:	bf18      	it	ne
 800191c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001920:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001922:	6851      	ldr	r1, [r2, #4]
 8001924:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001928:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001930:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001932:	2200      	movs	r2, #0
 8001934:	9204      	str	r2, [sp, #16]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	9204      	str	r2, [sp, #16]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	9304      	str	r3, [sp, #16]
 800193e:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001940:	2301      	movs	r3, #1
 8001942:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001946:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800194e:	f7ff feff 	bl	8001750 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001952:	9b00      	ldr	r3, [sp, #0]
 8001954:	0718      	lsls	r0, r3, #28
 8001956:	d520      	bpl.n	800199a <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001958:	9b02      	ldr	r3, [sp, #8]
 800195a:	0699      	lsls	r1, r3, #26
 800195c:	d51d      	bpl.n	800199a <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800195e:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001960:	4948      	ldr	r1, [pc, #288]	; (8001a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001968:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800196a:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 800196c:	428b      	cmp	r3, r1
 800196e:	bf18      	it	ne
 8001970:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001974:	6851      	ldr	r1, [r2, #4]
 8001976:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800197a:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800197c:	2200      	movs	r2, #0
 800197e:	9205      	str	r2, [sp, #20]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	9305      	str	r3, [sp, #20]
 8001984:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001986:	2301      	movs	r3, #1
 8001988:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800198c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff fedb 	bl	8001750 <HAL_I2S_ErrorCallback>
}
 800199a:	b006      	add	sp, #24
 800199c:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800199e:	9a01      	ldr	r2, [sp, #4]
 80019a0:	0792      	lsls	r2, r2, #30
 80019a2:	d51a      	bpl.n	80019da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 80019a4:	9a03      	ldr	r2, [sp, #12]
 80019a6:	0611      	lsls	r1, r2, #24
 80019a8:	d517      	bpl.n	80019da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80019aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80019ac:	1c91      	adds	r1, r2, #2
 80019ae:	8812      	ldrh	r2, [r2, #0]
 80019b0:	6241      	str	r1, [r0, #36]	; 0x24
 80019b2:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80019b4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80019b6:	3a01      	subs	r2, #1
 80019b8:	b292      	uxth	r2, r2
 80019ba:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80019bc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80019be:	b292      	uxth	r2, r2
 80019c0:	b95a      	cbnz	r2, 80019da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019c8:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 80019ca:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b923      	cbnz	r3, 80019da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80019d6:	f7ff ff39 	bl	800184c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80019da:	9b00      	ldr	r3, [sp, #0]
 80019dc:	07da      	lsls	r2, r3, #31
 80019de:	d51c      	bpl.n	8001a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 80019e0:	9b02      	ldr	r3, [sp, #8]
 80019e2:	065b      	lsls	r3, r3, #25
 80019e4:	d519      	bpl.n	8001a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80019e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019e8:	1c9a      	adds	r2, r3, #2
 80019ea:	62e2      	str	r2, [r4, #44]	; 0x2c
 80019ec:	6822      	ldr	r2, [r4, #0]
 80019ee:	68d1      	ldr	r1, [r2, #12]
 80019f0:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80019f2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80019fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	b963      	cbnz	r3, 8001a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a00:	6853      	ldr	r3, [r2, #4]
 8001a02:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001a06:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001a08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b92b      	cbnz	r3, 8001a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff ff19 	bl	800184c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001a1a:	9b00      	ldr	r3, [sp, #0]
 8001a1c:	0658      	lsls	r0, r3, #25
 8001a1e:	d51b      	bpl.n	8001a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001a20:	9b02      	ldr	r3, [sp, #8]
 8001a22:	0699      	lsls	r1, r3, #26
 8001a24:	d518      	bpl.n	8001a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a26:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a28:	4916      	ldr	r1, [pc, #88]	; (8001a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a2a:	6853      	ldr	r3, [r2, #4]
 8001a2c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001a30:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001a34:	428a      	cmp	r2, r1
 8001a36:	bf18      	it	ne
 8001a38:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001a3c:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a44:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001a54:	f7ff fe7c 	bl	8001750 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001a58:	9b01      	ldr	r3, [sp, #4]
 8001a5a:	071a      	lsls	r2, r3, #28
 8001a5c:	d59d      	bpl.n	800199a <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001a5e:	9b03      	ldr	r3, [sp, #12]
 8001a60:	069b      	lsls	r3, r3, #26
 8001a62:	d59a      	bpl.n	800199a <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a64:	6822      	ldr	r2, [r4, #0]
 8001a66:	4907      	ldr	r1, [pc, #28]	; (8001a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001a6a:	428a      	cmp	r2, r1
 8001a6c:	bf18      	it	ne
 8001a6e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001a78:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a7a:	6853      	ldr	r3, [r2, #4]
 8001a7c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001a80:	6053      	str	r3, [r2, #4]
 8001a82:	e780      	b.n	8001986 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8001a84:	40003800 	.word	0x40003800
 8001a88:	40003400 	.word	0x40003400

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a90:	4604      	mov	r4, r0
 8001a92:	b918      	cbnz	r0, 8001a9c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001a96:	b002      	add	sp, #8
 8001a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9c:	6803      	ldr	r3, [r0, #0]
 8001a9e:	07dd      	lsls	r5, r3, #31
 8001aa0:	d410      	bmi.n	8001ac4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	0798      	lsls	r0, r3, #30
 8001aa6:	d458      	bmi.n	8001b5a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	071a      	lsls	r2, r3, #28
 8001aac:	f100 809a 	bmi.w	8001be4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	075b      	lsls	r3, r3, #29
 8001ab4:	f100 80b8 	bmi.w	8001c28 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	69a2      	ldr	r2, [r4, #24]
 8001aba:	2a00      	cmp	r2, #0
 8001abc:	f040 8119 	bne.w	8001cf2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	e7e8      	b.n	8001a96 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ac4:	4ba6      	ldr	r3, [pc, #664]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	f002 020c 	and.w	r2, r2, #12
 8001acc:	2a04      	cmp	r2, #4
 8001ace:	d007      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ad6:	2a08      	cmp	r2, #8
 8001ad8:	d10a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0259      	lsls	r1, r3, #9
 8001ade:	d507      	bpl.n	8001af0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	4b9f      	ldr	r3, [pc, #636]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	039a      	lsls	r2, r3, #14
 8001ae6:	d5dc      	bpl.n	8001aa2 <HAL_RCC_OscConfig+0x16>
 8001ae8:	6863      	ldr	r3, [r4, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1d9      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x16>
 8001aee:	e7d1      	b.n	8001a94 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af0:	6863      	ldr	r3, [r4, #4]
 8001af2:	4d9b      	ldr	r5, [pc, #620]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af8:	d111      	bne.n	8001b1e <HAL_RCC_OscConfig+0x92>
 8001afa:	682b      	ldr	r3, [r5, #0]
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b02:	f7fe fd8f 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4d96      	ldr	r5, [pc, #600]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001b08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	039b      	lsls	r3, r3, #14
 8001b0e:	d4c8      	bmi.n	8001aa2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b10:	f7fe fd88 	bl	8000624 <HAL_GetTick>
 8001b14:	1b80      	subs	r0, r0, r6
 8001b16:	2864      	cmp	r0, #100	; 0x64
 8001b18:	d9f7      	bls.n	8001b0a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	e7bb      	b.n	8001a96 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b22:	d104      	bne.n	8001b2e <HAL_RCC_OscConfig+0xa2>
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2a:	602b      	str	r3, [r5, #0]
 8001b2c:	e7e5      	b.n	8001afa <HAL_RCC_OscConfig+0x6e>
 8001b2e:	682a      	ldr	r2, [r5, #0]
 8001b30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b34:	602a      	str	r2, [r5, #0]
 8001b36:	682a      	ldr	r2, [r5, #0]
 8001b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b3c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1df      	bne.n	8001b02 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001b42:	f7fe fd6f 	bl	8000624 <HAL_GetTick>
 8001b46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	039f      	lsls	r7, r3, #14
 8001b4c:	d5a9      	bpl.n	8001aa2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b4e:	f7fe fd69 	bl	8000624 <HAL_GetTick>
 8001b52:	1b80      	subs	r0, r0, r6
 8001b54:	2864      	cmp	r0, #100	; 0x64
 8001b56:	d9f7      	bls.n	8001b48 <HAL_RCC_OscConfig+0xbc>
 8001b58:	e7df      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b5a:	4b81      	ldr	r3, [pc, #516]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	f012 0f0c 	tst.w	r2, #12
 8001b62:	d007      	beq.n	8001b74 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b6a:	2a08      	cmp	r2, #8
 8001b6c:	d111      	bne.n	8001b92 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	025e      	lsls	r6, r3, #9
 8001b72:	d40e      	bmi.n	8001b92 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b74:	4b7a      	ldr	r3, [pc, #488]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	0795      	lsls	r5, r2, #30
 8001b7a:	d502      	bpl.n	8001b82 <HAL_RCC_OscConfig+0xf6>
 8001b7c:	68e2      	ldr	r2, [r4, #12]
 8001b7e:	2a01      	cmp	r2, #1
 8001b80:	d188      	bne.n	8001a94 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	6921      	ldr	r1, [r4, #16]
 8001b86:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b8a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001b8e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b90:	e78a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b92:	68e2      	ldr	r2, [r4, #12]
 8001b94:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_OscConfig+0x2d8>)
 8001b96:	b1b2      	cbz	r2, 8001bc6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b9c:	f7fe fd42 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	4d6f      	ldr	r5, [pc, #444]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001ba2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	0798      	lsls	r0, r3, #30
 8001ba8:	d507      	bpl.n	8001bba <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001baa:	682b      	ldr	r3, [r5, #0]
 8001bac:	6922      	ldr	r2, [r4, #16]
 8001bae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bb6:	602b      	str	r3, [r5, #0]
 8001bb8:	e776      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7fe fd33 	bl	8000624 <HAL_GetTick>
 8001bbe:	1b80      	subs	r0, r0, r6
 8001bc0:	2802      	cmp	r0, #2
 8001bc2:	d9ef      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x118>
 8001bc4:	e7a9      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001bc6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bc8:	f7fe fd2c 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bcc:	4d64      	ldr	r5, [pc, #400]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001bce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	0799      	lsls	r1, r3, #30
 8001bd4:	f57f af68 	bpl.w	8001aa8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7fe fd24 	bl	8000624 <HAL_GetTick>
 8001bdc:	1b80      	subs	r0, r0, r6
 8001bde:	2802      	cmp	r0, #2
 8001be0:	d9f6      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x144>
 8001be2:	e79a      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001be4:	6962      	ldr	r2, [r4, #20]
 8001be6:	4b60      	ldr	r3, [pc, #384]	; (8001d68 <HAL_RCC_OscConfig+0x2dc>)
 8001be8:	b17a      	cbz	r2, 8001c0a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bee:	f7fe fd19 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	4d5b      	ldr	r5, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001bf4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bf8:	079f      	lsls	r7, r3, #30
 8001bfa:	f53f af59 	bmi.w	8001ab0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7fe fd11 	bl	8000624 <HAL_GetTick>
 8001c02:	1b80      	subs	r0, r0, r6
 8001c04:	2802      	cmp	r0, #2
 8001c06:	d9f6      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x16a>
 8001c08:	e787      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001c0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c0c:	f7fe fd0a 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	4d53      	ldr	r5, [pc, #332]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001c12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c16:	0798      	lsls	r0, r3, #30
 8001c18:	f57f af4a 	bpl.w	8001ab0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7fe fd02 	bl	8000624 <HAL_GetTick>
 8001c20:	1b80      	subs	r0, r0, r6
 8001c22:	2802      	cmp	r0, #2
 8001c24:	d9f6      	bls.n	8001c14 <HAL_RCC_OscConfig+0x188>
 8001c26:	e778      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c28:	4b4d      	ldr	r3, [pc, #308]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
 8001c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001c30:	d128      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	9201      	str	r2, [sp, #4]
 8001c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c46:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4d48      	ldr	r5, [pc, #288]	; (8001d6c <HAL_RCC_OscConfig+0x2e0>)
 8001c4a:	682b      	ldr	r3, [r5, #0]
 8001c4c:	05d9      	lsls	r1, r3, #23
 8001c4e:	d51b      	bpl.n	8001c88 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c50:	68a3      	ldr	r3, [r4, #8]
 8001c52:	4d43      	ldr	r5, [pc, #268]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d127      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x21c>
 8001c58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001c60:	f7fe fce0 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c64:	4d3e      	ldr	r5, [pc, #248]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001c66:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c6e:	079b      	lsls	r3, r3, #30
 8001c70:	d539      	bpl.n	8001ce6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001c72:	2e00      	cmp	r6, #0
 8001c74:	f43f af20 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c78:	4a39      	ldr	r2, [pc, #228]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
 8001c7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	e719      	b.n	8001ab8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001c84:	2600      	movs	r6, #0
 8001c86:	e7df      	b.n	8001c48 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c90:	f7fe fcc8 	bl	8000624 <HAL_GetTick>
 8001c94:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	682b      	ldr	r3, [r5, #0]
 8001c98:	05da      	lsls	r2, r3, #23
 8001c9a:	d4d9      	bmi.n	8001c50 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9c:	f7fe fcc2 	bl	8000624 <HAL_GetTick>
 8001ca0:	1bc0      	subs	r0, r0, r7
 8001ca2:	2802      	cmp	r0, #2
 8001ca4:	d9f7      	bls.n	8001c96 <HAL_RCC_OscConfig+0x20a>
 8001ca6:	e738      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d104      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x22a>
 8001cac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	672b      	str	r3, [r5, #112]	; 0x70
 8001cb4:	e7d0      	b.n	8001c58 <HAL_RCC_OscConfig+0x1cc>
 8001cb6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	672a      	str	r2, [r5, #112]	; 0x70
 8001cbe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001cc0:	f022 0204 	bic.w	r2, r2, #4
 8001cc4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ca      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001cca:	f7fe fcab 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001cd2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cd6:	0798      	lsls	r0, r3, #30
 8001cd8:	d5cb      	bpl.n	8001c72 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7fe fca3 	bl	8000624 <HAL_GetTick>
 8001cde:	1bc0      	subs	r0, r0, r7
 8001ce0:	4540      	cmp	r0, r8
 8001ce2:	d9f7      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x248>
 8001ce4:	e719      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7fe fc9d 	bl	8000624 <HAL_GetTick>
 8001cea:	1bc0      	subs	r0, r0, r7
 8001cec:	4540      	cmp	r0, r8
 8001cee:	d9bd      	bls.n	8001c6c <HAL_RCC_OscConfig+0x1e0>
 8001cf0:	e713      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf2:	4d1b      	ldr	r5, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
 8001cf4:	68ab      	ldr	r3, [r5, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	f43f aeca 	beq.w	8001a94 <HAL_RCC_OscConfig+0x8>
 8001d00:	4e1b      	ldr	r6, [pc, #108]	; (8001d70 <HAL_RCC_OscConfig+0x2e4>)
 8001d02:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d04:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001d06:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d08:	d134      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001d0a:	f7fe fc8b 	bl	8000624 <HAL_GetTick>
 8001d0e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d10:	682b      	ldr	r3, [r5, #0]
 8001d12:	0199      	lsls	r1, r3, #6
 8001d14:	d41e      	bmi.n	8001d54 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d16:	6a22      	ldr	r2, [r4, #32]
 8001d18:	69e3      	ldr	r3, [r4, #28]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d1e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	4c0d      	ldr	r4, [pc, #52]	; (8001d60 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d2c:	0852      	lsrs	r2, r2, #1
 8001d2e:	3a01      	subs	r2, #1
 8001d30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d34:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d36:	2301      	movs	r3, #1
 8001d38:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d3a:	f7fe fc73 	bl	8000624 <HAL_GetTick>
 8001d3e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	019a      	lsls	r2, r3, #6
 8001d44:	f53f aebc 	bmi.w	8001ac0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe fc6c 	bl	8000624 <HAL_GetTick>
 8001d4c:	1b40      	subs	r0, r0, r5
 8001d4e:	2802      	cmp	r0, #2
 8001d50:	d9f6      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2b4>
 8001d52:	e6e2      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d54:	f7fe fc66 	bl	8000624 <HAL_GetTick>
 8001d58:	1bc0      	subs	r0, r0, r7
 8001d5a:	2802      	cmp	r0, #2
 8001d5c:	d9d8      	bls.n	8001d10 <HAL_RCC_OscConfig+0x284>
 8001d5e:	e6dc      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
 8001d60:	40023800 	.word	0x40023800
 8001d64:	42470000 	.word	0x42470000
 8001d68:	42470e80 	.word	0x42470e80
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001d74:	f7fe fc56 	bl	8000624 <HAL_GetTick>
 8001d78:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	682b      	ldr	r3, [r5, #0]
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	f57f ae9f 	bpl.w	8001ac0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe fc4f 	bl	8000624 <HAL_GetTick>
 8001d86:	1b00      	subs	r0, r0, r4
 8001d88:	2802      	cmp	r0, #2
 8001d8a:	d9f6      	bls.n	8001d7a <HAL_RCC_OscConfig+0x2ee>
 8001d8c:	e6c5      	b.n	8001b1a <HAL_RCC_OscConfig+0x8e>
 8001d8e:	bf00      	nop

08001d90 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d90:	4913      	ldr	r1, [pc, #76]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001d92:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d94:	688b      	ldr	r3, [r1, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x16>
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d003      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001da2:	4810      	ldr	r0, [pc, #64]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001da4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001da6:	4810      	ldr	r0, [pc, #64]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001da8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001daa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dac:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dae:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001db0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db4:	bf14      	ite	ne
 8001db6:	480c      	ldrne	r0, [pc, #48]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db8:	480a      	ldreq	r0, [pc, #40]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001dbe:	bf18      	it	ne
 8001dc0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	fba1 0100 	umull	r0, r1, r1, r0
 8001dca:	f7fe fa59 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x50>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001dda:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dde:	bd08      	pop	{r3, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	00f42400 	.word	0x00f42400
 8001de8:	007a1200 	.word	0x007a1200

08001dec <HAL_RCC_ClockConfig>:
{
 8001dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001df2:	4604      	mov	r4, r0
 8001df4:	b910      	cbnz	r0, 8001dfc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001df6:	2001      	movs	r0, #1
 8001df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_RCC_ClockConfig+0x124>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f002 020f 	and.w	r2, r2, #15
 8001e04:	428a      	cmp	r2, r1
 8001e06:	d328      	bcc.n	8001e5a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	6821      	ldr	r1, [r4, #0]
 8001e0a:	078f      	lsls	r7, r1, #30
 8001e0c:	d42d      	bmi.n	8001e6a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	07c8      	lsls	r0, r1, #31
 8001e10:	d440      	bmi.n	8001e94 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e12:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <HAL_RCC_ClockConfig+0x124>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	f002 020f 	and.w	r2, r2, #15
 8001e1a:	4295      	cmp	r5, r2
 8001e1c:	d366      	bcc.n	8001eec <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1e:	6822      	ldr	r2, [r4, #0]
 8001e20:	0751      	lsls	r1, r2, #29
 8001e22:	d46c      	bmi.n	8001efe <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e24:	0713      	lsls	r3, r2, #28
 8001e26:	d507      	bpl.n	8001e38 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e28:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <HAL_RCC_ClockConfig+0x128>)
 8001e2a:	6921      	ldr	r1, [r4, #16]
 8001e2c:	6893      	ldr	r3, [r2, #8]
 8001e2e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e36:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e38:	f7ff ffaa 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8001e3c:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_RCC_ClockConfig+0x128>)
 8001e3e:	4a36      	ldr	r2, [pc, #216]	; (8001f18 <HAL_RCC_ClockConfig+0x12c>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	40d8      	lsrs	r0, r3
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <HAL_RCC_ClockConfig+0x130>)
 8001e4c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7fe fb9e 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8001e54:	2000      	movs	r0, #0
 8001e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	b2ca      	uxtb	r2, r1
 8001e5c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	4299      	cmp	r1, r3
 8001e66:	d1c6      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xa>
 8001e68:	e7ce      	b.n	8001e08 <HAL_RCC_ClockConfig+0x1c>
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e70:	bf1e      	ittt	ne
 8001e72:	689a      	ldrne	r2, [r3, #8]
 8001e74:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001e78:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e7c:	bf42      	ittt	mi
 8001e7e:	689a      	ldrmi	r2, [r3, #8]
 8001e80:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001e84:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	68a0      	ldr	r0, [r4, #8]
 8001e8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e8e:	4302      	orrs	r2, r0
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	e7bc      	b.n	8001e0e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e94:	6862      	ldr	r2, [r4, #4]
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_RCC_ClockConfig+0x128>)
 8001e98:	2a01      	cmp	r2, #1
 8001e9a:	d11d      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	d0a8      	beq.n	8001df6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea4:	4e1b      	ldr	r6, [pc, #108]	; (8001f14 <HAL_RCC_ClockConfig+0x128>)
 8001ea6:	68b3      	ldr	r3, [r6, #8]
 8001ea8:	f023 0303 	bic.w	r3, r3, #3
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fbb8 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001eb8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	68b3      	ldr	r3, [r6, #8]
 8001ebc:	6862      	ldr	r2, [r4, #4]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ec6:	d0a4      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec8:	f7fe fbac 	bl	8000624 <HAL_GetTick>
 8001ecc:	1bc0      	subs	r0, r0, r7
 8001ece:	4540      	cmp	r0, r8
 8001ed0:	d9f3      	bls.n	8001eba <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001ed2:	2003      	movs	r0, #3
}
 8001ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed8:	1e91      	subs	r1, r2, #2
 8001eda:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001edc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ede:	d802      	bhi.n	8001ee6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ee4:	e7dd      	b.n	8001ea2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	f013 0f02 	tst.w	r3, #2
 8001eea:	e7da      	b.n	8001ea2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eec:	b2ea      	uxtb	r2, r5
 8001eee:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	429d      	cmp	r5, r3
 8001ef8:	f47f af7d 	bne.w	8001df6 <HAL_RCC_ClockConfig+0xa>
 8001efc:	e78f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efe:	4905      	ldr	r1, [pc, #20]	; (8001f14 <HAL_RCC_ClockConfig+0x128>)
 8001f00:	68e0      	ldr	r0, [r4, #12]
 8001f02:	688b      	ldr	r3, [r1, #8]
 8001f04:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001f08:	4303      	orrs	r3, r0
 8001f0a:	608b      	str	r3, [r1, #8]
 8001f0c:	e78a      	b.n	8001e24 <HAL_RCC_ClockConfig+0x38>
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	0800741b 	.word	0x0800741b
 8001f1c:	2000003c 	.word	0x2000003c

08001f20 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f2e:	6810      	ldr	r0, [r2, #0]
}
 8001f30:	40d8      	lsrs	r0, r3
 8001f32:	4770      	bx	lr
 8001f34:	40023800 	.word	0x40023800
 8001f38:	0800742b 	.word	0x0800742b
 8001f3c:	2000003c 	.word	0x2000003c

08001f40 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f40:	6803      	ldr	r3, [r0, #0]
 8001f42:	f013 0f05 	tst.w	r3, #5
{
 8001f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f48:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f4a:	d13c      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	079a      	lsls	r2, r3, #30
 8001f50:	d530      	bpl.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	4b45      	ldr	r3, [pc, #276]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x12c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f58:	4d45      	ldr	r5, [pc, #276]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fb56 	bl	8000624 <HAL_GetTick>
 8001f78:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f7a:	682b      	ldr	r3, [r5, #0]
 8001f7c:	05d9      	lsls	r1, r3, #23
 8001f7e:	d54c      	bpl.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xda>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f80:	4d3a      	ldr	r5, [pc, #232]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001f82:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f84:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f88:	d14d      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f8a:	6923      	ldr	r3, [r4, #16]
 8001f8c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001f90:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001f94:	4a35      	ldr	r2, [pc, #212]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001f96:	d165      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8001f98:	6891      	ldr	r1, [r2, #8]
 8001f9a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001f9e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001fa2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001fa6:	4301      	orrs	r1, r0
 8001fa8:	6091      	str	r1, [r2, #8]
 8001faa:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6713      	str	r3, [r2, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fb4:	6820      	ldr	r0, [r4, #0]
 8001fb6:	f010 0008 	ands.w	r0, r0, #8
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fba:	bf1f      	itttt	ne
 8001fbc:	4b2d      	ldrne	r3, [pc, #180]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fbe:	7d22      	ldrbne	r2, [r4, #20]
 8001fc0:	601a      	strne	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001fc2:	2000      	movne	r0, #0
 8001fc4:	e027      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_PLLI2S_DISABLE();
 8001fc6:	4e2c      	ldr	r6, [pc, #176]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fc8:	4d28      	ldr	r5, [pc, #160]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001fce:	f7fe fb29 	bl	8000624 <HAL_GetTick>
 8001fd2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	d417      	bmi.n	800200a <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fda:	68e3      	ldr	r3, [r4, #12]
 8001fdc:	68a2      	ldr	r2, [r4, #8]
 8001fde:	071b      	lsls	r3, r3, #28
 8001fe0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001fe4:	6862      	ldr	r2, [r4, #4]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001fec:	2301      	movs	r3, #1
 8001fee:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001ff0:	f7fe fb18 	bl	8000624 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ff4:	4d1d      	ldr	r5, [pc, #116]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    tickstart = HAL_GetTick();
 8001ff6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	0118      	lsls	r0, r3, #4
 8001ffc:	d4a6      	bmi.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ffe:	f7fe fb11 	bl	8000624 <HAL_GetTick>
 8002002:	1b80      	subs	r0, r0, r6
 8002004:	2802      	cmp	r0, #2
 8002006:	d9f7      	bls.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8002008:	e004      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800200a:	f7fe fb0b 	bl	8000624 <HAL_GetTick>
 800200e:	1bc0      	subs	r0, r0, r7
 8002010:	2802      	cmp	r0, #2
 8002012:	d9df      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
        return HAL_TIMEOUT;
 8002014:	2003      	movs	r0, #3
}
 8002016:	b003      	add	sp, #12
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7fe fb03 	bl	8000624 <HAL_GetTick>
 800201e:	1b80      	subs	r0, r0, r6
 8002020:	2802      	cmp	r0, #2
 8002022:	d9aa      	bls.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002024:	e7f6      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002026:	6922      	ldr	r2, [r4, #16]
 8002028:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800202c:	4293      	cmp	r3, r2
 800202e:	d0ac      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002030:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002034:	2101      	movs	r1, #1
 8002036:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800203c:	2100      	movs	r1, #0
 800203e:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002040:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002042:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002044:	07da      	lsls	r2, r3, #31
 8002046:	d5a0      	bpl.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8002048:	f7fe faec 	bl	8000624 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002050:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002054:	079b      	lsls	r3, r3, #30
 8002056:	d498      	bmi.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7fe fae4 	bl	8000624 <HAL_GetTick>
 800205c:	1b80      	subs	r0, r0, r6
 800205e:	42b8      	cmp	r0, r7
 8002060:	d9f7      	bls.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002062:	e7d7      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002064:	6891      	ldr	r1, [r2, #8]
 8002066:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800206a:	e79d      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800206c:	40023800 	.word	0x40023800
 8002070:	40007000 	.word	0x40007000
 8002074:	424711e0 	.word	0x424711e0
 8002078:	42470068 	.word	0x42470068
 800207c:	42470e40 	.word	0x42470e40

08002080 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002080:	2801      	cmp	r0, #1
 8002082:	d121      	bne.n	80020c8 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8002086:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002088:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 800208c:	d004      	beq.n	8002098 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 800208e:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002090:	480f      	ldr	r0, [pc, #60]	; (80020d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002092:	bf18      	it	ne
 8002094:	2000      	movne	r0, #0
 8002096:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002098:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800209a:	490c      	ldr	r1, [pc, #48]	; (80020cc <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800209c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020a0:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80020a2:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80020a6:	bf4c      	ite	mi
 80020a8:	4b0a      	ldrmi	r3, [pc, #40]	; (80020d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80020aa:	4b0b      	ldrpl	r3, [pc, #44]	; (80020d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80020ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80020b0:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80020b4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80020b8:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80020bc:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80020be:	f3c0 7002 	ubfx	r0, r0, #28, #3
 80020c2:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 80020c6:	4770      	bx	lr
  uint32_t frequency = 0U;
 80020c8:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80020ca:	4770      	bx	lr
 80020cc:	40023800 	.word	0x40023800
 80020d0:	00bb8000 	.word	0x00bb8000
 80020d4:	007a1200 	.word	0x007a1200
 80020d8:	00f42400 	.word	0x00f42400

080020dc <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020de:	4604      	mov	r4, r0
 80020e0:	460e      	mov	r6, r1
 80020e2:	4615      	mov	r5, r2
 80020e4:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020e6:	6821      	ldr	r1, [r4, #0]
 80020e8:	688a      	ldr	r2, [r1, #8]
 80020ea:	ea36 0302 	bics.w	r3, r6, r2
 80020ee:	d001      	beq.n	80020f4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80020f0:	2000      	movs	r0, #0
}
 80020f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80020f4:	1c6b      	adds	r3, r5, #1
 80020f6:	d0f7      	beq.n	80020e8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80020f8:	f7fe fa94 	bl	8000624 <HAL_GetTick>
 80020fc:	1bc0      	subs	r0, r0, r7
 80020fe:	4285      	cmp	r5, r0
 8002100:	d8f1      	bhi.n	80020e6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800210a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800210c:	6862      	ldr	r2, [r4, #4]
 800210e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002112:	d10a      	bne.n	800212a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8002114:	68a2      	ldr	r2, [r4, #8]
 8002116:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800211a:	d002      	beq.n	8002122 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800211c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002120:	d103      	bne.n	800212a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002128:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800212a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800212c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002130:	d107      	bne.n	8002142 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002140:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002142:	2301      	movs	r3, #1
 8002144:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002148:	2300      	movs	r3, #0
 800214a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800214e:	2003      	movs	r0, #3
 8002150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002154:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002156:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002158:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <SPI_EndRxTxTransaction+0x54>)
 800215a:	4e14      	ldr	r6, [pc, #80]	; (80021ac <SPI_EndRxTxTransaction+0x58>)
 800215c:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800215e:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002160:	fbb5 f6f6 	udiv	r6, r5, r6
 8002164:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002168:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800216a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800216e:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002170:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002172:	d10d      	bne.n	8002190 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002174:	460a      	mov	r2, r1
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	f7ff ffb0 	bl	80020dc <SPI_WaitFlagStateUntilTimeout.constprop.9>
 800217c:	b910      	cbnz	r0, 8002184 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 800217e:	2000      	movs	r0, #0
}
 8002180:	b002      	add	sp, #8
 8002182:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002184:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002186:	f043 0320 	orr.w	r3, r3, #32
 800218a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800218c:	2003      	movs	r0, #3
 800218e:	e7f7      	b.n	8002180 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8002190:	9b01      	ldr	r3, [sp, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f3      	beq.n	800217e <SPI_EndRxTxTransaction+0x2a>
      count--;
 8002196:	9b01      	ldr	r3, [sp, #4]
 8002198:	3b01      	subs	r3, #1
 800219a:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	d4f5      	bmi.n	8002190 <SPI_EndRxTxTransaction+0x3c>
 80021a4:	e7eb      	b.n	800217e <SPI_EndRxTxTransaction+0x2a>
 80021a6:	bf00      	nop
 80021a8:	2000003c 	.word	0x2000003c
 80021ac:	016e3600 	.word	0x016e3600

080021b0 <HAL_SPI_Init>:
{
 80021b0:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80021b2:	4604      	mov	r4, r0
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d036      	beq.n	8002226 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80021bc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80021c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021c4:	b91b      	cbnz	r3, 80021ce <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80021c6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80021ca:	f002 ffb1 	bl	8005130 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80021ce:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021d0:	68a0      	ldr	r0, [r4, #8]
 80021d2:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80021d4:	2302      	movs	r3, #2
 80021d6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80021da:	680b      	ldr	r3, [r1, #0]
 80021dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021e0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021e2:	6863      	ldr	r3, [r4, #4]
 80021e4:	4303      	orrs	r3, r0
 80021e6:	68e0      	ldr	r0, [r4, #12]
 80021e8:	4303      	orrs	r3, r0
 80021ea:	6920      	ldr	r0, [r4, #16]
 80021ec:	4303      	orrs	r3, r0
 80021ee:	6960      	ldr	r0, [r4, #20]
 80021f0:	4303      	orrs	r3, r0
 80021f2:	69e0      	ldr	r0, [r4, #28]
 80021f4:	4303      	orrs	r3, r0
 80021f6:	6a20      	ldr	r0, [r4, #32]
 80021f8:	4303      	orrs	r3, r0
 80021fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80021fc:	4303      	orrs	r3, r0
 80021fe:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002202:	4303      	orrs	r3, r0
 8002204:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002206:	0c12      	lsrs	r2, r2, #16
 8002208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800220a:	f002 0204 	and.w	r2, r2, #4
 800220e:	431a      	orrs	r2, r3
 8002210:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002212:	69cb      	ldr	r3, [r1, #28]
 8002214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002218:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800221a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800221c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800221e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002220:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8002224:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002226:	2001      	movs	r0, #1
}
 8002228:	bd10      	pop	{r4, pc}

0800222a <HAL_SPI_Transmit>:
{
 800222a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800222e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002230:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002234:	2b01      	cmp	r3, #1
{
 8002236:	4604      	mov	r4, r0
 8002238:	460d      	mov	r5, r1
 800223a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800223c:	f000 809b 	beq.w	8002376 <HAL_SPI_Transmit+0x14c>
 8002240:	2301      	movs	r3, #1
 8002242:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002246:	f7fe f9ed 	bl	8000624 <HAL_GetTick>
 800224a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800224c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002250:	b2c0      	uxtb	r0, r0
 8002252:	2801      	cmp	r0, #1
 8002254:	f040 808d 	bne.w	8002372 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8002258:	2d00      	cmp	r5, #0
 800225a:	d05d      	beq.n	8002318 <HAL_SPI_Transmit+0xee>
 800225c:	f1b8 0f00 	cmp.w	r8, #0
 8002260:	d05a      	beq.n	8002318 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002262:	2303      	movs	r3, #3
 8002264:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002268:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800226a:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800226c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800226e:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002270:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002274:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002276:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002278:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800227a:	6420      	str	r0, [r4, #64]	; 0x40
 800227c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800227e:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002284:	bf08      	it	eq
 8002286:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8002288:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800228c:	bf04      	itt	eq
 800228e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002292:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002294:	6803      	ldr	r3, [r0, #0]
 8002296:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002298:	bf5e      	ittt	pl
 800229a:	6803      	ldrpl	r3, [r0, #0]
 800229c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80022a0:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022a2:	68e3      	ldr	r3, [r4, #12]
 80022a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022a8:	6863      	ldr	r3, [r4, #4]
 80022aa:	d13e      	bne.n	800232a <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ac:	b113      	cbz	r3, 80022b4 <HAL_SPI_Transmit+0x8a>
 80022ae:	f1b8 0f01 	cmp.w	r8, #1
 80022b2:	d107      	bne.n	80022c4 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80022b8:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ba:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80022bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80022c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	b9a3      	cbnz	r3, 80022f4 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ca:	463a      	mov	r2, r7
 80022cc:	4631      	mov	r1, r6
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff ff40 	bl	8002154 <SPI_EndRxTxTransaction>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d149      	bne.n	800236c <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022d8:	68a3      	ldr	r3, [r4, #8]
 80022da:	b933      	cbnz	r3, 80022ea <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	9201      	str	r2, [sp, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80022ec:	3000      	adds	r0, #0
 80022ee:	bf18      	it	ne
 80022f0:	2001      	movne	r0, #1
 80022f2:	e011      	b.n	8002318 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022f4:	6822      	ldr	r2, [r4, #0]
 80022f6:	6893      	ldr	r3, [r2, #8]
 80022f8:	0798      	lsls	r0, r3, #30
 80022fa:	d505      	bpl.n	8002308 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022fe:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002302:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002304:	6323      	str	r3, [r4, #48]	; 0x30
 8002306:	e7d9      	b.n	80022bc <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002308:	f7fe f98c 	bl	8000624 <HAL_GetTick>
 800230c:	1bc0      	subs	r0, r0, r7
 800230e:	42b0      	cmp	r0, r6
 8002310:	d3d8      	bcc.n	80022c4 <HAL_SPI_Transmit+0x9a>
 8002312:	1c71      	adds	r1, r6, #1
 8002314:	d0d6      	beq.n	80022c4 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8002316:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002318:	2301      	movs	r3, #1
 800231a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800231e:	2300      	movs	r3, #0
 8002320:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002324:	b002      	add	sp, #8
 8002326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232a:	b113      	cbz	r3, 8002332 <HAL_SPI_Transmit+0x108>
 800232c:	f1b8 0f01 	cmp.w	r8, #1
 8002330:	d108      	bne.n	8002344 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002332:	782b      	ldrb	r3, [r5, #0]
 8002334:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002336:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002338:	3301      	adds	r3, #1
 800233a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800233c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800233e:	3b01      	subs	r3, #1
 8002340:	b29b      	uxth	r3, r3
 8002342:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002344:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0be      	beq.n	80022ca <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	0792      	lsls	r2, r2, #30
 8002352:	d503      	bpl.n	800235c <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002354:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002356:	7812      	ldrb	r2, [r2, #0]
 8002358:	731a      	strb	r2, [r3, #12]
 800235a:	e7ec      	b.n	8002336 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800235c:	f7fe f962 	bl	8000624 <HAL_GetTick>
 8002360:	1bc0      	subs	r0, r0, r7
 8002362:	4286      	cmp	r6, r0
 8002364:	d8ee      	bhi.n	8002344 <HAL_SPI_Transmit+0x11a>
 8002366:	1c73      	adds	r3, r6, #1
 8002368:	d0ec      	beq.n	8002344 <HAL_SPI_Transmit+0x11a>
 800236a:	e7d4      	b.n	8002316 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800236c:	2320      	movs	r3, #32
 800236e:	6563      	str	r3, [r4, #84]	; 0x54
 8002370:	e7b2      	b.n	80022d8 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8002372:	2002      	movs	r0, #2
 8002374:	e7d0      	b.n	8002318 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8002376:	2002      	movs	r0, #2
 8002378:	e7d4      	b.n	8002324 <HAL_SPI_Transmit+0xfa>
	...

0800237c <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 800237c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002380:	2b01      	cmp	r3, #1
{
 8002382:	b510      	push	{r4, lr}
 8002384:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002386:	d04e      	beq.n	8002426 <HAL_SPI_Transmit_DMA+0xaa>
 8002388:	2301      	movs	r3, #1
 800238a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 800238e:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
 8002392:	b2c0      	uxtb	r0, r0
 8002394:	4298      	cmp	r0, r3
 8002396:	d144      	bne.n	8002422 <HAL_SPI_Transmit_DMA+0xa6>
  if ((pData == NULL) || (Size == 0U))
 8002398:	2900      	cmp	r1, #0
 800239a:	d02d      	beq.n	80023f8 <HAL_SPI_Transmit_DMA+0x7c>
 800239c:	2a00      	cmp	r2, #0
 800239e:	d02b      	beq.n	80023f8 <HAL_SPI_Transmit_DMA+0x7c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023a0:	2303      	movs	r3, #3
 80023a2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023aa:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80023ac:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 80023ae:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80023b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80023b2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80023b4:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023b6:	68a3      	ldr	r3, [r4, #8]
  hspi->TxXferSize  = Size;
 80023b8:	86a2      	strh	r2, [r4, #52]	; 0x34
 80023ba:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80023bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023be:	6321      	str	r1, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 80023c4:	bf02      	ittt	eq
 80023c6:	6813      	ldreq	r3, [r2, #0]
 80023c8:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80023cc:	6013      	streq	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_SPI_Transmit_DMA+0xb0>)
 80023d0:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_SPI_Transmit_DMA+0xb4>)
 80023d4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_SPI_Transmit_DMA+0xb8>)
 80023d8:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80023de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023e0:	320c      	adds	r2, #12
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f7fe fa36 	bl	8000854 <HAL_DMA_Start_IT>
 80023e8:	b150      	cbz	r0, 8002400 <HAL_SPI_Transmit_DMA+0x84>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80023ec:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023ee:	f043 0310 	orr.w	r3, r3, #16
 80023f2:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80023f4:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023f8:	2300      	movs	r3, #0
 80023fa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80023fe:	bd10      	pop	{r4, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002406:	bf5e      	ittt	pl
 8002408:	681a      	ldrpl	r2, [r3, #0]
 800240a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800240e:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	f042 0220 	orr.w	r2, r2, #32
 8002416:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	f042 0202 	orr.w	r2, r2, #2
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	e7ea      	b.n	80023f8 <HAL_SPI_Transmit_DMA+0x7c>
    errorcode = HAL_BUSY;
 8002422:	2002      	movs	r0, #2
 8002424:	e7e8      	b.n	80023f8 <HAL_SPI_Transmit_DMA+0x7c>
  __HAL_LOCK(hspi);
 8002426:	2002      	movs	r0, #2
}
 8002428:	bd10      	pop	{r4, pc}
 800242a:	bf00      	nop
 800242c:	0800243d 	.word	0x0800243d
 8002430:	0800246b 	.word	0x0800246b
 8002434:	08002449 	.word	0x08002449

08002438 <HAL_SPI_TxCpltCallback>:
 8002438:	4770      	bx	lr

0800243a <HAL_SPI_TxHalfCpltCallback>:
 800243a:	4770      	bx	lr

0800243c <SPI_DMAHalfTransmitCplt>:
{
 800243c:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800243e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002440:	f7ff fffb 	bl	800243a <HAL_SPI_TxHalfCpltCallback>
 8002444:	bd08      	pop	{r3, pc}

08002446 <HAL_SPI_ErrorCallback>:
 8002446:	4770      	bx	lr

08002448 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002448:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800244a:	6802      	ldr	r2, [r0, #0]
{
 800244c:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800244e:	6853      	ldr	r3, [r2, #4]
 8002450:	f023 0303 	bic.w	r3, r3, #3
 8002454:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002456:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002458:	f043 0310 	orr.w	r3, r3, #16
 800245c:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800245e:	2301      	movs	r3, #1
 8002460:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8002464:	f7ff ffef 	bl	8002446 <HAL_SPI_ErrorCallback>
 8002468:	bd08      	pop	{r3, pc}

0800246a <SPI_DMATransmitCplt>:
{
 800246a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800246c:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800246e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002470:	f7fe f8d8 	bl	8000624 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002474:	682b      	ldr	r3, [r5, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	05db      	lsls	r3, r3, #23
  tickstart = HAL_GetTick();
 800247a:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800247c:	d426      	bmi.n	80024cc <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	f021 0120 	bic.w	r1, r1, #32
 8002486:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	f021 0102 	bic.w	r1, r1, #2
 800248e:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002490:	4620      	mov	r0, r4
 8002492:	2164      	movs	r1, #100	; 0x64
 8002494:	f7ff fe5e 	bl	8002154 <SPI_EndRxTxTransaction>
 8002498:	b118      	cbz	r0, 80024a2 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800249a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800249c:	f043 0320 	orr.w	r3, r3, #32
 80024a0:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024a2:	68a3      	ldr	r3, [r4, #8]
 80024a4:	b933      	cbnz	r3, 80024b4 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	9201      	str	r2, [sp, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024c0:	b123      	cbz	r3, 80024cc <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 80024c2:	4620      	mov	r0, r4
 80024c4:	f7ff ffbf 	bl	8002446 <HAL_SPI_ErrorCallback>
}
 80024c8:	b003      	add	sp, #12
 80024ca:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff ffb3 	bl	8002438 <HAL_SPI_TxCpltCallback>
 80024d2:	e7f9      	b.n	80024c8 <SPI_DMATransmitCplt+0x5e>

080024d4 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 80024d4:	6803      	ldr	r3, [r0, #0]
{
 80024d6:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80024d8:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80024da:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024dc:	f002 0541 	and.w	r5, r2, #65	; 0x41
 80024e0:	2d01      	cmp	r5, #1
{
 80024e2:	b085      	sub	sp, #20
 80024e4:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024e6:	d105      	bne.n	80024f4 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024e8:	064d      	lsls	r5, r1, #25
 80024ea:	d503      	bpl.n	80024f4 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 80024ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 80024ee:	4798      	blx	r3
}
 80024f0:	b005      	add	sp, #20
 80024f2:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80024f4:	0795      	lsls	r5, r2, #30
 80024f6:	d504      	bpl.n	8002502 <HAL_SPI_IRQHandler+0x2e>
 80024f8:	0608      	lsls	r0, r1, #24
 80024fa:	d502      	bpl.n	8002502 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 80024fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024fe:	4620      	mov	r0, r4
 8002500:	e7f5      	b.n	80024ee <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002502:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8002506:	d0f3      	beq.n	80024f0 <HAL_SPI_IRQHandler+0x1c>
 8002508:	068d      	lsls	r5, r1, #26
 800250a:	d5f1      	bpl.n	80024f0 <HAL_SPI_IRQHandler+0x1c>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800250c:	0650      	lsls	r0, r2, #25
 800250e:	d50f      	bpl.n	8002530 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002510:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002514:	2803      	cmp	r0, #3
 8002516:	f04f 0500 	mov.w	r5, #0
 800251a:	d04c      	beq.n	80025b6 <HAL_SPI_IRQHandler+0xe2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800251c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800251e:	f040 0004 	orr.w	r0, r0, #4
 8002522:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002524:	9500      	str	r5, [sp, #0]
 8002526:	68d8      	ldr	r0, [r3, #12]
 8002528:	9000      	str	r0, [sp, #0]
 800252a:	6898      	ldr	r0, [r3, #8]
 800252c:	9000      	str	r0, [sp, #0]
 800252e:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002530:	0695      	lsls	r5, r2, #26
 8002532:	d50c      	bpl.n	800254e <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002534:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002536:	f040 0001 	orr.w	r0, r0, #1
 800253a:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800253c:	2000      	movs	r0, #0
 800253e:	9002      	str	r0, [sp, #8]
 8002540:	6898      	ldr	r0, [r3, #8]
 8002542:	9002      	str	r0, [sp, #8]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800254a:	6018      	str	r0, [r3, #0]
 800254c:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800254e:	05d0      	lsls	r0, r2, #23
 8002550:	d508      	bpl.n	8002564 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002552:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002554:	f042 0208 	orr.w	r2, r2, #8
 8002558:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800255a:	2200      	movs	r2, #0
 800255c:	9203      	str	r2, [sp, #12]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	9203      	str	r2, [sp, #12]
 8002562:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002564:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002566:	2a00      	cmp	r2, #0
 8002568:	d0c2      	beq.n	80024f0 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002570:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002572:	2201      	movs	r2, #1
 8002574:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002578:	078a      	lsls	r2, r1, #30
 800257a:	d023      	beq.n	80025c4 <HAL_SPI_IRQHandler+0xf0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800257c:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800257e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002580:	f022 0203 	bic.w	r2, r2, #3
 8002584:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8002586:	b140      	cbz	r0, 800259a <HAL_SPI_IRQHandler+0xc6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_SPI_IRQHandler+0xf8>)
 800258a:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800258c:	f7fe f9a0 	bl	80008d0 <HAL_DMA_Abort_IT>
 8002590:	b118      	cbz	r0, 800259a <HAL_SPI_IRQHandler+0xc6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002592:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002598:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800259a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800259c:	2800      	cmp	r0, #0
 800259e:	d0a7      	beq.n	80024f0 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_SPI_IRQHandler+0xf8>)
 80025a2:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80025a4:	f7fe f994 	bl	80008d0 <HAL_DMA_Abort_IT>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d0a1      	beq.n	80024f0 <HAL_SPI_IRQHandler+0x1c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b2:	6563      	str	r3, [r4, #84]	; 0x54
 80025b4:	e79c      	b.n	80024f0 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025b6:	9501      	str	r5, [sp, #4]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	9201      	str	r2, [sp, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	9b01      	ldr	r3, [sp, #4]
        return;
 80025c2:	e795      	b.n	80024f0 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 80025c4:	4620      	mov	r0, r4
 80025c6:	f7ff ff3e 	bl	8002446 <HAL_SPI_ErrorCallback>
 80025ca:	e791      	b.n	80024f0 <HAL_SPI_IRQHandler+0x1c>
 80025cc:	080025d1 	.word	0x080025d1

080025d0 <SPI_DMAAbortOnError>:
{
 80025d0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80025d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80025d8:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80025da:	f7ff ff34 	bl	8002446 <HAL_SPI_ErrorCallback>
 80025de:	bd08      	pop	{r3, pc}

080025e0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e0:	6803      	ldr	r3, [r0, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 80025f2:	bf1e      	ittt	ne
 80025f4:	681a      	ldrne	r2, [r3, #0]
 80025f6:	f042 0201 	orrne.w	r2, r2, #1
 80025fa:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80025fc:	2000      	movs	r0, #0
 80025fe:	4770      	bx	lr

08002600 <HAL_TIM_OC_DelayElapsedCallback>:
 8002600:	4770      	bx	lr

08002602 <HAL_TIM_IC_CaptureCallback>:
 8002602:	4770      	bx	lr

08002604 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002604:	4770      	bx	lr

08002606 <HAL_TIM_TriggerCallback>:
 8002606:	4770      	bx	lr

08002608 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002608:	6803      	ldr	r3, [r0, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	0791      	lsls	r1, r2, #30
{
 800260e:	b510      	push	{r4, lr}
 8002610:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002612:	d50e      	bpl.n	8002632 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	0792      	lsls	r2, r2, #30
 8002618:	d50b      	bpl.n	8002632 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800261a:	f06f 0202 	mvn.w	r2, #2
 800261e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002620:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002622:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002624:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002626:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002628:	d077      	beq.n	800271a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800262a:	f7ff ffea 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	2300      	movs	r3, #0
 8002630:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	0750      	lsls	r0, r2, #29
 8002638:	d510      	bpl.n	800265c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	0751      	lsls	r1, r2, #29
 800263e:	d50d      	bpl.n	800265c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002640:	f06f 0204 	mvn.w	r2, #4
 8002644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002646:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002648:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800264a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800264e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002650:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002652:	d068      	beq.n	8002726 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002654:	f7ff ffd5 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002658:	2300      	movs	r3, #0
 800265a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	0712      	lsls	r2, r2, #28
 8002662:	d50f      	bpl.n	8002684 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	0710      	lsls	r0, r2, #28
 8002668:	d50c      	bpl.n	8002684 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800266a:	f06f 0208 	mvn.w	r2, #8
 800266e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002670:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002672:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002674:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002676:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002678:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800267a:	d05a      	beq.n	8002732 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800267c:	f7ff ffc1 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002680:	2300      	movs	r3, #0
 8002682:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	06d2      	lsls	r2, r2, #27
 800268a:	d510      	bpl.n	80026ae <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	06d0      	lsls	r0, r2, #27
 8002690:	d50d      	bpl.n	80026ae <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002692:	f06f 0210 	mvn.w	r2, #16
 8002696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002698:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800269a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800269c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026a0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a4:	d04b      	beq.n	800273e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80026a6:	f7ff ffac 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	2300      	movs	r3, #0
 80026ac:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	07d1      	lsls	r1, r2, #31
 80026b4:	d508      	bpl.n	80026c8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	07d2      	lsls	r2, r2, #31
 80026ba:	d505      	bpl.n	80026c8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026bc:	f06f 0201 	mvn.w	r2, #1
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c2:	4620      	mov	r0, r4
 80026c4:	f002 fba6 	bl	8004e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	0610      	lsls	r0, r2, #24
 80026ce:	d508      	bpl.n	80026e2 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	0611      	lsls	r1, r2, #24
 80026d4:	d505      	bpl.n	80026e2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026dc:	4620      	mov	r0, r4
 80026de:	f000 f9a5 	bl	8002a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	0652      	lsls	r2, r2, #25
 80026e8:	d508      	bpl.n	80026fc <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	0650      	lsls	r0, r2, #25
 80026ee:	d505      	bpl.n	80026fc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff ff85 	bl	8002606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	0691      	lsls	r1, r2, #26
 8002702:	d522      	bpl.n	800274a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	0692      	lsls	r2, r2, #26
 8002708:	d51f      	bpl.n	800274a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800270a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800270e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002710:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002716:	f000 b988 	b.w	8002a2a <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800271a:	f7ff ff71 	bl	8002600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ff70 	bl	8002604 <HAL_TIM_PWM_PulseFinishedCallback>
 8002724:	e783      	b.n	800262e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	f7ff ff6b 	bl	8002600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272a:	4620      	mov	r0, r4
 800272c:	f7ff ff6a 	bl	8002604 <HAL_TIM_PWM_PulseFinishedCallback>
 8002730:	e792      	b.n	8002658 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	f7ff ff65 	bl	8002600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002736:	4620      	mov	r0, r4
 8002738:	f7ff ff64 	bl	8002604 <HAL_TIM_PWM_PulseFinishedCallback>
 800273c:	e7a0      	b.n	8002680 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273e:	f7ff ff5f 	bl	8002600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff ff5e 	bl	8002604 <HAL_TIM_PWM_PulseFinishedCallback>
 8002748:	e7af      	b.n	80026aa <HAL_TIM_IRQHandler+0xa2>
 800274a:	bd10      	pop	{r4, pc}

0800274c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800274c:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 800274e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002750:	4290      	cmp	r0, r2
 8002752:	d00e      	beq.n	8002772 <TIM_Base_SetConfig+0x26>
 8002754:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002758:	d00b      	beq.n	8002772 <TIM_Base_SetConfig+0x26>
 800275a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800275e:	4290      	cmp	r0, r2
 8002760:	d007      	beq.n	8002772 <TIM_Base_SetConfig+0x26>
 8002762:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002766:	4290      	cmp	r0, r2
 8002768:	d003      	beq.n	8002772 <TIM_Base_SetConfig+0x26>
 800276a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800276e:	4290      	cmp	r0, r2
 8002770:	d115      	bne.n	800279e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002772:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002778:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800277a:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <TIM_Base_SetConfig+0x94>)
 800277c:	4290      	cmp	r0, r2
 800277e:	d019      	beq.n	80027b4 <TIM_Base_SetConfig+0x68>
 8002780:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002784:	d016      	beq.n	80027b4 <TIM_Base_SetConfig+0x68>
 8002786:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800278a:	4290      	cmp	r0, r2
 800278c:	d012      	beq.n	80027b4 <TIM_Base_SetConfig+0x68>
 800278e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002792:	4290      	cmp	r0, r2
 8002794:	d00e      	beq.n	80027b4 <TIM_Base_SetConfig+0x68>
 8002796:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800279a:	4290      	cmp	r0, r2
 800279c:	d00a      	beq.n	80027b4 <TIM_Base_SetConfig+0x68>
 800279e:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <TIM_Base_SetConfig+0x98>)
 80027a0:	4290      	cmp	r0, r2
 80027a2:	d007      	beq.n	80027b4 <TIM_Base_SetConfig+0x68>
 80027a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027a8:	4290      	cmp	r0, r2
 80027aa:	d003      	beq.n	80027b4 <TIM_Base_SetConfig+0x68>
 80027ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027b0:	4290      	cmp	r0, r2
 80027b2:	d103      	bne.n	80027bc <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027b4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80027b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ba:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027bc:	694a      	ldr	r2, [r1, #20]
 80027be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80027c4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c6:	688b      	ldr	r3, [r1, #8]
 80027c8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ca:	680b      	ldr	r3, [r1, #0]
 80027cc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <TIM_Base_SetConfig+0x94>)
 80027d0:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d2:	bf04      	itt	eq
 80027d4:	690b      	ldreq	r3, [r1, #16]
 80027d6:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d8:	2301      	movs	r3, #1
 80027da:	6143      	str	r3, [r0, #20]
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40014000 	.word	0x40014000

080027e8 <HAL_TIM_Base_Init>:
{
 80027e8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80027ea:	4604      	mov	r4, r0
 80027ec:	b1a0      	cbz	r0, 8002818 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027f6:	b91b      	cbnz	r3, 8002800 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80027f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80027fc:	f002 fd5a 	bl	80052b4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	2302      	movs	r3, #2
 8002802:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002806:	6820      	ldr	r0, [r4, #0]
 8002808:	1d21      	adds	r1, r4, #4
 800280a:	f7ff ff9f 	bl	800274c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800280e:	2301      	movs	r3, #1
 8002810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002814:	2000      	movs	r0, #0
 8002816:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002818:	2001      	movs	r0, #1
}
 800281a:	bd10      	pop	{r4, pc}

0800281c <HAL_TIM_Encoder_Init>:
{
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	460c      	mov	r4, r1
  if (htim == NULL)
 8002820:	4605      	mov	r5, r0
 8002822:	2800      	cmp	r0, #0
 8002824:	d043      	beq.n	80028ae <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800282a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800282e:	b91b      	cbnz	r3, 8002838 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002830:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002834:	f002 fd02 	bl	800523c <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002838:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 800283a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800283c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002844:	6883      	ldr	r3, [r0, #8]
 8002846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800284a:	f023 0307 	bic.w	r3, r3, #7
 800284e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002850:	f7ff ff7c 	bl	800274c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002854:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002856:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002858:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800285a:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800285c:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 800285e:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8002860:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002862:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002864:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002868:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800286c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002870:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002872:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002876:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002878:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002880:	68e1      	ldr	r1, [r4, #12]
 8002882:	430b      	orrs	r3, r1
 8002884:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002886:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800288a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800288e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002890:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002892:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002896:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002898:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800289a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800289e:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80028a0:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 80028a2:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80028a4:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 80028a6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80028aa:	2000      	movs	r0, #0
 80028ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80028ae:	2001      	movs	r0, #1
}
 80028b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028b2:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028b4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b6:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80028c0:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c2:	6083      	str	r3, [r0, #8]
 80028c4:	bd10      	pop	{r4, pc}

080028c6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80028c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028ca:	2b01      	cmp	r3, #1
{
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	4604      	mov	r4, r0
 80028d0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80028d4:	d019      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80028d6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80028da:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80028dc:	2301      	movs	r3, #1
 80028de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80028e2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80028ec:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80028ee:	680b      	ldr	r3, [r1, #0]
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	d065      	beq.n	80029c0 <HAL_TIM_ConfigClockSource+0xfa>
 80028f4:	d815      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x5c>
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d00c      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0x4e>
 80028fa:	d807      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x46>
 80028fc:	b153      	cbz	r3, 8002914 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80028fe:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002900:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002902:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002906:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800290a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800290c:	2b20      	cmp	r3, #32
 800290e:	d001      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0x4e>
 8002910:	2b30      	cmp	r3, #48	; 0x30
 8002912:	d1f4      	bne.n	80028fe <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002914:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002916:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800291a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291e:	4313      	orrs	r3, r2
 8002920:	e01a      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002922:	2b60      	cmp	r3, #96	; 0x60
 8002924:	d034      	beq.n	8002990 <HAL_TIM_ConfigClockSource+0xca>
 8002926:	d819      	bhi.n	800295c <HAL_TIM_ConfigClockSource+0x96>
 8002928:	2b50      	cmp	r3, #80	; 0x50
 800292a:	d1e8      	bne.n	80028fe <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800292c:	684a      	ldr	r2, [r1, #4]
 800292e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002930:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002932:	6a05      	ldr	r5, [r0, #32]
 8002934:	f025 0501 	bic.w	r5, r5, #1
 8002938:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800293c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002944:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002948:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800294a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800294c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800294e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002954:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002958:	6083      	str	r3, [r0, #8]
 800295a:	e7d0      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800295c:	2b70      	cmp	r3, #112	; 0x70
 800295e:	d00c      	beq.n	800297a <HAL_TIM_ConfigClockSource+0xb4>
 8002960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002964:	d1cb      	bne.n	80028fe <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002966:	68cb      	ldr	r3, [r1, #12]
 8002968:	684a      	ldr	r2, [r1, #4]
 800296a:	6889      	ldr	r1, [r1, #8]
 800296c:	f7ff ffa1 	bl	80028b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002970:	6822      	ldr	r2, [r4, #0]
 8002972:	6893      	ldr	r3, [r2, #8]
 8002974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002978:	e008      	b.n	800298c <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800297a:	68cb      	ldr	r3, [r1, #12]
 800297c:	684a      	ldr	r2, [r1, #4]
 800297e:	6889      	ldr	r1, [r1, #8]
 8002980:	f7ff ff97 	bl	80028b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002984:	6822      	ldr	r2, [r4, #0]
 8002986:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800298c:	6093      	str	r3, [r2, #8]
      break;
 800298e:	e7b6      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002990:	684d      	ldr	r5, [r1, #4]
 8002992:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002994:	6a01      	ldr	r1, [r0, #32]
 8002996:	f021 0110 	bic.w	r1, r1, #16
 800299a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800299e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029a0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80029a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ac:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80029b0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80029b2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80029b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ba:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80029be:	e7cb      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c0:	684a      	ldr	r2, [r1, #4]
 80029c2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80029c4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c6:	6a05      	ldr	r5, [r0, #32]
 80029c8:	f025 0501 	bic.w	r5, r5, #1
 80029cc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ce:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029d0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80029dc:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80029de:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80029e0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80029e2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029e8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80029ec:	e7b4      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x92>

080029ee <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029f2:	2b01      	cmp	r3, #1
{
 80029f4:	b530      	push	{r4, r5, lr}
 80029f6:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80029fa:	d014      	beq.n	8002a26 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029fc:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80029fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002a02:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a04:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a06:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a08:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a12:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a14:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a16:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a18:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a20:	2300      	movs	r3, #0
 8002a22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002a26:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002a28:	bd30      	pop	{r4, r5, pc}

08002a2a <HAL_TIMEx_CommutCallback>:
 8002a2a:	4770      	bx	lr

08002a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	4770      	bx	lr
	...

08002a30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002a32:	3b01      	subs	r3, #1
 8002a34:	d101      	bne.n	8002a3a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002a36:	2003      	movs	r0, #3
 8002a38:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a3a:	6902      	ldr	r2, [r0, #16]
 8002a3c:	2a00      	cmp	r2, #0
 8002a3e:	daf8      	bge.n	8002a32 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002a40:	6903      	ldr	r3, [r0, #16]
 8002a42:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <USB_CoreReset+0x2c>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002a4a:	3a01      	subs	r2, #1
 8002a4c:	d0f3      	beq.n	8002a36 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002a4e:	6903      	ldr	r3, [r0, #16]
 8002a50:	f013 0301 	ands.w	r3, r3, #1
 8002a54:	d1f9      	bne.n	8002a4a <USB_CoreReset+0x1a>

  return HAL_OK;
 8002a56:	4618      	mov	r0, r3
}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	00030d41 	.word	0x00030d41

08002a60 <USB_CoreInit>:
{
 8002a60:	b084      	sub	sp, #16
 8002a62:	b538      	push	{r3, r4, r5, lr}
 8002a64:	ad05      	add	r5, sp, #20
 8002a66:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a6c:	2b01      	cmp	r3, #1
{
 8002a6e:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a70:	d125      	bne.n	8002abe <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a72:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a78:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a7a:	68c3      	ldr	r3, [r0, #12]
 8002a7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a84:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a86:	68c3      	ldr	r3, [r0, #12]
 8002a88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a8c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002a8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a90:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a92:	bf02      	ittt	eq
 8002a94:	68c3      	ldreq	r3, [r0, #12]
 8002a96:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002a9a:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002a9c:	f7ff ffc8 	bl	8002a30 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002aa0:	9b08      	ldr	r3, [sp, #32]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d107      	bne.n	8002ab6 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002aa6:	68a3      	ldr	r3, [r4, #8]
 8002aa8:	f043 0306 	orr.w	r3, r3, #6
 8002aac:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002aae:	68a3      	ldr	r3, [r4, #8]
 8002ab0:	f043 0320 	orr.w	r3, r3, #32
 8002ab4:	60a3      	str	r3, [r4, #8]
}
 8002ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aba:	b004      	add	sp, #16
 8002abc:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002abe:	68c3      	ldr	r3, [r0, #12]
 8002ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac4:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002ac6:	f7ff ffb3 	bl	8002a30 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002acc:	b923      	cbnz	r3, 8002ad8 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ad4:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ad6:	e7e3      	b.n	8002aa0 <USB_CoreInit+0x40>
 8002ad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	e7f9      	b.n	8002ad4 <USB_CoreInit+0x74>

08002ae0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ae0:	6883      	ldr	r3, [r0, #8]
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6083      	str	r3, [r0, #8]
}
 8002ae8:	2000      	movs	r0, #0
 8002aea:	4770      	bx	lr

08002aec <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002aec:	6883      	ldr	r3, [r0, #8]
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6083      	str	r3, [r0, #8]
}
 8002af4:	2000      	movs	r0, #0
 8002af6:	4770      	bx	lr

08002af8 <USB_SetCurrentMode>:
{
 8002af8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002afa:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002afc:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002afe:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002b02:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002b04:	d108      	bne.n	8002b18 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b06:	68c3      	ldr	r3, [r0, #12]
 8002b08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002b0c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002b0e:	2032      	movs	r0, #50	; 0x32
 8002b10:	f7fd fd8e 	bl	8000630 <HAL_Delay>
  return HAL_OK;
 8002b14:	2000      	movs	r0, #0
 8002b16:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002b18:	b919      	cbnz	r1, 8002b22 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002b1a:	68c3      	ldr	r3, [r0, #12]
 8002b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b20:	e7f4      	b.n	8002b0c <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002b22:	2001      	movs	r0, #1
}
 8002b24:	bd08      	pop	{r3, pc}
	...

08002b28 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002b28:	0189      	lsls	r1, r1, #6
 8002b2a:	f041 0120 	orr.w	r1, r1, #32
 8002b2e:	4a06      	ldr	r2, [pc, #24]	; (8002b48 <USB_FlushTxFifo+0x20>)
 8002b30:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002b32:	3a01      	subs	r2, #1
 8002b34:	d005      	beq.n	8002b42 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002b36:	6903      	ldr	r3, [r0, #16]
 8002b38:	f013 0320 	ands.w	r3, r3, #32
 8002b3c:	d1f9      	bne.n	8002b32 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002b3e:	4618      	mov	r0, r3
 8002b40:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b42:	2003      	movs	r0, #3
}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	00030d41 	.word	0x00030d41

08002b4c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <USB_FlushRxFifo+0x1c>)
 8002b50:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002b52:	3a01      	subs	r2, #1
 8002b54:	d005      	beq.n	8002b62 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002b56:	6903      	ldr	r3, [r0, #16]
 8002b58:	f013 0310 	ands.w	r3, r3, #16
 8002b5c:	d1f9      	bne.n	8002b52 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002b5e:	4618      	mov	r0, r3
 8002b60:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b62:	2003      	movs	r0, #3
}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	00030d41 	.word	0x00030d41

08002b6c <USB_WritePacket>:
{
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002b72:	b94c      	cbnz	r4, 8002b88 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002b74:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002b76:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002b82:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002b84:	4299      	cmp	r1, r3
 8002b86:	d101      	bne.n	8002b8c <USB_WritePacket+0x20>
}
 8002b88:	2000      	movs	r0, #0
 8002b8a:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002b8c:	f851 2b04 	ldr.w	r2, [r1], #4
 8002b90:	6002      	str	r2, [r0, #0]
 8002b92:	e7f7      	b.n	8002b84 <USB_WritePacket+0x18>

08002b94 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002b94:	3203      	adds	r2, #3
 8002b96:	f022 0203 	bic.w	r2, r2, #3
 8002b9a:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002b9c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8002ba0:	4291      	cmp	r1, r2
 8002ba2:	d101      	bne.n	8002ba8 <USB_ReadPacket+0x14>
}
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002ba8:	6803      	ldr	r3, [r0, #0]
 8002baa:	f841 3b04 	str.w	r3, [r1], #4
 8002bae:	e7f7      	b.n	8002ba0 <USB_ReadPacket+0xc>

08002bb0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002bb0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002bb2:	6980      	ldr	r0, [r0, #24]
}
 8002bb4:	4010      	ands	r0, r2
 8002bb6:	4770      	bx	lr

08002bb8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002bb8:	6940      	ldr	r0, [r0, #20]
}
 8002bba:	f000 0001 	and.w	r0, r0, #1
 8002bbe:	4770      	bx	lr

08002bc0 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002bc0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002bc4:	f023 0303 	bic.w	r3, r3, #3
{
 8002bc8:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002bca:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002bce:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8002bd2:	f001 0303 	and.w	r3, r1, #3
 8002bd6:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8002bd8:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002bda:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002bde:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8002be2:	d104      	bne.n	8002bee <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8002be4:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8002be8:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8002bea:	2000      	movs	r0, #0
 8002bec:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8002bee:	2902      	cmp	r1, #2
 8002bf0:	d1fb      	bne.n	8002bea <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8002bf2:	f241 7370 	movw	r3, #6000	; 0x1770
 8002bf6:	e7f7      	b.n	8002be8 <USB_InitFSLSPClkSel+0x28>

08002bf8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8002bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8002bfa:	2500      	movs	r5, #0
 8002bfc:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002bfe:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002c02:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002c04:	9b01      	ldr	r3, [sp, #4]
 8002c06:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c0a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002c0c:	9b01      	ldr	r3, [sp, #4]
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002c12:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002c14:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8002c18:	2064      	movs	r0, #100	; 0x64
 8002c1a:	f7fd fd09 	bl	8000630 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8002c1e:	9b01      	ldr	r3, [sp, #4]
 8002c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c24:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8002c28:	200a      	movs	r0, #10
 8002c2a:	f7fd fd01 	bl	8000630 <HAL_Delay>

  return HAL_OK;
}
 8002c2e:	4628      	mov	r0, r5
 8002c30:	b003      	add	sp, #12
 8002c32:	bd30      	pop	{r4, r5, pc}

08002c34 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002c34:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002c3a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002c3e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002c40:	9b01      	ldr	r3, [sp, #4]
 8002c42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c46:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002c48:	9b01      	ldr	r3, [sp, #4]
 8002c4a:	04da      	lsls	r2, r3, #19
 8002c4c:	d406      	bmi.n	8002c5c <USB_DriveVbus+0x28>
 8002c4e:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002c50:	bf02      	ittt	eq
 8002c52:	9b01      	ldreq	r3, [sp, #4]
 8002c54:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8002c58:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002c5c:	9b01      	ldr	r3, [sp, #4]
 8002c5e:	04db      	lsls	r3, r3, #19
 8002c60:	d505      	bpl.n	8002c6e <USB_DriveVbus+0x3a>
 8002c62:	b921      	cbnz	r1, 8002c6e <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002c64:	9b01      	ldr	r3, [sp, #4]
 8002c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c6a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8002c6e:	2000      	movs	r0, #0
 8002c70:	b002      	add	sp, #8
 8002c72:	4770      	bx	lr

08002c74 <USB_HostInit>:
{
 8002c74:	b084      	sub	sp, #16
 8002c76:	b538      	push	{r3, r4, r5, lr}
 8002c78:	4604      	mov	r4, r0
 8002c7a:	a805      	add	r0, sp, #20
 8002c7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c8c:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c90:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002c94:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9c:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002c9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ca0:	05da      	lsls	r2, r3, #23
 8002ca2:	d53f      	bpl.n	8002d24 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002ca4:	9b07      	ldr	r3, [sp, #28]
 8002ca6:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002ca8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002cac:	d13c      	bne.n	8002d28 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002cae:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002cb2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002cb6:	2110      	movs	r1, #16
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7ff ff35 	bl	8002b28 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f7ff ff44 	bl	8002b4c <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9906      	ldr	r1, [sp, #24]
 8002cc8:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8002cd0:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8002cd2:	428b      	cmp	r3, r1
 8002cd4:	d12b      	bne.n	8002d2e <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff ffab 	bl	8002c34 <USB_DriveVbus>
  HAL_Delay(200U);
 8002cde:	20c8      	movs	r0, #200	; 0xc8
 8002ce0:	f7fd fca6 	bl	8000630 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cec:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002cee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cf0:	05db      	lsls	r3, r3, #23
 8002cf2:	d521      	bpl.n	8002d38 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8002cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf8:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8002cfa:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002d02:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8002d06:	9b08      	ldr	r3, [sp, #32]
 8002d08:	b91b      	cbnz	r3, 8002d12 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002d0a:	69a3      	ldr	r3, [r4, #24]
 8002d0c:	f043 0310 	orr.w	r3, r3, #16
 8002d10:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8002d12:	69a2      	ldr	r2, [r4, #24]
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <USB_HostInit+0xd8>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61a3      	str	r3, [r4, #24]
}
 8002d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d1e:	2000      	movs	r0, #0
 8002d20:	b004      	add	sp, #16
 8002d22:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002d24:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	e7c1      	b.n	8002cb2 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002d2e:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8002d30:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8002d32:	60d5      	str	r5, [r2, #12]
 8002d34:	3220      	adds	r2, #32
 8002d36:	e7cc      	b.n	8002cd2 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8002d3c:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8002d40:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002d42:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <USB_HostInit+0xdc>)
 8002d44:	e7dd      	b.n	8002d02 <USB_HostInit+0x8e>
 8002d46:	bf00      	nop
 8002d48:	00e00300 	.word	0x00e00300
 8002d4c:	a3200008 	.word	0xa3200008
 8002d50:	004000e0 	.word	0x004000e0

08002d54 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002d54:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002d5a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002d5e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8002d60:	9801      	ldr	r0, [sp, #4]
}
 8002d62:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8002d66:	b002      	add	sp, #8
 8002d68:	4770      	bx	lr

08002d6a <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002d6a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002d6e:	6880      	ldr	r0, [r0, #8]
}
 8002d70:	b280      	uxth	r0, r0
 8002d72:	4770      	bx	lr

08002d74 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002d78:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8002d7c:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8002d80:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8002d84:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002d86:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8a:	60a0      	str	r0, [r4, #8]
 8002d8c:	fa4f f882 	sxtb.w	r8, r2
 8002d90:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8002d94:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002d98:	2e03      	cmp	r6, #3
 8002d9a:	d86c      	bhi.n	8002e76 <USB_HC_Init+0x102>
 8002d9c:	e8df f006 	tbb	[pc, r6]
 8002da0:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002da4:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8002da8:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002dac:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002dae:	da03      	bge.n	8002db8 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002db0:	68e1      	ldr	r1, [r4, #12]
 8002db2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002db6:	e005      	b.n	8002dc4 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8002db8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8002dba:	05c9      	lsls	r1, r1, #23
 8002dbc:	d542      	bpl.n	8002e44 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002dbe:	68e1      	ldr	r1, [r4, #12]
 8002dc0:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8002dc4:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002dc6:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002dc8:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f10e 	lsl.w	r1, r1, lr
 8002dd2:	4321      	orrs	r1, r4
 8002dd4:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002dd8:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8002dda:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002dde:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002de2:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002de4:	bfb4      	ite	lt
 8002de6:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 8002dea:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002dec:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 8002df0:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002df4:	059b      	lsls	r3, r3, #22
 8002df6:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002dfa:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8002dfe:	02d2      	lsls	r2, r2, #11
 8002e00:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002e04:	432b      	orrs	r3, r5
 8002e06:	4313      	orrs	r3, r2
 8002e08:	04b2      	lsls	r2, r6, #18
 8002e0a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 8002e0e:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002e10:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 8002e14:	bf0c      	ite	eq
 8002e16:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 8002e1a:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002e1c:	4323      	orrs	r3, r4
 8002e1e:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8002e20:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002e22:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8002e26:	d128      	bne.n	8002e7a <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002e28:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002e2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e30:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8002e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002e38:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8002e3c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002e40:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002e42:	dbb5      	blt.n	8002db0 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002e44:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f10e 	lsl.w	r1, r1, lr
 8002e4e:	4301      	orrs	r1, r0
 8002e50:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002e54:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e56:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002e58:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002e5c:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002e5e:	4604      	mov	r4, r0
 8002e60:	e7c4      	b.n	8002dec <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002e62:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8002e66:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002e6a:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002e6c:	daea      	bge.n	8002e44 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8002e6e:	68e1      	ldr	r1, [r4, #12]
 8002e70:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002e74:	e7a6      	b.n	8002dc4 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8002e76:	2001      	movs	r0, #1
 8002e78:	e7a6      	b.n	8002dc8 <USB_HC_Init+0x54>
}
 8002e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e7e <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002e7e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002e82:	6940      	ldr	r0, [r0, #20]
}
 8002e84:	b280      	uxth	r0, r0
 8002e86:	4770      	bx	lr

08002e88 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002e88:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002e8c:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8002e90:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002e94:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002e98:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002e9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ea0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002ea4:	d11e      	bne.n	8002ee4 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002ea6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ea8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002eac:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002eb0:	d137      	bne.n	8002f22 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002eb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eb6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002eba:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ec2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002ec6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002eca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ece:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002ed2:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	d002      	beq.n	8002ee0 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002eda:	6811      	ldr	r1, [r2, #0]
 8002edc:	2900      	cmp	r1, #0
 8002ede:	dbfa      	blt.n	8002ed6 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002ee4:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8002ee8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002eec:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002ef0:	d117      	bne.n	8002f22 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002ef2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ef6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002efa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f02:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002f06:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002f0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f0e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002f12:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8002f16:	3b01      	subs	r3, #1
 8002f18:	d0e2      	beq.n	8002ee0 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002f1a:	6811      	ldr	r1, [r2, #0]
 8002f1c:	2900      	cmp	r1, #0
 8002f1e:	dbfa      	blt.n	8002f16 <USB_HC_Halt+0x8e>
 8002f20:	e7de      	b.n	8002ee0 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f26:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002f2a:	e7d9      	b.n	8002ee0 <USB_HC_Halt+0x58>

08002f2c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002f2c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002f30:	4a06      	ldr	r2, [pc, #24]	; (8002f4c <USB_DoPing+0x20>)
 8002f32:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f36:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f42:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8002f46:	2000      	movs	r0, #0
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	80080000 	.word	0x80080000

08002f50 <USB_HC_StartXfer>:
{
 8002f50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002f54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f56:	05db      	lsls	r3, r3, #23
{
 8002f58:	4616      	mov	r6, r2
 8002f5a:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002f5c:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002f5e:	d517      	bpl.n	8002f90 <USB_HC_StartXfer+0x40>
 8002f60:	790d      	ldrb	r5, [r1, #4]
 8002f62:	b9ad      	cbnz	r5, 8002f90 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8002f64:	b94e      	cbnz	r6, 8002f7a <USB_HC_StartXfer+0x2a>
 8002f66:	794b      	ldrb	r3, [r1, #5]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d111      	bne.n	8002f90 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	f7ff ffdd 	bl	8002f2c <USB_DoPing>
}
 8002f72:	2000      	movs	r0, #0
 8002f74:	b002      	add	sp, #8
 8002f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8002f7a:	2e01      	cmp	r6, #1
 8002f7c:	d108      	bne.n	8002f90 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002f7e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8002f82:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8002f86:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8002f8a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8002f8e:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8002f90:	6908      	ldr	r0, [r1, #16]
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d066      	beq.n	8003064 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8002f96:	890b      	ldrh	r3, [r1, #8]
 8002f98:	3801      	subs	r0, #1
 8002f9a:	4418      	add	r0, r3
 8002f9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fa0:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8002fa2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002fa6:	d903      	bls.n	8002fb0 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8002fac:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8002fb0:	78cf      	ldrb	r7, [r1, #3]
 8002fb2:	b117      	cbz	r7, 8002fba <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002fb4:	890b      	ldrh	r3, [r1, #8]
 8002fb6:	4343      	muls	r3, r0
 8002fb8:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002fba:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002fbe:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002fc0:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002fc4:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002fc8:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002fcc:	ea4e 0e08 	orr.w	lr, lr, r8
 8002fd0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80030b0 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002fd4:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002fd8:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8002fdc:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002fe0:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8002fe4:	b116      	cbz	r6, 8002fec <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002fe6:	68c8      	ldr	r0, [r1, #12]
 8002fe8:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002fec:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8002ff0:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002ff4:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002ff8:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 8002ffc:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003000:	43c0      	mvns	r0, r0
 8003002:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003006:	0740      	lsls	r0, r0, #29
 8003008:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800300c:	ea40 000c 	orr.w	r0, r0, ip
 8003010:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003014:	4825      	ldr	r0, [pc, #148]	; (80030ac <USB_HC_StartXfer+0x15c>)
 8003016:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 800301a:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800301e:	f8d0 c000 	ldr.w	ip, [r0]
 8003022:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8003026:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800302a:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 800302e:	b1df      	cbz	r7, 8003068 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003030:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003034:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003038:	f8d0 c000 	ldr.w	ip, [r0]
 800303c:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8003040:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003044:	6800      	ldr	r0, [r0, #0]
 8003046:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 800304a:	2e00      	cmp	r6, #0
 800304c:	d191      	bne.n	8002f72 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800304e:	2f00      	cmp	r7, #0
 8003050:	d18f      	bne.n	8002f72 <USB_HC_StartXfer+0x22>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d08d      	beq.n	8002f72 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8003056:	79c8      	ldrb	r0, [r1, #7]
 8003058:	2803      	cmp	r0, #3
 800305a:	d813      	bhi.n	8003084 <USB_HC_StartXfer+0x134>
 800305c:	e8df f000 	tbb	[pc, r0]
 8003060:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8003064:	2001      	movs	r0, #1
 8003066:	e7a3      	b.n	8002fb0 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003068:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 800306c:	e7e2      	b.n	8003034 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800306e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003070:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003072:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8003076:	b280      	uxth	r0, r0
 8003078:	4285      	cmp	r5, r0
 800307a:	d903      	bls.n	8003084 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800307c:	69a0      	ldr	r0, [r4, #24]
 800307e:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003082:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003084:	2000      	movs	r0, #0
 8003086:	9000      	str	r0, [sp, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	68c9      	ldr	r1, [r1, #12]
 800308c:	4620      	mov	r0, r4
 800308e:	f7ff fd6d 	bl	8002b6c <USB_WritePacket>
 8003092:	e76e      	b.n	8002f72 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003094:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003098:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800309a:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800309e:	b280      	uxth	r0, r0
 80030a0:	4285      	cmp	r5, r0
 80030a2:	d9ef      	bls.n	8003084 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80030a4:	69a0      	ldr	r0, [r4, #24]
 80030a6:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 80030aa:	e7ea      	b.n	8003082 <USB_HC_StartXfer+0x132>
 80030ac:	200000c0 	.word	0x200000c0
 80030b0:	1ff80000 	.word	0x1ff80000

080030b4 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030b4:	6883      	ldr	r3, [r0, #8]
 80030b6:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80030ba:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80030bc:	2110      	movs	r1, #16
{
 80030be:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030c0:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80030c2:	f7ff fd31 	bl	8002b28 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff fd40 	bl	8002b4c <USB_FlushRxFifo>
 80030cc:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 80030d0:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 80030d4:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80030d6:	6811      	ldr	r1, [r2, #0]
 80030d8:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80030dc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80030e0:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 80030e4:	4290      	cmp	r0, r2
 80030e6:	d1f6      	bne.n	80030d6 <USB_StopHost+0x22>
 80030e8:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80030f0:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80030f4:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 80030f6:	3001      	adds	r0, #1
 80030f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030fc:	d802      	bhi.n	8003104 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	2900      	cmp	r1, #0
 8003102:	dbf8      	blt.n	80030f6 <USB_StopHost+0x42>
 8003104:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8003106:	429a      	cmp	r2, r3
 8003108:	d1ef      	bne.n	80030ea <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003112:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003114:	68a3      	ldr	r3, [r4, #8]
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800311c:	2000      	movs	r0, #0
 800311e:	bd10      	pop	{r4, pc}

08003120 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8003120:	2000      	movs	r0, #0
 8003122:	4770      	bx	lr

08003124 <USBH_CDC_InterfaceDeInit>:
{
 8003124:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003126:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800312a:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 800312c:	7821      	ldrb	r1, [r4, #0]
{
 800312e:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8003130:	b139      	cbz	r1, 8003142 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8003132:	f000 fe17 	bl	8003d64 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8003136:	7821      	ldrb	r1, [r4, #0]
 8003138:	4628      	mov	r0, r5
 800313a:	f000 fe2f 	bl	8003d9c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800313e:	2300      	movs	r3, #0
 8003140:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8003142:	7b21      	ldrb	r1, [r4, #12]
 8003144:	b141      	cbz	r1, 8003158 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8003146:	4628      	mov	r0, r5
 8003148:	f000 fe0c 	bl	8003d64 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800314c:	7b21      	ldrb	r1, [r4, #12]
 800314e:	4628      	mov	r0, r5
 8003150:	f000 fe24 	bl	8003d9c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8003154:	2300      	movs	r3, #0
 8003156:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8003158:	7b61      	ldrb	r1, [r4, #13]
 800315a:	b141      	cbz	r1, 800316e <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800315c:	4628      	mov	r0, r5
 800315e:	f000 fe01 	bl	8003d64 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8003162:	7b61      	ldrb	r1, [r4, #13]
 8003164:	4628      	mov	r0, r5
 8003166:	f000 fe19 	bl	8003d9c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800316a:	2300      	movs	r3, #0
 800316c:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 800316e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003172:	69d8      	ldr	r0, [r3, #28]
 8003174:	b128      	cbz	r0, 8003182 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8003176:	f002 faef 	bl	8005758 <free>
    phost->pActiveClass->pData = 0U;
 800317a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
}
 8003182:	2000      	movs	r0, #0
 8003184:	bd38      	pop	{r3, r4, r5, pc}

08003186 <USBH_CDC_InterfaceInit>:
{
 8003186:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8003188:	2202      	movs	r2, #2
{
 800318a:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 800318c:	2301      	movs	r3, #1
 800318e:	4611      	mov	r1, r2
{
 8003190:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8003192:	f000 f9b2 	bl	80034fa <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8003196:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8003198:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 800319a:	d102      	bne.n	80031a2 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 800319c:	2002      	movs	r0, #2
}
 800319e:	b005      	add	sp, #20
 80031a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 80031a2:	4601      	mov	r1, r0
 80031a4:	4628      	mov	r0, r5
 80031a6:	f000 f99f 	bl	80034e8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80031aa:	2050      	movs	r0, #80	; 0x50
 80031ac:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 80031b0:	f002 faca 	bl	8005748 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80031b4:	231a      	movs	r3, #26
 80031b6:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80031ba:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80031bc:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 80031c0:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80031c2:	bf42      	ittt	mi
 80031c4:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80031c6:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 80031ca:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80031cc:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80031ce:	7841      	ldrb	r1, [r0, #1]
 80031d0:	4628      	mov	r0, r5
 80031d2:	f000 fdcc 	bl	8003d6e <USBH_AllocPipe>
 80031d6:	4601      	mov	r1, r0
 80031d8:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 80031da:	8960      	ldrh	r0, [r4, #10]
 80031dc:	9002      	str	r0, [sp, #8]
 80031de:	2003      	movs	r0, #3
 80031e0:	9001      	str	r0, [sp, #4]
 80031e2:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80031e6:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80031ea:	7862      	ldrb	r2, [r4, #1]
 80031ec:	9000      	str	r0, [sp, #0]
 80031ee:	4628      	mov	r0, r5
 80031f0:	f000 fda9 	bl	8003d46 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80031f4:	2200      	movs	r2, #0
 80031f6:	7821      	ldrb	r1, [r4, #0]
 80031f8:	4628      	mov	r0, r5
 80031fa:	f002 fa36 	bl	800566a <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 80031fe:	2300      	movs	r3, #0
 8003200:	461a      	mov	r2, r3
 8003202:	210a      	movs	r1, #10
 8003204:	4628      	mov	r0, r5
 8003206:	f000 f978 	bl	80034fa <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 800320a:	28ff      	cmp	r0, #255	; 0xff
 800320c:	d0c6      	beq.n	800319c <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800320e:	231a      	movs	r3, #26
 8003210:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003214:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003218:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800321c:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8003220:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003224:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003228:	bf0d      	iteet	eq
 800322a:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800322c:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800322e:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003230:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003232:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003236:	bf08      	it	eq
 8003238:	73a3      	strbeq	r3, [r4, #14]
 800323a:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800323e:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003240:	bf18      	it	ne
 8003242:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003244:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003246:	bf14      	ite	ne
 8003248:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800324a:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800324c:	f000 fd8f 	bl	8003d6e <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003250:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003252:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003254:	4628      	mov	r0, r5
 8003256:	f000 fd8a 	bl	8003d6e <USBH_AllocPipe>
 800325a:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 800325c:	8b20      	ldrh	r0, [r4, #24]
 800325e:	9002      	str	r0, [sp, #8]
 8003260:	2602      	movs	r6, #2
 8003262:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003266:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800326a:	7ba2      	ldrb	r2, [r4, #14]
 800326c:	7b61      	ldrb	r1, [r4, #13]
 800326e:	9601      	str	r6, [sp, #4]
 8003270:	9000      	str	r0, [sp, #0]
 8003272:	4628      	mov	r0, r5
 8003274:	f000 fd67 	bl	8003d46 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8003278:	8b60      	ldrh	r0, [r4, #26]
 800327a:	9002      	str	r0, [sp, #8]
 800327c:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003280:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003284:	7be2      	ldrb	r2, [r4, #15]
 8003286:	7b21      	ldrb	r1, [r4, #12]
 8003288:	9601      	str	r6, [sp, #4]
 800328a:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 800328c:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800328e:	4628      	mov	r0, r5
 8003290:	f000 fd59 	bl	8003d46 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003294:	4632      	mov	r2, r6
 8003296:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003298:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800329c:	4628      	mov	r0, r5
 800329e:	f002 f9e4 	bl	800566a <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80032a2:	4632      	mov	r2, r6
 80032a4:	7b21      	ldrb	r1, [r4, #12]
 80032a6:	4628      	mov	r0, r5
 80032a8:	f002 f9df 	bl	800566a <USBH_LL_SetToggle>
      status = USBH_OK;
 80032ac:	4630      	mov	r0, r6
 80032ae:	e776      	b.n	800319e <USBH_CDC_InterfaceInit+0x18>

080032b0 <USBH_CDC_ClassRequest>:
{
 80032b0:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80032b2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80032b6:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80032b8:	23a1      	movs	r3, #161	; 0xa1
 80032ba:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80032bc:	2321      	movs	r3, #33	; 0x21
 80032be:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80032c0:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80032c6:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80032c8:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80032ca:	3140      	adds	r1, #64	; 0x40
{
 80032cc:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80032ce:	f000 fac9 	bl	8003864 <USBH_CtlReq>
  if(status == USBH_OK)
 80032d2:	4605      	mov	r5, r0
 80032d4:	b920      	cbnz	r0, 80032e0 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80032d6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80032da:	2102      	movs	r1, #2
 80032dc:	4620      	mov	r0, r4
 80032de:	4798      	blx	r3
}
 80032e0:	4628      	mov	r0, r5
 80032e2:	bd38      	pop	{r3, r4, r5, pc}

080032e4 <USBH_CDC_TransmitCallback>:
 80032e4:	4770      	bx	lr

080032e6 <USBH_CDC_ReceiveCallback>:
 80032e6:	4770      	bx	lr

080032e8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80032e8:	4770      	bx	lr

080032ea <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80032ea:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80032ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80032f0:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 80032f2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 80032f6:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d83d      	bhi.n	8003378 <USBH_CDC_Process+0x8e>
 80032fc:	e8df f003 	tbb	[pc, r3]
 8003300:	42170603 	.word	0x42170603
 8003304:	a6          	.byte	0xa6
 8003305:	00          	.byte	0x00
    status = USBH_OK;
 8003306:	2000      	movs	r0, #0
}
 8003308:	b002      	add	sp, #8
 800330a:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800330c:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800330e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8003310:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8003312:	2320      	movs	r3, #32
 8003314:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003316:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800331c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800331e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003320:	f000 faa0 	bl	8003864 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003324:	bb50      	cbnz	r0, 800337c <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8003326:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 8003328:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800332c:	e024      	b.n	8003378 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800332e:	23a1      	movs	r3, #161	; 0xa1
 8003330:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003332:	2321      	movs	r3, #33	; 0x21
 8003334:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003336:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800333c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800333e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003340:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003344:	f000 fa8e 	bl	8003864 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003348:	b9c0      	cbnz	r0, 800337c <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800334a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800334c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 800334e:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003352:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800335c:	4291      	cmp	r1, r2
 800335e:	d10b      	bne.n	8003378 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003364:	795a      	ldrb	r2, [r3, #5]
 8003366:	4291      	cmp	r1, r2
 8003368:	d106      	bne.n	8003378 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800336a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d102      	bne.n	8003378 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8003372:	4628      	mov	r0, r5
 8003374:	f7ff ffb8 	bl	80032e8 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003378:	2001      	movs	r0, #1
 800337a:	e7c5      	b.n	8003308 <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 800337c:	2801      	cmp	r0, #1
 800337e:	d0fb      	beq.n	8003378 <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 8003380:	2304      	movs	r3, #4
 8003382:	e7d1      	b.n	8003328 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8003384:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8003388:	2901      	cmp	r1, #1
 800338a:	d021      	beq.n	80033d0 <USBH_CDC_Process+0xe6>
 800338c:	2902      	cmp	r1, #2
 800338e:	d02e      	beq.n	80033ee <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003390:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003394:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8003396:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 800339a:	2b03      	cmp	r3, #3
 800339c:	d045      	beq.n	800342a <USBH_CDC_Process+0x140>
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d1ea      	bne.n	8003378 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80033a2:	7b31      	ldrb	r1, [r6, #12]
 80033a4:	4628      	mov	r0, r5
 80033a6:	f002 f94f 	bl	8005648 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80033aa:	2801      	cmp	r0, #1
 80033ac:	d1e4      	bne.n	8003378 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80033ae:	7b31      	ldrb	r1, [r6, #12]
 80033b0:	4628      	mov	r0, r5
 80033b2:	f002 f905 	bl	80055c0 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80033b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80033b8:	4298      	cmp	r0, r3
 80033ba:	d040      	beq.n	800343e <USBH_CDC_Process+0x154>
 80033bc:	8b72      	ldrh	r2, [r6, #26]
 80033be:	4290      	cmp	r0, r2
 80033c0:	d93d      	bls.n	800343e <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 80033c2:	1a1b      	subs	r3, r3, r0
 80033c4:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80033c6:	6a33      	ldr	r3, [r6, #32]
 80033c8:	4418      	add	r0, r3
 80033ca:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e033      	b.n	8003438 <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80033d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80033d2:	8b22      	ldrh	r2, [r4, #24]
 80033d4:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 80033d6:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80033d8:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 80033da:	bf98      	it	ls
 80033dc:	b282      	uxthls	r2, r0
 80033de:	69e1      	ldr	r1, [r4, #28]
 80033e0:	4628      	mov	r0, r5
 80033e2:	f000 fc89 	bl	8003cf8 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80033e6:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80033e8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80033ec:	e7d0      	b.n	8003390 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80033ee:	7b61      	ldrb	r1, [r4, #13]
 80033f0:	f002 f92a 	bl	8005648 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 80033f4:	2801      	cmp	r0, #1
 80033f6:	d115      	bne.n	8003424 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80033f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033fa:	8b22      	ldrh	r2, [r4, #24]
 80033fc:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80033fe:	bf83      	ittte	hi
 8003400:	1a9b      	subhi	r3, r3, r2
 8003402:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003404:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 8003406:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003408:	bf8a      	itet	hi
 800340a:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 800340c:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800340e:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8003410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003412:	b10b      	cbz	r3, 8003418 <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8003414:	2301      	movs	r3, #1
 8003416:	e7e7      	b.n	80033e8 <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8003418:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800341c:	4628      	mov	r0, r5
 800341e:	f7ff ff61 	bl	80032e4 <USBH_CDC_TransmitCallback>
 8003422:	e7b5      	b.n	8003390 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8003424:	2802      	cmp	r0, #2
 8003426:	d1b3      	bne.n	8003390 <USBH_CDC_Process+0xa6>
 8003428:	e7f4      	b.n	8003414 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 800342a:	7b33      	ldrb	r3, [r6, #12]
 800342c:	8b72      	ldrh	r2, [r6, #26]
 800342e:	6a31      	ldr	r1, [r6, #32]
 8003430:	4628      	mov	r0, r5
 8003432:	f000 fc78 	bl	8003d26 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8003436:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8003438:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 800343c:	e79c      	b.n	8003378 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800343e:	2300      	movs	r3, #0
 8003440:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8003444:	4628      	mov	r0, r5
 8003446:	f7ff ff4e 	bl	80032e6 <USBH_CDC_ReceiveCallback>
 800344a:	e795      	b.n	8003378 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 800344c:	2100      	movs	r1, #0
 800344e:	f000 fc0d 	bl	8003c6c <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8003452:	2800      	cmp	r0, #0
 8003454:	d190      	bne.n	8003378 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8003456:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800345a:	e78d      	b.n	8003378 <USBH_CDC_Process+0x8e>

0800345c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800345c:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8003460:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8003464:	2100      	movs	r1, #0
 8003466:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800346a:	4293      	cmp	r3, r2
 800346c:	d1fb      	bne.n	8003466 <DeInitStateMachine+0xa>
 800346e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003472:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800347c:	4291      	cmp	r1, r2
 800347e:	d1fb      	bne.n	8003478 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8003480:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003482:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8003484:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8003486:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8003488:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 800348a:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 800348e:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003490:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 8003492:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003494:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8003498:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 800349c:	2000      	movs	r0, #0
 800349e:	4770      	bx	lr

080034a0 <USBH_Init>:
{
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	460d      	mov	r5, r1
  if(phost == NULL)
 80034a4:	4604      	mov	r4, r0
 80034a6:	b180      	cbz	r0, 80034ca <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 80034a8:	2300      	movs	r3, #0
  phost->id = id;
 80034aa:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 80034ae:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 80034b2:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 80034b6:	f7ff ffd1 	bl	800345c <DeInitStateMachine>
  if(pUsrFunc != NULL)
 80034ba:	b10d      	cbz	r5, 80034c0 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 80034bc:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 80034c0:	4620      	mov	r0, r4
 80034c2:	f002 f81f 	bl	8005504 <USBH_LL_Init>
  return USBH_OK;
 80034c6:	2000      	movs	r0, #0
 80034c8:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 80034ca:	2002      	movs	r0, #2
}
 80034cc:	bd38      	pop	{r3, r4, r5, pc}

080034ce <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 80034ce:	b149      	cbz	r1, 80034e4 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80034d0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80034d4:	b933      	cbnz	r3, 80034e4 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80034d6:	2201      	movs	r2, #1
 80034d8:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 80034dc:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 80034e0:	4618      	mov	r0, r3
 80034e2:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80034e4:	2002      	movs	r0, #2
  }

  return status;
}
 80034e6:	4770      	bx	lr

080034e8 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80034e8:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 80034ec:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80034ee:	bf86      	itte	hi
 80034f0:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 80034f4:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80034f6:	2002      	movls	r0, #2
  }
  return status;
}
 80034f8:	4770      	bx	lr

080034fa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80034fa:	b570      	push	{r4, r5, r6, lr}
 80034fc:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80034fe:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8003502:	428e      	cmp	r6, r1
 8003504:	b2e5      	uxtb	r5, r4
 8003506:	d001      	beq.n	800350c <USBH_FindInterface+0x12>
 8003508:	29ff      	cmp	r1, #255	; 0xff
 800350a:	d10b      	bne.n	8003524 <USBH_FindInterface+0x2a>
 800350c:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8003510:	4296      	cmp	r6, r2
 8003512:	d001      	beq.n	8003518 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8003514:	2aff      	cmp	r2, #255	; 0xff
 8003516:	d105      	bne.n	8003524 <USBH_FindInterface+0x2a>
 8003518:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 800351c:	429e      	cmp	r6, r3
 800351e:	d007      	beq.n	8003530 <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003520:	2bff      	cmp	r3, #255	; 0xff
 8003522:	d005      	beq.n	8003530 <USBH_FindInterface+0x36>
 8003524:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003526:	2c02      	cmp	r4, #2
 8003528:	f100 001a 	add.w	r0, r0, #26
 800352c:	d1e7      	bne.n	80034fe <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800352e:	25ff      	movs	r5, #255	; 0xff
}
 8003530:	4628      	mov	r0, r5
 8003532:	bd70      	pop	{r4, r5, r6, pc}

08003534 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003534:	b510      	push	{r4, lr}
 8003536:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003538:	f002 f80a 	bl	8005550 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800353c:	2101      	movs	r1, #1
 800353e:	4620      	mov	r0, r4
 8003540:	f002 f886 	bl	8005650 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8003544:	2000      	movs	r0, #0
 8003546:	bd10      	pop	{r4, pc}

08003548 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003548:	b530      	push	{r4, r5, lr}
 800354a:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800354c:	2302      	movs	r3, #2
 800354e:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8003552:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 8003556:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8003558:	b933      	cbnz	r3, 8003568 <USBH_Process+0x20>
 800355a:	7802      	ldrb	r2, [r0, #0]
 800355c:	b122      	cbz	r2, 8003568 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800355e:	7802      	ldrb	r2, [r0, #0]
 8003560:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 8003562:	bf1c      	itt	ne
 8003564:	2203      	movne	r2, #3
 8003566:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8003568:	7822      	ldrb	r2, [r4, #0]
 800356a:	2a0b      	cmp	r2, #11
 800356c:	d818      	bhi.n	80035a0 <USBH_Process+0x58>
 800356e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003572:	000c      	.short	0x000c
 8003574:	001f001a 	.word	0x001f001a
 8003578:	00170121 	.word	0x00170121
 800357c:	0107004f 	.word	0x0107004f
 8003580:	00d000c6 	.word	0x00d000c6
 8003584:	00e700da 	.word	0x00e700da
 8003588:	0118      	.short	0x0118
    if (phost->device.is_connected)
 800358a:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800358e:	b13b      	cbz	r3, 80035a0 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003590:	2301      	movs	r3, #1
      USBH_Delay(200U);
 8003592:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003594:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 8003596:	f002 f877 	bl	8005688 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800359a:	4620      	mov	r0, r4
 800359c:	f002 f802 	bl	80055a4 <USBH_LL_ResetPort>
}
 80035a0:	2000      	movs	r0, #0
 80035a2:	b007      	add	sp, #28
 80035a4:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d1fa      	bne.n	80035a0 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 80035aa:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 80035ac:	7023      	strb	r3, [r4, #0]
 80035ae:	e7f7      	b.n	80035a0 <USBH_Process+0x58>
    USBH_Delay(100U);
 80035b0:	2064      	movs	r0, #100	; 0x64
 80035b2:	f002 f869 	bl	8005688 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80035b6:	4620      	mov	r0, r4
 80035b8:	f001 ffe6 	bl	8005588 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 80035bc:	2305      	movs	r3, #5
 80035be:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80035c0:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80035c4:	2100      	movs	r1, #0
 80035c6:	4620      	mov	r0, r4
 80035c8:	f000 fbd1 	bl	8003d6e <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80035cc:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80035ce:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80035d0:	4620      	mov	r0, r4
 80035d2:	f000 fbcc 	bl	8003d6e <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80035d6:	79a2      	ldrb	r2, [r4, #6]
 80035d8:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80035dc:	7120      	strb	r0, [r4, #4]
 80035de:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80035e0:	9202      	str	r2, [sp, #8]
 80035e2:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 80035e4:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80035e8:	9200      	str	r2, [sp, #0]
 80035ea:	9501      	str	r5, [sp, #4]
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	4620      	mov	r0, r4
 80035f0:	f000 fba9 	bl	8003d46 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80035f4:	79a2      	ldrb	r2, [r4, #6]
 80035f6:	9202      	str	r2, [sp, #8]
 80035f8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80035fc:	9200      	str	r2, [sp, #0]
 80035fe:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003602:	7961      	ldrb	r1, [r4, #5]
 8003604:	9501      	str	r5, [sp, #4]
 8003606:	462a      	mov	r2, r5
 8003608:	4620      	mov	r0, r4
 800360a:	f000 fb9c 	bl	8003d46 <USBH_OpenPipe>
 800360e:	e7c7      	b.n	80035a0 <USBH_Process+0x58>
  switch (phost->EnumState)
 8003610:	7863      	ldrb	r3, [r4, #1]
 8003612:	2b07      	cmp	r3, #7
 8003614:	d8c4      	bhi.n	80035a0 <USBH_Process+0x58>
 8003616:	e8df f003 	tbb	[pc, r3]
 800361a:	1504      	.short	0x1504
 800361c:	4138301e 	.word	0x4138301e
 8003620:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8003622:	2108      	movs	r1, #8
 8003624:	4620      	mov	r0, r4
 8003626:	f000 f9fa 	bl	8003a1e <USBH_Get_DevDesc>
 800362a:	4605      	mov	r5, r0
 800362c:	2800      	cmp	r0, #0
 800362e:	d1b7      	bne.n	80035a0 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003630:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003632:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003636:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8003638:	7921      	ldrb	r1, [r4, #4]
 800363a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800363e:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8003640:	9202      	str	r2, [sp, #8]
 8003642:	e7cf      	b.n	80035e4 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8003644:	2112      	movs	r1, #18
 8003646:	4620      	mov	r0, r4
 8003648:	f000 f9e9 	bl	8003a1e <USBH_Get_DevDesc>
 800364c:	2800      	cmp	r0, #0
 800364e:	d1a7      	bne.n	80035a0 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 8003650:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003652:	7063      	strb	r3, [r4, #1]
 8003654:	e7a4      	b.n	80035a0 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8003656:	2101      	movs	r1, #1
 8003658:	4620      	mov	r0, r4
 800365a:	f000 fadd 	bl	8003c18 <USBH_SetAddress>
 800365e:	4605      	mov	r5, r0
 8003660:	2800      	cmp	r0, #0
 8003662:	d19d      	bne.n	80035a0 <USBH_Process+0x58>
      USBH_Delay(2U);
 8003664:	2002      	movs	r0, #2
 8003666:	f002 f80f 	bl	8005688 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800366a:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 800366c:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 800366e:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003670:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8003674:	7921      	ldrb	r1, [r4, #4]
 8003676:	79a2      	ldrb	r2, [r4, #6]
 8003678:	e7e2      	b.n	8003640 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 800367a:	2109      	movs	r1, #9
 800367c:	4620      	mov	r0, r4
 800367e:	f000 fa16 	bl	8003aae <USBH_Get_CfgDesc>
 8003682:	2800      	cmp	r0, #0
 8003684:	d18c      	bne.n	80035a0 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003686:	2304      	movs	r3, #4
 8003688:	e7e3      	b.n	8003652 <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 800368a:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 800368e:	4620      	mov	r0, r4
 8003690:	f000 fa0d 	bl	8003aae <USBH_Get_CfgDesc>
 8003694:	2800      	cmp	r0, #0
 8003696:	d183      	bne.n	80035a0 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003698:	2305      	movs	r3, #5
 800369a:	e7da      	b.n	8003652 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 800369c:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 80036a0:	b141      	cbz	r1, 80036b4 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 80036a2:	23ff      	movs	r3, #255	; 0xff
 80036a4:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80036a8:	4620      	mov	r0, r4
 80036aa:	f000 fa8e 	bl	8003bca <USBH_Get_StringDesc>
 80036ae:	2800      	cmp	r0, #0
 80036b0:	f47f af76 	bne.w	80035a0 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80036b4:	2306      	movs	r3, #6
 80036b6:	e7cc      	b.n	8003652 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 80036b8:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 80036bc:	b141      	cbz	r1, 80036d0 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 80036be:	23ff      	movs	r3, #255	; 0xff
 80036c0:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 fa80 	bl	8003bca <USBH_Get_StringDesc>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	f47f af68 	bne.w	80035a0 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80036d0:	2307      	movs	r3, #7
 80036d2:	e7be      	b.n	8003652 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80036d4:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 80036d8:	b141      	cbz	r1, 80036ec <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 80036da:	23ff      	movs	r3, #255	; 0xff
 80036dc:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80036e0:	4620      	mov	r0, r4
 80036e2:	f000 fa72 	bl	8003bca <USBH_Get_StringDesc>
 80036e6:	2800      	cmp	r0, #0
 80036e8:	f47f af5a 	bne.w	80035a0 <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80036f2:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d009      	beq.n	800370e <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 80036fa:	2307      	movs	r3, #7
 80036fc:	e756      	b.n	80035ac <USBH_Process+0x64>
      if(phost->pUser != NULL)
 80036fe:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003702:	2b00      	cmp	r3, #0
 8003704:	f43f af4c 	beq.w	80035a0 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8003708:	2101      	movs	r1, #1
 800370a:	4620      	mov	r0, r4
 800370c:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 800370e:	2308      	movs	r3, #8
 8003710:	e74c      	b.n	80035ac <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8003712:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 8003716:	4620      	mov	r0, r4
 8003718:	f000 fa8c 	bl	8003c34 <USBH_SetCfg>
 800371c:	2800      	cmp	r0, #0
 800371e:	f47f af3f 	bne.w	80035a0 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8003722:	2309      	movs	r3, #9
 8003724:	e742      	b.n	80035ac <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8003726:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800372a:	069b      	lsls	r3, r3, #26
 800372c:	d506      	bpl.n	800373c <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800372e:	2101      	movs	r1, #1
 8003730:	4620      	mov	r0, r4
 8003732:	f000 fa8d 	bl	8003c50 <USBH_SetFeature>
 8003736:	2800      	cmp	r0, #0
 8003738:	f47f af32 	bne.w	80035a0 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 800373c:	230a      	movs	r3, #10
 800373e:	e735      	b.n	80035ac <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 8003740:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8003744:	2b00      	cmp	r3, #0
 8003746:	f43f af2b 	beq.w	80035a0 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8003750:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003754:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 8003758:	7919      	ldrb	r1, [r3, #4]
 800375a:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 800375c:	bf08      	it	eq
 800375e:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 8003762:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003766:	b1d3      	cbz	r3, 800379e <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	4620      	mov	r0, r4
 800376c:	4798      	blx	r3
 800376e:	b9b0      	cbnz	r0, 800379e <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 8003770:	2306      	movs	r3, #6
 8003772:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8003774:	2103      	movs	r1, #3
 8003776:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800377a:	4620      	mov	r0, r4
 800377c:	4798      	blx	r3
 800377e:	e70f      	b.n	80035a0 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 8003780:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003784:	b15b      	cbz	r3, 800379e <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	4620      	mov	r0, r4
 800378a:	4798      	blx	r3
 800378c:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8003790:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003794:	2b00      	cmp	r3, #0
 8003796:	f47f af03 	bne.w	80035a0 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 800379a:	230b      	movs	r3, #11
 800379c:	e706      	b.n	80035ac <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 800379e:	230d      	movs	r3, #13
 80037a0:	e704      	b.n	80035ac <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 80037a2:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f43f aefa 	beq.w	80035a0 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4620      	mov	r0, r4
 80037b0:	4798      	blx	r3
 80037b2:	e6f5      	b.n	80035a0 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff fe51 	bl	800345c <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 80037ba:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f43f aeee 	beq.w	80035a0 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	4620      	mov	r0, r4
 80037c8:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 80037d0:	e6e6      	b.n	80035a0 <USBH_Process+0x58>

080037d2 <USBH_LL_SetTimer>:
  phost->Timer = time;
 80037d2:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80037d6:	4770      	bx	lr

080037d8 <USBH_LL_IncTimer>:
  phost->Timer ++;
 80037d8:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 80037dc:	3201      	adds	r2, #1
 80037de:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80037e2:	7802      	ldrb	r2, [r0, #0]
 80037e4:	2a0b      	cmp	r2, #11
 80037e6:	d104      	bne.n	80037f2 <USBH_LL_IncTimer+0x1a>
 80037e8:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80037ec:	b10b      	cbz	r3, 80037f2 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	4718      	bx	r3
 80037f2:	4770      	bx	lr

080037f4 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80037fa:	4770      	bx	lr

080037fc <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 8003802:	4770      	bx	lr

08003804 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8003804:	7802      	ldrb	r2, [r0, #0]
{
 8003806:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8003808:	b94a      	cbnz	r2, 800381e <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 800380a:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 800380e:	2201      	movs	r2, #1
 8003810:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8003814:	b10b      	cbz	r3, 800381a <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8003816:	2104      	movs	r1, #4
 8003818:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800381a:	2000      	movs	r0, #0
 800381c:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 800381e:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 8003822:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8003824:	bf04      	itt	eq
 8003826:	2202      	moveq	r2, #2
 8003828:	7002      	strbeq	r2, [r0, #0]
 800382a:	e7f6      	b.n	800381a <USBH_LL_Connect+0x16>

0800382c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800382c:	b510      	push	{r4, lr}
 800382e:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8003830:	f001 fe9c 	bl	800556c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8003834:	7921      	ldrb	r1, [r4, #4]
 8003836:	4620      	mov	r0, r4
 8003838:	f000 fab0 	bl	8003d9c <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800383c:	7961      	ldrb	r1, [r4, #5]
 800383e:	4620      	mov	r0, r4
 8003840:	f000 faac 	bl	8003d9c <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 800384a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800384e:	b113      	cbz	r3, 8003856 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8003850:	2105      	movs	r1, #5
 8003852:	4620      	mov	r0, r4
 8003854:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003856:	4620      	mov	r0, r4
 8003858:	f001 fe7a 	bl	8005550 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800385c:	2303      	movs	r3, #3
 800385e:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8003860:	2000      	movs	r0, #0
 8003862:	bd10      	pop	{r4, pc}

08003864 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8003864:	b513      	push	{r0, r1, r4, lr}
 8003866:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8003868:	7880      	ldrb	r0, [r0, #2]
 800386a:	2801      	cmp	r0, #1
 800386c:	d003      	beq.n	8003876 <USBH_CtlReq+0x12>
 800386e:	2802      	cmp	r0, #2
 8003870:	d008      	beq.n	8003884 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 8003872:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8003874:	e004      	b.n	8003880 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8003876:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8003878:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 800387a:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 800387c:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 800387e:	70a3      	strb	r3, [r4, #2]
}
 8003880:	b002      	add	sp, #8
 8003882:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8003884:	7e23      	ldrb	r3, [r4, #24]
 8003886:	3b01      	subs	r3, #1
 8003888:	2101      	movs	r1, #1
 800388a:	2b0a      	cmp	r3, #10
 800388c:	d8f1      	bhi.n	8003872 <USBH_CtlReq+0xe>
 800388e:	e8df f003 	tbb	[pc, r3]
 8003892:	0f06      	.short	0x0f06
 8003894:	4c40362b 	.word	0x4c40362b
 8003898:	8c806f64 	.word	0x8c806f64
 800389c:	95          	.byte	0x95
 800389d:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800389e:	7962      	ldrb	r2, [r4, #5]
 80038a0:	f104 0110 	add.w	r1, r4, #16
 80038a4:	4620      	mov	r0, r4
 80038a6:	f000 f9ef 	bl	8003c88 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80038aa:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80038ac:	7623      	strb	r3, [r4, #24]
 80038ae:	e7e0      	b.n	8003872 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80038b0:	7961      	ldrb	r1, [r4, #5]
 80038b2:	4620      	mov	r0, r4
 80038b4:	f001 fec8 	bl	8005648 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80038b8:	2801      	cmp	r0, #1
 80038ba:	d10f      	bne.n	80038dc <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 80038bc:	8ae2      	ldrh	r2, [r4, #22]
 80038be:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80038c2:	b12a      	cbz	r2, 80038d0 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	da01      	bge.n	80038cc <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e7ef      	b.n	80038ac <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80038cc:	2305      	movs	r3, #5
 80038ce:	e7ed      	b.n	80038ac <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da01      	bge.n	80038d8 <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80038d4:	2309      	movs	r3, #9
 80038d6:	e7e9      	b.n	80038ac <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 80038d8:	2307      	movs	r3, #7
 80038da:	e7e7      	b.n	80038ac <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80038dc:	2804      	cmp	r0, #4
 80038de:	d001      	beq.n	80038e4 <USBH_CtlReq+0x80>
 80038e0:	2802      	cmp	r0, #2
 80038e2:	d1c6      	bne.n	8003872 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80038e4:	230b      	movs	r3, #11
 80038e6:	e7e1      	b.n	80038ac <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 80038e8:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80038ec:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 80038ee:	89a2      	ldrh	r2, [r4, #12]
 80038f0:	7923      	ldrb	r3, [r4, #4]
 80038f2:	68a1      	ldr	r1, [r4, #8]
 80038f4:	4620      	mov	r0, r4
 80038f6:	f000 f9ef 	bl	8003cd8 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80038fa:	2304      	movs	r3, #4
 80038fc:	e7d6      	b.n	80038ac <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80038fe:	7921      	ldrb	r1, [r4, #4]
 8003900:	4620      	mov	r0, r4
 8003902:	f001 fea1 	bl	8005648 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003906:	2801      	cmp	r0, #1
 8003908:	d0e4      	beq.n	80038d4 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800390a:	2805      	cmp	r0, #5
 800390c:	d015      	beq.n	800393a <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 800390e:	2804      	cmp	r0, #4
 8003910:	e7e7      	b.n	80038e2 <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 8003912:	7963      	ldrb	r3, [r4, #5]
 8003914:	9100      	str	r1, [sp, #0]
 8003916:	89a2      	ldrh	r2, [r4, #12]
 8003918:	68a1      	ldr	r1, [r4, #8]
 800391a:	4620      	mov	r0, r4
 800391c:	f000 f9c5 	bl	8003caa <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8003920:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003924:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8003926:	2306      	movs	r3, #6
 8003928:	e7c0      	b.n	80038ac <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800392a:	7961      	ldrb	r1, [r4, #5]
 800392c:	4620      	mov	r0, r4
 800392e:	f001 fe8b 	bl	8005648 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003932:	2801      	cmp	r0, #1
 8003934:	d0d0      	beq.n	80038d8 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 8003936:	2805      	cmp	r0, #5
 8003938:	d105      	bne.n	8003946 <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 800393a:	2301      	movs	r3, #1
 800393c:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800393e:	2300      	movs	r3, #0
 8003940:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8003942:	2003      	movs	r0, #3
 8003944:	e79c      	b.n	8003880 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003946:	2802      	cmp	r0, #2
 8003948:	d0c0      	beq.n	80038cc <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 800394a:	2804      	cmp	r0, #4
 800394c:	d191      	bne.n	8003872 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 800394e:	230b      	movs	r3, #11
 8003950:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8003952:	2301      	movs	r3, #1
 8003954:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8003956:	2002      	movs	r0, #2
 8003958:	e792      	b.n	8003880 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 800395a:	2200      	movs	r2, #0
 800395c:	7923      	ldrb	r3, [r4, #4]
 800395e:	4611      	mov	r1, r2
 8003960:	4620      	mov	r0, r4
 8003962:	f000 f9b9 	bl	8003cd8 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8003966:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800396a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800396c:	2308      	movs	r3, #8
 800396e:	e79d      	b.n	80038ac <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8003970:	7921      	ldrb	r1, [r4, #4]
 8003972:	4620      	mov	r0, r4
 8003974:	f001 fe68 	bl	8005648 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8003978:	2801      	cmp	r0, #1
 800397a:	d104      	bne.n	8003986 <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 800397c:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 800397e:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8003980:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8003982:	7620      	strb	r0, [r4, #24]
 8003984:	e77c      	b.n	8003880 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8003986:	2804      	cmp	r0, #4
 8003988:	d0ac      	beq.n	80038e4 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 800398a:	2805      	cmp	r0, #5
 800398c:	f47f af71 	bne.w	8003872 <USBH_CtlReq+0xe>
 8003990:	e7d3      	b.n	800393a <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 8003992:	2200      	movs	r2, #0
 8003994:	7963      	ldrb	r3, [r4, #5]
 8003996:	9100      	str	r1, [sp, #0]
 8003998:	4620      	mov	r0, r4
 800399a:	4611      	mov	r1, r2
 800399c:	f000 f985 	bl	8003caa <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80039a0:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80039a4:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80039a6:	230a      	movs	r3, #10
 80039a8:	e780      	b.n	80038ac <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80039aa:	7961      	ldrb	r1, [r4, #5]
 80039ac:	4620      	mov	r0, r4
 80039ae:	f001 fe4b 	bl	8005648 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80039b2:	2801      	cmp	r0, #1
 80039b4:	d0e2      	beq.n	800397c <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80039b6:	2802      	cmp	r0, #2
 80039b8:	d1a9      	bne.n	800390e <USBH_CtlReq+0xaa>
 80039ba:	e78b      	b.n	80038d4 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80039bc:	7e63      	ldrb	r3, [r4, #25]
 80039be:	3301      	adds	r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	7663      	strb	r3, [r4, #25]
 80039c6:	d806      	bhi.n	80039d6 <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80039c8:	4620      	mov	r0, r4
 80039ca:	f001 fdcf 	bl	800556c <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80039ce:	2301      	movs	r3, #1
 80039d0:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80039d2:	70a3      	strb	r3, [r4, #2]
 80039d4:	e74d      	b.n	8003872 <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80039d6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80039da:	2106      	movs	r1, #6
 80039dc:	4620      	mov	r0, r4
 80039de:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	7663      	strb	r3, [r4, #25]
 80039e4:	e7b5      	b.n	8003952 <USBH_CtlReq+0xee>

080039e6 <USBH_GetDescriptor>:
{
 80039e6:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 80039e8:	7884      	ldrb	r4, [r0, #2]
{
 80039ea:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 80039ee:	2c01      	cmp	r4, #1
 80039f0:	d110      	bne.n	8003a14 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80039f2:	f061 047f 	orn	r4, r1, #127	; 0x7f
 80039f6:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80039f8:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 80039fc:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8003a00:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003a02:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8003a06:	bf0c      	ite	eq
 8003a08:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8003a0c:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003a0e:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8003a10:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8003a12:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8003a14:	462a      	mov	r2, r5
 8003a16:	4619      	mov	r1, r3
}
 8003a18:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8003a1a:	f7ff bf23 	b.w	8003864 <USBH_CtlReq>

08003a1e <USBH_Get_DevDesc>:
{
 8003a1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8003a20:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003a24:	460d      	mov	r5, r1
 8003a26:	9100      	str	r1, [sp, #0]
 8003a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a2c:	2100      	movs	r1, #0
{
 8003a2e:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003a30:	f7ff ffd9 	bl	80039e6 <USBH_GetDescriptor>
 8003a34:	bbc8      	cbnz	r0, 8003aaa <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8003a36:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8003a3a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8003a3e:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8003a42:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8003a46:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8003a4a:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8003a4e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8003a52:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8003a56:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8003a5a:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8003a5e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8003a62:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 8003a66:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8003a68:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8003a6c:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8003a70:	d91b      	bls.n	8003aaa <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8003a72:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8003a76:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8003a7a:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8003a7e:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003a82:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8003a86:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8003a8a:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8003a8e:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8003a92:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8003a96:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8003a9a:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003a9e:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8003aa2:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8003aa6:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8003aaa:	b003      	add	sp, #12
 8003aac:	bd30      	pop	{r4, r5, pc}

08003aae <USBH_Get_CfgDesc>:
{
 8003aae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8003ab2:	f100 051c 	add.w	r5, r0, #28
{
 8003ab6:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8003ab8:	9100      	str	r1, [sp, #0]
 8003aba:	462b      	mov	r3, r5
 8003abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac0:	2100      	movs	r1, #0
{
 8003ac2:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003ac4:	f7ff ff8f 	bl	80039e6 <USBH_GetDescriptor>
 8003ac8:	bb48      	cbnz	r0, 8003b1e <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8003aca:	7f23      	ldrb	r3, [r4, #28]
 8003acc:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8003ad0:	7f63      	ldrb	r3, [r4, #29]
 8003ad2:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8003ad6:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003ada:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8003ade:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003ae2:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8003ae6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003aea:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8003aee:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003af2:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8003af6:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8003afa:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8003afc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003b00:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8003b04:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8003b08:	d909      	bls.n	8003b1e <USBH_Get_CfgDesc+0x70>
 8003b0a:	4627      	mov	r7, r4
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	4606      	mov	r6, r0
 8003b10:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003b12:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8003b16:	2e02      	cmp	r6, #2
 8003b18:	d001      	beq.n	8003b1e <USBH_Get_CfgDesc+0x70>
 8003b1a:	4596      	cmp	lr, r2
 8003b1c:	d802      	bhi.n	8003b24 <USBH_Get_CfgDesc+0x76>
}
 8003b1e:	b003      	add	sp, #12
 8003b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003b24:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003b26:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003b28:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8003b2a:	7859      	ldrb	r1, [r3, #1]
 8003b2c:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003b2e:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8003b30:	d1f1      	bne.n	8003b16 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8003b32:	7819      	ldrb	r1, [r3, #0]
 8003b34:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8003b38:	7859      	ldrb	r1, [r3, #1]
 8003b3a:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8003b3e:	7899      	ldrb	r1, [r3, #2]
 8003b40:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8003b44:	78d9      	ldrb	r1, [r3, #3]
 8003b46:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8003b4a:	7919      	ldrb	r1, [r3, #4]
 8003b4c:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8003b50:	7959      	ldrb	r1, [r3, #5]
 8003b52:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8003b56:	7999      	ldrb	r1, [r3, #6]
 8003b58:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8003b5c:	79d9      	ldrb	r1, [r3, #7]
 8003b5e:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8003b62:	7a19      	ldrb	r1, [r3, #8]
 8003b64:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003b68:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 8003b6c:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8003b6e:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8003b72:	428d      	cmp	r5, r1
 8003b74:	d802      	bhi.n	8003b7c <USBH_Get_CfgDesc+0xce>
 8003b76:	3601      	adds	r6, #1
 8003b78:	371a      	adds	r7, #26
 8003b7a:	e7cc      	b.n	8003b16 <USBH_Get_CfgDesc+0x68>
 8003b7c:	4596      	cmp	lr, r2
 8003b7e:	d9fa      	bls.n	8003b76 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003b80:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003b82:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003b84:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003b86:	785d      	ldrb	r5, [r3, #1]
 8003b88:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003b8a:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003b8c:	d1ef      	bne.n	8003b6e <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003b8e:	1c4d      	adds	r5, r1, #1
 8003b90:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8003b94:	4421      	add	r1, r4
 8003b96:	f893 9000 	ldrb.w	r9, [r3]
 8003b9a:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8003b9e:	f893 9001 	ldrb.w	r9, [r3, #1]
 8003ba2:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8003ba6:	f893 9002 	ldrb.w	r9, [r3, #2]
 8003baa:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8003bae:	f893 9003 	ldrb.w	r9, [r3, #3]
 8003bb2:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8003bb6:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8003bba:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8003bbe:	f893 9006 	ldrb.w	r9, [r3, #6]
 8003bc2:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8003bc6:	b2e9      	uxtb	r1, r5
 8003bc8:	e7d1      	b.n	8003b6e <USBH_Get_CfgDesc+0xc0>

08003bca <USBH_Get_StringDesc>:
{
 8003bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8003bcc:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8003bda:	462b      	mov	r3, r5
 8003bdc:	2100      	movs	r1, #0
{
 8003bde:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8003be0:	f7ff ff01 	bl	80039e6 <USBH_GetDescriptor>
 8003be4:	b978      	cbnz	r0, 8003c06 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8003be6:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d10b      	bne.n	8003c06 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8003bee:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8003bf2:	3b02      	subs	r3, #2
 8003bf4:	42bb      	cmp	r3, r7
 8003bf6:	bf28      	it	cs
 8003bf8:	463b      	movcs	r3, r7
 8003bfa:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d803      	bhi.n	8003c0a <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8003c02:	2300      	movs	r3, #0
 8003c04:	7023      	strb	r3, [r4, #0]
}
 8003c06:	b003      	add	sp, #12
 8003c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8003c0a:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8003c0c:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8003c0e:	7889      	ldrb	r1, [r1, #2]
 8003c10:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8003c14:	b292      	uxth	r2, r2
 8003c16:	e7f2      	b.n	8003bfe <USBH_Get_StringDesc+0x34>

08003c18 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8003c18:	7883      	ldrb	r3, [r0, #2]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d106      	bne.n	8003c2c <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003c1e:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003c20:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003c22:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003c24:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8003c26:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003c28:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003c2a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4611      	mov	r1, r2
 8003c30:	f7ff be18 	b.w	8003864 <USBH_CtlReq>

08003c34 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8003c34:	7883      	ldrb	r3, [r0, #2]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d106      	bne.n	8003c48 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003c3a:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003c3c:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003c3e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003c40:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8003c42:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003c44:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003c46:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	f7ff be0a 	b.w	8003864 <USBH_CtlReq>

08003c50 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8003c50:	7883      	ldrb	r3, [r0, #2]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d106      	bne.n	8003c64 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003c56:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003c58:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003c5a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003c5c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8003c5e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003c60:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003c62:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003c64:	2200      	movs	r2, #0
 8003c66:	4611      	mov	r1, r2
 8003c68:	f7ff bdfc 	b.w	8003864 <USBH_CtlReq>

08003c6c <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8003c6c:	7883      	ldrb	r3, [r0, #2]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d106      	bne.n	8003c80 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003c72:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8003c74:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003c76:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003c78:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003c7a:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8003c7c:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003c7e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003c80:	2200      	movs	r2, #0
 8003c82:	4611      	mov	r1, r2
 8003c84:	f7ff bdee 	b.w	8003864 <USBH_CtlReq>

08003c88 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8003c88:	b530      	push	{r4, r5, lr}
 8003c8a:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003c8c:	2400      	movs	r4, #0
{
 8003c8e:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003c90:	2308      	movs	r3, #8
 8003c92:	9302      	str	r3, [sp, #8]
 8003c94:	9101      	str	r1, [sp, #4]
 8003c96:	9403      	str	r4, [sp, #12]
 8003c98:	9400      	str	r4, [sp, #0]
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	f001 fcb8 	bl	8005614 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	b005      	add	sp, #20
 8003ca8:	bd30      	pop	{r4, r5, pc}

08003caa <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8003caa:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003cac:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003cb0:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003cb2:	2d00      	cmp	r5, #0
{
 8003cb4:	461c      	mov	r4, r3
 8003cb6:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003cba:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8003cbc:	bf18      	it	ne
 8003cbe:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003cc0:	9303      	str	r3, [sp, #12]
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9101      	str	r1, [sp, #4]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4621      	mov	r1, r4
 8003cce:	f001 fca1 	bl	8005614 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	b005      	add	sp, #20
 8003cd6:	bd30      	pop	{r4, r5, pc}

08003cd8 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003cd8:	b530      	push	{r4, r5, lr}
 8003cda:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003cdc:	2400      	movs	r4, #0
{
 8003cde:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003ce0:	9202      	str	r2, [sp, #8]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	9101      	str	r1, [sp, #4]
 8003ce6:	9403      	str	r4, [sp, #12]
 8003ce8:	9200      	str	r2, [sp, #0]
 8003cea:	4623      	mov	r3, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f001 fc91 	bl	8005614 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	b005      	add	sp, #20
 8003cf6:	bd30      	pop	{r4, r5, pc}

08003cf8 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8003cf8:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003cfa:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003cfe:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003d00:	2d00      	cmp	r5, #0
{
 8003d02:	461c      	mov	r4, r3
 8003d04:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003d08:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8003d0a:	bf18      	it	ne
 8003d0c:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003d0e:	9303      	str	r3, [sp, #12]
 8003d10:	2301      	movs	r3, #1
 8003d12:	9101      	str	r1, [sp, #4]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	2302      	movs	r3, #2
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	f001 fc7a 	bl	8005614 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8003d20:	2000      	movs	r0, #0
 8003d22:	b005      	add	sp, #20
 8003d24:	bd30      	pop	{r4, r5, pc}

08003d26 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003d26:	b530      	push	{r4, r5, lr}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003d2c:	2400      	movs	r4, #0
 8003d2e:	9202      	str	r2, [sp, #8]
 8003d30:	2201      	movs	r2, #1
 8003d32:	9101      	str	r1, [sp, #4]
 8003d34:	9403      	str	r4, [sp, #12]
 8003d36:	9200      	str	r2, [sp, #0]
 8003d38:	2302      	movs	r3, #2
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	f001 fc6a 	bl	8005614 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8003d40:	4620      	mov	r0, r4
 8003d42:	b005      	add	sp, #20
 8003d44:	bd30      	pop	{r4, r5, pc}

08003d46 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8003d46:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8003d48:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003d4c:	9402      	str	r4, [sp, #8]
 8003d4e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003d52:	9401      	str	r4, [sp, #4]
 8003d54:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003d58:	9400      	str	r4, [sp, #0]
 8003d5a:	f001 fc35 	bl	80055c8 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8003d5e:	2000      	movs	r0, #0
 8003d60:	b004      	add	sp, #16
 8003d62:	bd10      	pop	{r4, pc}

08003d64 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8003d64:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8003d66:	f001 fc47 	bl	80055f8 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	bd08      	pop	{r3, pc}

08003d6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8003d6e:	b530      	push	{r4, r5, lr}
 8003d70:	2300      	movs	r3, #0
 8003d72:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8003d76:	f854 5b04 	ldr.w	r5, [r4], #4
 8003d7a:	042d      	lsls	r5, r5, #16
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	d407      	bmi.n	8003d90 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8003d80:	33e0      	adds	r3, #224	; 0xe0
 8003d82:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003d86:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8003d8a:	b292      	uxth	r2, r2
}
 8003d8c:	b2d0      	uxtb	r0, r2
 8003d8e:	bd30      	pop	{r4, r5, pc}
 8003d90:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8003d92:	2b0b      	cmp	r3, #11
 8003d94:	d1ef      	bne.n	8003d76 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8003d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d9a:	e7f7      	b.n	8003d8c <USBH_AllocPipe+0x1e>

08003d9c <USBH_FreePipe>:
   if(idx < 11U)
 8003d9c:	290a      	cmp	r1, #10
 8003d9e:	bf9f      	itttt	ls
 8003da0:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8003da4:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8003da8:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8003dac:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8003db0:	2000      	movs	r0, #0
 8003db2:	4770      	bx	lr

08003db4 <ILI9341_Select>:
extern uint8_t spi4_dma_completed;
HAL_StatusTypeDef errr;
uint16_t test = 0;

static void ILI9341_Select() {
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8003db4:	2200      	movs	r2, #0
 8003db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dba:	4801      	ldr	r0, [pc, #4]	; (8003dc0 <ILI9341_Select+0xc>)
 8003dbc:	f7fc bf30 	b.w	8000c20 <HAL_GPIO_WritePin>
 8003dc0:	40020c00 	.word	0x40020c00

08003dc4 <ILI9341_WriteCommand>:
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
}

static void ILI9341_WriteCommand(uint8_t cmd) {
 8003dc4:	b513      	push	{r0, r1, r4, lr}
 8003dc6:	ac02      	add	r4, sp, #8
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8003dc8:	2200      	movs	r2, #0
static void ILI9341_WriteCommand(uint8_t cmd) {
 8003dca:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8003dce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003dd2:	4805      	ldr	r0, [pc, #20]	; (8003de8 <ILI9341_WriteCommand+0x24>)
 8003dd4:	f7fc ff24 	bl	8000c20 <HAL_GPIO_WritePin>
//    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
//	while (!spi4_dma_completed)
//	spi4_dma_completed = 0;
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), 10);
 8003dd8:	230a      	movs	r3, #10
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4621      	mov	r1, r4
 8003dde:	4803      	ldr	r0, [pc, #12]	; (8003dec <ILI9341_WriteCommand+0x28>)
 8003de0:	f7fe fa23 	bl	800222a <HAL_SPI_Transmit>
}
 8003de4:	b002      	add	sp, #8
 8003de6:	bd10      	pop	{r4, pc}
 8003de8:	40020c00 	.word	0x40020c00
 8003dec:	200001d8 	.word	0x200001d8

08003df0 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8003df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8003df4:	2201      	movs	r2, #1
static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8003df6:	4605      	mov	r5, r0
 8003df8:	460c      	mov	r4, r1
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8003dfa:	4811      	ldr	r0, [pc, #68]	; (8003e40 <ILI9341_WriteData+0x50>)

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;

		spi4_dma_completed = 0;
 8003dfc:	4f11      	ldr	r7, [pc, #68]	; (8003e44 <ILI9341_WriteData+0x54>)
		errr = HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, chunk_size);
 8003dfe:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8003e48 <ILI9341_WriteData+0x58>
 8003e02:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003e4c <ILI9341_WriteData+0x5c>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8003e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e0a:	f7fc ff09 	bl	8000c20 <HAL_GPIO_WritePin>
    while(buff_size > 0) {
 8003e0e:	b90c      	cbnz	r4, 8003e14 <ILI9341_WriteData+0x24>
		while (get_spi4_dma_completed() == 0);

        buff += chunk_size;
        buff_size -= chunk_size;
    }
}
 8003e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8003e14:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8003e18:	4626      	mov	r6, r4
 8003e1a:	bf28      	it	cs
 8003e1c:	f44f 4600 	movcs.w	r6, #32768	; 0x8000
		spi4_dma_completed = 0;
 8003e20:	2300      	movs	r3, #0
		errr = HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, chunk_size);
 8003e22:	b2b2      	uxth	r2, r6
 8003e24:	4629      	mov	r1, r5
 8003e26:	4640      	mov	r0, r8
		spi4_dma_completed = 0;
 8003e28:	703b      	strb	r3, [r7, #0]
		errr = HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, chunk_size);
 8003e2a:	f7fe faa7 	bl	800237c <HAL_SPI_Transmit_DMA>
 8003e2e:	f889 0000 	strb.w	r0, [r9]
		while (get_spi4_dma_completed() == 0);
 8003e32:	f001 fa89 	bl	8005348 <get_spi4_dma_completed>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d0fb      	beq.n	8003e32 <ILI9341_WriteData+0x42>
        buff += chunk_size;
 8003e3a:	4435      	add	r5, r6
        buff_size -= chunk_size;
 8003e3c:	1ba4      	subs	r4, r4, r6
 8003e3e:	e7e6      	b.n	8003e0e <ILI9341_WriteData+0x1e>
 8003e40:	40020c00 	.word	0x40020c00
 8003e44:	200000c8 	.word	0x200000c8
 8003e48:	200001d8 	.word	0x200001d8
 8003e4c:	200000e0 	.word	0x200000e0

08003e50 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8003e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e52:	4607      	mov	r7, r0
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8003e54:	202a      	movs	r0, #42	; 0x2a
static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8003e56:	4616      	mov	r6, r2
 8003e58:	460d      	mov	r5, r1
 8003e5a:	461c      	mov	r4, r3
    ILI9341_WriteCommand(0x2A); // CASET
 8003e5c:	f7ff ffb2 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
        ILI9341_WriteData(data, sizeof(data));
 8003e60:	2104      	movs	r1, #4
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8003e62:	0a3b      	lsrs	r3, r7, #8
        ILI9341_WriteData(data, sizeof(data));
 8003e64:	eb0d 0001 	add.w	r0, sp, r1
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8003e68:	f88d 3004 	strb.w	r3, [sp, #4]
 8003e6c:	0a33      	lsrs	r3, r6, #8
 8003e6e:	f88d 3006 	strb.w	r3, [sp, #6]
 8003e72:	f88d 7005 	strb.w	r7, [sp, #5]
 8003e76:	f88d 6007 	strb.w	r6, [sp, #7]
        ILI9341_WriteData(data, sizeof(data));
 8003e7a:	f7ff ffb9 	bl	8003df0 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8003e7e:	202b      	movs	r0, #43	; 0x2b
 8003e80:	f7ff ffa0 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
        ILI9341_WriteData(data, sizeof(data));
 8003e84:	2104      	movs	r1, #4
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8003e86:	0a2b      	lsrs	r3, r5, #8
        ILI9341_WriteData(data, sizeof(data));
 8003e88:	eb0d 0001 	add.w	r0, sp, r1
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8003e8c:	f88d 3004 	strb.w	r3, [sp, #4]
 8003e90:	0a23      	lsrs	r3, r4, #8
 8003e92:	f88d 3006 	strb.w	r3, [sp, #6]
 8003e96:	f88d 5005 	strb.w	r5, [sp, #5]
 8003e9a:	f88d 4007 	strb.w	r4, [sp, #7]
        ILI9341_WriteData(data, sizeof(data));
 8003e9e:	f7ff ffa7 	bl	8003df0 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8003ea2:	202c      	movs	r0, #44	; 0x2c
 8003ea4:	f7ff ff8e 	bl	8003dc4 <ILI9341_WriteCommand>
}
 8003ea8:	b003      	add	sp, #12
 8003eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eac <ILI9341_Unselect>:
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8003eac:	2201      	movs	r2, #1
 8003eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eb2:	4801      	ldr	r0, [pc, #4]	; (8003eb8 <ILI9341_Unselect+0xc>)
 8003eb4:	f7fc beb4 	b.w	8000c20 <HAL_GPIO_WritePin>
 8003eb8:	40020c00 	.word	0x40020c00

08003ebc <ILI9341_Init>:

void ILI9341_Init() {
 8003ebc:	b530      	push	{r4, r5, lr}
 8003ebe:	b085      	sub	sp, #20
    ILI9341_Select();
 8003ec0:	f7ff ff78 	bl	8003db4 <ILI9341_Select>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003eca:	4888      	ldr	r0, [pc, #544]	; (80040ec <ILI9341_Init+0x230>)
    HAL_Delay(1000);

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8003ecc:	4c88      	ldr	r4, [pc, #544]	; (80040f0 <ILI9341_Init+0x234>)
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8003ece:	f7fc fea7 	bl	8000c20 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003ed2:	2005      	movs	r0, #5
 8003ed4:	f7fc fbac 	bl	8000630 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ede:	4883      	ldr	r0, [pc, #524]	; (80040ec <ILI9341_Init+0x230>)
 8003ee0:	f7fc fe9e 	bl	8000c20 <HAL_GPIO_WritePin>
    ILI9341_WriteCommand(0x01);
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7ff ff6d 	bl	8003dc4 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8003eea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eee:	f7fc fb9f 	bl	8000630 <HAL_Delay>
    ILI9341_WriteCommand(0xCB);
 8003ef2:	20cb      	movs	r0, #203	; 0xcb
 8003ef4:	f7ff ff66 	bl	8003dc4 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8003ef8:	6820      	ldr	r0, [r4, #0]
 8003efa:	7923      	ldrb	r3, [r4, #4]
 8003efc:	9000      	str	r0, [sp, #0]
        ILI9341_WriteData(data, sizeof(data));
 8003efe:	2105      	movs	r1, #5
 8003f00:	4668      	mov	r0, sp
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8003f02:	f88d 3004 	strb.w	r3, [sp, #4]
        ILI9341_WriteData(data, sizeof(data));
 8003f06:	f7ff ff73 	bl	8003df0 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8003f0a:	20cf      	movs	r0, #207	; 0xcf
 8003f0c:	f7ff ff5a 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8003f10:	4623      	mov	r3, r4
        ILI9341_WriteData(data, sizeof(data));
 8003f12:	2103      	movs	r1, #3
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8003f14:	f833 2f05 	ldrh.w	r2, [r3, #5]!
 8003f18:	f8ad 2000 	strh.w	r2, [sp]
 8003f1c:	789b      	ldrb	r3, [r3, #2]
 8003f1e:	f88d 3002 	strb.w	r3, [sp, #2]
        ILI9341_WriteData(data, sizeof(data));
 8003f22:	4668      	mov	r0, sp
 8003f24:	f7ff ff64 	bl	8003df0 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8003f28:	20e8      	movs	r0, #232	; 0xe8
 8003f2a:	f7ff ff4b 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8003f2e:	4623      	mov	r3, r4
        ILI9341_WriteData(data, sizeof(data));
 8003f30:	2103      	movs	r1, #3
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8003f32:	f833 2f08 	ldrh.w	r2, [r3, #8]!
 8003f36:	f8ad 2000 	strh.w	r2, [sp]
 8003f3a:	789b      	ldrb	r3, [r3, #2]
 8003f3c:	f88d 3002 	strb.w	r3, [sp, #2]
        ILI9341_WriteData(data, sizeof(data));
 8003f40:	4668      	mov	r0, sp
 8003f42:	f7ff ff55 	bl	8003df0 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8003f46:	20ea      	movs	r0, #234	; 0xea
 8003f48:	f7ff ff3c 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8003f4c:	2500      	movs	r5, #0
        ILI9341_WriteData(data, sizeof(data));
 8003f4e:	2102      	movs	r1, #2
 8003f50:	4668      	mov	r0, sp
        uint8_t data[] = { 0x00, 0x00 };
 8003f52:	f88d 5000 	strb.w	r5, [sp]
 8003f56:	f88d 5001 	strb.w	r5, [sp, #1]
        ILI9341_WriteData(data, sizeof(data));
 8003f5a:	f7ff ff49 	bl	8003df0 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8003f5e:	20ed      	movs	r0, #237	; 0xed
 8003f60:	f7ff ff30 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8003f64:	f8d4 000b 	ldr.w	r0, [r4, #11]
 8003f68:	9000      	str	r0, [sp, #0]
        ILI9341_WriteData(data, sizeof(data));
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	4668      	mov	r0, sp
 8003f6e:	f7ff ff3f 	bl	8003df0 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8003f72:	20f7      	movs	r0, #247	; 0xf7
 8003f74:	f7ff ff26 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8003f78:	2320      	movs	r3, #32
        ILI9341_WriteData(data, sizeof(data));
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4668      	mov	r0, sp
        uint8_t data[] = { 0x20 };
 8003f7e:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8003f82:	f7ff ff35 	bl	8003df0 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8003f86:	20c0      	movs	r0, #192	; 0xc0
 8003f88:	f7ff ff1c 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8003f8c:	2323      	movs	r3, #35	; 0x23
        ILI9341_WriteData(data, sizeof(data));
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4668      	mov	r0, sp
        uint8_t data[] = { 0x23 };
 8003f92:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8003f96:	f7ff ff2b 	bl	8003df0 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8003f9a:	20c1      	movs	r0, #193	; 0xc1
 8003f9c:	f7ff ff12 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8003fa0:	2310      	movs	r3, #16
        ILI9341_WriteData(data, sizeof(data));
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4668      	mov	r0, sp
        uint8_t data[] = { 0x10 };
 8003fa6:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8003faa:	f7ff ff21 	bl	8003df0 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8003fae:	20c5      	movs	r0, #197	; 0xc5
 8003fb0:	f7ff ff08 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8003fb4:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 8003fb8:	f8ad 3000 	strh.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4668      	mov	r0, sp
 8003fc0:	f7ff ff16 	bl	8003df0 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8003fc4:	20c7      	movs	r0, #199	; 0xc7
 8003fc6:	f7ff fefd 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8003fca:	2386      	movs	r3, #134	; 0x86
        ILI9341_WriteData(data, sizeof(data));
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4668      	mov	r0, sp
        uint8_t data[] = { 0x86 };
 8003fd0:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8003fd4:	f7ff ff0c 	bl	8003df0 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8003fd8:	2036      	movs	r0, #54	; 0x36
 8003fda:	f7ff fef3 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8003fde:	2348      	movs	r3, #72	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4668      	mov	r0, sp
        uint8_t data[] = { 0x48 };
 8003fe4:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8003fe8:	f7ff ff02 	bl	8003df0 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8003fec:	203a      	movs	r0, #58	; 0x3a
 8003fee:	f7ff fee9 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8003ff2:	2355      	movs	r3, #85	; 0x55
        ILI9341_WriteData(data, sizeof(data));
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	4668      	mov	r0, sp
        uint8_t data[] = { 0x55 };
 8003ff8:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8003ffc:	f7ff fef8 	bl	8003df0 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8004000:	20b1      	movs	r0, #177	; 0xb1
 8004002:	f7ff fedf 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8004006:	2318      	movs	r3, #24
        ILI9341_WriteData(data, sizeof(data));
 8004008:	2102      	movs	r1, #2
 800400a:	4668      	mov	r0, sp
        uint8_t data[] = { 0x00, 0x18 };
 800400c:	f88d 3001 	strb.w	r3, [sp, #1]
 8004010:	f88d 5000 	strb.w	r5, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8004014:	f7ff feec 	bl	8003df0 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8004018:	20b6      	movs	r0, #182	; 0xb6
 800401a:	f7ff fed3 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800401e:	4623      	mov	r3, r4
        ILI9341_WriteData(data, sizeof(data));
 8004020:	2103      	movs	r1, #3
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8004022:	f833 2f11 	ldrh.w	r2, [r3, #17]!
 8004026:	f8ad 2000 	strh.w	r2, [sp]
 800402a:	789b      	ldrb	r3, [r3, #2]
 800402c:	f88d 3002 	strb.w	r3, [sp, #2]
        ILI9341_WriteData(data, sizeof(data));
 8004030:	4668      	mov	r0, sp
 8004032:	f7ff fedd 	bl	8003df0 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8004036:	20f2      	movs	r0, #242	; 0xf2
 8004038:	f7ff fec4 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800403c:	2101      	movs	r1, #1
 800403e:	4668      	mov	r0, sp
        uint8_t data[] = { 0x00 };
 8004040:	f88d 5000 	strb.w	r5, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8004044:	f7ff fed4 	bl	8003df0 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8004048:	2026      	movs	r0, #38	; 0x26
 800404a:	f7ff febb 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800404e:	2101      	movs	r1, #1
        ILI9341_WriteData(data, sizeof(data));
 8004050:	4668      	mov	r0, sp
        uint8_t data[] = { 0x01 };
 8004052:	f88d 1000 	strb.w	r1, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8004056:	f7ff fecb 	bl	8003df0 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800405a:	20e0      	movs	r0, #224	; 0xe0
 800405c:	f7ff feb2 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8004060:	f104 0314 	add.w	r3, r4, #20
 8004064:	466a      	mov	r2, sp
 8004066:	341c      	adds	r4, #28
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	4615      	mov	r5, r2
 800406e:	c503      	stmia	r5!, {r0, r1}
 8004070:	3308      	adds	r3, #8
 8004072:	42a3      	cmp	r3, r4
 8004074:	462a      	mov	r2, r5
 8004076:	d1f7      	bne.n	8004068 <ILI9341_Init+0x1ac>
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	8899      	ldrh	r1, [r3, #4]
 800407c:	799b      	ldrb	r3, [r3, #6]
 800407e:	71ab      	strb	r3, [r5, #6]
 8004080:	6028      	str	r0, [r5, #0]
 8004082:	80a9      	strh	r1, [r5, #4]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8004084:	4668      	mov	r0, sp
 8004086:	210f      	movs	r1, #15
 8004088:	f7ff feb2 	bl	8003df0 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800408c:	20e1      	movs	r0, #225	; 0xe1
 800408e:	f7ff fe99 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <ILI9341_Init+0x238>)
 8004094:	466a      	mov	r2, sp
 8004096:	f103 0508 	add.w	r5, r3, #8
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	6859      	ldr	r1, [r3, #4]
 800409e:	4614      	mov	r4, r2
 80040a0:	c403      	stmia	r4!, {r0, r1}
 80040a2:	3308      	adds	r3, #8
 80040a4:	42ab      	cmp	r3, r5
 80040a6:	4622      	mov	r2, r4
 80040a8:	d1f7      	bne.n	800409a <ILI9341_Init+0x1de>
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	8899      	ldrh	r1, [r3, #4]
 80040ae:	799b      	ldrb	r3, [r3, #6]
 80040b0:	71a3      	strb	r3, [r4, #6]
 80040b2:	6020      	str	r0, [r4, #0]
 80040b4:	80a1      	strh	r1, [r4, #4]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80040b6:	4668      	mov	r0, sp
 80040b8:	210f      	movs	r1, #15
 80040ba:	f7ff fe99 	bl	8003df0 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80040be:	2011      	movs	r0, #17
 80040c0:	f7ff fe80 	bl	8003dc4 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80040c4:	2078      	movs	r0, #120	; 0x78
 80040c6:	f7fc fab3 	bl	8000630 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80040ca:	2029      	movs	r0, #41	; 0x29
 80040cc:	f7ff fe7a 	bl	8003dc4 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80040d0:	2036      	movs	r0, #54	; 0x36
 80040d2:	f7ff fe77 	bl	8003dc4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80040d6:	23e8      	movs	r3, #232	; 0xe8
        ILI9341_WriteData(data, sizeof(data));
 80040d8:	2101      	movs	r1, #1
 80040da:	4668      	mov	r0, sp
        uint8_t data[] = { ILI9341_ROTATION };
 80040dc:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 80040e0:	f7ff fe86 	bl	8003df0 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80040e4:	f7ff fee2 	bl	8003eac <ILI9341_Unselect>
}
 80040e8:	b005      	add	sp, #20
 80040ea:	bd30      	pop	{r4, r5, pc}
 80040ec:	40020c00 	.word	0x40020c00
 80040f0:	08005fe8 	.word	0x08005fe8
 80040f4:	0800600b 	.word	0x0800600b

080040f8 <ILI9341_WriteString>:
        }
    }
    ILI9341_WriteData(allData, sizeof(allData));
}

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80040f8:	b082      	sub	sp, #8
 80040fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fe:	b08b      	sub	sp, #44	; 0x2c
 8004100:	af00      	add	r7, sp, #0
 8004102:	4614      	mov	r4, r2
 8004104:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8004108:	61fa      	str	r2, [r7, #28]
 800410a:	fa5f f883 	uxtb.w	r8, r3
 800410e:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8004112:	657b      	str	r3, [r7, #84]	; 0x54
 8004114:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8004118:	4683      	mov	fp, r0
 800411a:	460d      	mov	r5, r1
 800411c:	61ba      	str	r2, [r7, #24]
    ILI9341_Select();
 800411e:	f7ff fe49 	bl	8003db4 <ILI9341_Select>
    uint8_t allData[(font.height * font.width) * 2];
 8004122:	fb18 f306 	smulbb	r3, r8, r6
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
            	allData[line_nr++] = (bgcolor >> 8);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	623c      	str	r4, [r7, #32]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	60fb      	str	r3, [r7, #12]
            	allData[line_nr++] = (color >> 8);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	613b      	str	r3, [r7, #16]
    uint8_t allData[(font.height * font.width) * 2];
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	3307      	adds	r3, #7
 800413c:	f023 0307 	bic.w	r3, r3, #7
 8004140:	607b      	str	r3, [r7, #4]

    while(*str) {
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	f813 4b01 	ldrb.w	r4, [r3], #1
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	b93c      	cbnz	r4, 800415c <ILI9341_WriteString+0x64>
        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
        x += font.width;
        str++;
    }

    ILI9341_Unselect();
 800414c:	f7ff feae 	bl	8003eac <ILI9341_Unselect>
}
 8004150:	372c      	adds	r7, #44	; 0x2c
 8004152:	46bd      	mov	sp, r7
 8004154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004158:	b002      	add	sp, #8
 800415a:	4770      	bx	lr
        if(x + font.width >= ILI9341_WIDTH) {
 800415c:	eb0b 0308 	add.w	r3, fp, r8
 8004160:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004164:	db08      	blt.n	8004178 <ILI9341_WriteString+0x80>
            y += font.height;
 8004166:	4435      	add	r5, r6
 8004168:	b2ad      	uxth	r5, r5
            if(y + font.height >= ILI9341_HEIGHT) {
 800416a:	19ab      	adds	r3, r5, r6
 800416c:	2bef      	cmp	r3, #239	; 0xef
 800416e:	dced      	bgt.n	800414c <ILI9341_WriteString+0x54>
            if(*str == ' ') {
 8004170:	2c20      	cmp	r4, #32
 8004172:	d04c      	beq.n	800420e <ILI9341_WriteString+0x116>
            x = 0;
 8004174:	f04f 0b00 	mov.w	fp, #0
    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8004178:	eb0b 0908 	add.w	r9, fp, r8
 800417c:	fa1f f989 	uxth.w	r9, r9
 8004180:	1e73      	subs	r3, r6, #1
 8004182:	442b      	add	r3, r5
 8004184:	f109 32ff 	add.w	r2, r9, #4294967295
 8004188:	b29b      	uxth	r3, r3
 800418a:	b292      	uxth	r2, r2
 800418c:	4629      	mov	r1, r5
 800418e:	4658      	mov	r0, fp
 8004190:	f8d7 a058 	ldr.w	sl, [r7, #88]	; 0x58
static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004194:	f8c7 d014 	str.w	sp, [r7, #20]
    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8004198:	f7ff fe5a 	bl	8003e50 <ILI9341_SetAddressWindow>
    uint8_t allData[(font.height * font.width) * 2];
 800419c:	687b      	ldr	r3, [r7, #4]
        b = font.data[(ch - 32) * font.height + i];
 800419e:	3c20      	subs	r4, #32
    uint8_t allData[(font.height * font.width) * 2];
 80041a0:	ebad 0d03 	sub.w	sp, sp, r3
        b = font.data[(ch - 32) * font.height + i];
 80041a4:	4374      	muls	r4, r6
 80041a6:	eb0a 0344 	add.w	r3, sl, r4, lsl #1
    uint8_t allData[(font.height * font.width) * 2];
 80041aa:	4668      	mov	r0, sp
 80041ac:	60bb      	str	r3, [r7, #8]
        b = font.data[(ch - 32) * font.height + i];
 80041ae:	466a      	mov	r2, sp
    for(i = 0; i < font.height; i++) {
 80041b0:	2100      	movs	r1, #0
 80041b2:	f1c0 0a02 	rsb	sl, r0, #2
 80041b6:	42b1      	cmp	r1, r6
 80041b8:	d306      	bcc.n	80041c8 <ILI9341_WriteString+0xd0>
    ILI9341_WriteData(allData, sizeof(allData));
 80041ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041bc:	f7ff fe18 	bl	8003df0 <ILI9341_WriteData>
 80041c0:	f8d7 d014 	ldr.w	sp, [r7, #20]
            x = 0;
 80041c4:	46cb      	mov	fp, r9
 80041c6:	e7bc      	b.n	8004142 <ILI9341_WriteString+0x4a>
        b = font.data[(ch - 32) * font.height + i];
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	eb0a 0e02 	add.w	lr, sl, r2
 80041ce:	f833 b011 	ldrh.w	fp, [r3, r1, lsl #1]
        for(j = 0; j < font.width; j++) {
 80041d2:	2300      	movs	r3, #0
 80041d4:	4543      	cmp	r3, r8
 80041d6:	d304      	bcc.n	80041e2 <ILI9341_WriteString+0xea>
 80041d8:	2302      	movs	r3, #2
    for(i = 0; i < font.height; i++) {
 80041da:	3101      	adds	r1, #1
 80041dc:	fb13 2208 	smlabb	r2, r3, r8, r2
 80041e0:	e7e9      	b.n	80041b6 <ILI9341_WriteString+0xbe>
            if((b << j) & 0x8000)  {
 80041e2:	fa0b fc03 	lsl.w	ip, fp, r3
 80041e6:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
            	allData[line_nr++] = (color >> 8);
 80041ea:	bf16      	itet	ne
 80041ec:	7c3c      	ldrbne	r4, [r7, #16]
            	allData[line_nr++] = (bgcolor >> 8);
 80041ee:	7b3c      	ldrbeq	r4, [r7, #12]
            	allData[line_nr++] = (color >> 8);
 80041f0:	f802 4013 	strbne.w	r4, [r2, r3, lsl #1]
 80041f4:	eb00 0c0e 	add.w	ip, r0, lr
            	allData[line_nr++] = (bgcolor >> 8);
 80041f8:	bf0a      	itet	eq
 80041fa:	f802 4013 	strbeq.w	r4, [r2, r3, lsl #1]
            	allData[line_nr++] = (color & 0xFF);
 80041fe:	7f3c      	ldrbne	r4, [r7, #28]
            	allData[line_nr++] = (bgcolor & 0xFF);
 8004200:	7e3c      	ldrbeq	r4, [r7, #24]
 8004202:	f80c 4c01 	strb.w	r4, [ip, #-1]
        for(j = 0; j < font.width; j++) {
 8004206:	3301      	adds	r3, #1
 8004208:	f10e 0e02 	add.w	lr, lr, #2
 800420c:	e7e2      	b.n	80041d4 <ILI9341_WriteString+0xdc>
            x = 0;
 800420e:	f04f 0900 	mov.w	r9, #0
 8004212:	e7d7      	b.n	80041c4 <ILI9341_WriteString+0xcc>

08004214 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800421c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004220:	4604      	mov	r4, r0
 8004222:	4688      	mov	r8, r1
 8004224:	4616      	mov	r6, r2
 8004226:	461d      	mov	r5, r3
 8004228:	f8b7 b030 	ldrh.w	fp, [r7, #48]	; 0x30
 800422c:	46ea      	mov	sl, sp
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800422e:	d25c      	bcs.n	80042ea <ILI9341_FillRectangle+0xd6>
 8004230:	29ef      	cmp	r1, #239	; 0xef
 8004232:	d85a      	bhi.n	80042ea <ILI9341_FillRectangle+0xd6>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8004234:	1883      	adds	r3, r0, r2
 8004236:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800423a:	bfc8      	it	gt
 800423c:	f5c0 76a0 	rsbgt	r6, r0, #320	; 0x140
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8004240:	eb01 0305 	add.w	r3, r1, r5
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8004244:	bfc8      	it	gt
 8004246:	b2b6      	uxthgt	r6, r6
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8004248:	2bf0      	cmp	r3, #240	; 0xf0
 800424a:	bfc4      	itt	gt
 800424c:	f1c1 05f0 	rsbgt	r5, r1, #240	; 0xf0
 8004250:	b2ad      	uxthgt	r5, r5

    ILI9341_Select();
 8004252:	f7ff fdaf 	bl	8003db4 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004256:	4620      	mov	r0, r4
 8004258:	1e62      	subs	r2, r4, #1
 800425a:	f108 33ff 	add.w	r3, r8, #4294967295
    uint16_t dlen = w * h * 2;
 800425e:	0074      	lsls	r4, r6, #1
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004260:	442b      	add	r3, r5
 8004262:	4432      	add	r2, r6
    uint16_t dlen = w * h * 2;
 8004264:	fb14 f405 	smulbb	r4, r4, r5
 8004268:	b2a4      	uxth	r4, r4
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800426a:	b29b      	uxth	r3, r3
 800426c:	b292      	uxth	r2, r2
 800426e:	4641      	mov	r1, r8
 8004270:	f7ff fdee 	bl	8003e50 <ILI9341_SetAddressWindow>
    if (dlen > 19200) dlen = 19200;
    uint8_t data[dlen]; // = { color >> 8, color & 0xFF };
 8004274:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
 8004278:	bf28      	it	cs
 800427a:	f44f 4496 	movcs.w	r4, #19200	; 0x4b00
 800427e:	1de3      	adds	r3, r4, #7
 8004280:	f023 0307 	bic.w	r3, r3, #7
 8004284:	ebad 0d03 	sub.w	sp, sp, r3
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8004288:	2201      	movs	r2, #1
 800428a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800428e:	4819      	ldr	r0, [pc, #100]	; (80042f4 <ILI9341_FillRectangle+0xe0>)
 8004290:	f7fc fcc6 	bl	8000c20 <HAL_GPIO_WritePin>
    uint8_t data[dlen]; // = { color >> 8, color & 0xFF };
 8004294:	46e9      	mov	r9, sp
    uint32_t d_index = 0;

    for(y = h; y > 0; y--) {
        for(x = w; x > 0; x--) {
        	data[d_index++] = (color >> 8);
 8004296:	ea4f 221b 	mov.w	r2, fp, lsr #8
    uint32_t d_index = 0;
 800429a:	2100      	movs	r1, #0
    for(y = h; y > 0; y--) {
 800429c:	b1fd      	cbz	r5, 80042de <ILI9341_FillRectangle+0xca>
 800429e:	46b0      	mov	r8, r6
 80042a0:	e017      	b.n	80042d2 <ILI9341_FillRectangle+0xbe>
        	data[d_index++] = (color >> 8);
 80042a2:	1c4b      	adds	r3, r1, #1
 80042a4:	f809 2001 	strb.w	r2, [r9, r1]
        	data[d_index++] = (color & 0xFF);
 80042a8:	3102      	adds	r1, #2
 80042aa:	f809 b003 	strb.w	fp, [r9, r3]
            if ((d_index % dlen) == 0){
 80042ae:	fbb1 f3f4 	udiv	r3, r1, r4
 80042b2:	fb04 1313 	mls	r3, r4, r3, r1
 80042b6:	b943      	cbnz	r3, 80042ca <ILI9341_FillRectangle+0xb6>
            	ILI9341_WriteData(data, sizeof(data));
 80042b8:	4621      	mov	r1, r4
 80042ba:	4648      	mov	r0, r9
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	f7ff fd96 	bl	8003df0 <ILI9341_WriteData>
            	d_index = 0;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4619      	mov	r1, r3
        for(x = w; x > 0; x--) {
 80042ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80042ce:	fa1f f888 	uxth.w	r8, r8
 80042d2:	f1b8 0f00 	cmp.w	r8, #0
 80042d6:	d1e4      	bne.n	80042a2 <ILI9341_FillRectangle+0x8e>
    for(y = h; y > 0; y--) {
 80042d8:	3d01      	subs	r5, #1
 80042da:	b2ad      	uxth	r5, r5
 80042dc:	e7de      	b.n	800429c <ILI9341_FillRectangle+0x88>
            }
        }
    }
    ILI9341_WriteData(data, sizeof(data));
 80042de:	4621      	mov	r1, r4
 80042e0:	4648      	mov	r0, r9
 80042e2:	f7ff fd85 	bl	8003df0 <ILI9341_WriteData>
    ILI9341_Unselect();
 80042e6:	f7ff fde1 	bl	8003eac <ILI9341_Unselect>
}
 80042ea:	370c      	adds	r7, #12
 80042ec:	46d5      	mov	sp, sl
 80042ee:	46bd      	mov	sp, r7
 80042f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f4:	40020c00 	.word	0x40020c00

080042f8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80042f8:	b507      	push	{r0, r1, r2, lr}
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80042fa:	2100      	movs	r1, #0
 80042fc:	9000      	str	r0, [sp, #0]
 80042fe:	23f0      	movs	r3, #240	; 0xf0
 8004300:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004304:	4608      	mov	r0, r1
 8004306:	f7ff ff85 	bl	8004214 <ILI9341_FillRectangle>
}
 800430a:	b003      	add	sp, #12
 800430c:	f85d fb04 	ldr.w	pc, [sp], #4

08004310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004314:	2230      	movs	r2, #48	; 0x30
 8004316:	2100      	movs	r1, #0
 8004318:	a80e      	add	r0, sp, #56	; 0x38
 800431a:	f001 fa25 	bl	8005768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800431e:	2214      	movs	r2, #20
 8004320:	2100      	movs	r1, #0
 8004322:	a803      	add	r0, sp, #12
 8004324:	f001 fa20 	bl	8005768 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004328:	2100      	movs	r1, #0
 800432a:	2218      	movs	r2, #24
 800432c:	a808      	add	r0, sp, #32
 800432e:	f001 fa1b 	bl	8005768 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	2400      	movs	r4, #0
 8004334:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <SystemClock_Config+0xa8>)
 8004336:	9401      	str	r4, [sp, #4]
 8004338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800433a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800434a:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <SystemClock_Config+0xac>)
 800434c:	9402      	str	r4, [sp, #8]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800435c:	9302      	str	r3, [sp, #8]
 800435e:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004364:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004366:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800436a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800436c:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLN = 192;
 800436e:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004370:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004372:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004374:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004376:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004378:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800437a:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 192;
 800437c:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800437e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004380:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004382:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004384:	f7fd fb82 	bl	8001a8c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004388:	230f      	movs	r3, #15
 800438a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800438c:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800438e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004392:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004394:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004396:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004398:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800439a:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800439c:	f7fd fd26 	bl	8001dec <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80043a0:	23c8      	movs	r3, #200	; 0xc8
 80043a2:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043a4:	a808      	add	r0, sp, #32
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80043a6:	2305      	movs	r3, #5
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80043a8:	9608      	str	r6, [sp, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80043aa:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80043ac:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043ae:	f7fd fdc7 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80043b2:	b01a      	add	sp, #104	; 0x68
 80043b4:	bd70      	pop	{r4, r5, r6, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	40007000 	.word	0x40007000

080043c0 <main>:
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b092      	sub	sp, #72	; 0x48
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043c4:	2400      	movs	r4, #0
 80043c6:	4dab      	ldr	r5, [pc, #684]	; (8004674 <main+0x2b4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80043c8:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 80046c0 <main+0x300>
  HAL_Init();
 80043cc:	f7fc f904 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 80043d0:	f7ff ff9e 	bl	8004310 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d4:	2214      	movs	r2, #20
 80043d6:	2100      	movs	r1, #0
 80043d8:	a809      	add	r0, sp, #36	; 0x24
 80043da:	f001 f9c5 	bl	8005768 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043de:	9401      	str	r4, [sp, #4]
 80043e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80043e2:	48a5      	ldr	r0, [pc, #660]	; (8004678 <main+0x2b8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043e4:	f043 0310 	orr.w	r3, r3, #16
 80043e8:	632b      	str	r3, [r5, #48]	; 0x30
 80043ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80043ec:	f003 0310 	and.w	r3, r3, #16
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043f4:	9402      	str	r4, [sp, #8]
 80043f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80043f8:	f043 0304 	orr.w	r3, r3, #4
 80043fc:	632b      	str	r3, [r5, #48]	; 0x30
 80043fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	9302      	str	r3, [sp, #8]
 8004406:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004408:	9403      	str	r4, [sp, #12]
 800440a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800440c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004410:	632b      	str	r3, [r5, #48]	; 0x30
 8004412:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	9303      	str	r3, [sp, #12]
 800441a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800441c:	9404      	str	r4, [sp, #16]
 800441e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	632b      	str	r3, [r5, #48]	; 0x30
 8004426:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	9304      	str	r3, [sp, #16]
 800442e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004430:	9405      	str	r4, [sp, #20]
 8004432:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004434:	f043 0302 	orr.w	r3, r3, #2
 8004438:	632b      	str	r3, [r5, #48]	; 0x30
 800443a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	9305      	str	r3, [sp, #20]
 8004442:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004444:	9406      	str	r4, [sp, #24]
 8004446:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004448:	f043 0308 	orr.w	r3, r3, #8
 800444c:	632b      	str	r3, [r5, #48]	; 0x30
 800444e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004456:	4622      	mov	r2, r4
 8004458:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800445a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800445c:	f7fc fbe0 	bl	8000c20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004460:	2201      	movs	r2, #1
 8004462:	4611      	mov	r1, r2
 8004464:	4885      	ldr	r0, [pc, #532]	; (800467c <main+0x2bc>)
 8004466:	f7fc fbdb 	bl	8000c20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ILI_CS_Pin|ILI_RESET_Pin|ILI_LED_Pin|ILI_DC_RS_Pin
 800446a:	4622      	mov	r2, r4
 800446c:	f64f 7110 	movw	r1, #65296	; 0xff10
 8004470:	4883      	ldr	r0, [pc, #524]	; (8004680 <main+0x2c0>)
 8004472:	f7fc fbd5 	bl	8000c20 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8004476:	f04f 0804 	mov.w	r8, #4
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800447a:	a909      	add	r1, sp, #36	; 0x24
 800447c:	487e      	ldr	r0, [pc, #504]	; (8004678 <main+0x2b8>)
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800447e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004482:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004484:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004486:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004488:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800448a:	f7fc faed 	bl	8000a68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800448e:	2308      	movs	r3, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004490:	a909      	add	r1, sp, #36	; 0x24
 8004492:	4879      	ldr	r0, [pc, #484]	; (8004678 <main+0x2b8>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004494:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004496:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004498:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449a:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800449c:	f7fc fae4 	bl	8000a68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80044a0:	2332      	movs	r3, #50	; 0x32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044a2:	a909      	add	r1, sp, #36	; 0x24
 80044a4:	4874      	ldr	r0, [pc, #464]	; (8004678 <main+0x2b8>)
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80044a6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80044a8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044ae:	f7fc fadb 	bl	8000a68 <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80044b2:	a909      	add	r1, sp, #36	; 0x24
 80044b4:	4871      	ldr	r0, [pc, #452]	; (800467c <main+0x2bc>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80044b6:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044b8:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044bc:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80044be:	f7fc fad3 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c2:	a909      	add	r1, sp, #36	; 0x24
 80044c4:	486f      	ldr	r0, [pc, #444]	; (8004684 <main+0x2c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80044c6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044ca:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ce:	f7fc facb 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI_CS_Pin ILI_RESET_Pin ILI_LED_Pin ILI_DC_RS_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = ILI_CS_Pin|ILI_RESET_Pin|ILI_LED_Pin|ILI_DC_RS_Pin
 80044d2:	f64f 7310 	movw	r3, #65296	; 0xff10
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044d6:	a909      	add	r1, sp, #36	; 0x24
 80044d8:	4869      	ldr	r0, [pc, #420]	; (8004680 <main+0x2c0>)
  GPIO_InitStruct.Pin = ILI_CS_Pin|ILI_RESET_Pin|ILI_LED_Pin|ILI_DC_RS_Pin
 80044da:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044dc:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e0:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044e2:	f7fc fac1 	bl	8000a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044e6:	a909      	add	r1, sp, #36	; 0x24
 80044e8:	4865      	ldr	r0, [pc, #404]	; (8004680 <main+0x2c0>)
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 80044ea:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044ec:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044f0:	f7fc faba 	bl	8000a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = STEPPER_STEP_Pin;
 80044f4:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044f6:	a909      	add	r1, sp, #36	; 0x24
 80044f8:	4861      	ldr	r0, [pc, #388]	; (8004680 <main+0x2c0>)
  GPIO_InitStruct.Pin = STEPPER_STEP_Pin;
 80044fa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044fc:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fe:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004500:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004502:	f7fc fab1 	bl	8000a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = STEPPER_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004506:	a909      	add	r1, sp, #36	; 0x24
 8004508:	485d      	ldr	r0, [pc, #372]	; (8004680 <main+0x2c0>)
  GPIO_InitStruct.Pin = STEPPER_DIR_Pin;
 800450a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800450e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004512:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004514:	f7fc faa8 	bl	8000a68 <HAL_GPIO_Init>


  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004518:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800451a:	a909      	add	r1, sp, #36	; 0x24
 800451c:	4858      	ldr	r0, [pc, #352]	; (8004680 <main+0x2c0>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800451e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004520:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004524:	f7fc faa0 	bl	8000a68 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004528:	9400      	str	r4, [sp, #0]
 800452a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800452c:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80046c4 <main+0x304>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004534:	632b      	str	r3, [r5, #48]	; 0x30
 8004536:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800453c:	4621      	mov	r1, r4
 800453e:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004540:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8004542:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004544:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8004546:	f7fc f899 	bl	800067c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800454a:	2039      	movs	r0, #57	; 0x39
 800454c:	f7fc f8ca 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8004550:	484d      	ldr	r0, [pc, #308]	; (8004688 <main+0x2c8>)
  hi2c1.Init.ClockSpeed = 100000;
 8004552:	4a4e      	ldr	r2, [pc, #312]	; (800468c <main+0x2cc>)
 8004554:	4b4e      	ldr	r3, [pc, #312]	; (8004690 <main+0x2d0>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004556:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8004558:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800455c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004560:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8004562:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004564:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004566:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004568:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800456a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800456c:	f7fc ffb2 	bl	80014d4 <HAL_I2C_Init>
  hi2s2.Instance = SPI2;
 8004570:	4848      	ldr	r0, [pc, #288]	; (8004694 <main+0x2d4>)
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8004572:	4b49      	ldr	r3, [pc, #292]	; (8004698 <main+0x2d8>)
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8004574:	f8c0 8014 	str.w	r8, [r0, #20]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8004578:	f44f 7500 	mov.w	r5, #512	; 0x200
 800457c:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8004580:	6084      	str	r4, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004582:	60c4      	str	r4, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8004584:	6104      	str	r4, [r0, #16]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8004586:	6184      	str	r4, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8004588:	61c4      	str	r4, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800458a:	6206      	str	r6, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800458c:	f7fd f846 	bl	800161c <HAL_I2S_Init>
  hi2s3.Instance = SPI3;
 8004590:	4842      	ldr	r0, [pc, #264]	; (800469c <main+0x2dc>)
 8004592:	4b43      	ldr	r3, [pc, #268]	; (80046a0 <main+0x2e0>)
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8004594:	6105      	str	r5, [r0, #16]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8004596:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800459a:	f8c0 8014 	str.w	r8, [r0, #20]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800459e:	6084      	str	r4, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80045a0:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80045a2:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80045a4:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80045a6:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80045a8:	f7fd f838 	bl	800161c <HAL_I2S_Init>
  hspi1.Instance = SPI1;
 80045ac:	483d      	ldr	r0, [pc, #244]	; (80046a4 <main+0x2e4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80045ae:	4b3e      	ldr	r3, [pc, #248]	; (80046a8 <main+0x2e8>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80045b0:	6185      	str	r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80045b2:	f04f 080a 	mov.w	r8, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80045b6:	f44f 7982 	mov.w	r9, #260	; 0x104
 80045ba:	e880 0208 	stmia.w	r0, {r3, r9}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80045be:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80045c0:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045c2:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045c4:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045c6:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045c8:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80045ca:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045cc:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80045ce:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045d2:	f7fd fded 	bl	80021b0 <HAL_SPI_Init>
  MX_USB_HOST_Init();
 80045d6:	f000 ff0f 	bl	80053f8 <MX_USB_HOST_Init>
  hspi4.Instance = SPI4;
 80045da:	4834      	ldr	r0, [pc, #208]	; (80046ac <main+0x2ec>)
 80045dc:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <main+0x2f0>)
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80045de:	6185      	str	r5, [r0, #24]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80045e0:	e880 0208 	stmia.w	r0, {r3, r9}
  htim2.Instance = TIM2;
 80045e4:	4d33      	ldr	r5, [pc, #204]	; (80046b4 <main+0x2f4>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80045e6:	6084      	str	r4, [r0, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80045e8:	60c4      	str	r4, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ea:	6104      	str	r4, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045ec:	6144      	str	r4, [r0, #20]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ee:	61c4      	str	r4, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045f0:	6204      	str	r4, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80045f2:	6244      	str	r4, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f4:	6284      	str	r4, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80045f6:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80045fa:	f7fd fdd9 	bl	80021b0 <HAL_SPI_Init>
  ILI_Init();
 80045fe:	f000 f91b 	bl	8004838 <ILI_Init>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004602:	2224      	movs	r2, #36	; 0x24
 8004604:	eb0d 0002 	add.w	r0, sp, r2
 8004608:	4621      	mov	r1, r4
 800460a:	f001 f8ad 	bl	8005768 <memset>
  htim2.Instance = TIM2;
 800460e:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
  htim2.Init.Period = 0xFFFFFFFF;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004616:	a909      	add	r1, sp, #36	; 0x24
 8004618:	4628      	mov	r0, r5
  htim2.Init.Period = 0xFFFFFFFF;
 800461a:	60eb      	str	r3, [r5, #12]
  htim2.Instance = TIM2;
 800461c:	f8c5 9000 	str.w	r9, [r5]
  htim2.Init.Prescaler = 0;
 8004620:	606c      	str	r4, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004622:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004624:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004626:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004628:	9407      	str	r4, [sp, #28]
 800462a:	9408      	str	r4, [sp, #32]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800462c:	9709      	str	r7, [sp, #36]	; 0x24
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800462e:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.IC1Filter = 10;
 8004630:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004634:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfig.IC2Filter = 10;
 8004636:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800463a:	f7fe f8ef 	bl	800281c <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800463e:	a907      	add	r1, sp, #28
 8004640:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004642:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004644:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004646:	f7fe f9d2 	bl	80029ee <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800464a:	4621      	mov	r1, r4
  TIM2->CR1 = 1;
 800464c:	f8c9 6000 	str.w	r6, [r9]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004650:	2210      	movs	r2, #16
 8004652:	a809      	add	r0, sp, #36	; 0x24
 8004654:	f001 f888 	bl	8005768 <memset>
  htim3.Instance = TIM3;
 8004658:	4d17      	ldr	r5, [pc, #92]	; (80046b8 <main+0x2f8>)
  htim3.Init.Prescaler = 48;
 800465a:	4918      	ldr	r1, [pc, #96]	; (80046bc <main+0x2fc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800465c:	9407      	str	r4, [sp, #28]
  htim3.Init.Prescaler = 48;
 800465e:	2330      	movs	r3, #48	; 0x30
 8004660:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004664:	4628      	mov	r0, r5
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004666:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004668:	9408      	str	r4, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800466a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 10;
 800466c:	f8c5 800c 	str.w	r8, [r5, #12]
 8004670:	e02a      	b.n	80046c8 <main+0x308>
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800
 8004678:	40021000 	.word	0x40021000
 800467c:	40020800 	.word	0x40020800
 8004680:	40020c00 	.word	0x40020c00
 8004684:	40020000 	.word	0x40020000
 8004688:	200000e4 	.word	0x200000e4
 800468c:	40005400 	.word	0x40005400
 8004690:	000186a0 	.word	0x000186a0
 8004694:	200002cc 	.word	0x200002cc
 8004698:	40003800 	.word	0x40003800
 800469c:	20000314 	.word	0x20000314
 80046a0:	40003c00 	.word	0x40003c00
 80046a4:	20000230 	.word	0x20000230
 80046a8:	40013000 	.word	0x40013000
 80046ac:	200001d8 	.word	0x200001d8
 80046b0:	40013400 	.word	0x40013400
 80046b4:	20000288 	.word	0x20000288
 80046b8:	20000138 	.word	0x20000138
 80046bc:	40000400 	.word	0x40000400
 80046c0:	10120000 	.word	0x10120000
 80046c4:	00017700 	.word	0x00017700
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046c8:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046ca:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046cc:	f7fe f88c 	bl	80027e8 <HAL_TIM_Base_Init>
 80046d0:	b930      	cbnz	r0, 80046e0 <main+0x320>
    __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	f06f 0201 	mvn.w	r2, #1
 80046d8:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim3);
 80046da:	4628      	mov	r0, r5
 80046dc:	f7fd ff80 	bl	80025e0 <HAL_TIM_Base_Start_IT>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046e4:	a909      	add	r1, sp, #36	; 0x24
 80046e6:	481e      	ldr	r0, [pc, #120]	; (8004760 <main+0x3a0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046e8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046ea:	f7fe f8ec 	bl	80028c6 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046ee:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046f0:	a907      	add	r1, sp, #28
 80046f2:	481b      	ldr	r0, [pc, #108]	; (8004760 <main+0x3a0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046f4:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046f6:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046f8:	f7fe f979 	bl	80029ee <HAL_TIMEx_MasterConfigSynchronization>
  init_display();
 80046fc:	f000 f8b8 	bl	8004870 <init_display>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8004700:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004704:	4817      	ldr	r0, [pc, #92]	; (8004764 <main+0x3a4>)
    display_menu(!HAL_GPIO_ReadPin(GPIOD, ENCODER_BUTTON_Pin));
 8004706:	4c17      	ldr	r4, [pc, #92]	; (8004764 <main+0x3a4>)
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8004708:	f7fc fa8f 	bl	8000c2a <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800470c:	2064      	movs	r0, #100	; 0x64
 800470e:	f7fb ff8f 	bl	8000630 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8004712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004716:	4813      	ldr	r0, [pc, #76]	; (8004764 <main+0x3a4>)
 8004718:	f7fc fa87 	bl	8000c2a <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800471c:	2064      	movs	r0, #100	; 0x64
 800471e:	f7fb ff87 	bl	8000630 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8004722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004726:	480f      	ldr	r0, [pc, #60]	; (8004764 <main+0x3a4>)
 8004728:	f7fc fa7f 	bl	8000c2a <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800472c:	2064      	movs	r0, #100	; 0x64
 800472e:	f7fb ff7f 	bl	8000630 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8004732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004736:	480b      	ldr	r0, [pc, #44]	; (8004764 <main+0x3a4>)
 8004738:	f7fc fa77 	bl	8000c2a <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800473c:	2064      	movs	r0, #100	; 0x64
 800473e:	f7fb ff77 	bl	8000630 <HAL_Delay>
    MX_USB_HOST_Process();
 8004742:	f000 fe79 	bl	8005438 <MX_USB_HOST_Process>
    display_menu(!HAL_GPIO_ReadPin(GPIOD, ENCODER_BUTTON_Pin));
 8004746:	2101      	movs	r1, #1
 8004748:	4620      	mov	r0, r4
 800474a:	f7fc fa63 	bl	8000c14 <HAL_GPIO_ReadPin>
 800474e:	fab0 f080 	clz	r0, r0
 8004752:	0940      	lsrs	r0, r0, #5
 8004754:	f000 fb14 	bl	8004d80 <display_menu>
    HAL_Delay(10);
 8004758:	200a      	movs	r0, #10
 800475a:	f7fb ff69 	bl	8000630 <HAL_Delay>
 800475e:	e7f0      	b.n	8004742 <main+0x382>
 8004760:	20000138 	.word	0x20000138
 8004764:	40020c00 	.word	0x40020c00

08004768 <Error_Handler>:
 8004768:	4770      	bx	lr
	...

0800476c <set_menu_ex>:
//	ILI9341_WriteString(0, 0, disp_str, Font_16x26, ILI9341_RED, ILI9341_WHITE);
//	HAL_Delay(500);
}

void set_menu_ex(void){
	systemState = Exit;
 800476c:	4b01      	ldr	r3, [pc, #4]	; (8004774 <set_menu_ex+0x8>)
 800476e:	2213      	movs	r2, #19
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	4770      	bx	lr
 8004774:	20000030 	.word	0x20000030

08004778 <set_menu0>:
}
void set_menu0(void){
	systemState = EditM1;
 8004778:	4b01      	ldr	r3, [pc, #4]	; (8004780 <set_menu0+0x8>)
 800477a:	2203      	movs	r2, #3
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	4770      	bx	lr
 8004780:	20000030 	.word	0x20000030

08004784 <set_menu1>:
}
void set_menu1(void){
	systemState = EditM2;
 8004784:	4b01      	ldr	r3, [pc, #4]	; (800478c <set_menu1+0x8>)
 8004786:	2204      	movs	r2, #4
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	4770      	bx	lr
 800478c:	20000030 	.word	0x20000030

08004790 <set_menu2>:
}
void set_menu2(void){
	systemState = EditM3;
 8004790:	4b01      	ldr	r3, [pc, #4]	; (8004798 <set_menu2+0x8>)
 8004792:	2205      	movs	r2, #5
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	4770      	bx	lr
 8004798:	20000030 	.word	0x20000030

0800479c <set_menu3>:
}
void set_menu3(void){
	systemState = EditM4;
 800479c:	4b01      	ldr	r3, [pc, #4]	; (80047a4 <set_menu3+0x8>)
 800479e:	2206      	movs	r2, #6
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	4770      	bx	lr
 80047a4:	20000030 	.word	0x20000030

080047a8 <set_menu4>:
}
void set_menu4(void){
	systemState = EditM5;
 80047a8:	4b01      	ldr	r3, [pc, #4]	; (80047b0 <set_menu4+0x8>)
 80047aa:	2207      	movs	r2, #7
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	4770      	bx	lr
 80047b0:	20000030 	.word	0x20000030

080047b4 <set_menu5>:
}
void set_menu5(void){
	systemState = EditM6;
 80047b4:	4b01      	ldr	r3, [pc, #4]	; (80047bc <set_menu5+0x8>)
 80047b6:	2208      	movs	r2, #8
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	4770      	bx	lr
 80047bc:	20000030 	.word	0x20000030

080047c0 <set_menu6>:
}
void set_menu6(void){
	systemState = EditM7;
 80047c0:	4b01      	ldr	r3, [pc, #4]	; (80047c8 <set_menu6+0x8>)
 80047c2:	2209      	movs	r2, #9
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	4770      	bx	lr
 80047c8:	20000030 	.word	0x20000030

080047cc <set_menu7>:
}
void set_menu7(void){
	systemState = EditM8;
 80047cc:	4b01      	ldr	r3, [pc, #4]	; (80047d4 <set_menu7+0x8>)
 80047ce:	220a      	movs	r2, #10
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	4770      	bx	lr
 80047d4:	20000030 	.word	0x20000030

080047d8 <set_menu8>:
}
void set_menu8(void){
	systemState = EditM9;
 80047d8:	4b01      	ldr	r3, [pc, #4]	; (80047e0 <set_menu8+0x8>)
 80047da:	220b      	movs	r2, #11
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	4770      	bx	lr
 80047e0:	20000030 	.word	0x20000030

080047e4 <set_menu9>:
}
void set_menu9(void){
	systemState = EditM10;
 80047e4:	4b01      	ldr	r3, [pc, #4]	; (80047ec <set_menu9+0x8>)
 80047e6:	220c      	movs	r2, #12
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	4770      	bx	lr
 80047ec:	20000030 	.word	0x20000030

080047f0 <set_menu10>:
}
void set_menu10(void){
	systemState = EditM11;
 80047f0:	4b01      	ldr	r3, [pc, #4]	; (80047f8 <set_menu10+0x8>)
 80047f2:	220d      	movs	r2, #13
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	4770      	bx	lr
 80047f8:	20000030 	.word	0x20000030

080047fc <set_menu11>:
}
void set_menu11(void){
	systemState = EditM12;
 80047fc:	4b01      	ldr	r3, [pc, #4]	; (8004804 <set_menu11+0x8>)
 80047fe:	220e      	movs	r2, #14
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	4770      	bx	lr
 8004804:	20000030 	.word	0x20000030

08004808 <set_menu12>:
}
void set_menu12(void){
	systemState = EditM13;
 8004808:	4b01      	ldr	r3, [pc, #4]	; (8004810 <set_menu12+0x8>)
 800480a:	220f      	movs	r2, #15
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	4770      	bx	lr
 8004810:	20000030 	.word	0x20000030

08004814 <set_menu13>:
}
void set_menu13(void){
	systemState = EditM14;
 8004814:	4b01      	ldr	r3, [pc, #4]	; (800481c <set_menu13+0x8>)
 8004816:	2210      	movs	r2, #16
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	4770      	bx	lr
 800481c:	20000030 	.word	0x20000030

08004820 <set_menu14>:
}
void set_menu14(void){
	systemState = EditM15;
 8004820:	4b01      	ldr	r3, [pc, #4]	; (8004828 <set_menu14+0x8>)
 8004822:	2211      	movs	r2, #17
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	4770      	bx	lr
 8004828:	20000030 	.word	0x20000030

0800482c <set_menu15>:
}
void set_menu15(void){
	systemState = EditM16;
 800482c:	4b01      	ldr	r3, [pc, #4]	; (8004834 <set_menu15+0x8>)
 800482e:	2212      	movs	r2, #18
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	4770      	bx	lr
 8004834:	20000030 	.word	0x20000030

08004838 <ILI_Init>:
	ILI9341_Init();
 8004838:	f7ff bb40 	b.w	8003ebc <ILI9341_Init>

0800483c <count_menuitem>:
}

void count_menuitem(menu_item * menu_to_count){
	nr_menuitem = 0;
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <count_menuitem+0x2c>)
 800483e:	2300      	movs	r3, #0
void count_menuitem(menu_item * menu_to_count){
 8004840:	b510      	push	{r4, lr}
	while(menu_to_count->next){
 8004842:	4619      	mov	r1, r3
	nr_menuitem = 0;
 8004844:	6013      	str	r3, [r2, #0]
	while(menu_to_count->next){
 8004846:	6900      	ldr	r0, [r0, #16]
 8004848:	1c5c      	adds	r4, r3, #1
 800484a:	b948      	cbnz	r0, 8004860 <count_menuitem+0x24>
 800484c:	b101      	cbz	r1, 8004850 <count_menuitem+0x14>
 800484e:	6013      	str	r3, [r2, #0]
		menu_to_count = menu_to_count->next;
		nr_menuitem++;
	}
	nr_menuitem++;
 8004850:	6813      	ldr	r3, [r2, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SetCounter(&htim2, 0);
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <count_menuitem+0x30>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	625a      	str	r2, [r3, #36]	; 0x24
 800485e:	bd10      	pop	{r4, pc}
 8004860:	4623      	mov	r3, r4
 8004862:	2101      	movs	r1, #1
 8004864:	e7ef      	b.n	8004846 <count_menuitem+0xa>
 8004866:	bf00      	nop
 8004868:	200003b4 	.word	0x200003b4
 800486c:	20000288 	.word	0x20000288

08004870 <init_display>:
}

void init_display(void){
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ILI9341_FillScreen(ILI9341_BLACK);
 8004874:	2000      	movs	r0, #0
void init_display(void){
 8004876:	b08f      	sub	sp, #60	; 0x3c
	ILI9341_FillScreen(ILI9341_BLACK);
 8004878:	f7ff fd3e 	bl	80042f8 <ILI9341_FillScreen>

	menu_00 = (menu_item * )malloc(sizeof(menu_item));
 800487c:	2024      	movs	r0, #36	; 0x24
 800487e:	f000 ff63 	bl	8005748 <malloc>
 8004882:	4bae      	ldr	r3, [pc, #696]	; (8004b3c <init_display+0x2cc>)
	menu_14 = (menu_item * )malloc(sizeof(menu_item));
	menu_15 = (menu_item * )malloc(sizeof(menu_item));

	menu_00_ex = (menu_item * )malloc(sizeof(menu_item));
	menu_01_ex = (menu_item * )malloc(sizeof(menu_item));
	menu_ex = (menu_item * )malloc(sizeof(menu_item));
 8004884:	4cae      	ldr	r4, [pc, #696]	; (8004b40 <init_display+0x2d0>)
	menu_00 = (menu_item * )malloc(sizeof(menu_item));
 8004886:	6018      	str	r0, [r3, #0]
 8004888:	4606      	mov	r6, r0
	menu_01 = (menu_item * )malloc(sizeof(menu_item));
 800488a:	2024      	movs	r0, #36	; 0x24
 800488c:	f000 ff5c 	bl	8005748 <malloc>
 8004890:	4bac      	ldr	r3, [pc, #688]	; (8004b44 <init_display+0x2d4>)
 8004892:	4605      	mov	r5, r0
 8004894:	6018      	str	r0, [r3, #0]
	menu_0 = (menu_item * )malloc(sizeof(menu_item));
 8004896:	2024      	movs	r0, #36	; 0x24
 8004898:	f000 ff56 	bl	8005748 <malloc>
 800489c:	4baa      	ldr	r3, [pc, #680]	; (8004b48 <init_display+0x2d8>)
 800489e:	900d      	str	r0, [sp, #52]	; 0x34
 80048a0:	6018      	str	r0, [r3, #0]
	menu_1 = (menu_item * )malloc(sizeof(menu_item));
 80048a2:	2024      	movs	r0, #36	; 0x24
 80048a4:	f000 ff50 	bl	8005748 <malloc>
 80048a8:	49a8      	ldr	r1, [pc, #672]	; (8004b4c <init_display+0x2dc>)
 80048aa:	900c      	str	r0, [sp, #48]	; 0x30
 80048ac:	6008      	str	r0, [r1, #0]
	menu_2 = (menu_item * )malloc(sizeof(menu_item));
 80048ae:	2024      	movs	r0, #36	; 0x24
 80048b0:	f000 ff4a 	bl	8005748 <malloc>
 80048b4:	49a6      	ldr	r1, [pc, #664]	; (8004b50 <init_display+0x2e0>)
 80048b6:	4683      	mov	fp, r0
 80048b8:	6008      	str	r0, [r1, #0]
	menu_3 = (menu_item * )malloc(sizeof(menu_item));
 80048ba:	2024      	movs	r0, #36	; 0x24
 80048bc:	f000 ff44 	bl	8005748 <malloc>
 80048c0:	49a4      	ldr	r1, [pc, #656]	; (8004b54 <init_display+0x2e4>)
 80048c2:	4682      	mov	sl, r0
 80048c4:	6008      	str	r0, [r1, #0]
	menu_4 = (menu_item * )malloc(sizeof(menu_item));
 80048c6:	2024      	movs	r0, #36	; 0x24
 80048c8:	f000 ff3e 	bl	8005748 <malloc>
 80048cc:	49a2      	ldr	r1, [pc, #648]	; (8004b58 <init_display+0x2e8>)
 80048ce:	4681      	mov	r9, r0
 80048d0:	6008      	str	r0, [r1, #0]
	menu_5 = (menu_item * )malloc(sizeof(menu_item));
 80048d2:	2024      	movs	r0, #36	; 0x24
 80048d4:	f000 ff38 	bl	8005748 <malloc>
 80048d8:	49a0      	ldr	r1, [pc, #640]	; (8004b5c <init_display+0x2ec>)
 80048da:	4680      	mov	r8, r0
 80048dc:	6008      	str	r0, [r1, #0]
	menu_6 = (menu_item * )malloc(sizeof(menu_item));
 80048de:	2024      	movs	r0, #36	; 0x24
 80048e0:	f000 ff32 	bl	8005748 <malloc>
 80048e4:	499e      	ldr	r1, [pc, #632]	; (8004b60 <init_display+0x2f0>)
 80048e6:	4607      	mov	r7, r0
 80048e8:	6008      	str	r0, [r1, #0]
	menu_7 = (menu_item * )malloc(sizeof(menu_item));
 80048ea:	2024      	movs	r0, #36	; 0x24
 80048ec:	f000 ff2c 	bl	8005748 <malloc>
 80048f0:	499c      	ldr	r1, [pc, #624]	; (8004b64 <init_display+0x2f4>)
 80048f2:	9001      	str	r0, [sp, #4]
 80048f4:	6008      	str	r0, [r1, #0]
	menu_8 = (menu_item * )malloc(sizeof(menu_item));
 80048f6:	2024      	movs	r0, #36	; 0x24
 80048f8:	f000 ff26 	bl	8005748 <malloc>
 80048fc:	499a      	ldr	r1, [pc, #616]	; (8004b68 <init_display+0x2f8>)
 80048fe:	9002      	str	r0, [sp, #8]
 8004900:	6008      	str	r0, [r1, #0]
	menu_9 = (menu_item * )malloc(sizeof(menu_item));
 8004902:	2024      	movs	r0, #36	; 0x24
 8004904:	f000 ff20 	bl	8005748 <malloc>
 8004908:	4998      	ldr	r1, [pc, #608]	; (8004b6c <init_display+0x2fc>)
 800490a:	9003      	str	r0, [sp, #12]
 800490c:	6008      	str	r0, [r1, #0]
	menu_10 = (menu_item * )malloc(sizeof(menu_item));
 800490e:	2024      	movs	r0, #36	; 0x24
 8004910:	f000 ff1a 	bl	8005748 <malloc>
 8004914:	4996      	ldr	r1, [pc, #600]	; (8004b70 <init_display+0x300>)
 8004916:	9004      	str	r0, [sp, #16]
 8004918:	6008      	str	r0, [r1, #0]
	menu_11 = (menu_item * )malloc(sizeof(menu_item));
 800491a:	2024      	movs	r0, #36	; 0x24
 800491c:	f000 ff14 	bl	8005748 <malloc>
 8004920:	4994      	ldr	r1, [pc, #592]	; (8004b74 <init_display+0x304>)
 8004922:	9005      	str	r0, [sp, #20]
 8004924:	6008      	str	r0, [r1, #0]
	menu_12 = (menu_item * )malloc(sizeof(menu_item));
 8004926:	2024      	movs	r0, #36	; 0x24
 8004928:	f000 ff0e 	bl	8005748 <malloc>
 800492c:	4992      	ldr	r1, [pc, #584]	; (8004b78 <init_display+0x308>)
 800492e:	9006      	str	r0, [sp, #24]
 8004930:	6008      	str	r0, [r1, #0]
	menu_13 = (menu_item * )malloc(sizeof(menu_item));
 8004932:	2024      	movs	r0, #36	; 0x24
 8004934:	f000 ff08 	bl	8005748 <malloc>
 8004938:	4990      	ldr	r1, [pc, #576]	; (8004b7c <init_display+0x30c>)
 800493a:	9007      	str	r0, [sp, #28]
 800493c:	6008      	str	r0, [r1, #0]
	menu_14 = (menu_item * )malloc(sizeof(menu_item));
 800493e:	2024      	movs	r0, #36	; 0x24
 8004940:	f000 ff02 	bl	8005748 <malloc>
 8004944:	498e      	ldr	r1, [pc, #568]	; (8004b80 <init_display+0x310>)
 8004946:	9008      	str	r0, [sp, #32]
 8004948:	6008      	str	r0, [r1, #0]
	menu_15 = (menu_item * )malloc(sizeof(menu_item));
 800494a:	2024      	movs	r0, #36	; 0x24
 800494c:	f000 fefc 	bl	8005748 <malloc>
 8004950:	498c      	ldr	r1, [pc, #560]	; (8004b84 <init_display+0x314>)
 8004952:	9009      	str	r0, [sp, #36]	; 0x24
 8004954:	6008      	str	r0, [r1, #0]
	menu_00_ex = (menu_item * )malloc(sizeof(menu_item));
 8004956:	2024      	movs	r0, #36	; 0x24
 8004958:	f000 fef6 	bl	8005748 <malloc>
 800495c:	4601      	mov	r1, r0
 800495e:	488a      	ldr	r0, [pc, #552]	; (8004b88 <init_display+0x318>)
 8004960:	910b      	str	r1, [sp, #44]	; 0x2c
 8004962:	6001      	str	r1, [r0, #0]
	menu_01_ex = (menu_item * )malloc(sizeof(menu_item));
 8004964:	2024      	movs	r0, #36	; 0x24
 8004966:	f000 feef 	bl	8005748 <malloc>
 800496a:	900a      	str	r0, [sp, #40]	; 0x28
 800496c:	4887      	ldr	r0, [pc, #540]	; (8004b8c <init_display+0x31c>)
 800496e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004970:	6003      	str	r3, [r0, #0]
	menu_ex = (menu_item * )malloc(sizeof(menu_item));
 8004972:	2024      	movs	r0, #36	; 0x24
 8004974:	f000 fee8 	bl	8005748 <malloc>
	menu->label = label;
 8004978:	f8df e27c 	ldr.w	lr, [pc, #636]	; 8004bf8 <init_display+0x388>
	menu_ex = (menu_item * )malloc(sizeof(menu_item));
 800497c:	6020      	str	r0, [r4, #0]
	menu->label = label;
 800497e:	f8c5 e000 	str.w	lr, [r5]
 8004982:	4c83      	ldr	r4, [pc, #524]	; (8004b90 <init_display+0x320>)
 8004984:	f8df e274 	ldr.w	lr, [pc, #628]	; 8004bfc <init_display+0x38c>
 8004988:	6034      	str	r4, [r6, #0]
 800498a:	f8c0 e000 	str.w	lr, [r0]
	menu->parent = parent;
 800498e:	2400      	movs	r4, #0
	menu->Callback = function;
 8004990:	f8df e26c 	ldr.w	lr, [pc, #620]	; 8004c00 <init_display+0x390>
	menu->child = child;
 8004994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	menu->next = next;
 8004996:	6128      	str	r0, [r5, #16]
	menu->parent = parent;
 8004998:	6044      	str	r4, [r0, #4]
	menu->child = child;
 800499a:	6084      	str	r4, [r0, #8]
	menu->previous = previous;
 800499c:	60c5      	str	r5, [r0, #12]
	menu->next = next;
 800499e:	6104      	str	r4, [r0, #16]
	menu->address = address;
 80049a0:	6184      	str	r4, [r0, #24]
	menu->Callback = function;
 80049a2:	f8c0 e014 	str.w	lr, [r0, #20]
	menu->type = type;
 80049a6:	f880 4020 	strb.w	r4, [r0, #32]
	menu->label = label;
 80049aa:	487a      	ldr	r0, [pc, #488]	; (8004b94 <init_display+0x324>)
	menu->next = next;
 80049ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	menu->child = child;
 80049ae:	60b2      	str	r2, [r6, #8]
	menu->parent = parent;
 80049b0:	e882 0041 	stmia.w	r2, {r0, r6}
	menu->address = address;
 80049b4:	4878      	ldr	r0, [pc, #480]	; (8004b98 <init_display+0x328>)
	menu->child = child;
 80049b6:	6094      	str	r4, [r2, #8]
	menu->previous = previous;
 80049b8:	60d4      	str	r4, [r2, #12]
	menu->next = next;
 80049ba:	6113      	str	r3, [r2, #16]
	menu->parent = parent;
 80049bc:	6074      	str	r4, [r6, #4]
	menu->previous = previous;
 80049be:	60f4      	str	r4, [r6, #12]
	menu->next = next;
 80049c0:	6135      	str	r5, [r6, #16]
	menu->address = address;
 80049c2:	61b4      	str	r4, [r6, #24]
	menu->Callback = function;
 80049c4:	6174      	str	r4, [r6, #20]
	menu->type = type;
 80049c6:	f886 4020 	strb.w	r4, [r6, #32]
	menu->parent = parent;
 80049ca:	606c      	str	r4, [r5, #4]
	menu->child = child;
 80049cc:	60af      	str	r7, [r5, #8]
	menu->previous = previous;
 80049ce:	60ee      	str	r6, [r5, #12]
	menu->address = address;
 80049d0:	61ac      	str	r4, [r5, #24]
	menu->Callback = function;
 80049d2:	616c      	str	r4, [r5, #20]
	menu->type = type;
 80049d4:	f885 4020 	strb.w	r4, [r5, #32]
	menu->address = address;
 80049d8:	6190      	str	r0, [r2, #24]
  return (*(__IO uint32_t *)address);
 80049da:	6800      	ldr	r0, [r0, #0]
	if (address > 0) menu->value = readFromEEPROM(address);
 80049dc:	61d0      	str	r0, [r2, #28]
	menu->Callback = function;
 80049de:	f8df e224 	ldr.w	lr, [pc, #548]	; 8004c04 <init_display+0x394>
 80049e2:	f8c2 e014 	str.w	lr, [r2, #20]
	menu->type = type;
 80049e6:	2001      	movs	r0, #1
 80049e8:	f882 0020 	strb.w	r0, [r2, #32]
	menu->previous = previous;
 80049ec:	60da      	str	r2, [r3, #12]
	menu->address = address;
 80049ee:	4a6b      	ldr	r2, [pc, #428]	; (8004b9c <init_display+0x32c>)
 80049f0:	619a      	str	r2, [r3, #24]
	menu->label = label;
 80049f2:	f8df e214 	ldr.w	lr, [pc, #532]	; 8004c08 <init_display+0x398>
  return (*(__IO uint32_t *)address);
 80049f6:	6812      	ldr	r2, [r2, #0]
	menu->label = label;
 80049f8:	f8c3 e000 	str.w	lr, [r3]
	menu->Callback = function;
 80049fc:	f8df e20c 	ldr.w	lr, [pc, #524]	; 8004c0c <init_display+0x39c>
	menu->parent = parent;
 8004a00:	605e      	str	r6, [r3, #4]
	menu->child = child;
 8004a02:	609c      	str	r4, [r3, #8]
	menu->next = next;
 8004a04:	f8c3 b010 	str.w	fp, [r3, #16]
	menu->Callback = function;
 8004a08:	f8c3 e014 	str.w	lr, [r3, #20]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004a0c:	61da      	str	r2, [r3, #28]
	menu->type = type;
 8004a0e:	f883 0020 	strb.w	r0, [r3, #32]
	menu->previous = previous;
 8004a12:	f8cb 300c 	str.w	r3, [fp, #12]
	menu->address = address;
 8004a16:	4b62      	ldr	r3, [pc, #392]	; (8004ba0 <init_display+0x330>)
 8004a18:	f8cb 3018 	str.w	r3, [fp, #24]
  return (*(__IO uint32_t *)address);
 8004a1c:	681b      	ldr	r3, [r3, #0]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004a1e:	f8cb 301c 	str.w	r3, [fp, #28]
	menu->label = label;
 8004a22:	4b60      	ldr	r3, [pc, #384]	; (8004ba4 <init_display+0x334>)
 8004a24:	4a60      	ldr	r2, [pc, #384]	; (8004ba8 <init_display+0x338>)
	menu->type = type;
 8004a26:	f88b 0020 	strb.w	r0, [fp, #32]
	menu->parent = parent;
 8004a2a:	e88a 0048 	stmia.w	sl, {r3, r6}
	menu->address = address;
 8004a2e:	4b5f      	ldr	r3, [pc, #380]	; (8004bac <init_display+0x33c>)
 8004a30:	f8ca 3018 	str.w	r3, [sl, #24]
	menu->parent = parent;
 8004a34:	e88b 0044 	stmia.w	fp, {r2, r6}
	menu->Callback = function;
 8004a38:	4a5d      	ldr	r2, [pc, #372]	; (8004bb0 <init_display+0x340>)
 8004a3a:	f8cb 2014 	str.w	r2, [fp, #20]
  return (*(__IO uint32_t *)address);
 8004a3e:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004a40:	4a5c      	ldr	r2, [pc, #368]	; (8004bb4 <init_display+0x344>)
 8004a42:	f8ca 2014 	str.w	r2, [sl, #20]
	menu->child = child;
 8004a46:	f8cb 4008 	str.w	r4, [fp, #8]
	menu->next = next;
 8004a4a:	f8cb a010 	str.w	sl, [fp, #16]
	menu->child = child;
 8004a4e:	f8ca 4008 	str.w	r4, [sl, #8]
	menu->previous = previous;
 8004a52:	f8ca b00c 	str.w	fp, [sl, #12]
	menu->next = next;
 8004a56:	f8ca 9010 	str.w	r9, [sl, #16]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004a5a:	f8ca 301c 	str.w	r3, [sl, #28]
	menu->label = label;
 8004a5e:	4b56      	ldr	r3, [pc, #344]	; (8004bb8 <init_display+0x348>)
	menu->next = next;
 8004a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
	menu->Callback = function;
 8004a62:	4a56      	ldr	r2, [pc, #344]	; (8004bbc <init_display+0x34c>)
	menu->label = label;
 8004a64:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8004c10 <init_display+0x3a0>
	menu->Callback = function;
 8004a68:	f8c9 2014 	str.w	r2, [r9, #20]
	menu->parent = parent;
 8004a6c:	e889 0048 	stmia.w	r9, {r3, r6}
	menu->address = address;
 8004a70:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <init_display+0x350>)
 8004a72:	f8c9 3018 	str.w	r3, [r9, #24]
  return (*(__IO uint32_t *)address);
 8004a76:	681b      	ldr	r3, [r3, #0]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004a78:	f8c9 301c 	str.w	r3, [r9, #28]
	menu->label = label;
 8004a7c:	4b51      	ldr	r3, [pc, #324]	; (8004bc4 <init_display+0x354>)
	menu->Callback = function;
 8004a7e:	4a52      	ldr	r2, [pc, #328]	; (8004bc8 <init_display+0x358>)
	menu->type = type;
 8004a80:	f88a 0020 	strb.w	r0, [sl, #32]
	menu->parent = parent;
 8004a84:	e888 0048 	stmia.w	r8, {r3, r6}
	menu->address = address;
 8004a88:	4b50      	ldr	r3, [pc, #320]	; (8004bcc <init_display+0x35c>)
 8004a8a:	f8c8 3018 	str.w	r3, [r8, #24]
  return (*(__IO uint32_t *)address);
 8004a8e:	681b      	ldr	r3, [r3, #0]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004a90:	f8c8 301c 	str.w	r3, [r8, #28]
	menu->label = label;
 8004a94:	4b4e      	ldr	r3, [pc, #312]	; (8004bd0 <init_display+0x360>)
 8004a96:	f8c1 c000 	str.w	ip, [r1]
	menu->type = type;
 8004a9a:	f04f 0e03 	mov.w	lr, #3
 8004a9e:	f881 e020 	strb.w	lr, [r1, #32]
 8004aa2:	f889 0020 	strb.w	r0, [r9, #32]
	menu->next = next;
 8004aa6:	f8c8 1010 	str.w	r1, [r8, #16]
	menu->Callback = function;
 8004aaa:	f8c8 2014 	str.w	r2, [r8, #20]
	menu->type = type;
 8004aae:	f888 0020 	strb.w	r0, [r8, #32]
	menu->parent = parent;
 8004ab2:	604e      	str	r6, [r1, #4]
	menu->child = child;
 8004ab4:	608c      	str	r4, [r1, #8]
	menu->previous = previous;
 8004ab6:	f8c1 800c 	str.w	r8, [r1, #12]
	menu->next = next;
 8004aba:	610c      	str	r4, [r1, #16]
	menu->address = address;
 8004abc:	618c      	str	r4, [r1, #24]
	menu->Callback = function;
 8004abe:	614c      	str	r4, [r1, #20]
	menu->parent = parent;
 8004ac0:	e887 0028 	stmia.w	r7, {r3, r5}
	menu->child = child;
 8004ac4:	f8c9 4008 	str.w	r4, [r9, #8]
	menu->previous = previous;
 8004ac8:	f8c9 a00c 	str.w	sl, [r9, #12]
	menu->next = next;
 8004acc:	f8c9 8010 	str.w	r8, [r9, #16]
	menu->child = child;
 8004ad0:	f8c8 4008 	str.w	r4, [r8, #8]
	menu->previous = previous;
 8004ad4:	f8c8 900c 	str.w	r9, [r8, #12]
	menu->child = child;
 8004ad8:	60bc      	str	r4, [r7, #8]
	menu->next = next;
 8004ada:	9b01      	ldr	r3, [sp, #4]
 8004adc:	613b      	str	r3, [r7, #16]
	menu->address = address;
 8004ade:	4b3d      	ldr	r3, [pc, #244]	; (8004bd4 <init_display+0x364>)
 8004ae0:	61bb      	str	r3, [r7, #24]
	menu->Callback = function;
 8004ae2:	4a3d      	ldr	r2, [pc, #244]	; (8004bd8 <init_display+0x368>)
  return (*(__IO uint32_t *)address);
 8004ae4:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004ae6:	617a      	str	r2, [r7, #20]
	menu->label = label;
 8004ae8:	9a01      	ldr	r2, [sp, #4]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004aea:	61fb      	str	r3, [r7, #28]
	menu->label = label;
 8004aec:	4b3b      	ldr	r3, [pc, #236]	; (8004bdc <init_display+0x36c>)
 8004aee:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004af0:	9b02      	ldr	r3, [sp, #8]
 8004af2:	6113      	str	r3, [r2, #16]
	menu->Callback = function;
 8004af4:	9901      	ldr	r1, [sp, #4]
	menu->address = address;
 8004af6:	4b3a      	ldr	r3, [pc, #232]	; (8004be0 <init_display+0x370>)
 8004af8:	6193      	str	r3, [r2, #24]
	menu->parent = parent;
 8004afa:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004afc:	6094      	str	r4, [r2, #8]
	menu->previous = previous;
 8004afe:	60d7      	str	r7, [r2, #12]
	menu->Callback = function;
 8004b00:	4a38      	ldr	r2, [pc, #224]	; (8004be4 <init_display+0x374>)
  return (*(__IO uint32_t *)address);
 8004b02:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004b04:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004b06:	9a02      	ldr	r2, [sp, #8]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004b08:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004b0a:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <init_display+0x378>)
 8004b0c:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	6113      	str	r3, [r2, #16]
	menu->address = address;
 8004b12:	4b36      	ldr	r3, [pc, #216]	; (8004bec <init_display+0x37c>)
	menu->previous = previous;
 8004b14:	60d1      	str	r1, [r2, #12]
	menu->address = address;
 8004b16:	6193      	str	r3, [r2, #24]
	menu->type = type;
 8004b18:	f881 0020 	strb.w	r0, [r1, #32]
	menu->Callback = function;
 8004b1c:	9902      	ldr	r1, [sp, #8]
	menu->parent = parent;
 8004b1e:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004b20:	6094      	str	r4, [r2, #8]
  return (*(__IO uint32_t *)address);
 8004b22:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004b24:	4a32      	ldr	r2, [pc, #200]	; (8004bf0 <init_display+0x380>)
	menu->type = type;
 8004b26:	f887 0020 	strb.w	r0, [r7, #32]
	menu->Callback = function;
 8004b2a:	614a      	str	r2, [r1, #20]
	menu->previous = previous;
 8004b2c:	60fc      	str	r4, [r7, #12]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004b2e:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004b30:	9a03      	ldr	r2, [sp, #12]
 8004b32:	4b30      	ldr	r3, [pc, #192]	; (8004bf4 <init_display+0x384>)
 8004b34:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004b36:	9b04      	ldr	r3, [sp, #16]
	menu->previous = previous;
 8004b38:	60d1      	str	r1, [r2, #12]
 8004b3a:	e06b      	b.n	8004c14 <init_display+0x3a4>
 8004b3c:	200003d8 	.word	0x200003d8
 8004b40:	20000368 	.word	0x20000368
 8004b44:	200003a0 	.word	0x200003a0
 8004b48:	200003ac 	.word	0x200003ac
 8004b4c:	200003e8 	.word	0x200003e8
 8004b50:	2000039c 	.word	0x2000039c
 8004b54:	200003c8 	.word	0x200003c8
 8004b58:	20000370 	.word	0x20000370
 8004b5c:	200003a8 	.word	0x200003a8
 8004b60:	200003d4 	.word	0x200003d4
 8004b64:	20000374 	.word	0x20000374
 8004b68:	200003c0 	.word	0x200003c0
 8004b6c:	20000364 	.word	0x20000364
 8004b70:	20000360 	.word	0x20000360
 8004b74:	200003e0 	.word	0x200003e0
 8004b78:	2000036c 	.word	0x2000036c
 8004b7c:	200003bc 	.word	0x200003bc
 8004b80:	200003e4 	.word	0x200003e4
 8004b84:	200003d0 	.word	0x200003d0
 8004b88:	20000378 	.word	0x20000378
 8004b8c:	200003dc 	.word	0x200003dc
 8004b90:	08007378 	.word	0x08007378
 8004b94:	08007393 	.word	0x08007393
 8004b98:	08010000 	.word	0x08010000
 8004b9c:	08010004 	.word	0x08010004
 8004ba0:	08010008 	.word	0x08010008
 8004ba4:	080073ab 	.word	0x080073ab
 8004ba8:	080073a3 	.word	0x080073a3
 8004bac:	0801000c 	.word	0x0801000c
 8004bb0:	08004791 	.word	0x08004791
 8004bb4:	0800479d 	.word	0x0800479d
 8004bb8:	080073b3 	.word	0x080073b3
 8004bbc:	080047a9 	.word	0x080047a9
 8004bc0:	08010010 	.word	0x08010010
 8004bc4:	080073bb 	.word	0x080073bb
 8004bc8:	080047b5 	.word	0x080047b5
 8004bcc:	08010014 	.word	0x08010014
 8004bd0:	080073cb 	.word	0x080073cb
 8004bd4:	08010018 	.word	0x08010018
 8004bd8:	080047c1 	.word	0x080047c1
 8004bdc:	080073d3 	.word	0x080073d3
 8004be0:	0801001c 	.word	0x0801001c
 8004be4:	080047cd 	.word	0x080047cd
 8004be8:	080073db 	.word	0x080073db
 8004bec:	08010020 	.word	0x08010020
 8004bf0:	080047d9 	.word	0x080047d9
 8004bf4:	080073e3 	.word	0x080073e3
 8004bf8:	08007381 	.word	0x08007381
 8004bfc:	0800738a 	.word	0x0800738a
 8004c00:	0800476d 	.word	0x0800476d
 8004c04:	08004779 	.word	0x08004779
 8004c08:	0800739b 	.word	0x0800739b
 8004c0c:	08004785 	.word	0x08004785
 8004c10:	080073c3 	.word	0x080073c3
	menu->next = next;
 8004c14:	6113      	str	r3, [r2, #16]
	menu->type = type;
 8004c16:	f881 0020 	strb.w	r0, [r1, #32]
	menu->address = address;
 8004c1a:	4b43      	ldr	r3, [pc, #268]	; (8004d28 <init_display+0x4b8>)
	menu->Callback = function;
 8004c1c:	9903      	ldr	r1, [sp, #12]
	menu->parent = parent;
 8004c1e:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004c20:	6094      	str	r4, [r2, #8]
	menu->address = address;
 8004c22:	6193      	str	r3, [r2, #24]
	menu->Callback = function;
 8004c24:	4a41      	ldr	r2, [pc, #260]	; (8004d2c <init_display+0x4bc>)
  return (*(__IO uint32_t *)address);
 8004c26:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004c28:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004c2a:	9a04      	ldr	r2, [sp, #16]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004c2c:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004c2e:	4b40      	ldr	r3, [pc, #256]	; (8004d30 <init_display+0x4c0>)
 8004c30:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004c32:	9b05      	ldr	r3, [sp, #20]
	menu->previous = previous;
 8004c34:	60d1      	str	r1, [r2, #12]
	menu->next = next;
 8004c36:	6113      	str	r3, [r2, #16]
	menu->type = type;
 8004c38:	f881 0020 	strb.w	r0, [r1, #32]
	menu->address = address;
 8004c3c:	4b3d      	ldr	r3, [pc, #244]	; (8004d34 <init_display+0x4c4>)
	menu->Callback = function;
 8004c3e:	9904      	ldr	r1, [sp, #16]
	menu->parent = parent;
 8004c40:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004c42:	6094      	str	r4, [r2, #8]
	menu->address = address;
 8004c44:	6193      	str	r3, [r2, #24]
	menu->Callback = function;
 8004c46:	4a3c      	ldr	r2, [pc, #240]	; (8004d38 <init_display+0x4c8>)
  return (*(__IO uint32_t *)address);
 8004c48:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004c4a:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004c4c:	9a05      	ldr	r2, [sp, #20]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004c4e:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004c50:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <init_display+0x4cc>)
	menu->type = type;
 8004c52:	f881 0020 	strb.w	r0, [r1, #32]
	menu->parent = parent;
 8004c56:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004c58:	6094      	str	r4, [r2, #8]
	menu->previous = previous;
 8004c5a:	60d1      	str	r1, [r2, #12]
	menu->label = label;
 8004c5c:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004c5e:	9b06      	ldr	r3, [sp, #24]
 8004c60:	6113      	str	r3, [r2, #16]
	menu->Callback = function;
 8004c62:	9905      	ldr	r1, [sp, #20]
	menu->address = address;
 8004c64:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <init_display+0x4d0>)
 8004c66:	6193      	str	r3, [r2, #24]
	menu->Callback = function;
 8004c68:	4a36      	ldr	r2, [pc, #216]	; (8004d44 <init_display+0x4d4>)
  return (*(__IO uint32_t *)address);
 8004c6a:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004c6c:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004c6e:	9a06      	ldr	r2, [sp, #24]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004c70:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004c72:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <init_display+0x4d8>)
 8004c74:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004c76:	9b07      	ldr	r3, [sp, #28]
	menu->previous = previous;
 8004c78:	60d1      	str	r1, [r2, #12]
	menu->next = next;
 8004c7a:	6113      	str	r3, [r2, #16]
	menu->type = type;
 8004c7c:	f881 0020 	strb.w	r0, [r1, #32]
	menu->address = address;
 8004c80:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <init_display+0x4dc>)
	menu->Callback = function;
 8004c82:	9906      	ldr	r1, [sp, #24]
	menu->address = address;
 8004c84:	6193      	str	r3, [r2, #24]
	menu->parent = parent;
 8004c86:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004c88:	6094      	str	r4, [r2, #8]
	menu->Callback = function;
 8004c8a:	4a31      	ldr	r2, [pc, #196]	; (8004d50 <init_display+0x4e0>)
  return (*(__IO uint32_t *)address);
 8004c8c:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004c8e:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004c90:	9a07      	ldr	r2, [sp, #28]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004c92:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004c94:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <init_display+0x4e4>)
 8004c96:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004c98:	9b08      	ldr	r3, [sp, #32]
 8004c9a:	6113      	str	r3, [r2, #16]
	menu->address = address;
 8004c9c:	4b2e      	ldr	r3, [pc, #184]	; (8004d58 <init_display+0x4e8>)
	menu->previous = previous;
 8004c9e:	60d1      	str	r1, [r2, #12]
	menu->address = address;
 8004ca0:	6193      	str	r3, [r2, #24]
	menu->type = type;
 8004ca2:	f881 0020 	strb.w	r0, [r1, #32]
	menu->Callback = function;
 8004ca6:	9907      	ldr	r1, [sp, #28]
	menu->parent = parent;
 8004ca8:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004caa:	6094      	str	r4, [r2, #8]
  return (*(__IO uint32_t *)address);
 8004cac:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004cae:	4a2b      	ldr	r2, [pc, #172]	; (8004d5c <init_display+0x4ec>)
 8004cb0:	614a      	str	r2, [r1, #20]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004cb2:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004cb4:	9a08      	ldr	r2, [sp, #32]
 8004cb6:	4b2a      	ldr	r3, [pc, #168]	; (8004d60 <init_display+0x4f0>)
 8004cb8:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
	menu->previous = previous;
 8004cbc:	60d1      	str	r1, [r2, #12]
	menu->next = next;
 8004cbe:	6113      	str	r3, [r2, #16]
	menu->type = type;
 8004cc0:	f881 0020 	strb.w	r0, [r1, #32]
	menu->address = address;
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <init_display+0x4f4>)
	menu->Callback = function;
 8004cc6:	9908      	ldr	r1, [sp, #32]
	menu->address = address;
 8004cc8:	6193      	str	r3, [r2, #24]
	menu->parent = parent;
 8004cca:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004ccc:	6094      	str	r4, [r2, #8]
	menu->Callback = function;
 8004cce:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <init_display+0x4f8>)
  return (*(__IO uint32_t *)address);
 8004cd0:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004cd2:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
	if (address > 0) menu->value = readFromEEPROM(address);
 8004cd6:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004cd8:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <init_display+0x4fc>)
 8004cda:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cde:	6113      	str	r3, [r2, #16]
	menu->address = address;
 8004ce0:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <init_display+0x500>)
	menu->previous = previous;
 8004ce2:	60d1      	str	r1, [r2, #12]
	menu->address = address;
 8004ce4:	6193      	str	r3, [r2, #24]
	menu->type = type;
 8004ce6:	f881 0020 	strb.w	r0, [r1, #32]
	menu->Callback = function;
 8004cea:	9909      	ldr	r1, [sp, #36]	; 0x24
  return (*(__IO uint32_t *)address);
 8004cec:	681b      	ldr	r3, [r3, #0]
	menu->parent = parent;
 8004cee:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004cf0:	6094      	str	r4, [r2, #8]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004cf2:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	menu->Callback = function;
 8004cf6:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <init_display+0x504>)
 8004cf8:	614a      	str	r2, [r1, #20]
	menu->previous = previous;
 8004cfa:	461a      	mov	r2, r3
	menu->label = label;
 8004cfc:	f8c3 c000 	str.w	ip, [r3]
	menu->parent = parent;
 8004d00:	605d      	str	r5, [r3, #4]
	menu->child = child;
 8004d02:	609c      	str	r4, [r3, #8]
	create_menu(menu_13, "Menu 14", menu_01, NULL, menu_12, menu_14, 0x08010034, &set_menu13, numeric);
	create_menu(menu_14, "Menu 15", menu_01, NULL, menu_13, menu_15, 0x08010038, &set_menu14, numeric);
	create_menu(menu_15, "Menu 16", menu_01, NULL, menu_14, menu_01_ex, 0x0801003C, &set_menu15, numeric);
	create_menu(menu_01_ex, "Exit   ", menu_01, NULL, menu_15, NULL, 0, NULL, exit_menu);

	display_menu_head = menu_00;
 8004d04:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <init_display+0x508>)
	menu->type = type;
 8004d06:	f881 0020 	strb.w	r0, [r1, #32]
	menu->previous = previous;
 8004d0a:	60d1      	str	r1, [r2, #12]
	count_menuitem(display_menu_head);
 8004d0c:	4630      	mov	r0, r6
	menu->next = next;
 8004d0e:	6114      	str	r4, [r2, #16]
	menu->address = address;
 8004d10:	6194      	str	r4, [r2, #24]
	menu->Callback = function;
 8004d12:	6154      	str	r4, [r2, #20]
	menu->type = type;
 8004d14:	f882 e020 	strb.w	lr, [r2, #32]
	display_menu_head = menu_00;
 8004d18:	601e      	str	r6, [r3, #0]
	count_menuitem(display_menu_head);
 8004d1a:	f7ff fd8f 	bl	800483c <count_menuitem>
	parent_menu_encoder_state = 0;
 8004d1e:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <init_display+0x50c>)
 8004d20:	601c      	str	r4, [r3, #0]

}
 8004d22:	b00f      	add	sp, #60	; 0x3c
 8004d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d28:	08010024 	.word	0x08010024
 8004d2c:	080047e5 	.word	0x080047e5
 8004d30:	080073eb 	.word	0x080073eb
 8004d34:	08010028 	.word	0x08010028
 8004d38:	080047f1 	.word	0x080047f1
 8004d3c:	080073f3 	.word	0x080073f3
 8004d40:	0801002c 	.word	0x0801002c
 8004d44:	080047fd 	.word	0x080047fd
 8004d48:	080073fb 	.word	0x080073fb
 8004d4c:	08010030 	.word	0x08010030
 8004d50:	08004809 	.word	0x08004809
 8004d54:	08007403 	.word	0x08007403
 8004d58:	08010034 	.word	0x08010034
 8004d5c:	08004815 	.word	0x08004815
 8004d60:	0800740b 	.word	0x0800740b
 8004d64:	08010038 	.word	0x08010038
 8004d68:	08004821 	.word	0x08004821
 8004d6c:	08007413 	.word	0x08007413
 8004d70:	0801003c 	.word	0x0801003c
 8004d74:	0800482d 	.word	0x0800482d
 8004d78:	200003b0 	.word	0x200003b0
 8004d7c:	200003cc 	.word	0x200003cc

08004d80 <display_menu>:
	}

	buttonDown = (button_state == 1);
}

uint8_t display_menu(GPIO_PinState button_state){
 8004d80:	b500      	push	{lr}


//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_1);
//	render_menu(display_menu_head, button_state);
	char disp_str[20];
	encoder_pos_raw = __HAL_TIM_GetCounter(&htim2);
 8004d82:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <display_menu+0x3c>)
 8004d84:	4a0e      	ldr	r2, [pc, #56]	; (8004dc0 <display_menu+0x40>)
 8004d86:	681b      	ldr	r3, [r3, #0]
uint8_t display_menu(GPIO_PinState button_state){
 8004d88:	b08b      	sub	sp, #44	; 0x2c
	encoder_pos_raw = __HAL_TIM_GetCounter(&htim2);
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	6013      	str	r3, [r2, #0]
	snprintf(disp_str, sizeof(disp_str), "%10lu", (encoder_pos_raw));
 8004d8e:	2114      	movs	r1, #20
 8004d90:	eb0d 0001 	add.w	r0, sp, r1
 8004d94:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <display_menu+0x44>)
 8004d96:	f000 fdab 	bl	80058f0 <sniprintf>
	ILI9341_WriteString(0, 0, disp_str, Font_16x26, ILI9341_BLACK, ILI9341_WHITE);
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <display_menu+0x48>)
 8004d9e:	9101      	str	r1, [sp, #4]
 8004da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da4:	9202      	str	r2, [sp, #8]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	9200      	str	r2, [sp, #0]
 8004daa:	4608      	mov	r0, r1
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	aa05      	add	r2, sp, #20
 8004db0:	f7ff f9a2 	bl	80040f8 <ILI9341_WriteString>

}
 8004db4:	b00b      	add	sp, #44	; 0x2c
 8004db6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dba:	bf00      	nop
 8004dbc:	20000288 	.word	0x20000288
 8004dc0:	200000c4 	.word	0x200000c4
 8004dc4:	08007372 	.word	0x08007372
 8004dc8:	20000028 	.word	0x20000028

08004dcc <incrementCurrentPosition>:
    desiredPosition = steps;
}

void incrementCurrentPosition(int32_t increment)
{
    currentPosition += increment;
 8004dcc:	4a02      	ldr	r2, [pc, #8]	; (8004dd8 <incrementCurrentPosition+0xc>)
 8004dce:	6813      	ldr	r3, [r2, #0]
 8004dd0:	4418      	add	r0, r3
 8004dd2:	6010      	str	r0, [r2, #0]
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	200003fc 	.word	0x200003fc

08004ddc <feedRatio>:
}

int32_t feedRatio(uint32_t count)
{
#ifdef USE_FLOATING_POINT
    return ((float)count) * feed * feedDirection;
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <feedRatio+0x30>)
 8004dde:	ee07 0a90 	vmov	s15, r0
 8004de2:	ed93 7a00 	vldr	s14, [r3]
 8004de6:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <feedRatio+0x34>)
 8004de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004df0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004df4:	ee07 3a90 	vmov	s15, r3
 8004df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
#else // USE_FLOATING_POINT
    return ((long long)count) * feed->numerator / feed->denominator * feedDirection;
#endif // USE_FLOATING_POINT
}
 8004e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e04:	ee17 0a90 	vmov	r0, s15
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000034 	.word	0x20000034
 8004e10:	20000038 	.word	0x20000038

08004e14 <HAL_TIM_PeriodElapsedCallback>:

// Timer update interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


    uint32_t spindlePosition = __HAL_TIM_GetCounter(&htim2);
 8004e16:	4b46      	ldr	r3, [pc, #280]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x11c>)
    // calculate the desired stepper position
    int32_t desiredSteps = feedRatio(spindlePosition);
    setDesiredPosition(desiredSteps);

    // compensate for encoder overflow/underflow
    if( spindlePosition < previousSpindlePosition && previousSpindlePosition - spindlePosition > _ENCODER_MAX_COUNT/2 ) {
 8004e18:	4d46      	ldr	r5, [pc, #280]	; (8004f34 <HAL_TIM_PeriodElapsedCallback+0x120>)
    uint32_t spindlePosition = __HAL_TIM_GetCounter(&htim2);
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    int32_t desiredSteps = feedRatio(spindlePosition);
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7ff ffdc 	bl	8004ddc <feedRatio>
    if( spindlePosition < previousSpindlePosition && previousSpindlePosition - spindlePosition > _ENCODER_MAX_COUNT/2 ) {
 8004e24:	682b      	ldr	r3, [r5, #0]
    desiredPosition = steps;
 8004e26:	4944      	ldr	r1, [pc, #272]	; (8004f38 <HAL_TIM_PeriodElapsedCallback+0x124>)
    if( spindlePosition < previousSpindlePosition && previousSpindlePosition - spindlePosition > _ENCODER_MAX_COUNT/2 ) {
 8004e28:	429c      	cmp	r4, r3
    int32_t desiredSteps = feedRatio(spindlePosition);
 8004e2a:	4606      	mov	r6, r0
    desiredPosition = steps;
 8004e2c:	6008      	str	r0, [r1, #0]
    if( spindlePosition < previousSpindlePosition && previousSpindlePosition - spindlePosition > _ENCODER_MAX_COUNT/2 ) {
 8004e2e:	d20a      	bcs.n	8004e46 <HAL_TIM_PeriodElapsedCallback+0x32>
 8004e30:	1b1b      	subs	r3, r3, r4
 8004e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e36:	d306      	bcc.n	8004e46 <HAL_TIM_PeriodElapsedCallback+0x32>
        incrementCurrentPosition(-1 * feedRatio(_ENCODER_MAX_COUNT));
 8004e38:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004e3c:	f7ff ffce 	bl	8004ddc <feedRatio>
 8004e40:	4240      	negs	r0, r0
 8004e42:	f7ff ffc3 	bl	8004dcc <incrementCurrentPosition>
    }
    if( spindlePosition > previousSpindlePosition && spindlePosition - previousSpindlePosition > _ENCODER_MAX_COUNT/2 ) {
 8004e46:	682b      	ldr	r3, [r5, #0]
 8004e48:	429c      	cmp	r4, r3
 8004e4a:	d909      	bls.n	8004e60 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8004e4c:	1ae3      	subs	r3, r4, r3
 8004e4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e52:	d305      	bcc.n	8004e60 <HAL_TIM_PeriodElapsedCallback+0x4c>
        incrementCurrentPosition(feedRatio(_ENCODER_MAX_COUNT));
 8004e54:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004e58:	f7ff ffc0 	bl	8004ddc <feedRatio>
 8004e5c:	f7ff ffb6 	bl	8004dcc <incrementCurrentPosition>
    }

    // if the feed or direction changed, reset sync to avoid a big step
    if( feed != previousFeed || feedDirection != previousFeedDirection) {
 8004e60:	4b36      	ldr	r3, [pc, #216]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004e62:	4837      	ldr	r0, [pc, #220]	; (8004f40 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004e64:	edd3 7a00 	vldr	s15, [r3]
 8004e68:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004e6a:	4a37      	ldr	r2, [pc, #220]	; (8004f48 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004e6c:	ed93 7a00 	vldr	s14, [r3]
 8004e70:	eef4 7a47 	vcmp.f32	s15, s14
 8004e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e78:	d105      	bne.n	8004e86 <HAL_TIM_PeriodElapsedCallback+0x72>
 8004e7a:	f9b0 e000 	ldrsh.w	lr, [r0]
 8004e7e:	f9b2 7000 	ldrsh.w	r7, [r2]
 8004e82:	45be      	cmp	lr, r7
 8004e84:	d001      	beq.n	8004e8a <HAL_TIM_PeriodElapsedCallback+0x76>
    currentPosition = position;
 8004e86:	4f31      	ldr	r7, [pc, #196]	; (8004f4c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004e88:	603e      	str	r6, [r7, #0]
    }

    // remember values for next time
    previousSpindlePosition = spindlePosition;
    previousFeedDirection = feedDirection;
    previousFeed = feed;
 8004e8a:	edc3 7a00 	vstr	s15, [r3]



    if(enabled) {
 8004e8e:	4b30      	ldr	r3, [pc, #192]	; (8004f50 <HAL_TIM_PeriodElapsedCallback+0x13c>)
    previousFeedDirection = feedDirection;
 8004e90:	8800      	ldrh	r0, [r0, #0]
    if(enabled) {
 8004e92:	781b      	ldrb	r3, [r3, #0]
    previousSpindlePosition = spindlePosition;
 8004e94:	602c      	str	r4, [r5, #0]
    previousFeedDirection = feedDirection;
 8004e96:	8010      	strh	r0, [r2, #0]
    if(enabled) {
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d044      	beq.n	8004f26 <HAL_TIM_PeriodElapsedCallback+0x112>

        switch(state) {
 8004e9c:	4c2d      	ldr	r4, [pc, #180]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004e9e:	8823      	ldrh	r3, [r4, #0]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d843      	bhi.n	8004f2c <HAL_TIM_PeriodElapsedCallback+0x118>
 8004ea4:	e8df f003 	tbb	[pc, r3]
 8004ea8:	352b1702 	.word	0x352b1702

        case 0:
            // Step = 0; Dir = 0
            if( desiredPosition < currentPosition ) {
 8004eac:	4b27      	ldr	r3, [pc, #156]	; (8004f4c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004eae:	680a      	ldr	r2, [r1, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	da07      	bge.n	8004ec6 <HAL_TIM_PeriodElapsedCallback+0xb2>
            	HAL_GPIO_WritePin(GPIOD, STEPPER_STEP_Pin, GPIO_PIN_SET);
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	2102      	movs	r1, #2
 8004eba:	4827      	ldr	r0, [pc, #156]	; (8004f58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004ebc:	f7fb feb0 	bl	8000c20 <HAL_GPIO_WritePin>
                state = 2;
 8004ec0:	2302      	movs	r3, #2
        case 3:
            // Step = 1; Dir = 1
//            GPIO_CLEAR_STEP;
            HAL_GPIO_WritePin(GPIOD, STEPPER_STEP_Pin, GPIO_PIN_RESET);
            currentPosition++;
            state = 1;
 8004ec2:	8023      	strh	r3, [r4, #0]
            break;
 8004ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if(desiredPosition > currentPosition) {
 8004ec6:	dd31      	ble.n	8004f2c <HAL_TIM_PeriodElapsedCallback+0x118>
                HAL_GPIO_WritePin(GPIOD, STEPPER_DIR_Pin, GPIO_PIN_SET);
 8004ec8:	2201      	movs	r2, #1
 8004eca:	2104      	movs	r1, #4
 8004ecc:	4822      	ldr	r0, [pc, #136]	; (8004f58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004ece:	f7fb fea7 	bl	8000c20 <HAL_GPIO_WritePin>
            state = 1;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e7f5      	b.n	8004ec2 <HAL_TIM_PeriodElapsedCallback+0xae>
            if( desiredPosition > currentPosition ) {
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004ed8:	680a      	ldr	r2, [r1, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	dd06      	ble.n	8004eee <HAL_TIM_PeriodElapsedCallback+0xda>
                HAL_GPIO_WritePin(GPIOD, STEPPER_STEP_Pin, GPIO_PIN_SET);
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	2102      	movs	r1, #2
 8004ee4:	481c      	ldr	r0, [pc, #112]	; (8004f58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004ee6:	f7fb fe9b 	bl	8000c20 <HAL_GPIO_WritePin>
                state = 3;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e7e9      	b.n	8004ec2 <HAL_TIM_PeriodElapsedCallback+0xae>
            else if( desiredPosition < currentPosition ) {
 8004eee:	da1d      	bge.n	8004f2c <HAL_TIM_PeriodElapsedCallback+0x118>
                HAL_GPIO_WritePin(GPIOD, STEPPER_DIR_Pin, GPIO_PIN_RESET);
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2104      	movs	r1, #4
 8004ef4:	4818      	ldr	r0, [pc, #96]	; (8004f58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004ef6:	f7fb fe93 	bl	8000c20 <HAL_GPIO_WritePin>
            state = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e7e1      	b.n	8004ec2 <HAL_TIM_PeriodElapsedCallback+0xae>
            HAL_GPIO_WritePin(GPIOD, STEPPER_STEP_Pin, GPIO_PIN_RESET);
 8004efe:	2200      	movs	r2, #0
 8004f00:	2102      	movs	r1, #2
 8004f02:	4815      	ldr	r0, [pc, #84]	; (8004f58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f04:	f7fb fe8c 	bl	8000c20 <HAL_GPIO_WritePin>
            currentPosition--;
 8004f08:	4a10      	ldr	r2, [pc, #64]	; (8004f4c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004f0a:	6813      	ldr	r3, [r2, #0]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	e7f3      	b.n	8004efa <HAL_TIM_PeriodElapsedCallback+0xe6>
            HAL_GPIO_WritePin(GPIOD, STEPPER_STEP_Pin, GPIO_PIN_RESET);
 8004f12:	2200      	movs	r2, #0
 8004f14:	2102      	movs	r1, #2
 8004f16:	4810      	ldr	r0, [pc, #64]	; (8004f58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f18:	f7fb fe82 	bl	8000c20 <HAL_GPIO_WritePin>
            currentPosition++;
 8004f1c:	4a0b      	ldr	r2, [pc, #44]	; (8004f4c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004f1e:	6813      	ldr	r3, [r2, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	e7d5      	b.n	8004ed2 <HAL_TIM_PeriodElapsedCallback+0xbe>
        }

    } else {
        // not enabled; just keep current position in sync
        currentPosition = desiredPosition;
 8004f26:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004f28:	680a      	ldr	r2, [r1, #0]
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000288 	.word	0x20000288
 8004f34:	200003f4 	.word	0x200003f4
 8004f38:	20000400 	.word	0x20000400
 8004f3c:	20000034 	.word	0x20000034
 8004f40:	20000038 	.word	0x20000038
 8004f44:	200003f0 	.word	0x200003f0
 8004f48:	200003fa 	.word	0x200003fa
 8004f4c:	200003fc 	.word	0x200003fc
 8004f50:	20000031 	.word	0x20000031
 8004f54:	200003f8 	.word	0x200003f8
 8004f58:	40020c00 	.word	0x40020c00

08004f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f5c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <HAL_MspInit+0x3c>)
 8004f60:	2100      	movs	r1, #0
 8004f62:	9100      	str	r1, [sp, #0]
 8004f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f6a:	645a      	str	r2, [r3, #68]	; 0x44
 8004f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004f72:	9200      	str	r2, [sp, #0]
 8004f74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f76:	9101      	str	r1, [sp, #4]
 8004f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004f88:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f8a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004f8c:	f7fb fb64 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f90:	b003      	add	sp, #12
 8004f92:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f96:	bf00      	nop
 8004f98:	40023800 	.word	0x40023800

08004f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f9c:	b530      	push	{r4, r5, lr}
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa2:	2214      	movs	r2, #20
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	a803      	add	r0, sp, #12
 8004fa8:	f000 fbde 	bl	8005768 <memset>
  if(hi2c->Instance==I2C1)
 8004fac:	6822      	ldr	r2, [r4, #0]
 8004fae:	4b14      	ldr	r3, [pc, #80]	; (8005000 <HAL_I2C_MspInit+0x64>)
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d122      	bne.n	8004ffa <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb4:	4c13      	ldr	r4, [pc, #76]	; (8005004 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fb6:	4814      	ldr	r0, [pc, #80]	; (8005008 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb8:	2500      	movs	r5, #0
 8004fba:	9501      	str	r5, [sp, #4]
 8004fbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fbe:	f043 0302 	orr.w	r3, r3, #2
 8004fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8004fc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004fce:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004fd2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fd4:	2312      	movs	r3, #18
 8004fd6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fdc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004fde:	2304      	movs	r3, #4
 8004fe0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe2:	f7fb fd41 	bl	8000a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fe6:	9502      	str	r5, [sp, #8]
 8004fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fee:	6423      	str	r3, [r4, #64]	; 0x40
 8004ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff6:	9302      	str	r3, [sp, #8]
 8004ff8:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ffa:	b009      	add	sp, #36	; 0x24
 8004ffc:	bd30      	pop	{r4, r5, pc}
 8004ffe:	bf00      	nop
 8005000:	40005400 	.word	0x40005400
 8005004:	40023800 	.word	0x40023800
 8005008:	40020400 	.word	0x40020400

0800500c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4604      	mov	r4, r0
 8005010:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005012:	2214      	movs	r2, #20
 8005014:	2100      	movs	r1, #0
 8005016:	a807      	add	r0, sp, #28
 8005018:	f000 fba6 	bl	8005768 <memset>
  if(hi2s->Instance==SPI2)
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	4a3e      	ldr	r2, [pc, #248]	; (8005118 <HAL_I2S_MspInit+0x10c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d141      	bne.n	80050a8 <HAL_I2S_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005024:	4b3d      	ldr	r3, [pc, #244]	; (800511c <HAL_I2S_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005026:	483e      	ldr	r0, [pc, #248]	; (8005120 <HAL_I2S_MspInit+0x114>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005028:	2400      	movs	r4, #0
 800502a:	9401      	str	r4, [sp, #4]
 800502c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800502e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005032:	641a      	str	r2, [r3, #64]	; 0x40
 8005034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005036:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800503e:	9402      	str	r4, [sp, #8]
 8005040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005042:	f042 0204 	orr.w	r2, r2, #4
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
 8005048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800504a:	f002 0204 	and.w	r2, r2, #4
 800504e:	9202      	str	r2, [sp, #8]
 8005050:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005052:	9403      	str	r4, [sp, #12]
 8005054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005056:	f042 0202 	orr.w	r2, r2, #2
 800505a:	631a      	str	r2, [r3, #48]	; 0x30
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	9303      	str	r3, [sp, #12]
 8005064:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005066:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005068:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800506a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800506c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800506e:	2306      	movs	r3, #6
 8005070:	930b      	str	r3, [sp, #44]	; 0x2c

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005072:	2605      	movs	r6, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005074:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005076:	f7fb fcf7 	bl	8000a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800507a:	2308      	movs	r3, #8
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800507c:	a907      	add	r1, sp, #28
 800507e:	4828      	ldr	r0, [pc, #160]	; (8005120 <HAL_I2S_MspInit+0x114>)
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8005080:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005082:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005084:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005086:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005088:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800508a:	f7fb fced 	bl	8000a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800508e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005092:	4824      	ldr	r0, [pc, #144]	; (8005124 <HAL_I2S_MspInit+0x118>)
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8005094:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005096:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005098:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800509a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800509c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050a0:	f7fb fce2 	bl	8000a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80050a4:	b00c      	add	sp, #48	; 0x30
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
  else if(hi2s->Instance==SPI3)
 80050a8:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <HAL_I2S_MspInit+0x11c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d1fa      	bne.n	80050a4 <HAL_I2S_MspInit+0x98>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80050ae:	4b1b      	ldr	r3, [pc, #108]	; (800511c <HAL_I2S_MspInit+0x110>)
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80050b0:	481e      	ldr	r0, [pc, #120]	; (800512c <HAL_I2S_MspInit+0x120>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80050b2:	2400      	movs	r4, #0
 80050b4:	9404      	str	r4, [sp, #16]
 80050b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40
 80050be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050c0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80050c4:	9204      	str	r2, [sp, #16]
 80050c6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c8:	9405      	str	r4, [sp, #20]
 80050ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
 80050d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d4:	f002 0201 	and.w	r2, r2, #1
 80050d8:	9205      	str	r2, [sp, #20]
 80050da:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050dc:	9406      	str	r4, [sp, #24]
 80050de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e0:	f042 0204 	orr.w	r2, r2, #4
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	9306      	str	r3, [sp, #24]
 80050ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80050f2:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80050f4:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80050f6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80050f8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fa:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80050fc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80050fe:	f7fb fcb3 	bl	8000a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005102:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005106:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005108:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800510e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005110:	a907      	add	r1, sp, #28
 8005112:	4803      	ldr	r0, [pc, #12]	; (8005120 <HAL_I2S_MspInit+0x114>)
 8005114:	e7c4      	b.n	80050a0 <HAL_I2S_MspInit+0x94>
 8005116:	bf00      	nop
 8005118:	40003800 	.word	0x40003800
 800511c:	40023800 	.word	0x40023800
 8005120:	40020800 	.word	0x40020800
 8005124:	40020400 	.word	0x40020400
 8005128:	40003c00 	.word	0x40003c00
 800512c:	40020000 	.word	0x40020000

08005130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005130:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005132:	2214      	movs	r2, #20
{
 8005134:	b08a      	sub	sp, #40	; 0x28
 8005136:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005138:	2100      	movs	r1, #0
 800513a:	eb0d 0002 	add.w	r0, sp, r2
 800513e:	f000 fb13 	bl	8005768 <memset>
  if(hspi->Instance==SPI1)
 8005142:	6833      	ldr	r3, [r6, #0]
 8005144:	4a36      	ldr	r2, [pc, #216]	; (8005220 <HAL_SPI_MspInit+0xf0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d123      	bne.n	8005192 <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800514a:	4b36      	ldr	r3, [pc, #216]	; (8005224 <HAL_SPI_MspInit+0xf4>)
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514c:	4836      	ldr	r0, [pc, #216]	; (8005228 <HAL_SPI_MspInit+0xf8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800514e:	2100      	movs	r1, #0
 8005150:	9101      	str	r1, [sp, #4]
 8005152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005154:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005158:	645a      	str	r2, [r3, #68]	; 0x44
 800515a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800515c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005160:	9201      	str	r2, [sp, #4]
 8005162:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005164:	9102      	str	r1, [sp, #8]
 8005166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	9302      	str	r3, [sp, #8]
 8005176:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005178:	23e0      	movs	r3, #224	; 0xe0
 800517a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517c:	2302      	movs	r3, #2
 800517e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005180:	2303      	movs	r3, #3
 8005182:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005184:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005186:	2305      	movs	r3, #5
 8005188:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518a:	f7fb fc6d 	bl	8000a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800518e:	b00a      	add	sp, #40	; 0x28
 8005190:	bd70      	pop	{r4, r5, r6, pc}
  else if(hspi->Instance==SPI4)
 8005192:	4a26      	ldr	r2, [pc, #152]	; (800522c <HAL_SPI_MspInit+0xfc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d1fa      	bne.n	800518e <HAL_SPI_MspInit+0x5e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005198:	2500      	movs	r5, #0
 800519a:	4b22      	ldr	r3, [pc, #136]	; (8005224 <HAL_SPI_MspInit+0xf4>)
 800519c:	9503      	str	r5, [sp, #12]
 800519e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051a0:	4823      	ldr	r0, [pc, #140]	; (8005230 <HAL_SPI_MspInit+0x100>)
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80051a2:	4c24      	ldr	r4, [pc, #144]	; (8005234 <HAL_SPI_MspInit+0x104>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 80051a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
 80051aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80051b0:	9203      	str	r2, [sp, #12]
 80051b2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051b4:	9504      	str	r5, [sp, #16]
 80051b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b8:	f042 0210 	orr.w	r2, r2, #16
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	9304      	str	r3, [sp, #16]
 80051c6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 80051c8:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 80051cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ce:	2302      	movs	r3, #2
 80051d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d2:	2303      	movs	r3, #3
 80051d4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051d6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80051d8:	2305      	movs	r3, #5
 80051da:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051dc:	f7fb fc44 	bl	8000a68 <HAL_GPIO_Init>
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051e0:	4915      	ldr	r1, [pc, #84]	; (8005238 <HAL_SPI_MspInit+0x108>)
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051e2:	60e5      	str	r5, [r4, #12]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051e4:	2340      	movs	r3, #64	; 0x40
 80051e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80051ee:	4620      	mov	r0, r4
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f4:	6123      	str	r3, [r4, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051f6:	6165      	str	r5, [r4, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051f8:	61a5      	str	r5, [r4, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80051fa:	61e5      	str	r5, [r4, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80051fc:	6225      	str	r5, [r4, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051fe:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8005200:	f7fb faaa 	bl	8000758 <HAL_DMA_Init>
 8005204:	b108      	cbz	r0, 800520a <HAL_SPI_MspInit+0xda>
      Error_Handler();
 8005206:	f7ff faaf 	bl	8004768 <Error_Handler>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800520a:	2200      	movs	r2, #0
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800520c:	64b4      	str	r4, [r6, #72]	; 0x48
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800520e:	4611      	mov	r1, r2
 8005210:	2054      	movs	r0, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8005212:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8005214:	f7fb fa32 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8005218:	2054      	movs	r0, #84	; 0x54
 800521a:	f7fb fa63 	bl	80006e4 <HAL_NVIC_EnableIRQ>
}
 800521e:	e7b6      	b.n	800518e <HAL_SPI_MspInit+0x5e>
 8005220:	40013000 	.word	0x40013000
 8005224:	40023800 	.word	0x40023800
 8005228:	40020000 	.word	0x40020000
 800522c:	40013400 	.word	0x40013400
 8005230:	40021000 	.word	0x40021000
 8005234:	20000178 	.word	0x20000178
 8005238:	40026428 	.word	0x40026428

0800523c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800523c:	b510      	push	{r4, lr}
 800523e:	4604      	mov	r4, r0
 8005240:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005242:	2214      	movs	r2, #20
 8005244:	2100      	movs	r1, #0
 8005246:	a803      	add	r0, sp, #12
 8005248:	f000 fa8e 	bl	8005768 <memset>
  if(htim_encoder->Instance==TIM2)
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005252:	d12a      	bne.n	80052aa <HAL_TIM_Encoder_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005254:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8005258:	2400      	movs	r4, #0
 800525a:	9401      	str	r4, [sp, #4]
 800525c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800525e:	4814      	ldr	r0, [pc, #80]	; (80052b0 <HAL_TIM_Encoder_MspInit+0x74>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005260:	f042 0201 	orr.w	r2, r2, #1
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
 8005266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005268:	f002 0201 	and.w	r2, r2, #1
 800526c:	9201      	str	r2, [sp, #4]
 800526e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005270:	9402      	str	r4, [sp, #8]
 8005272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	631a      	str	r2, [r3, #48]	; 0x30
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	9302      	str	r3, [sp, #8]
 8005282:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8005284:	f248 0302 	movw	r3, #32770	; 0x8002
 8005288:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528a:	2302      	movs	r3, #2
 800528c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800528e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005290:	2301      	movs	r3, #1
 8005292:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005294:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005296:	f7fb fbe7 	bl	8000a68 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800529a:	201c      	movs	r0, #28
 800529c:	4622      	mov	r2, r4
 800529e:	4621      	mov	r1, r4
 80052a0:	f7fb f9ec 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80052a4:	201c      	movs	r0, #28
 80052a6:	f7fb fa1d 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80052aa:	b008      	add	sp, #32
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	bf00      	nop
 80052b0:	40020000 	.word	0x40020000

080052b4 <HAL_TIM_Base_MspInit>:

}


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052b4:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 80052b6:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <HAL_TIM_Base_MspInit+0x38>)
 80052b8:	6802      	ldr	r2, [r0, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d113      	bne.n	80052e6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052be:	2200      	movs	r2, #0
 80052c0:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80052c4:	9201      	str	r2, [sp, #4]
 80052c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80052c8:	f041 0102 	orr.w	r1, r1, #2
 80052cc:	6419      	str	r1, [r3, #64]	; 0x40
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	9301      	str	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80052d6:	201d      	movs	r0, #29
 80052d8:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052da:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80052dc:	f7fb f9ce 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80052e0:	201d      	movs	r0, #29
 80052e2:	f7fb f9ff 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80052e6:	b003      	add	sp, #12
 80052e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80052ec:	40000400 	.word	0x40000400

080052f0 <NMI_Handler>:
 80052f0:	4770      	bx	lr

080052f2 <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)

{
 80052f2:	e7fe      	b.n	80052f2 <HardFault_Handler>

080052f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052f4:	e7fe      	b.n	80052f4 <MemManage_Handler>

080052f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052f6:	e7fe      	b.n	80052f6 <BusFault_Handler>

080052f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052f8:	e7fe      	b.n	80052f8 <UsageFault_Handler>

080052fa <SVC_Handler>:
 80052fa:	4770      	bx	lr

080052fc <DebugMon_Handler>:
 80052fc:	4770      	bx	lr

080052fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052fe:	4770      	bx	lr

08005300 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005300:	f7fb b984 	b.w	800060c <HAL_IncTick>

08005304 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005304:	4801      	ldr	r0, [pc, #4]	; (800530c <TIM2_IRQHandler+0x8>)
 8005306:	f7fd b97f 	b.w	8002608 <HAL_TIM_IRQHandler>
 800530a:	bf00      	nop
 800530c:	20000288 	.word	0x20000288

08005310 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005310:	4801      	ldr	r0, [pc, #4]	; (8005318 <TIM3_IRQHandler+0x8>)
 8005312:	f7fd b979 	b.w	8002608 <HAL_TIM_IRQHandler>
 8005316:	bf00      	nop
 8005318:	20000138 	.word	0x20000138

0800531c <DMA2_Stream1_IRQHandler>:
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
  spi4_dma_completed = 1;
 800531c:	4b02      	ldr	r3, [pc, #8]	; (8005328 <DMA2_Stream1_IRQHandler+0xc>)
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800531e:	4803      	ldr	r0, [pc, #12]	; (800532c <DMA2_Stream1_IRQHandler+0x10>)
  spi4_dma_completed = 1;
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8005324:	f7fb bae6 	b.w	80008f4 <HAL_DMA_IRQHandler>
 8005328:	200000c8 	.word	0x200000c8
 800532c:	20000178 	.word	0x20000178

08005330 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005330:	4801      	ldr	r0, [pc, #4]	; (8005338 <OTG_FS_IRQHandler+0x8>)
 8005332:	f7fb bd77 	b.w	8000e24 <HAL_HCD_IRQHandler>
 8005336:	bf00      	nop
 8005338:	200007d0 	.word	0x200007d0

0800533c <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800533c:	4801      	ldr	r0, [pc, #4]	; (8005344 <SPI4_IRQHandler+0x8>)
 800533e:	f7fd b8c9 	b.w	80024d4 <HAL_SPI_IRQHandler>
 8005342:	bf00      	nop
 8005344:	200001d8 	.word	0x200001d8

08005348 <get_spi4_dma_completed>:
}

/* USER CODE BEGIN 1 */
uint8_t get_spi4_dma_completed(void){
	return spi4_dma_completed;
}
 8005348:	4b01      	ldr	r3, [pc, #4]	; (8005350 <get_spi4_dma_completed+0x8>)
 800534a:	7818      	ldrb	r0, [r3, #0]
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	200000c8 	.word	0x200000c8

08005354 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005354:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <_sbrk+0x2c>)
 8005358:	6819      	ldr	r1, [r3, #0]
{
 800535a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800535c:	b909      	cbnz	r1, 8005362 <_sbrk+0xe>
		heap_end = &end;
 800535e:	4909      	ldr	r1, [pc, #36]	; (8005384 <_sbrk+0x30>)
 8005360:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8005362:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005364:	4669      	mov	r1, sp
 8005366:	4402      	add	r2, r0
 8005368:	428a      	cmp	r2, r1
 800536a:	d906      	bls.n	800537a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800536c:	f000 f9c2 	bl	80056f4 <__errno>
 8005370:	230c      	movs	r3, #12
 8005372:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800537a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800537c:	bd08      	pop	{r3, pc}
 800537e:	bf00      	nop
 8005380:	200000cc 	.word	0x200000cc
 8005384:	20000a98 	.word	0x20000a98

08005388 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005388:	490f      	ldr	r1, [pc, #60]	; (80053c8 <SystemInit+0x40>)
 800538a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800538e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005396:	4b0d      	ldr	r3, [pc, #52]	; (80053cc <SystemInit+0x44>)
 8005398:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800539a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800539c:	f042 0201 	orr.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80053a2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80053aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80053b0:	4a07      	ldr	r2, [pc, #28]	; (80053d0 <SystemInit+0x48>)
 80053b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053ba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80053bc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053c2:	608b      	str	r3, [r1, #8]
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	e000ed00 	.word	0xe000ed00
 80053cc:	40023800 	.word	0x40023800
 80053d0:	24003010 	.word	0x24003010

080053d4 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80053d4:	2904      	cmp	r1, #4
 80053d6:	d00a      	beq.n	80053ee <USBH_UserProcess+0x1a>
 80053d8:	2905      	cmp	r1, #5
 80053da:	d004      	beq.n	80053e6 <USBH_UserProcess+0x12>
 80053dc:	2902      	cmp	r1, #2
 80053de:	d105      	bne.n	80053ec <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <USBH_UserProcess+0x20>)
 80053e2:	7019      	strb	r1, [r3, #0]
  break;
 80053e4:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 80053e6:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80053e8:	4b02      	ldr	r3, [pc, #8]	; (80053f4 <USBH_UserProcess+0x20>)
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	4770      	bx	lr
 80053ee:	2201      	movs	r2, #1
 80053f0:	e7fa      	b.n	80053e8 <USBH_UserProcess+0x14>
 80053f2:	bf00      	nop
 80053f4:	200000d0 	.word	0x200000d0

080053f8 <MX_USB_HOST_Init>:
{
 80053f8:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80053fa:	2201      	movs	r2, #1
 80053fc:	490b      	ldr	r1, [pc, #44]	; (800542c <MX_USB_HOST_Init+0x34>)
 80053fe:	480c      	ldr	r0, [pc, #48]	; (8005430 <MX_USB_HOST_Init+0x38>)
 8005400:	f7fe f84e 	bl	80034a0 <USBH_Init>
 8005404:	b108      	cbz	r0, 800540a <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8005406:	f7ff f9af 	bl	8004768 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800540a:	490a      	ldr	r1, [pc, #40]	; (8005434 <MX_USB_HOST_Init+0x3c>)
 800540c:	4808      	ldr	r0, [pc, #32]	; (8005430 <MX_USB_HOST_Init+0x38>)
 800540e:	f7fe f85e 	bl	80034ce <USBH_RegisterClass>
 8005412:	b108      	cbz	r0, 8005418 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8005414:	f7ff f9a8 	bl	8004768 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8005418:	4805      	ldr	r0, [pc, #20]	; (8005430 <MX_USB_HOST_Init+0x38>)
 800541a:	f7fe f88b 	bl	8003534 <USBH_Start>
 800541e:	b118      	cbz	r0, 8005428 <MX_USB_HOST_Init+0x30>
}
 8005420:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005424:	f7ff b9a0 	b.w	8004768 <Error_Handler>
 8005428:	bd08      	pop	{r3, pc}
 800542a:	bf00      	nop
 800542c:	080053d5 	.word	0x080053d5
 8005430:	20000404 	.word	0x20000404
 8005434:	20000008 	.word	0x20000008

08005438 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 8005438:	4801      	ldr	r0, [pc, #4]	; (8005440 <MX_USB_HOST_Process+0x8>)
 800543a:	f7fe b885 	b.w	8003548 <USBH_Process>
 800543e:	bf00      	nop
 8005440:	20000404 	.word	0x20000404

08005444 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8005444:	b530      	push	{r4, r5, lr}
 8005446:	4604      	mov	r4, r0
 8005448:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800544a:	2214      	movs	r2, #20
 800544c:	2100      	movs	r1, #0
 800544e:	a803      	add	r0, sp, #12
 8005450:	f000 f98a 	bl	8005768 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800545a:	d136      	bne.n	80054ca <HAL_HCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800545c:	4c1c      	ldr	r4, [pc, #112]	; (80054d0 <HAL_HCD_MspInit+0x8c>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800545e:	481d      	ldr	r0, [pc, #116]	; (80054d4 <HAL_HCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005460:	2500      	movs	r5, #0
 8005462:	9501      	str	r5, [sp, #4]
 8005464:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	6323      	str	r3, [r4, #48]	; 0x30
 800546c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005476:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800547c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800547e:	f7fb faf3 	bl	8000a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005482:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005486:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005488:	2302      	movs	r3, #2
 800548a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800548c:	2303      	movs	r3, #3
 800548e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005490:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005492:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005494:	480f      	ldr	r0, [pc, #60]	; (80054d4 <HAL_HCD_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005496:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005498:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800549a:	f7fb fae5 	bl	8000a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800549e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a4:	6363      	str	r3, [r4, #52]	; 0x34
 80054a6:	9502      	str	r5, [sp, #8]
 80054a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054ae:	6463      	str	r3, [r4, #68]	; 0x44
 80054b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b6:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80054b8:	2043      	movs	r0, #67	; 0x43
 80054ba:	462a      	mov	r2, r5
 80054bc:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80054be:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80054c0:	f7fb f8dc 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80054c4:	2043      	movs	r0, #67	; 0x43
 80054c6:	f7fb f90d 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80054ca:	b009      	add	sp, #36	; 0x24
 80054cc:	bd30      	pop	{r4, r5, pc}
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800
 80054d4:	40020000 	.word	0x40020000

080054d8 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 80054d8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80054dc:	f7fe b97c 	b.w	80037d8 <USBH_LL_IncTimer>

080054e0 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80054e0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80054e4:	f7fe b98e 	b.w	8003804 <USBH_LL_Connect>

080054e8 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80054e8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80054ec:	f7fe b99e 	b.w	800382c <USBH_LL_Disconnect>

080054f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80054f0:	4770      	bx	lr

080054f2 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 80054f2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80054f6:	f7fe b97d 	b.w	80037f4 <USBH_LL_PortEnabled>

080054fa <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 80054fa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80054fe:	f7fe b97d 	b.w	80037fc <USBH_LL_PortDisabled>
	...

08005504 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8005504:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8005506:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800550a:	2b01      	cmp	r3, #1
{
 800550c:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800550e:	d11b      	bne.n	8005548 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005510:	480e      	ldr	r0, [pc, #56]	; (800554c <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 8005512:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005516:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800551a:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800551c:	2208      	movs	r2, #8
 800551e:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005520:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005522:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005524:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8005526:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800552a:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800552c:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800552e:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005530:	f7fb fbcc 	bl	8000ccc <HAL_HCD_Init>
 8005534:	b108      	cbz	r0, 800553a <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 8005536:	f7ff f917 	bl	8004768 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800553a:	4804      	ldr	r0, [pc, #16]	; (800554c <USBH_LL_Init+0x48>)
 800553c:	f7fb ffc4 	bl	80014c8 <HAL_HCD_GetCurrentFrame>
 8005540:	4601      	mov	r1, r0
 8005542:	4620      	mov	r0, r4
 8005544:	f7fe f945 	bl	80037d2 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8005548:	2000      	movs	r0, #0
 800554a:	bd10      	pop	{r4, pc}
 800554c:	200007d0 	.word	0x200007d0

08005550 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005550:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8005552:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005556:	f7fb ff81 	bl	800145c <HAL_HCD_Start>
 800555a:	2803      	cmp	r0, #3
 800555c:	bf9a      	itte	ls
 800555e:	4b02      	ldrls	r3, [pc, #8]	; (8005568 <USBH_LL_Start+0x18>)
 8005560:	5c18      	ldrbls	r0, [r3, r0]
 8005562:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005564:	bd08      	pop	{r3, pc}
 8005566:	bf00      	nop
 8005568:	08007436 	.word	0x08007436

0800556c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800556c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800556e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005572:	f7fb ff89 	bl	8001488 <HAL_HCD_Stop>
 8005576:	2803      	cmp	r0, #3
 8005578:	bf9a      	itte	ls
 800557a:	4b02      	ldrls	r3, [pc, #8]	; (8005584 <USBH_LL_Stop+0x18>)
 800557c:	5c18      	ldrbls	r0, [r3, r0]
 800557e:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8005580:	bd08      	pop	{r3, pc}
 8005582:	bf00      	nop
 8005584:	08007436 	.word	0x08007436

08005588 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8005588:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800558a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800558e:	f7fb ff9e 	bl	80014ce <HAL_HCD_GetCurrentSpeed>
 8005592:	2802      	cmp	r0, #2
 8005594:	bf9a      	itte	ls
 8005596:	4b02      	ldrls	r3, [pc, #8]	; (80055a0 <USBH_LL_GetSpeed+0x18>)
 8005598:	5c18      	ldrbls	r0, [r3, r0]
 800559a:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800559c:	bd08      	pop	{r3, pc}
 800559e:	bf00      	nop
 80055a0:	08007433 	.word	0x08007433

080055a4 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80055a4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80055a6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80055aa:	f7fb ff7f 	bl	80014ac <HAL_HCD_ResetPort>
 80055ae:	2803      	cmp	r0, #3
 80055b0:	bf9a      	itte	ls
 80055b2:	4b02      	ldrls	r3, [pc, #8]	; (80055bc <USBH_LL_ResetPort+0x18>)
 80055b4:	5c18      	ldrbls	r0, [r3, r0]
 80055b6:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80055b8:	bd08      	pop	{r3, pc}
 80055ba:	bf00      	nop
 80055bc:	08007436 	.word	0x08007436

080055c0 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80055c0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80055c4:	f7fb bf7b 	b.w	80014be <HAL_HCD_HC_GetXferCount>

080055c8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80055c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80055ca:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80055ce:	9402      	str	r4, [sp, #8]
 80055d0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80055d4:	9401      	str	r4, [sp, #4]
 80055d6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80055da:	9400      	str	r4, [sp, #0]
 80055dc:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80055e0:	f7fb fb2a 	bl	8000c38 <HAL_HCD_HC_Init>
 80055e4:	2803      	cmp	r0, #3
 80055e6:	bf9a      	itte	ls
 80055e8:	4b02      	ldrls	r3, [pc, #8]	; (80055f4 <USBH_LL_OpenPipe+0x2c>)
 80055ea:	5c18      	ldrbls	r0, [r3, r0]
 80055ec:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80055ee:	b004      	add	sp, #16
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	bf00      	nop
 80055f4:	08007436 	.word	0x08007436

080055f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80055f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80055fa:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80055fe:	f7fb fb53 	bl	8000ca8 <HAL_HCD_HC_Halt>
 8005602:	2803      	cmp	r0, #3
 8005604:	bf9a      	itte	ls
 8005606:	4b02      	ldrls	r3, [pc, #8]	; (8005610 <USBH_LL_ClosePipe+0x18>)
 8005608:	5c18      	ldrbls	r0, [r3, r0]
 800560a:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800560c:	bd08      	pop	{r3, pc}
 800560e:	bf00      	nop
 8005610:	08007436 	.word	0x08007436

08005614 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005616:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800561a:	9403      	str	r4, [sp, #12]
 800561c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005620:	9402      	str	r4, [sp, #8]
 8005622:	9c07      	ldr	r4, [sp, #28]
 8005624:	9401      	str	r4, [sp, #4]
 8005626:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800562a:	9400      	str	r4, [sp, #0]
 800562c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005630:	f7fb fb96 	bl	8000d60 <HAL_HCD_HC_SubmitRequest>
 8005634:	2803      	cmp	r0, #3
 8005636:	bf9a      	itte	ls
 8005638:	4b02      	ldrls	r3, [pc, #8]	; (8005644 <USBH_LL_SubmitURB+0x30>)
 800563a:	5c18      	ldrbls	r0, [r3, r0]
 800563c:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800563e:	b004      	add	sp, #16
 8005640:	bd10      	pop	{r4, pc}
 8005642:	bf00      	nop
 8005644:	08007436 	.word	0x08007436

08005648 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8005648:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800564c:	f7fb bf31 	b.w	80014b2 <HAL_HCD_HC_GetURBState>

08005650 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8005650:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8005652:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d102      	bne.n	8005660 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 800565a:	4608      	mov	r0, r1
 800565c:	f000 f816 	bl	800568c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8005660:	20c8      	movs	r0, #200	; 0xc8
 8005662:	f7fa ffe5 	bl	8000630 <HAL_Delay>
  return USBH_OK;
}
 8005666:	2000      	movs	r0, #0
 8005668:	bd08      	pop	{r3, pc}

0800566a <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800566a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800566e:	2328      	movs	r3, #40	; 0x28
 8005670:	fb03 0101 	mla	r1, r3, r1, r0
 8005674:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8005678:	b11b      	cbz	r3, 8005682 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800567a:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800567e:	2000      	movs	r0, #0
 8005680:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8005682:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8005686:	e7fa      	b.n	800567e <USBH_LL_SetToggle+0x14>

08005688 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8005688:	f7fa bfd2 	b.w	8000630 <HAL_Delay>

0800568c <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800568c:	fab0 f280 	clz	r2, r0
 8005690:	0952      	lsrs	r2, r2, #5
 8005692:	2101      	movs	r1, #1
 8005694:	4801      	ldr	r0, [pc, #4]	; (800569c <MX_DriverVbusFS+0x10>)
 8005696:	f7fb bac3 	b.w	8000c20 <HAL_GPIO_WritePin>
 800569a:	bf00      	nop
 800569c:	40020800 	.word	0x40020800

080056a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80056a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056a6:	e003      	b.n	80056b0 <LoopCopyDataInit>

080056a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80056aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056ae:	3104      	adds	r1, #4

080056b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056b0:	480b      	ldr	r0, [pc, #44]	; (80056e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056b2:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056b8:	d3f6      	bcc.n	80056a8 <CopyDataInit>
  ldr  r2, =_sbss
 80056ba:	4a0b      	ldr	r2, [pc, #44]	; (80056e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056bc:	e002      	b.n	80056c4 <LoopFillZerobss>

080056be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056c0:	f842 3b04 	str.w	r3, [r2], #4

080056c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056c4:	4b09      	ldr	r3, [pc, #36]	; (80056ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056c8:	d3f9      	bcc.n	80056be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056ca:	f7ff fe5d 	bl	8005388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056ce:	f000 f817 	bl	8005700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056d2:	f7fe fe75 	bl	80043c0 <main>
  bx  lr    
 80056d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80056d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80056dc:	08007480 	.word	0x08007480
  ldr  r0, =_sdata
 80056e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80056e4:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 80056e8:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 80056ec:	20000a98 	.word	0x20000a98

080056f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056f0:	e7fe      	b.n	80056f0 <ADC_IRQHandler>
	...

080056f4 <__errno>:
 80056f4:	4b01      	ldr	r3, [pc, #4]	; (80056fc <__errno+0x8>)
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	20000040 	.word	0x20000040

08005700 <__libc_init_array>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4e0d      	ldr	r6, [pc, #52]	; (8005738 <__libc_init_array+0x38>)
 8005704:	4c0d      	ldr	r4, [pc, #52]	; (800573c <__libc_init_array+0x3c>)
 8005706:	1ba4      	subs	r4, r4, r6
 8005708:	10a4      	asrs	r4, r4, #2
 800570a:	2500      	movs	r5, #0
 800570c:	42a5      	cmp	r5, r4
 800570e:	d109      	bne.n	8005724 <__libc_init_array+0x24>
 8005710:	4e0b      	ldr	r6, [pc, #44]	; (8005740 <__libc_init_array+0x40>)
 8005712:	4c0c      	ldr	r4, [pc, #48]	; (8005744 <__libc_init_array+0x44>)
 8005714:	f000 fc5c 	bl	8005fd0 <_init>
 8005718:	1ba4      	subs	r4, r4, r6
 800571a:	10a4      	asrs	r4, r4, #2
 800571c:	2500      	movs	r5, #0
 800571e:	42a5      	cmp	r5, r4
 8005720:	d105      	bne.n	800572e <__libc_init_array+0x2e>
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005728:	4798      	blx	r3
 800572a:	3501      	adds	r5, #1
 800572c:	e7ee      	b.n	800570c <__libc_init_array+0xc>
 800572e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005732:	4798      	blx	r3
 8005734:	3501      	adds	r5, #1
 8005736:	e7f2      	b.n	800571e <__libc_init_array+0x1e>
 8005738:	08007478 	.word	0x08007478
 800573c:	08007478 	.word	0x08007478
 8005740:	08007478 	.word	0x08007478
 8005744:	0800747c 	.word	0x0800747c

08005748 <malloc>:
 8005748:	4b02      	ldr	r3, [pc, #8]	; (8005754 <malloc+0xc>)
 800574a:	4601      	mov	r1, r0
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	f000 b861 	b.w	8005814 <_malloc_r>
 8005752:	bf00      	nop
 8005754:	20000040 	.word	0x20000040

08005758 <free>:
 8005758:	4b02      	ldr	r3, [pc, #8]	; (8005764 <free+0xc>)
 800575a:	4601      	mov	r1, r0
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	f000 b80b 	b.w	8005778 <_free_r>
 8005762:	bf00      	nop
 8005764:	20000040 	.word	0x20000040

08005768 <memset>:
 8005768:	4402      	add	r2, r0
 800576a:	4603      	mov	r3, r0
 800576c:	4293      	cmp	r3, r2
 800576e:	d100      	bne.n	8005772 <memset+0xa>
 8005770:	4770      	bx	lr
 8005772:	f803 1b01 	strb.w	r1, [r3], #1
 8005776:	e7f9      	b.n	800576c <memset+0x4>

08005778 <_free_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4605      	mov	r5, r0
 800577c:	2900      	cmp	r1, #0
 800577e:	d045      	beq.n	800580c <_free_r+0x94>
 8005780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005784:	1f0c      	subs	r4, r1, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfb8      	it	lt
 800578a:	18e4      	addlt	r4, r4, r3
 800578c:	f000 f8e4 	bl	8005958 <__malloc_lock>
 8005790:	4a1f      	ldr	r2, [pc, #124]	; (8005810 <_free_r+0x98>)
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	4610      	mov	r0, r2
 8005796:	b933      	cbnz	r3, 80057a6 <_free_r+0x2e>
 8005798:	6063      	str	r3, [r4, #4]
 800579a:	6014      	str	r4, [r2, #0]
 800579c:	4628      	mov	r0, r5
 800579e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a2:	f000 b8da 	b.w	800595a <__malloc_unlock>
 80057a6:	42a3      	cmp	r3, r4
 80057a8:	d90c      	bls.n	80057c4 <_free_r+0x4c>
 80057aa:	6821      	ldr	r1, [r4, #0]
 80057ac:	1862      	adds	r2, r4, r1
 80057ae:	4293      	cmp	r3, r2
 80057b0:	bf04      	itt	eq
 80057b2:	681a      	ldreq	r2, [r3, #0]
 80057b4:	685b      	ldreq	r3, [r3, #4]
 80057b6:	6063      	str	r3, [r4, #4]
 80057b8:	bf04      	itt	eq
 80057ba:	1852      	addeq	r2, r2, r1
 80057bc:	6022      	streq	r2, [r4, #0]
 80057be:	6004      	str	r4, [r0, #0]
 80057c0:	e7ec      	b.n	800579c <_free_r+0x24>
 80057c2:	4613      	mov	r3, r2
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	b10a      	cbz	r2, 80057cc <_free_r+0x54>
 80057c8:	42a2      	cmp	r2, r4
 80057ca:	d9fa      	bls.n	80057c2 <_free_r+0x4a>
 80057cc:	6819      	ldr	r1, [r3, #0]
 80057ce:	1858      	adds	r0, r3, r1
 80057d0:	42a0      	cmp	r0, r4
 80057d2:	d10b      	bne.n	80057ec <_free_r+0x74>
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	4401      	add	r1, r0
 80057d8:	1858      	adds	r0, r3, r1
 80057da:	4282      	cmp	r2, r0
 80057dc:	6019      	str	r1, [r3, #0]
 80057de:	d1dd      	bne.n	800579c <_free_r+0x24>
 80057e0:	6810      	ldr	r0, [r2, #0]
 80057e2:	6852      	ldr	r2, [r2, #4]
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	4401      	add	r1, r0
 80057e8:	6019      	str	r1, [r3, #0]
 80057ea:	e7d7      	b.n	800579c <_free_r+0x24>
 80057ec:	d902      	bls.n	80057f4 <_free_r+0x7c>
 80057ee:	230c      	movs	r3, #12
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	e7d3      	b.n	800579c <_free_r+0x24>
 80057f4:	6820      	ldr	r0, [r4, #0]
 80057f6:	1821      	adds	r1, r4, r0
 80057f8:	428a      	cmp	r2, r1
 80057fa:	bf04      	itt	eq
 80057fc:	6811      	ldreq	r1, [r2, #0]
 80057fe:	6852      	ldreq	r2, [r2, #4]
 8005800:	6062      	str	r2, [r4, #4]
 8005802:	bf04      	itt	eq
 8005804:	1809      	addeq	r1, r1, r0
 8005806:	6021      	streq	r1, [r4, #0]
 8005808:	605c      	str	r4, [r3, #4]
 800580a:	e7c7      	b.n	800579c <_free_r+0x24>
 800580c:	bd38      	pop	{r3, r4, r5, pc}
 800580e:	bf00      	nop
 8005810:	200000d4 	.word	0x200000d4

08005814 <_malloc_r>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	1ccd      	adds	r5, r1, #3
 8005818:	f025 0503 	bic.w	r5, r5, #3
 800581c:	3508      	adds	r5, #8
 800581e:	2d0c      	cmp	r5, #12
 8005820:	bf38      	it	cc
 8005822:	250c      	movcc	r5, #12
 8005824:	2d00      	cmp	r5, #0
 8005826:	4606      	mov	r6, r0
 8005828:	db01      	blt.n	800582e <_malloc_r+0x1a>
 800582a:	42a9      	cmp	r1, r5
 800582c:	d903      	bls.n	8005836 <_malloc_r+0x22>
 800582e:	230c      	movs	r3, #12
 8005830:	6033      	str	r3, [r6, #0]
 8005832:	2000      	movs	r0, #0
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	f000 f88f 	bl	8005958 <__malloc_lock>
 800583a:	4a23      	ldr	r2, [pc, #140]	; (80058c8 <_malloc_r+0xb4>)
 800583c:	6814      	ldr	r4, [r2, #0]
 800583e:	4621      	mov	r1, r4
 8005840:	b991      	cbnz	r1, 8005868 <_malloc_r+0x54>
 8005842:	4c22      	ldr	r4, [pc, #136]	; (80058cc <_malloc_r+0xb8>)
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	b91b      	cbnz	r3, 8005850 <_malloc_r+0x3c>
 8005848:	4630      	mov	r0, r6
 800584a:	f000 f841 	bl	80058d0 <_sbrk_r>
 800584e:	6020      	str	r0, [r4, #0]
 8005850:	4629      	mov	r1, r5
 8005852:	4630      	mov	r0, r6
 8005854:	f000 f83c 	bl	80058d0 <_sbrk_r>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d126      	bne.n	80058aa <_malloc_r+0x96>
 800585c:	230c      	movs	r3, #12
 800585e:	6033      	str	r3, [r6, #0]
 8005860:	4630      	mov	r0, r6
 8005862:	f000 f87a 	bl	800595a <__malloc_unlock>
 8005866:	e7e4      	b.n	8005832 <_malloc_r+0x1e>
 8005868:	680b      	ldr	r3, [r1, #0]
 800586a:	1b5b      	subs	r3, r3, r5
 800586c:	d41a      	bmi.n	80058a4 <_malloc_r+0x90>
 800586e:	2b0b      	cmp	r3, #11
 8005870:	d90f      	bls.n	8005892 <_malloc_r+0x7e>
 8005872:	600b      	str	r3, [r1, #0]
 8005874:	50cd      	str	r5, [r1, r3]
 8005876:	18cc      	adds	r4, r1, r3
 8005878:	4630      	mov	r0, r6
 800587a:	f000 f86e 	bl	800595a <__malloc_unlock>
 800587e:	f104 000b 	add.w	r0, r4, #11
 8005882:	1d23      	adds	r3, r4, #4
 8005884:	f020 0007 	bic.w	r0, r0, #7
 8005888:	1ac3      	subs	r3, r0, r3
 800588a:	d01b      	beq.n	80058c4 <_malloc_r+0xb0>
 800588c:	425a      	negs	r2, r3
 800588e:	50e2      	str	r2, [r4, r3]
 8005890:	bd70      	pop	{r4, r5, r6, pc}
 8005892:	428c      	cmp	r4, r1
 8005894:	bf0d      	iteet	eq
 8005896:	6863      	ldreq	r3, [r4, #4]
 8005898:	684b      	ldrne	r3, [r1, #4]
 800589a:	6063      	strne	r3, [r4, #4]
 800589c:	6013      	streq	r3, [r2, #0]
 800589e:	bf18      	it	ne
 80058a0:	460c      	movne	r4, r1
 80058a2:	e7e9      	b.n	8005878 <_malloc_r+0x64>
 80058a4:	460c      	mov	r4, r1
 80058a6:	6849      	ldr	r1, [r1, #4]
 80058a8:	e7ca      	b.n	8005840 <_malloc_r+0x2c>
 80058aa:	1cc4      	adds	r4, r0, #3
 80058ac:	f024 0403 	bic.w	r4, r4, #3
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d005      	beq.n	80058c0 <_malloc_r+0xac>
 80058b4:	1a21      	subs	r1, r4, r0
 80058b6:	4630      	mov	r0, r6
 80058b8:	f000 f80a 	bl	80058d0 <_sbrk_r>
 80058bc:	3001      	adds	r0, #1
 80058be:	d0cd      	beq.n	800585c <_malloc_r+0x48>
 80058c0:	6025      	str	r5, [r4, #0]
 80058c2:	e7d9      	b.n	8005878 <_malloc_r+0x64>
 80058c4:	bd70      	pop	{r4, r5, r6, pc}
 80058c6:	bf00      	nop
 80058c8:	200000d4 	.word	0x200000d4
 80058cc:	200000d8 	.word	0x200000d8

080058d0 <_sbrk_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4c06      	ldr	r4, [pc, #24]	; (80058ec <_sbrk_r+0x1c>)
 80058d4:	2300      	movs	r3, #0
 80058d6:	4605      	mov	r5, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	6023      	str	r3, [r4, #0]
 80058dc:	f7ff fd3a 	bl	8005354 <_sbrk>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d102      	bne.n	80058ea <_sbrk_r+0x1a>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	b103      	cbz	r3, 80058ea <_sbrk_r+0x1a>
 80058e8:	602b      	str	r3, [r5, #0]
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	20000a94 	.word	0x20000a94

080058f0 <sniprintf>:
 80058f0:	b40c      	push	{r2, r3}
 80058f2:	b530      	push	{r4, r5, lr}
 80058f4:	4b17      	ldr	r3, [pc, #92]	; (8005954 <sniprintf+0x64>)
 80058f6:	1e0c      	subs	r4, r1, #0
 80058f8:	b09d      	sub	sp, #116	; 0x74
 80058fa:	681d      	ldr	r5, [r3, #0]
 80058fc:	da08      	bge.n	8005910 <sniprintf+0x20>
 80058fe:	238b      	movs	r3, #139	; 0x8b
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	f04f 30ff 	mov.w	r0, #4294967295
 8005906:	b01d      	add	sp, #116	; 0x74
 8005908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800590c:	b002      	add	sp, #8
 800590e:	4770      	bx	lr
 8005910:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005914:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005918:	bf14      	ite	ne
 800591a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800591e:	4623      	moveq	r3, r4
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	9307      	str	r3, [sp, #28]
 8005924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005928:	9002      	str	r0, [sp, #8]
 800592a:	9006      	str	r0, [sp, #24]
 800592c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005930:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005932:	ab21      	add	r3, sp, #132	; 0x84
 8005934:	a902      	add	r1, sp, #8
 8005936:	4628      	mov	r0, r5
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	f000 f86b 	bl	8005a14 <_svfiprintf_r>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	bfbc      	itt	lt
 8005942:	238b      	movlt	r3, #139	; 0x8b
 8005944:	602b      	strlt	r3, [r5, #0]
 8005946:	2c00      	cmp	r4, #0
 8005948:	d0dd      	beq.n	8005906 <sniprintf+0x16>
 800594a:	9b02      	ldr	r3, [sp, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e7d9      	b.n	8005906 <sniprintf+0x16>
 8005952:	bf00      	nop
 8005954:	20000040 	.word	0x20000040

08005958 <__malloc_lock>:
 8005958:	4770      	bx	lr

0800595a <__malloc_unlock>:
 800595a:	4770      	bx	lr

0800595c <__ssputs_r>:
 800595c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005960:	688e      	ldr	r6, [r1, #8]
 8005962:	429e      	cmp	r6, r3
 8005964:	4682      	mov	sl, r0
 8005966:	460c      	mov	r4, r1
 8005968:	4691      	mov	r9, r2
 800596a:	4698      	mov	r8, r3
 800596c:	d835      	bhi.n	80059da <__ssputs_r+0x7e>
 800596e:	898a      	ldrh	r2, [r1, #12]
 8005970:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005974:	d031      	beq.n	80059da <__ssputs_r+0x7e>
 8005976:	6825      	ldr	r5, [r4, #0]
 8005978:	6909      	ldr	r1, [r1, #16]
 800597a:	1a6f      	subs	r7, r5, r1
 800597c:	6965      	ldr	r5, [r4, #20]
 800597e:	2302      	movs	r3, #2
 8005980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005984:	fb95 f5f3 	sdiv	r5, r5, r3
 8005988:	f108 0301 	add.w	r3, r8, #1
 800598c:	443b      	add	r3, r7
 800598e:	429d      	cmp	r5, r3
 8005990:	bf38      	it	cc
 8005992:	461d      	movcc	r5, r3
 8005994:	0553      	lsls	r3, r2, #21
 8005996:	d531      	bpl.n	80059fc <__ssputs_r+0xa0>
 8005998:	4629      	mov	r1, r5
 800599a:	f7ff ff3b 	bl	8005814 <_malloc_r>
 800599e:	4606      	mov	r6, r0
 80059a0:	b950      	cbnz	r0, 80059b8 <__ssputs_r+0x5c>
 80059a2:	230c      	movs	r3, #12
 80059a4:	f8ca 3000 	str.w	r3, [sl]
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ae:	81a3      	strh	r3, [r4, #12]
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b8:	463a      	mov	r2, r7
 80059ba:	6921      	ldr	r1, [r4, #16]
 80059bc:	f000 fab4 	bl	8005f28 <memcpy>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	6126      	str	r6, [r4, #16]
 80059ce:	6165      	str	r5, [r4, #20]
 80059d0:	443e      	add	r6, r7
 80059d2:	1bed      	subs	r5, r5, r7
 80059d4:	6026      	str	r6, [r4, #0]
 80059d6:	60a5      	str	r5, [r4, #8]
 80059d8:	4646      	mov	r6, r8
 80059da:	4546      	cmp	r6, r8
 80059dc:	bf28      	it	cs
 80059de:	4646      	movcs	r6, r8
 80059e0:	4632      	mov	r2, r6
 80059e2:	4649      	mov	r1, r9
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	f000 faaa 	bl	8005f3e <memmove>
 80059ea:	68a3      	ldr	r3, [r4, #8]
 80059ec:	1b9b      	subs	r3, r3, r6
 80059ee:	60a3      	str	r3, [r4, #8]
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	441e      	add	r6, r3
 80059f4:	6026      	str	r6, [r4, #0]
 80059f6:	2000      	movs	r0, #0
 80059f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fc:	462a      	mov	r2, r5
 80059fe:	f000 fab8 	bl	8005f72 <_realloc_r>
 8005a02:	4606      	mov	r6, r0
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d1e1      	bne.n	80059cc <__ssputs_r+0x70>
 8005a08:	6921      	ldr	r1, [r4, #16]
 8005a0a:	4650      	mov	r0, sl
 8005a0c:	f7ff feb4 	bl	8005778 <_free_r>
 8005a10:	e7c7      	b.n	80059a2 <__ssputs_r+0x46>
	...

08005a14 <_svfiprintf_r>:
 8005a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	b09d      	sub	sp, #116	; 0x74
 8005a1a:	4680      	mov	r8, r0
 8005a1c:	9303      	str	r3, [sp, #12]
 8005a1e:	898b      	ldrh	r3, [r1, #12]
 8005a20:	061c      	lsls	r4, r3, #24
 8005a22:	460d      	mov	r5, r1
 8005a24:	4616      	mov	r6, r2
 8005a26:	d50f      	bpl.n	8005a48 <_svfiprintf_r+0x34>
 8005a28:	690b      	ldr	r3, [r1, #16]
 8005a2a:	b96b      	cbnz	r3, 8005a48 <_svfiprintf_r+0x34>
 8005a2c:	2140      	movs	r1, #64	; 0x40
 8005a2e:	f7ff fef1 	bl	8005814 <_malloc_r>
 8005a32:	6028      	str	r0, [r5, #0]
 8005a34:	6128      	str	r0, [r5, #16]
 8005a36:	b928      	cbnz	r0, 8005a44 <_svfiprintf_r+0x30>
 8005a38:	230c      	movs	r3, #12
 8005a3a:	f8c8 3000 	str.w	r3, [r8]
 8005a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a42:	e0c5      	b.n	8005bd0 <_svfiprintf_r+0x1bc>
 8005a44:	2340      	movs	r3, #64	; 0x40
 8005a46:	616b      	str	r3, [r5, #20]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4c:	2320      	movs	r3, #32
 8005a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a52:	2330      	movs	r3, #48	; 0x30
 8005a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a58:	f04f 0b01 	mov.w	fp, #1
 8005a5c:	4637      	mov	r7, r6
 8005a5e:	463c      	mov	r4, r7
 8005a60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d13c      	bne.n	8005ae2 <_svfiprintf_r+0xce>
 8005a68:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a6c:	d00b      	beq.n	8005a86 <_svfiprintf_r+0x72>
 8005a6e:	4653      	mov	r3, sl
 8005a70:	4632      	mov	r2, r6
 8005a72:	4629      	mov	r1, r5
 8005a74:	4640      	mov	r0, r8
 8005a76:	f7ff ff71 	bl	800595c <__ssputs_r>
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	f000 80a3 	beq.w	8005bc6 <_svfiprintf_r+0x1b2>
 8005a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a82:	4453      	add	r3, sl
 8005a84:	9309      	str	r3, [sp, #36]	; 0x24
 8005a86:	783b      	ldrb	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 809c 	beq.w	8005bc6 <_svfiprintf_r+0x1b2>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f04f 32ff 	mov.w	r2, #4294967295
 8005a94:	9304      	str	r3, [sp, #16]
 8005a96:	9307      	str	r3, [sp, #28]
 8005a98:	9205      	str	r2, [sp, #20]
 8005a9a:	9306      	str	r3, [sp, #24]
 8005a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8005aa2:	2205      	movs	r2, #5
 8005aa4:	7821      	ldrb	r1, [r4, #0]
 8005aa6:	4850      	ldr	r0, [pc, #320]	; (8005be8 <_svfiprintf_r+0x1d4>)
 8005aa8:	f7fa fb9a 	bl	80001e0 <memchr>
 8005aac:	1c67      	adds	r7, r4, #1
 8005aae:	9b04      	ldr	r3, [sp, #16]
 8005ab0:	b9d8      	cbnz	r0, 8005aea <_svfiprintf_r+0xd6>
 8005ab2:	06d9      	lsls	r1, r3, #27
 8005ab4:	bf44      	itt	mi
 8005ab6:	2220      	movmi	r2, #32
 8005ab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005abc:	071a      	lsls	r2, r3, #28
 8005abe:	bf44      	itt	mi
 8005ac0:	222b      	movmi	r2, #43	; 0x2b
 8005ac2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ac6:	7822      	ldrb	r2, [r4, #0]
 8005ac8:	2a2a      	cmp	r2, #42	; 0x2a
 8005aca:	d016      	beq.n	8005afa <_svfiprintf_r+0xe6>
 8005acc:	9a07      	ldr	r2, [sp, #28]
 8005ace:	2100      	movs	r1, #0
 8005ad0:	200a      	movs	r0, #10
 8005ad2:	4627      	mov	r7, r4
 8005ad4:	3401      	adds	r4, #1
 8005ad6:	783b      	ldrb	r3, [r7, #0]
 8005ad8:	3b30      	subs	r3, #48	; 0x30
 8005ada:	2b09      	cmp	r3, #9
 8005adc:	d951      	bls.n	8005b82 <_svfiprintf_r+0x16e>
 8005ade:	b1c9      	cbz	r1, 8005b14 <_svfiprintf_r+0x100>
 8005ae0:	e011      	b.n	8005b06 <_svfiprintf_r+0xf2>
 8005ae2:	2b25      	cmp	r3, #37	; 0x25
 8005ae4:	d0c0      	beq.n	8005a68 <_svfiprintf_r+0x54>
 8005ae6:	4627      	mov	r7, r4
 8005ae8:	e7b9      	b.n	8005a5e <_svfiprintf_r+0x4a>
 8005aea:	4a3f      	ldr	r2, [pc, #252]	; (8005be8 <_svfiprintf_r+0x1d4>)
 8005aec:	1a80      	subs	r0, r0, r2
 8005aee:	fa0b f000 	lsl.w	r0, fp, r0
 8005af2:	4318      	orrs	r0, r3
 8005af4:	9004      	str	r0, [sp, #16]
 8005af6:	463c      	mov	r4, r7
 8005af8:	e7d3      	b.n	8005aa2 <_svfiprintf_r+0x8e>
 8005afa:	9a03      	ldr	r2, [sp, #12]
 8005afc:	1d11      	adds	r1, r2, #4
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	9103      	str	r1, [sp, #12]
 8005b02:	2a00      	cmp	r2, #0
 8005b04:	db01      	blt.n	8005b0a <_svfiprintf_r+0xf6>
 8005b06:	9207      	str	r2, [sp, #28]
 8005b08:	e004      	b.n	8005b14 <_svfiprintf_r+0x100>
 8005b0a:	4252      	negs	r2, r2
 8005b0c:	f043 0302 	orr.w	r3, r3, #2
 8005b10:	9207      	str	r2, [sp, #28]
 8005b12:	9304      	str	r3, [sp, #16]
 8005b14:	783b      	ldrb	r3, [r7, #0]
 8005b16:	2b2e      	cmp	r3, #46	; 0x2e
 8005b18:	d10e      	bne.n	8005b38 <_svfiprintf_r+0x124>
 8005b1a:	787b      	ldrb	r3, [r7, #1]
 8005b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1e:	f107 0101 	add.w	r1, r7, #1
 8005b22:	d132      	bne.n	8005b8a <_svfiprintf_r+0x176>
 8005b24:	9b03      	ldr	r3, [sp, #12]
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	9203      	str	r2, [sp, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bfb8      	it	lt
 8005b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b34:	3702      	adds	r7, #2
 8005b36:	9305      	str	r3, [sp, #20]
 8005b38:	4c2c      	ldr	r4, [pc, #176]	; (8005bec <_svfiprintf_r+0x1d8>)
 8005b3a:	7839      	ldrb	r1, [r7, #0]
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f7fa fb4e 	bl	80001e0 <memchr>
 8005b44:	b138      	cbz	r0, 8005b56 <_svfiprintf_r+0x142>
 8005b46:	2340      	movs	r3, #64	; 0x40
 8005b48:	1b00      	subs	r0, r0, r4
 8005b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b4e:	9b04      	ldr	r3, [sp, #16]
 8005b50:	4303      	orrs	r3, r0
 8005b52:	9304      	str	r3, [sp, #16]
 8005b54:	3701      	adds	r7, #1
 8005b56:	7839      	ldrb	r1, [r7, #0]
 8005b58:	4825      	ldr	r0, [pc, #148]	; (8005bf0 <_svfiprintf_r+0x1dc>)
 8005b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b5e:	2206      	movs	r2, #6
 8005b60:	1c7e      	adds	r6, r7, #1
 8005b62:	f7fa fb3d 	bl	80001e0 <memchr>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d035      	beq.n	8005bd6 <_svfiprintf_r+0x1c2>
 8005b6a:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <_svfiprintf_r+0x1e0>)
 8005b6c:	b9fb      	cbnz	r3, 8005bae <_svfiprintf_r+0x19a>
 8005b6e:	9b03      	ldr	r3, [sp, #12]
 8005b70:	3307      	adds	r3, #7
 8005b72:	f023 0307 	bic.w	r3, r3, #7
 8005b76:	3308      	adds	r3, #8
 8005b78:	9303      	str	r3, [sp, #12]
 8005b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7c:	444b      	add	r3, r9
 8005b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b80:	e76c      	b.n	8005a5c <_svfiprintf_r+0x48>
 8005b82:	fb00 3202 	mla	r2, r0, r2, r3
 8005b86:	2101      	movs	r1, #1
 8005b88:	e7a3      	b.n	8005ad2 <_svfiprintf_r+0xbe>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9305      	str	r3, [sp, #20]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	240a      	movs	r4, #10
 8005b92:	460f      	mov	r7, r1
 8005b94:	3101      	adds	r1, #1
 8005b96:	783a      	ldrb	r2, [r7, #0]
 8005b98:	3a30      	subs	r2, #48	; 0x30
 8005b9a:	2a09      	cmp	r2, #9
 8005b9c:	d903      	bls.n	8005ba6 <_svfiprintf_r+0x192>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0ca      	beq.n	8005b38 <_svfiprintf_r+0x124>
 8005ba2:	9005      	str	r0, [sp, #20]
 8005ba4:	e7c8      	b.n	8005b38 <_svfiprintf_r+0x124>
 8005ba6:	fb04 2000 	mla	r0, r4, r0, r2
 8005baa:	2301      	movs	r3, #1
 8005bac:	e7f1      	b.n	8005b92 <_svfiprintf_r+0x17e>
 8005bae:	ab03      	add	r3, sp, #12
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	462a      	mov	r2, r5
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <_svfiprintf_r+0x1e4>)
 8005bb6:	a904      	add	r1, sp, #16
 8005bb8:	4640      	mov	r0, r8
 8005bba:	f3af 8000 	nop.w
 8005bbe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005bc2:	4681      	mov	r9, r0
 8005bc4:	d1d9      	bne.n	8005b7a <_svfiprintf_r+0x166>
 8005bc6:	89ab      	ldrh	r3, [r5, #12]
 8005bc8:	065b      	lsls	r3, r3, #25
 8005bca:	f53f af38 	bmi.w	8005a3e <_svfiprintf_r+0x2a>
 8005bce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bd0:	b01d      	add	sp, #116	; 0x74
 8005bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd6:	ab03      	add	r3, sp, #12
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	462a      	mov	r2, r5
 8005bdc:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <_svfiprintf_r+0x1e4>)
 8005bde:	a904      	add	r1, sp, #16
 8005be0:	4640      	mov	r0, r8
 8005be2:	f000 f881 	bl	8005ce8 <_printf_i>
 8005be6:	e7ea      	b.n	8005bbe <_svfiprintf_r+0x1aa>
 8005be8:	0800743a 	.word	0x0800743a
 8005bec:	08007440 	.word	0x08007440
 8005bf0:	08007444 	.word	0x08007444
 8005bf4:	00000000 	.word	0x00000000
 8005bf8:	0800595d 	.word	0x0800595d

08005bfc <_printf_common>:
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	4691      	mov	r9, r2
 8005c02:	461f      	mov	r7, r3
 8005c04:	688a      	ldr	r2, [r1, #8]
 8005c06:	690b      	ldr	r3, [r1, #16]
 8005c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	bfb8      	it	lt
 8005c10:	4613      	movlt	r3, r2
 8005c12:	f8c9 3000 	str.w	r3, [r9]
 8005c16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	b112      	cbz	r2, 8005c26 <_printf_common+0x2a>
 8005c20:	3301      	adds	r3, #1
 8005c22:	f8c9 3000 	str.w	r3, [r9]
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	0699      	lsls	r1, r3, #26
 8005c2a:	bf42      	ittt	mi
 8005c2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c30:	3302      	addmi	r3, #2
 8005c32:	f8c9 3000 	strmi.w	r3, [r9]
 8005c36:	6825      	ldr	r5, [r4, #0]
 8005c38:	f015 0506 	ands.w	r5, r5, #6
 8005c3c:	d107      	bne.n	8005c4e <_printf_common+0x52>
 8005c3e:	f104 0a19 	add.w	sl, r4, #25
 8005c42:	68e3      	ldr	r3, [r4, #12]
 8005c44:	f8d9 2000 	ldr.w	r2, [r9]
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	429d      	cmp	r5, r3
 8005c4c:	db29      	blt.n	8005ca2 <_printf_common+0xa6>
 8005c4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c52:	6822      	ldr	r2, [r4, #0]
 8005c54:	3300      	adds	r3, #0
 8005c56:	bf18      	it	ne
 8005c58:	2301      	movne	r3, #1
 8005c5a:	0692      	lsls	r2, r2, #26
 8005c5c:	d42e      	bmi.n	8005cbc <_printf_common+0xc0>
 8005c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c62:	4639      	mov	r1, r7
 8005c64:	4630      	mov	r0, r6
 8005c66:	47c0      	blx	r8
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d021      	beq.n	8005cb0 <_printf_common+0xb4>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	68e5      	ldr	r5, [r4, #12]
 8005c70:	f8d9 2000 	ldr.w	r2, [r9]
 8005c74:	f003 0306 	and.w	r3, r3, #6
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	bf08      	it	eq
 8005c7c:	1aad      	subeq	r5, r5, r2
 8005c7e:	68a3      	ldr	r3, [r4, #8]
 8005c80:	6922      	ldr	r2, [r4, #16]
 8005c82:	bf0c      	ite	eq
 8005c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c88:	2500      	movne	r5, #0
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	bfc4      	itt	gt
 8005c8e:	1a9b      	subgt	r3, r3, r2
 8005c90:	18ed      	addgt	r5, r5, r3
 8005c92:	f04f 0900 	mov.w	r9, #0
 8005c96:	341a      	adds	r4, #26
 8005c98:	454d      	cmp	r5, r9
 8005c9a:	d11b      	bne.n	8005cd4 <_printf_common+0xd8>
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4652      	mov	r2, sl
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4630      	mov	r0, r6
 8005caa:	47c0      	blx	r8
 8005cac:	3001      	adds	r0, #1
 8005cae:	d103      	bne.n	8005cb8 <_printf_common+0xbc>
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb8:	3501      	adds	r5, #1
 8005cba:	e7c2      	b.n	8005c42 <_printf_common+0x46>
 8005cbc:	18e1      	adds	r1, r4, r3
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	2030      	movs	r0, #48	; 0x30
 8005cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cc6:	4422      	add	r2, r4
 8005cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	e7c4      	b.n	8005c5e <_printf_common+0x62>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	4639      	mov	r1, r7
 8005cda:	4630      	mov	r0, r6
 8005cdc:	47c0      	blx	r8
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d0e6      	beq.n	8005cb0 <_printf_common+0xb4>
 8005ce2:	f109 0901 	add.w	r9, r9, #1
 8005ce6:	e7d7      	b.n	8005c98 <_printf_common+0x9c>

08005ce8 <_printf_i>:
 8005ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cec:	4617      	mov	r7, r2
 8005cee:	7e0a      	ldrb	r2, [r1, #24]
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	2a6e      	cmp	r2, #110	; 0x6e
 8005cf4:	4698      	mov	r8, r3
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cfc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005d00:	f000 80bc 	beq.w	8005e7c <_printf_i+0x194>
 8005d04:	d81a      	bhi.n	8005d3c <_printf_i+0x54>
 8005d06:	2a63      	cmp	r2, #99	; 0x63
 8005d08:	d02e      	beq.n	8005d68 <_printf_i+0x80>
 8005d0a:	d80a      	bhi.n	8005d22 <_printf_i+0x3a>
 8005d0c:	2a00      	cmp	r2, #0
 8005d0e:	f000 80c8 	beq.w	8005ea2 <_printf_i+0x1ba>
 8005d12:	2a58      	cmp	r2, #88	; 0x58
 8005d14:	f000 808a 	beq.w	8005e2c <_printf_i+0x144>
 8005d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d1c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005d20:	e02a      	b.n	8005d78 <_printf_i+0x90>
 8005d22:	2a64      	cmp	r2, #100	; 0x64
 8005d24:	d001      	beq.n	8005d2a <_printf_i+0x42>
 8005d26:	2a69      	cmp	r2, #105	; 0x69
 8005d28:	d1f6      	bne.n	8005d18 <_printf_i+0x30>
 8005d2a:	6821      	ldr	r1, [r4, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005d32:	d023      	beq.n	8005d7c <_printf_i+0x94>
 8005d34:	1d11      	adds	r1, r2, #4
 8005d36:	6019      	str	r1, [r3, #0]
 8005d38:	6813      	ldr	r3, [r2, #0]
 8005d3a:	e027      	b.n	8005d8c <_printf_i+0xa4>
 8005d3c:	2a73      	cmp	r2, #115	; 0x73
 8005d3e:	f000 80b4 	beq.w	8005eaa <_printf_i+0x1c2>
 8005d42:	d808      	bhi.n	8005d56 <_printf_i+0x6e>
 8005d44:	2a6f      	cmp	r2, #111	; 0x6f
 8005d46:	d02a      	beq.n	8005d9e <_printf_i+0xb6>
 8005d48:	2a70      	cmp	r2, #112	; 0x70
 8005d4a:	d1e5      	bne.n	8005d18 <_printf_i+0x30>
 8005d4c:	680a      	ldr	r2, [r1, #0]
 8005d4e:	f042 0220 	orr.w	r2, r2, #32
 8005d52:	600a      	str	r2, [r1, #0]
 8005d54:	e003      	b.n	8005d5e <_printf_i+0x76>
 8005d56:	2a75      	cmp	r2, #117	; 0x75
 8005d58:	d021      	beq.n	8005d9e <_printf_i+0xb6>
 8005d5a:	2a78      	cmp	r2, #120	; 0x78
 8005d5c:	d1dc      	bne.n	8005d18 <_printf_i+0x30>
 8005d5e:	2278      	movs	r2, #120	; 0x78
 8005d60:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005d64:	496e      	ldr	r1, [pc, #440]	; (8005f20 <_printf_i+0x238>)
 8005d66:	e064      	b.n	8005e32 <_printf_i+0x14a>
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005d6e:	1d11      	adds	r1, r2, #4
 8005d70:	6019      	str	r1, [r3, #0]
 8005d72:	6813      	ldr	r3, [r2, #0]
 8005d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0a3      	b.n	8005ec4 <_printf_i+0x1dc>
 8005d7c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005d80:	f102 0104 	add.w	r1, r2, #4
 8005d84:	6019      	str	r1, [r3, #0]
 8005d86:	d0d7      	beq.n	8005d38 <_printf_i+0x50>
 8005d88:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	da03      	bge.n	8005d98 <_printf_i+0xb0>
 8005d90:	222d      	movs	r2, #45	; 0x2d
 8005d92:	425b      	negs	r3, r3
 8005d94:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d98:	4962      	ldr	r1, [pc, #392]	; (8005f24 <_printf_i+0x23c>)
 8005d9a:	220a      	movs	r2, #10
 8005d9c:	e017      	b.n	8005dce <_printf_i+0xe6>
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	6819      	ldr	r1, [r3, #0]
 8005da2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005da6:	d003      	beq.n	8005db0 <_printf_i+0xc8>
 8005da8:	1d08      	adds	r0, r1, #4
 8005daa:	6018      	str	r0, [r3, #0]
 8005dac:	680b      	ldr	r3, [r1, #0]
 8005dae:	e006      	b.n	8005dbe <_printf_i+0xd6>
 8005db0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005db4:	f101 0004 	add.w	r0, r1, #4
 8005db8:	6018      	str	r0, [r3, #0]
 8005dba:	d0f7      	beq.n	8005dac <_printf_i+0xc4>
 8005dbc:	880b      	ldrh	r3, [r1, #0]
 8005dbe:	4959      	ldr	r1, [pc, #356]	; (8005f24 <_printf_i+0x23c>)
 8005dc0:	2a6f      	cmp	r2, #111	; 0x6f
 8005dc2:	bf14      	ite	ne
 8005dc4:	220a      	movne	r2, #10
 8005dc6:	2208      	moveq	r2, #8
 8005dc8:	2000      	movs	r0, #0
 8005dca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005dce:	6865      	ldr	r5, [r4, #4]
 8005dd0:	60a5      	str	r5, [r4, #8]
 8005dd2:	2d00      	cmp	r5, #0
 8005dd4:	f2c0 809c 	blt.w	8005f10 <_printf_i+0x228>
 8005dd8:	6820      	ldr	r0, [r4, #0]
 8005dda:	f020 0004 	bic.w	r0, r0, #4
 8005dde:	6020      	str	r0, [r4, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d13f      	bne.n	8005e64 <_printf_i+0x17c>
 8005de4:	2d00      	cmp	r5, #0
 8005de6:	f040 8095 	bne.w	8005f14 <_printf_i+0x22c>
 8005dea:	4675      	mov	r5, lr
 8005dec:	2a08      	cmp	r2, #8
 8005dee:	d10b      	bne.n	8005e08 <_printf_i+0x120>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	07da      	lsls	r2, r3, #31
 8005df4:	d508      	bpl.n	8005e08 <_printf_i+0x120>
 8005df6:	6923      	ldr	r3, [r4, #16]
 8005df8:	6862      	ldr	r2, [r4, #4]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	bfde      	ittt	le
 8005dfe:	2330      	movle	r3, #48	; 0x30
 8005e00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e08:	ebae 0305 	sub.w	r3, lr, r5
 8005e0c:	6123      	str	r3, [r4, #16]
 8005e0e:	f8cd 8000 	str.w	r8, [sp]
 8005e12:	463b      	mov	r3, r7
 8005e14:	aa03      	add	r2, sp, #12
 8005e16:	4621      	mov	r1, r4
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7ff feef 	bl	8005bfc <_printf_common>
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d155      	bne.n	8005ece <_printf_i+0x1e6>
 8005e22:	f04f 30ff 	mov.w	r0, #4294967295
 8005e26:	b005      	add	sp, #20
 8005e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e2c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005e30:	493c      	ldr	r1, [pc, #240]	; (8005f24 <_printf_i+0x23c>)
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e3a:	f100 0504 	add.w	r5, r0, #4
 8005e3e:	601d      	str	r5, [r3, #0]
 8005e40:	d001      	beq.n	8005e46 <_printf_i+0x15e>
 8005e42:	6803      	ldr	r3, [r0, #0]
 8005e44:	e002      	b.n	8005e4c <_printf_i+0x164>
 8005e46:	0655      	lsls	r5, r2, #25
 8005e48:	d5fb      	bpl.n	8005e42 <_printf_i+0x15a>
 8005e4a:	8803      	ldrh	r3, [r0, #0]
 8005e4c:	07d0      	lsls	r0, r2, #31
 8005e4e:	bf44      	itt	mi
 8005e50:	f042 0220 	orrmi.w	r2, r2, #32
 8005e54:	6022      	strmi	r2, [r4, #0]
 8005e56:	b91b      	cbnz	r3, 8005e60 <_printf_i+0x178>
 8005e58:	6822      	ldr	r2, [r4, #0]
 8005e5a:	f022 0220 	bic.w	r2, r2, #32
 8005e5e:	6022      	str	r2, [r4, #0]
 8005e60:	2210      	movs	r2, #16
 8005e62:	e7b1      	b.n	8005dc8 <_printf_i+0xe0>
 8005e64:	4675      	mov	r5, lr
 8005e66:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e6a:	fb02 3310 	mls	r3, r2, r0, r3
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e74:	4603      	mov	r3, r0
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d1f5      	bne.n	8005e66 <_printf_i+0x17e>
 8005e7a:	e7b7      	b.n	8005dec <_printf_i+0x104>
 8005e7c:	6808      	ldr	r0, [r1, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	6949      	ldr	r1, [r1, #20]
 8005e82:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005e86:	d004      	beq.n	8005e92 <_printf_i+0x1aa>
 8005e88:	1d10      	adds	r0, r2, #4
 8005e8a:	6018      	str	r0, [r3, #0]
 8005e8c:	6813      	ldr	r3, [r2, #0]
 8005e8e:	6019      	str	r1, [r3, #0]
 8005e90:	e007      	b.n	8005ea2 <_printf_i+0x1ba>
 8005e92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e96:	f102 0004 	add.w	r0, r2, #4
 8005e9a:	6018      	str	r0, [r3, #0]
 8005e9c:	6813      	ldr	r3, [r2, #0]
 8005e9e:	d0f6      	beq.n	8005e8e <_printf_i+0x1a6>
 8005ea0:	8019      	strh	r1, [r3, #0]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	4675      	mov	r5, lr
 8005ea8:	e7b1      	b.n	8005e0e <_printf_i+0x126>
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	1d11      	adds	r1, r2, #4
 8005eae:	6019      	str	r1, [r3, #0]
 8005eb0:	6815      	ldr	r5, [r2, #0]
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f7fa f992 	bl	80001e0 <memchr>
 8005ebc:	b108      	cbz	r0, 8005ec2 <_printf_i+0x1da>
 8005ebe:	1b40      	subs	r0, r0, r5
 8005ec0:	6060      	str	r0, [r4, #4]
 8005ec2:	6863      	ldr	r3, [r4, #4]
 8005ec4:	6123      	str	r3, [r4, #16]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ecc:	e79f      	b.n	8005e0e <_printf_i+0x126>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4639      	mov	r1, r7
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	47c0      	blx	r8
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d0a2      	beq.n	8005e22 <_printf_i+0x13a>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	079b      	lsls	r3, r3, #30
 8005ee0:	d507      	bpl.n	8005ef2 <_printf_i+0x20a>
 8005ee2:	2500      	movs	r5, #0
 8005ee4:	f104 0919 	add.w	r9, r4, #25
 8005ee8:	68e3      	ldr	r3, [r4, #12]
 8005eea:	9a03      	ldr	r2, [sp, #12]
 8005eec:	1a9b      	subs	r3, r3, r2
 8005eee:	429d      	cmp	r5, r3
 8005ef0:	db05      	blt.n	8005efe <_printf_i+0x216>
 8005ef2:	68e0      	ldr	r0, [r4, #12]
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	4298      	cmp	r0, r3
 8005ef8:	bfb8      	it	lt
 8005efa:	4618      	movlt	r0, r3
 8005efc:	e793      	b.n	8005e26 <_printf_i+0x13e>
 8005efe:	2301      	movs	r3, #1
 8005f00:	464a      	mov	r2, r9
 8005f02:	4639      	mov	r1, r7
 8005f04:	4630      	mov	r0, r6
 8005f06:	47c0      	blx	r8
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d08a      	beq.n	8005e22 <_printf_i+0x13a>
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	e7eb      	b.n	8005ee8 <_printf_i+0x200>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1a7      	bne.n	8005e64 <_printf_i+0x17c>
 8005f14:	780b      	ldrb	r3, [r1, #0]
 8005f16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f1e:	e765      	b.n	8005dec <_printf_i+0x104>
 8005f20:	0800745c 	.word	0x0800745c
 8005f24:	0800744b 	.word	0x0800744b

08005f28 <memcpy>:
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	1e43      	subs	r3, r0, #1
 8005f2c:	440a      	add	r2, r1
 8005f2e:	4291      	cmp	r1, r2
 8005f30:	d100      	bne.n	8005f34 <memcpy+0xc>
 8005f32:	bd10      	pop	{r4, pc}
 8005f34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f3c:	e7f7      	b.n	8005f2e <memcpy+0x6>

08005f3e <memmove>:
 8005f3e:	4288      	cmp	r0, r1
 8005f40:	b510      	push	{r4, lr}
 8005f42:	eb01 0302 	add.w	r3, r1, r2
 8005f46:	d803      	bhi.n	8005f50 <memmove+0x12>
 8005f48:	1e42      	subs	r2, r0, #1
 8005f4a:	4299      	cmp	r1, r3
 8005f4c:	d10c      	bne.n	8005f68 <memmove+0x2a>
 8005f4e:	bd10      	pop	{r4, pc}
 8005f50:	4298      	cmp	r0, r3
 8005f52:	d2f9      	bcs.n	8005f48 <memmove+0xa>
 8005f54:	1881      	adds	r1, r0, r2
 8005f56:	1ad2      	subs	r2, r2, r3
 8005f58:	42d3      	cmn	r3, r2
 8005f5a:	d100      	bne.n	8005f5e <memmove+0x20>
 8005f5c:	bd10      	pop	{r4, pc}
 8005f5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f66:	e7f7      	b.n	8005f58 <memmove+0x1a>
 8005f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f6c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f70:	e7eb      	b.n	8005f4a <memmove+0xc>

08005f72 <_realloc_r>:
 8005f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f74:	4607      	mov	r7, r0
 8005f76:	4614      	mov	r4, r2
 8005f78:	460e      	mov	r6, r1
 8005f7a:	b921      	cbnz	r1, 8005f86 <_realloc_r+0x14>
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f82:	f7ff bc47 	b.w	8005814 <_malloc_r>
 8005f86:	b922      	cbnz	r2, 8005f92 <_realloc_r+0x20>
 8005f88:	f7ff fbf6 	bl	8005778 <_free_r>
 8005f8c:	4625      	mov	r5, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f92:	f000 f814 	bl	8005fbe <_malloc_usable_size_r>
 8005f96:	4284      	cmp	r4, r0
 8005f98:	d90f      	bls.n	8005fba <_realloc_r+0x48>
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f7ff fc39 	bl	8005814 <_malloc_r>
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d0f2      	beq.n	8005f8e <_realloc_r+0x1c>
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4622      	mov	r2, r4
 8005fac:	f7ff ffbc 	bl	8005f28 <memcpy>
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	f7ff fbe0 	bl	8005778 <_free_r>
 8005fb8:	e7e9      	b.n	8005f8e <_realloc_r+0x1c>
 8005fba:	4635      	mov	r5, r6
 8005fbc:	e7e7      	b.n	8005f8e <_realloc_r+0x1c>

08005fbe <_malloc_usable_size_r>:
 8005fbe:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f1a0 0004 	sub.w	r0, r0, #4
 8005fc8:	bfbc      	itt	lt
 8005fca:	580b      	ldrlt	r3, [r1, r0]
 8005fcc:	18c0      	addlt	r0, r0, r3
 8005fce:	4770      	bx	lr

08005fd0 <_init>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	bf00      	nop
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr

08005fdc <_fini>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr
