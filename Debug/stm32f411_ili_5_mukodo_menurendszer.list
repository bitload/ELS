
stm32f411_ili_5_mukodo_menurendszer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006470  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002338  08006610  08006610  00016610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008948  08008948  00018948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008950  08008950  00018950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008954  08008954  00018954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  20000000  08008958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009cc  200000a8  08008a00  000200a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a74  08008a00  00020a74  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000285ef  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000058b5  00000000  00000000  000486c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011e44  00000000  00000000  0004df7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001538  00000000  00000000  0005fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000020e0  00000000  00000000  000612f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000bfb9  00000000  00000000  000633d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007e94  00000000  00000000  0006f391  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00077225  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004240  00000000  00000000  000772a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065f8 	.word	0x080065f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	080065f8 	.word	0x080065f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 f8aa 	bl	8000700 <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f85e 	bl	800067c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	20000040 	.word	0x20000040
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f82f 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f004 ffe4 	bl	80055cc <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200000ec 	.word	0x200000ec
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200000ec 	.word	0x200000ec

08000630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b538      	push	{r3, r4, r5, lr}
 8000632:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff fff6 	bl	8000624 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000638:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	bf1c      	itt	ne
 800063c:	4b05      	ldrne	r3, [pc, #20]	; (8000654 <HAL_Delay+0x24>)
 800063e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000640:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000642:	bf18      	it	ne
 8000644:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000646:	f7ff ffed 	bl	8000624 <HAL_GetTick>
 800064a:	1b40      	subs	r0, r0, r5
 800064c:	4284      	cmp	r4, r0
 800064e:	d8fa      	bhi.n	8000646 <HAL_Delay+0x16>
  {
  }
}
 8000650:	bd38      	pop	{r3, r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000

08000658 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800065a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	0c1b      	lsrs	r3, r3, #16
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	0200      	lsls	r0, r0, #8
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000672:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000674:	60d3      	str	r3, [r2, #12]
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	68dc      	ldr	r4, [r3, #12]
 8000682:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000686:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	2b04      	cmp	r3, #4
 800068e:	bf28      	it	cs
 8000690:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 0501 	mov.w	r5, #1
 8000698:	fa05 f303 	lsl.w	r3, r5, r3
 800069c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	bf8c      	ite	hi
 80006a2:	3c03      	subhi	r4, #3
 80006a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	4019      	ands	r1, r3
 80006a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006aa:	fa05 f404 	lsl.w	r4, r5, r4
 80006ae:	3c01      	subs	r4, #1
 80006b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	ea42 0201 	orr.w	r2, r2, r1
 80006b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfad      	iteet	ge
 80006be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	f000 000f 	andlt.w	r0, r0, #15
 80006c6:	4b06      	ldrlt	r3, [pc, #24]	; (80006e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	bfb5      	itete	lt
 80006ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000ed14 	.word	0xe000ed14

080006e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006e4:	2800      	cmp	r0, #0
 80006e6:	db08      	blt.n	80006fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e8:	0942      	lsrs	r2, r0, #5
 80006ea:	2301      	movs	r3, #1
 80006ec:	f000 001f 	and.w	r0, r0, #31
 80006f0:	fa03 f000 	lsl.w	r0, r3, r0
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <HAL_NVIC_EnableIRQ+0x18>)
 80006f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100

08000700 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000700:	3801      	subs	r0, #1
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d20a      	bcs.n	800071e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	21f0      	movs	r1, #240	; 0xf0
 8000710:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800072c:	6803      	ldr	r3, [r0, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000734:	f023 0303 	bic.w	r3, r3, #3
 8000738:	2118      	movs	r1, #24
 800073a:	3a10      	subs	r2, #16
 800073c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000740:	4904      	ldr	r1, [pc, #16]	; (8000754 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000742:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000744:	bf88      	it	hi
 8000746:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000748:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800074a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800074c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800074e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	08006642 	.word	0x08006642

08000758 <HAL_DMA_Init>:
{
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800075c:	f7ff ff62 	bl	8000624 <HAL_GetTick>
 8000760:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000762:	2c00      	cmp	r4, #0
 8000764:	d071      	beq.n	800084a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000766:	2300      	movs	r3, #0
 8000768:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800076c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800076e:	2302      	movs	r3, #2
 8000770:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000774:	6813      	ldr	r3, [r2, #0]
 8000776:	f023 0301 	bic.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800077c:	6821      	ldr	r1, [r4, #0]
 800077e:	680b      	ldr	r3, [r1, #0]
 8000780:	07d8      	lsls	r0, r3, #31
 8000782:	d43c      	bmi.n	80007fe <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000784:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000786:	4d32      	ldr	r5, [pc, #200]	; (8000850 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000788:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800078a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800078c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800078e:	68a3      	ldr	r3, [r4, #8]
 8000790:	4313      	orrs	r3, r2
 8000792:	68e2      	ldr	r2, [r4, #12]
 8000794:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000796:	6922      	ldr	r2, [r4, #16]
 8000798:	4313      	orrs	r3, r2
 800079a:	6962      	ldr	r2, [r4, #20]
 800079c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800079e:	69e2      	ldr	r2, [r4, #28]
 80007a0:	4303      	orrs	r3, r0
 80007a2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007a4:	6a22      	ldr	r2, [r4, #32]
 80007a6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007aa:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007ac:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007b0:	bf01      	itttt	eq
 80007b2:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80007b4:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80007b6:	4335      	orreq	r5, r6
 80007b8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80007ba:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007bc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007be:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007c0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007c8:	d10b      	bne.n	80007e2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80007ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007cc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80007ce:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007d0:	b13d      	cbz	r5, 80007e2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007d2:	b9f8      	cbnz	r0, 8000814 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80007d4:	2a01      	cmp	r2, #1
 80007d6:	d02d      	beq.n	8000834 <HAL_DMA_Init+0xdc>
 80007d8:	d301      	bcc.n	80007de <HAL_DMA_Init+0x86>
 80007da:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80007dc:	d101      	bne.n	80007e2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007de:	01ea      	lsls	r2, r5, #7
 80007e0:	d42b      	bmi.n	800083a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80007e2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80007e4:	4620      	mov	r0, r4
 80007e6:	f7ff ffa1 	bl	800072c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80007ec:	233f      	movs	r3, #63	; 0x3f
 80007ee:	4093      	lsls	r3, r2
 80007f0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80007f4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80007f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007fe:	f7ff ff11 	bl	8000624 <HAL_GetTick>
 8000802:	1b40      	subs	r0, r0, r5
 8000804:	2805      	cmp	r0, #5
 8000806:	d9b9      	bls.n	800077c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000808:	2320      	movs	r3, #32
 800080a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800080c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800080e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000812:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000814:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000818:	d113      	bne.n	8000842 <HAL_DMA_Init+0xea>
    switch (tmp)
 800081a:	2a03      	cmp	r2, #3
 800081c:	d8e1      	bhi.n	80007e2 <HAL_DMA_Init+0x8a>
 800081e:	a001      	add	r0, pc, #4	; (adr r0, 8000824 <HAL_DMA_Init+0xcc>)
 8000820:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000824:	0800083b 	.word	0x0800083b
 8000828:	080007df 	.word	0x080007df
 800082c:	0800083b 	.word	0x0800083b
 8000830:	08000835 	.word	0x08000835
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000834:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000838:	d1d3      	bne.n	80007e2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800083e:	2001      	movs	r0, #1
 8000840:	e7e5      	b.n	800080e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000842:	2a02      	cmp	r2, #2
 8000844:	d9f9      	bls.n	800083a <HAL_DMA_Init+0xe2>
 8000846:	2a03      	cmp	r2, #3
 8000848:	e7c8      	b.n	80007dc <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800084a:	2001      	movs	r0, #1
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	bf00      	nop
 8000850:	f010803f 	.word	0xf010803f

08000854 <HAL_DMA_Start_IT>:
{
 8000854:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000856:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800085a:	2c01      	cmp	r4, #1
 800085c:	d036      	beq.n	80008cc <HAL_DMA_Start_IT+0x78>
 800085e:	2401      	movs	r4, #1
 8000860:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000864:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000868:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800086a:	2c01      	cmp	r4, #1
 800086c:	f04f 0500 	mov.w	r5, #0
 8000870:	f04f 0402 	mov.w	r4, #2
 8000874:	d128      	bne.n	80008c8 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000876:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800087a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800087c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800087e:	6825      	ldr	r5, [r4, #0]
 8000880:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000884:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000886:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000888:	6883      	ldr	r3, [r0, #8]
 800088a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800088c:	bf0e      	itee	eq
 800088e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000890:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000892:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000894:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000896:	bf08      	it	eq
 8000898:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800089a:	233f      	movs	r3, #63	; 0x3f
 800089c:	4093      	lsls	r3, r2
 800089e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	f043 0316 	orr.w	r3, r3, #22
 80008a6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80008a8:	6963      	ldr	r3, [r4, #20]
 80008aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ae:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80008b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008b2:	b11b      	cbz	r3, 80008bc <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80008b4:	6823      	ldr	r3, [r4, #0]
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008c4:	2000      	movs	r0, #0
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80008c8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80008cc:	2002      	movs	r0, #2
}
 80008ce:	bd70      	pop	{r4, r5, r6, pc}

080008d0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008d0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d003      	beq.n	80008e0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
 80008de:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80008e0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80008e2:	2305      	movs	r3, #5
 80008e4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80008e8:	6813      	ldr	r3, [r2, #0]
 80008ea:	f023 0301 	bic.w	r3, r3, #1
 80008ee:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80008f0:	2000      	movs	r0, #0
}
 80008f2:	4770      	bx	lr

080008f4 <HAL_DMA_IRQHandler>:
{
 80008f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008fa:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008fc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80008fe:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000900:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000902:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000904:	2208      	movs	r2, #8
 8000906:	409a      	lsls	r2, r3
 8000908:	4216      	tst	r6, r2
{
 800090a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800090c:	d00c      	beq.n	8000928 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800090e:	6801      	ldr	r1, [r0, #0]
 8000910:	6808      	ldr	r0, [r1, #0]
 8000912:	0740      	lsls	r0, r0, #29
 8000914:	d508      	bpl.n	8000928 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000916:	6808      	ldr	r0, [r1, #0]
 8000918:	f020 0004 	bic.w	r0, r0, #4
 800091c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800091e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000920:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000922:	f042 0201 	orr.w	r2, r2, #1
 8000926:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000928:	2201      	movs	r2, #1
 800092a:	409a      	lsls	r2, r3
 800092c:	4216      	tst	r6, r2
 800092e:	d008      	beq.n	8000942 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000930:	6821      	ldr	r1, [r4, #0]
 8000932:	6949      	ldr	r1, [r1, #20]
 8000934:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000936:	bf41      	itttt	mi
 8000938:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800093a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800093c:	f042 0202 	orrmi.w	r2, r2, #2
 8000940:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000942:	2204      	movs	r2, #4
 8000944:	409a      	lsls	r2, r3
 8000946:	4216      	tst	r6, r2
 8000948:	d008      	beq.n	800095c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800094a:	6821      	ldr	r1, [r4, #0]
 800094c:	6809      	ldr	r1, [r1, #0]
 800094e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000950:	bf41      	itttt	mi
 8000952:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000954:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000956:	f042 0204 	orrmi.w	r2, r2, #4
 800095a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800095c:	2210      	movs	r2, #16
 800095e:	409a      	lsls	r2, r3
 8000960:	4216      	tst	r6, r2
 8000962:	d010      	beq.n	8000986 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	6819      	ldr	r1, [r3, #0]
 8000968:	0709      	lsls	r1, r1, #28
 800096a:	d50c      	bpl.n	8000986 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800096c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	0350      	lsls	r0, r2, #13
 8000972:	d535      	bpl.n	80009e0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	0319      	lsls	r1, r3, #12
 8000978:	d401      	bmi.n	800097e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800097a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800097c:	e000      	b.n	8000980 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800097e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000980:	b10b      	cbz	r3, 8000986 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000982:	4620      	mov	r0, r4
 8000984:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000986:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000988:	2220      	movs	r2, #32
 800098a:	408a      	lsls	r2, r1
 800098c:	4216      	tst	r6, r2
 800098e:	d038      	beq.n	8000a02 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	06c6      	lsls	r6, r0, #27
 8000996:	d534      	bpl.n	8000a02 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000998:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800099a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800099e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009a0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009a2:	d125      	bne.n	80009f0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009a4:	f022 0216 	bic.w	r2, r2, #22
 80009a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009b0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009b4:	b90a      	cbnz	r2, 80009ba <HAL_DMA_IRQHandler+0xc6>
 80009b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009b8:	b11a      	cbz	r2, 80009c2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	f022 0208 	bic.w	r2, r2, #8
 80009c0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009c2:	233f      	movs	r3, #63	; 0x3f
 80009c4:	408b      	lsls	r3, r1
 80009c6:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80009c8:	2300      	movs	r3, #0
 80009ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80009ce:	2301      	movs	r3, #1
 80009d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80009d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80009d6:	b10b      	cbz	r3, 80009dc <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80009d8:	4620      	mov	r0, r4
 80009da:	4798      	blx	r3
}
 80009dc:	b003      	add	sp, #12
 80009de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009e4:	bf5e      	ittt	pl
 80009e6:	681a      	ldrpl	r2, [r3, #0]
 80009e8:	f022 0208 	bicpl.w	r2, r2, #8
 80009ec:	601a      	strpl	r2, [r3, #0]
 80009ee:	e7c4      	b.n	800097a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009f0:	0350      	lsls	r0, r2, #13
 80009f2:	d528      	bpl.n	8000a46 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	0319      	lsls	r1, r3, #12
 80009f8:	d432      	bmi.n	8000a60 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80009fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80009fc:	b10b      	cbz	r3, 8000a02 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80009fe:	4620      	mov	r0, r4
 8000a00:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0e9      	beq.n	80009dc <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a0a:	07da      	lsls	r2, r3, #31
 8000a0c:	d519      	bpl.n	8000a42 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a0e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000a10:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a16:	6813      	ldr	r3, [r2, #0]
 8000a18:	f023 0301 	bic.w	r3, r3, #1
 8000a1c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a1e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a22:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000a26:	9b01      	ldr	r3, [sp, #4]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	429f      	cmp	r7, r3
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	d302      	bcc.n	8000a36 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a30:	6813      	ldr	r3, [r2, #0]
 8000a32:	07db      	lsls	r3, r3, #31
 8000a34:	d4f7      	bmi.n	8000a26 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000a36:	2300      	movs	r3, #0
 8000a38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000a42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a44:	e7c7      	b.n	80009d6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a4c:	d108      	bne.n	8000a60 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a4e:	6819      	ldr	r1, [r3, #0]
 8000a50:	f021 0110 	bic.w	r1, r1, #16
 8000a54:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a56:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000a58:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a62:	e7cb      	b.n	80009fc <HAL_DMA_IRQHandler+0x108>
 8000a64:	20000040 	.word	0x20000040

08000a68 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a68:	4908      	ldr	r1, [pc, #32]	; (8000a8c <FLASH_Program_DoubleWord+0x24>)
{
 8000a6a:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a6c:	690c      	ldr	r4, [r1, #16]
 8000a6e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000a72:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000a74:	690c      	ldr	r4, [r1, #16]
 8000a76:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000a7a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000a7c:	690c      	ldr	r4, [r1, #16]
 8000a7e:	f044 0401 	orr.w	r4, r4, #1
 8000a82:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000a84:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000a86:	6043      	str	r3, [r0, #4]
 8000a88:	bd10      	pop	{r4, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023c00 	.word	0x40023c00

08000a90 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <FLASH_Program_Word+0x20>)
 8000a92:	691a      	ldr	r2, [r3, #16]
 8000a94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a98:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000a9a:	691a      	ldr	r2, [r3, #16]
 8000a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000aa0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000aa2:	691a      	ldr	r2, [r3, #16]
 8000aa4:	f042 0201 	orr.w	r2, r2, #1
 8000aa8:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000aaa:	6001      	str	r1, [r0, #0]
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <FLASH_Program_HalfWord+0x20>)
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000abc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000abe:	691a      	ldr	r2, [r3, #16]
 8000ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ac4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ac6:	691a      	ldr	r2, [r3, #16]
 8000ac8:	f042 0201 	orr.w	r2, r2, #1
 8000acc:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000ace:	8001      	strh	r1, [r0, #0]
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023c00 	.word	0x40023c00

08000ad8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <FLASH_SetErrorCode+0x84>)
 8000ada:	68da      	ldr	r2, [r3, #12]
 8000adc:	06d0      	lsls	r0, r2, #27
 8000ade:	d506      	bpl.n	8000aee <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000ae0:	491f      	ldr	r1, [pc, #124]	; (8000b60 <FLASH_SetErrorCode+0x88>)
 8000ae2:	69ca      	ldr	r2, [r1, #28]
 8000ae4:	f042 0210 	orr.w	r2, r2, #16
 8000ae8:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000aea:	2210      	movs	r2, #16
 8000aec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	0691      	lsls	r1, r2, #26
 8000af2:	d506      	bpl.n	8000b02 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000af4:	491a      	ldr	r1, [pc, #104]	; (8000b60 <FLASH_SetErrorCode+0x88>)
 8000af6:	69ca      	ldr	r2, [r1, #28]
 8000af8:	f042 0208 	orr.w	r2, r2, #8
 8000afc:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000afe:	2220      	movs	r2, #32
 8000b00:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <FLASH_SetErrorCode+0x84>)
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	0652      	lsls	r2, r2, #25
 8000b08:	d506      	bpl.n	8000b18 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000b0a:	4915      	ldr	r1, [pc, #84]	; (8000b60 <FLASH_SetErrorCode+0x88>)
 8000b0c:	69ca      	ldr	r2, [r1, #28]
 8000b0e:	f042 0204 	orr.w	r2, r2, #4
 8000b12:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000b14:	2240      	movs	r2, #64	; 0x40
 8000b16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	0610      	lsls	r0, r2, #24
 8000b1c:	d506      	bpl.n	8000b2c <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000b1e:	4910      	ldr	r1, [pc, #64]	; (8000b60 <FLASH_SetErrorCode+0x88>)
 8000b20:	69ca      	ldr	r2, [r1, #28]
 8000b22:	f042 0202 	orr.w	r2, r2, #2
 8000b26:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <FLASH_SetErrorCode+0x84>)
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	05d1      	lsls	r1, r2, #23
 8000b32:	d507      	bpl.n	8000b44 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000b34:	490a      	ldr	r1, [pc, #40]	; (8000b60 <FLASH_SetErrorCode+0x88>)
 8000b36:	69ca      	ldr	r2, [r1, #28]
 8000b38:	f042 0201 	orr.w	r2, r2, #1
 8000b3c:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000b44:	68da      	ldr	r2, [r3, #12]
 8000b46:	0792      	lsls	r2, r2, #30
 8000b48:	d506      	bpl.n	8000b58 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000b4a:	4905      	ldr	r1, [pc, #20]	; (8000b60 <FLASH_SetErrorCode+0x88>)
 8000b4c:	69ca      	ldr	r2, [r1, #28]
 8000b4e:	f042 0220 	orr.w	r2, r2, #32
 8000b52:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000b54:	2202      	movs	r2, #2
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00
 8000b60:	200000f0 	.word	0x200000f0

08000b64 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_FLASH_Unlock+0x1c>)
 8000b66:	691a      	ldr	r2, [r3, #16]
 8000b68:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000b6a:	bfbf      	itttt	lt
 8000b6c:	4a05      	ldrlt	r2, [pc, #20]	; (8000b84 <HAL_FLASH_Unlock+0x20>)
 8000b6e:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000b70:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8000b74:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b76:	bfba      	itte	lt
 8000b78:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000b7a:	0fc0      	lsrlt	r0, r0, #31
 8000b7c:	2000      	movge	r0, #0
}
 8000b7e:	4770      	bx	lr
 8000b80:	40023c00 	.word	0x40023c00
 8000b84:	45670123 	.word	0x45670123

08000b88 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000b88:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <HAL_FLASH_Lock+0x10>)
 8000b8a:	6913      	ldr	r3, [r2, #16]
 8000b8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b90:	6113      	str	r3, [r2, #16]
}
 8000b92:	2000      	movs	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <FLASH_WaitForLastOperation>:
{ 
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000ba0:	4c12      	ldr	r4, [pc, #72]	; (8000bec <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ba2:	2200      	movs	r2, #0
{ 
 8000ba4:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ba6:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8000ba8:	f7ff fd3c 	bl	8000624 <HAL_GetTick>
 8000bac:	4626      	mov	r6, r4
 8000bae:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000bb0:	68e3      	ldr	r3, [r4, #12]
 8000bb2:	03da      	lsls	r2, r3, #15
 8000bb4:	d40c      	bmi.n	8000bd0 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000bb6:	68e3      	ldr	r3, [r4, #12]
 8000bb8:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000bba:	bf44      	itt	mi
 8000bbc:	2301      	movmi	r3, #1
 8000bbe:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000bc0:	68f0      	ldr	r0, [r6, #12]
 8000bc2:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8000bc6:	d002      	beq.n	8000bce <FLASH_WaitForLastOperation+0x32>
    FLASH_SetErrorCode();
 8000bc8:	f7ff ff86 	bl	8000ad8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000bcc:	2001      	movs	r0, #1
}  
 8000bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000bd0:	1c69      	adds	r1, r5, #1
 8000bd2:	d0ed      	beq.n	8000bb0 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000bd4:	b90d      	cbnz	r5, 8000bda <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8000bd6:	2003      	movs	r0, #3
 8000bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000bda:	f7ff fd23 	bl	8000624 <HAL_GetTick>
 8000bde:	1bc0      	subs	r0, r0, r7
 8000be0:	4285      	cmp	r5, r0
 8000be2:	d2e5      	bcs.n	8000bb0 <FLASH_WaitForLastOperation+0x14>
 8000be4:	e7f7      	b.n	8000bd6 <FLASH_WaitForLastOperation+0x3a>
 8000be6:	bf00      	nop
 8000be8:	200000f0 	.word	0x200000f0
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <HAL_FLASH_Program>:
{
 8000bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000bf4:	4d20      	ldr	r5, [pc, #128]	; (8000c78 <HAL_FLASH_Program+0x88>)
{
 8000bf6:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8000bf8:	7e2b      	ldrb	r3, [r5, #24]
 8000bfa:	2b01      	cmp	r3, #1
{
 8000bfc:	4607      	mov	r7, r0
 8000bfe:	460e      	mov	r6, r1
 8000c00:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8000c02:	d035      	beq.n	8000c70 <HAL_FLASH_Program+0x80>
 8000c04:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c06:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000c0a:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c0c:	f7ff ffc6 	bl	8000b9c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000c10:	b9b0      	cbnz	r0, 8000c40 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000c12:	b9cf      	cbnz	r7, 8000c48 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_FLASH_Program+0x8c>)
 8000c16:	691a      	ldr	r2, [r3, #16]
 8000c18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000c1c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000c1e:	691a      	ldr	r2, [r3, #16]
 8000c20:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000c22:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000c24:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8000c26:	f042 0201 	orr.w	r2, r2, #1
 8000c2a:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8000c2c:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c32:	f7ff ffb3 	bl	8000b9c <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8000c36:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <HAL_FLASH_Program+0x8c>)
 8000c38:	6913      	ldr	r3, [r2, #16]
 8000c3a:	f023 0301 	bic.w	r3, r3, #1
 8000c3e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000c40:	2300      	movs	r3, #0
 8000c42:	762b      	strb	r3, [r5, #24]
  return status;
 8000c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c48:	2f01      	cmp	r7, #1
 8000c4a:	d104      	bne.n	8000c56 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000c4c:	b2a1      	uxth	r1, r4
 8000c4e:	4630      	mov	r0, r6
 8000c50:	f7ff ff30 	bl	8000ab4 <FLASH_Program_HalfWord>
 8000c54:	e7eb      	b.n	8000c2e <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c56:	2f02      	cmp	r7, #2
 8000c58:	d104      	bne.n	8000c64 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000c5a:	4621      	mov	r1, r4
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	f7ff ff17 	bl	8000a90 <FLASH_Program_Word>
 8000c62:	e7e4      	b.n	8000c2e <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8000c64:	4622      	mov	r2, r4
 8000c66:	4643      	mov	r3, r8
 8000c68:	4630      	mov	r0, r6
 8000c6a:	f7ff fefd 	bl	8000a68 <FLASH_Program_DoubleWord>
 8000c6e:	e7de      	b.n	8000c2e <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8000c70:	2002      	movs	r0, #2
}
 8000c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c76:	bf00      	nop
 8000c78:	200000f0 	.word	0x200000f0
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000c80:	b139      	cbz	r1, 8000c92 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000c82:	2901      	cmp	r1, #1
 8000c84:	d01c      	beq.n	8000cc0 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000c86:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000c88:	bf0c      	ite	eq
 8000c8a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000c8e:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <FLASH_Erase_Sector+0x48>)
 8000c94:	691a      	ldr	r2, [r3, #16]
 8000c96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000c9a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000c9c:	691a      	ldr	r2, [r3, #16]
 8000c9e:	4311      	orrs	r1, r2
 8000ca0:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ca8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	f042 0202 	orr.w	r2, r2, #2
 8000cb0:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000cb4:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000cb6:	691a      	ldr	r2, [r3, #16]
 8000cb8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc4:	e7e5      	b.n	8000c92 <FLASH_Erase_Sector+0x12>
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd4:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000e74 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cd8:	4a64      	ldr	r2, [pc, #400]	; (8000e6c <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000cdc:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce0:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000ce4:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce8:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000cec:	42b7      	cmp	r7, r6
 8000cee:	f040 80ad 	bne.w	8000e4c <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf2:	684c      	ldr	r4, [r1, #4]
 8000cf4:	f024 0a10 	bic.w	sl, r4, #16
 8000cf8:	f1ba 0f02 	cmp.w	sl, #2
 8000cfc:	d116      	bne.n	8000d2c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000cfe:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000d02:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d06:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000d0a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d0e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d12:	f04f 0e0f 	mov.w	lr, #15
 8000d16:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000d1a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d1e:	690d      	ldr	r5, [r1, #16]
 8000d20:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d24:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d28:	f8cc 5020 	str.w	r5, [ip, #32]
 8000d2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d30:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000d32:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d36:	fa05 f50c 	lsl.w	r5, r5, ip
 8000d3a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d40:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d44:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d48:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d4c:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d50:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d54:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000d56:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5a:	d815      	bhi.n	8000d88 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000d5c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d60:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d64:	68cd      	ldr	r5, [r1, #12]
 8000d66:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000d6a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000d6e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d72:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d76:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d7a:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000d7e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000d82:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000d86:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d88:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8a:	9d00      	ldr	r5, [sp, #0]
 8000d8c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8e:	688f      	ldr	r7, [r1, #8]
 8000d90:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d94:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000d96:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d98:	00e5      	lsls	r5, r4, #3
 8000d9a:	d557      	bpl.n	8000e4c <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9c:	f04f 0b00 	mov.w	fp, #0
 8000da0:	f8cd b00c 	str.w	fp, [sp, #12]
 8000da4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da8:	4d31      	ldr	r5, [pc, #196]	; (8000e70 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000dae:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000db2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000db6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000dba:	9703      	str	r7, [sp, #12]
 8000dbc:	9f03      	ldr	r7, [sp, #12]
 8000dbe:	f023 0703 	bic.w	r7, r3, #3
 8000dc2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000dc6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dca:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000dce:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000dd6:	f04f 0e0f 	mov.w	lr, #15
 8000dda:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dde:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de0:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de4:	d039      	beq.n	8000e5a <HAL_GPIO_Init+0x18e>
 8000de6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dea:	42a8      	cmp	r0, r5
 8000dec:	d037      	beq.n	8000e5e <HAL_GPIO_Init+0x192>
 8000dee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000df2:	42a8      	cmp	r0, r5
 8000df4:	d035      	beq.n	8000e62 <HAL_GPIO_Init+0x196>
 8000df6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dfa:	42a8      	cmp	r0, r5
 8000dfc:	d033      	beq.n	8000e66 <HAL_GPIO_Init+0x19a>
 8000dfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e02:	42a8      	cmp	r0, r5
 8000e04:	bf14      	ite	ne
 8000e06:	2507      	movne	r5, #7
 8000e08:	2504      	moveq	r5, #4
 8000e0a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e0e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e12:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000e14:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e16:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e18:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	bf0c      	ite	eq
 8000e1e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e20:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000e22:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000e24:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e26:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e2a:	bf0c      	ite	eq
 8000e2c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e2e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000e30:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e32:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e34:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e38:	bf0c      	ite	eq
 8000e3a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e3c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000e3e:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000e40:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e42:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e44:	bf54      	ite	pl
 8000e46:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000e48:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000e4a:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	2b10      	cmp	r3, #16
 8000e50:	f47f af47 	bne.w	8000ce2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000e54:	b005      	add	sp, #20
 8000e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5a:	465d      	mov	r5, fp
 8000e5c:	e7d5      	b.n	8000e0a <HAL_GPIO_Init+0x13e>
 8000e5e:	2501      	movs	r5, #1
 8000e60:	e7d3      	b.n	8000e0a <HAL_GPIO_Init+0x13e>
 8000e62:	2502      	movs	r5, #2
 8000e64:	e7d1      	b.n	8000e0a <HAL_GPIO_Init+0x13e>
 8000e66:	2503      	movs	r5, #3
 8000e68:	e7cf      	b.n	8000e0a <HAL_GPIO_Init+0x13e>
 8000e6a:	bf00      	nop
 8000e6c:	40013c00 	.word	0x40013c00
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e78:	6903      	ldr	r3, [r0, #16]
 8000e7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000e7c:	bf14      	ite	ne
 8000e7e:	2001      	movne	r0, #1
 8000e80:	2000      	moveq	r0, #0
 8000e82:	4770      	bx	lr

08000e84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e84:	b10a      	cbz	r2, 8000e8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e86:	6181      	str	r1, [r0, #24]
 8000e88:	4770      	bx	lr
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	e7fb      	b.n	8000e86 <HAL_GPIO_WritePin+0x2>

08000e8e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000e8e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e92:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000e94:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8000e98:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8000e9c:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8000ea0:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8000ea4:	2801      	cmp	r0, #1
 8000ea6:	d028      	beq.n	8000efa <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 8000ea8:	2028      	movs	r0, #40	; 0x28
 8000eaa:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8000eae:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8000eb0:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000eb2:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8000eb6:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000eba:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000ebe:	bf08      	it	eq
 8000ec0:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8000ec2:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000ec6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8000eca:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000ece:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000ed2:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000ed6:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8000eda:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8000ede:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8000ee2:	f8cd c008 	str.w	ip, [sp, #8]
 8000ee6:	e88d 4080 	stmia.w	sp, {r7, lr}
 8000eea:	6820      	ldr	r0, [r4, #0]
 8000eec:	f001 ffa8 	bl	8002e40 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000ef0:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8000ef4:	b004      	add	sp, #16
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8000efa:	2002      	movs	r0, #2
 8000efc:	e7fa      	b.n	8000ef4 <HAL_HCD_HC_Init+0x66>

08000efe <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8000efe:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8000f02:	2b01      	cmp	r3, #1
{
 8000f04:	b510      	push	{r4, lr}
 8000f06:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000f08:	d009      	beq.n	8000f1e <HAL_HCD_HC_Halt+0x20>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f10:	6800      	ldr	r0, [r0, #0]
 8000f12:	f002 f81f 	bl	8002f54 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8000f1c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8000f1e:	2002      	movs	r0, #2
}
 8000f20:	bd10      	pop	{r4, pc}

08000f22 <HAL_HCD_Init>:
{
 8000f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8000f26:	4607      	mov	r7, r0
{
 8000f28:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d041      	beq.n	8000fb2 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f2e:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8000f32:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f38:	b91b      	cbnz	r3, 8000f42 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8000f3a:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8000f3e:	f004 fd95 	bl	8005a6c <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8000f4a:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f4c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8000f50:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8000f54:	bf08      	it	eq
 8000f56:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000f58:	f001 fe2e 	bl	8002bb8 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f5e:	466d      	mov	r5, sp
 8000f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f6e:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000f72:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000f74:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000f78:	6838      	ldr	r0, [r7, #0]
 8000f7a:	f001 fdd7 	bl	8002b2c <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000f7e:	f856 0b10 	ldr.w	r0, [r6], #16
 8000f82:	2101      	movs	r1, #1
 8000f84:	f001 fe1e 	bl	8002bc4 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000f88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f8a:	466d      	mov	r5, sp
 8000f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f96:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f9a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000f9e:	6838      	ldr	r0, [r7, #0]
 8000fa0:	f001 fece 	bl	8002d40 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8000faa:	2000      	movs	r0, #0
}
 8000fac:	b00a      	add	sp, #40	; 0x28
 8000fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	e7fa      	b.n	8000fac <HAL_HCD_Init+0x8a>
	...

08000fb8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000fba:	2428      	movs	r4, #40	; 0x28
 8000fbc:	fb04 0401 	mla	r4, r4, r1, r0
{
 8000fc0:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8000fc4:	9e06      	ldr	r6, [sp, #24]
 8000fc6:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000fca:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000fce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8000fd2:	b96f      	cbnz	r7, 8000ff0 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000fd4:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000fd6:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8000fdc:	d02b      	beq.n	8001036 <HAL_HCD_HC_SubmitRequest+0x7e>
 8000fde:	42bb      	cmp	r3, r7
 8000fe0:	d029      	beq.n	8001036 <HAL_HCD_HC_SubmitRequest+0x7e>
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d131      	bne.n	800104a <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fe6:	2328      	movs	r3, #40	; 0x28
 8000fe8:	fb03 0301 	mla	r3, r3, r1, r0
 8000fec:	2200      	movs	r2, #0
 8000fee:	e02a      	b.n	8001046 <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ff0:	f04f 0e02 	mov.w	lr, #2
 8000ff4:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d826      	bhi.n	800104a <HAL_HCD_HC_SubmitRequest+0x92>
 8000ffc:	a401      	add	r4, pc, #4	; (adr r4, 8001004 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8000ffe:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8001002:	bf00      	nop
 8001004:	08001015 	.word	0x08001015
 8001008:	08000fe7 	.word	0x08000fe7
 800100c:	08001037 	.word	0x08001037
 8001010:	08001037 	.word	0x08001037
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001014:	2f01      	cmp	r7, #1
 8001016:	d118      	bne.n	800104a <HAL_HCD_HC_SubmitRequest+0x92>
 8001018:	b9ba      	cbnz	r2, 800104a <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 800101a:	b925      	cbnz	r5, 8001026 <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 800101c:	2328      	movs	r3, #40	; 0x28
 800101e:	fb03 0301 	mla	r3, r3, r1, r0
 8001022:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001026:	2328      	movs	r3, #40	; 0x28
 8001028:	fb03 0301 	mla	r3, r3, r1, r0
 800102c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001030:	b14a      	cbz	r2, 8001046 <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001032:	2202      	movs	r2, #2
 8001034:	e007      	b.n	8001046 <HAL_HCD_HC_SubmitRequest+0x8e>
 8001036:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001038:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 800103c:	b9d2      	cbnz	r2, 8001074 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800103e:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8001042:	2c00      	cmp	r4, #0
 8001044:	d1f5      	bne.n	8001032 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800104a:	2428      	movs	r4, #40	; 0x28
 800104c:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001050:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8001052:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001056:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001058:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 800105a:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800105c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8001060:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8001062:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001066:	3138      	adds	r1, #56	; 0x38
 8001068:	7c02      	ldrb	r2, [r0, #16]
 800106a:	6800      	ldr	r0, [r0, #0]
}
 800106c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001070:	f001 bfd4 	b.w	800301c <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001074:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001078:	e7da      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x78>
 800107a:	bf00      	nop

0800107c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001080:	6806      	ldr	r6, [r0, #0]
{
 8001082:	b087      	sub	sp, #28
 8001084:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001086:	4630      	mov	r0, r6
 8001088:	f001 fdfc 	bl	8002c84 <USB_GetMode>
 800108c:	2801      	cmp	r0, #1
 800108e:	f040 80b4 	bne.w	80011fa <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001092:	6820      	ldr	r0, [r4, #0]
 8001094:	f001 fdf2 	bl	8002c7c <USB_ReadInterrupts>
 8001098:	2800      	cmp	r0, #0
 800109a:	f000 80ae 	beq.w	80011fa <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800109e:	6820      	ldr	r0, [r4, #0]
 80010a0:	f001 fdec 	bl	8002c7c <USB_ReadInterrupts>
 80010a4:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010a6:	bf48      	it	mi
 80010a8:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010aa:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010ac:	bf44      	itt	mi
 80010ae:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 80010b2:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010b4:	f001 fde2 	bl	8002c7c <USB_ReadInterrupts>
 80010b8:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010ba:	bf48      	it	mi
 80010bc:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010be:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010c0:	bf44      	itt	mi
 80010c2:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 80010c6:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010c8:	f001 fdd8 	bl	8002c7c <USB_ReadInterrupts>
 80010cc:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010ce:	bf48      	it	mi
 80010d0:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010d2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010d4:	bf44      	itt	mi
 80010d6:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 80010da:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010dc:	f001 fdce 	bl	8002c7c <USB_ReadInterrupts>
 80010e0:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80010e2:	bf48      	it	mi
 80010e4:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80010e6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80010e8:	bf44      	itt	mi
 80010ea:	2202      	movmi	r2, #2
 80010ec:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80010ee:	f001 fdc5 	bl	8002c7c <USB_ReadInterrupts>
 80010f2:	0082      	lsls	r2, r0, #2
 80010f4:	d510      	bpl.n	8001118 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80010f6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80010fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80010fe:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001102:	4620      	mov	r0, r4
 8001104:	f004 fd04 	bl	8005b10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001108:	2101      	movs	r1, #1
 800110a:	6820      	ldr	r0, [r4, #0]
 800110c:	f001 fdbe 	bl	8002c8c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001118:	6820      	ldr	r0, [r4, #0]
 800111a:	f001 fdaf 	bl	8002c7c <USB_ReadInterrupts>
 800111e:	01c3      	lsls	r3, r0, #7
 8001120:	d542      	bpl.n	80011a8 <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001122:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001124:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001128:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 800112a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800112e:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001130:	9b05      	ldr	r3, [sp, #20]
 8001132:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001136:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001138:	9b04      	ldr	r3, [sp, #16]
 800113a:	079f      	lsls	r7, r3, #30
 800113c:	d50d      	bpl.n	800115a <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800113e:	9b04      	ldr	r3, [sp, #16]
 8001140:	07d8      	lsls	r0, r3, #31
 8001142:	d506      	bpl.n	8001152 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001144:	69ab      	ldr	r3, [r5, #24]
 8001146:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800114a:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800114c:	4620      	mov	r0, r4
 800114e:	f004 fcdb 	bl	8005b08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001152:	9b05      	ldr	r3, [sp, #20]
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800115a:	9b04      	ldr	r3, [sp, #16]
 800115c:	0719      	lsls	r1, r3, #28
 800115e:	d519      	bpl.n	8001194 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001160:	9b05      	ldr	r3, [sp, #20]
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001168:	9b04      	ldr	r3, [sp, #16]
 800116a:	075a      	lsls	r2, r3, #29
 800116c:	d550      	bpl.n	8001210 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800116e:	69a1      	ldr	r1, [r4, #24]
 8001170:	2902      	cmp	r1, #2
 8001172:	d145      	bne.n	8001200 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001174:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001176:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001178:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800117c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001180:	bf18      	it	ne
 8001182:	2101      	movne	r1, #1
 8001184:	f001 fd82 	bl	8002c8c <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001188:	4620      	mov	r0, r4
 800118a:	f004 fcc6 	bl	8005b1a <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800118e:	4620      	mov	r0, r4
 8001190:	f004 fcba 	bl	8005b08 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001194:	9b04      	ldr	r3, [sp, #16]
 8001196:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001198:	bf42      	ittt	mi
 800119a:	9b05      	ldrmi	r3, [sp, #20]
 800119c:	f043 0320 	orrmi.w	r3, r3, #32
 80011a0:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80011a2:	9b05      	ldr	r3, [sp, #20]
 80011a4:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80011a8:	6820      	ldr	r0, [r4, #0]
 80011aa:	f001 fd67 	bl	8002c7c <USB_ReadInterrupts>
 80011ae:	0707      	lsls	r7, r0, #28
 80011b0:	d505      	bpl.n	80011be <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 80011b2:	4620      	mov	r0, r4
 80011b4:	f004 fca4 	bl	8005b00 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	2208      	movs	r2, #8
 80011bc:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011be:	6820      	ldr	r0, [r4, #0]
 80011c0:	f001 fd5c 	bl	8002c7c <USB_ReadInterrupts>
 80011c4:	0185      	lsls	r5, r0, #6
 80011c6:	d512      	bpl.n	80011ee <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011c8:	6820      	ldr	r0, [r4, #0]
 80011ca:	f001 febe 	bl	8002f4a <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011ce:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011d2:	9001      	str	r0, [sp, #4]
 80011d4:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80011d8:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80011da:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 80011de:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011e0:	68a3      	ldr	r3, [r4, #8]
 80011e2:	459a      	cmp	sl, r3
 80011e4:	d323      	bcc.n	800122e <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011ec:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80011ee:	6820      	ldr	r0, [r4, #0]
 80011f0:	f001 fd44 	bl	8002c7c <USB_ReadInterrupts>
 80011f4:	06c3      	lsls	r3, r0, #27
 80011f6:	f100 8220 	bmi.w	800163a <HAL_HCD_IRQHandler+0x5be>
}
 80011fa:	b007      	add	sp, #28
 80011fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001200:	68e3      	ldr	r3, [r4, #12]
 8001202:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8001204:	bf04      	itt	eq
 8001206:	f64e 2260 	movweq	r2, #60000	; 0xea60
 800120a:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 800120e:	e7bb      	b.n	8001188 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001210:	4620      	mov	r0, r4
 8001212:	f004 fc86 	bl	8005b22 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001216:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800121a:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800121c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001220:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001224:	6993      	ldr	r3, [r2, #24]
 8001226:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	e7b2      	b.n	8001194 <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800122e:	9a01      	ldr	r2, [sp, #4]
 8001230:	f00a 030f 	and.w	r3, sl, #15
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	07d8      	lsls	r0, r3, #31
 800123a:	f140 808a 	bpl.w	8001352 <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800123e:	f8d8 3000 	ldr.w	r3, [r8]
 8001242:	6820      	ldr	r0, [r4, #0]
 8001244:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001248:	fa5f f58a 	uxtb.w	r5, sl
 800124c:	f000 8104 	beq.w	8001458 <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001250:	016a      	lsls	r2, r5, #5
 8001252:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8001256:	18d6      	adds	r6, r2, r3
 8001258:	68b1      	ldr	r1, [r6, #8]
 800125a:	0749      	lsls	r1, r1, #29
 800125c:	d513      	bpl.n	8001286 <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800125e:	2104      	movs	r1, #4
 8001260:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001262:	68f1      	ldr	r1, [r6, #12]
 8001264:	f041 0102 	orr.w	r1, r1, #2
 8001268:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800126a:	68b1      	ldr	r1, [r6, #8]
 800126c:	0589      	lsls	r1, r1, #22
 800126e:	d542      	bpl.n	80012f6 <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001270:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001272:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800127a:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800127c:	f001 fe6a 	bl	8002f54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001284:	e0c7      	b.n	8001416 <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001286:	68b1      	ldr	r1, [r6, #8]
 8001288:	0689      	lsls	r1, r1, #26
 800128a:	d502      	bpl.n	8001292 <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800128c:	2120      	movs	r1, #32
 800128e:	60b1      	str	r1, [r6, #8]
 8001290:	e7eb      	b.n	800126a <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001292:	68b1      	ldr	r1, [r6, #8]
 8001294:	0709      	lsls	r1, r1, #28
 8001296:	d515      	bpl.n	80012c4 <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001298:	68f1      	ldr	r1, [r6, #12]
 800129a:	9303      	str	r3, [sp, #12]
 800129c:	f041 0102 	orr.w	r1, r1, #2
 80012a0:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80012a2:	fb07 4105 	mla	r1, r7, r5, r4
 80012a6:	f04f 0e05 	mov.w	lr, #5
 80012aa:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80012ae:	2110      	movs	r1, #16
 80012b0:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80012b2:	2108      	movs	r1, #8
 80012b4:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012b6:	4629      	mov	r1, r5
 80012b8:	9202      	str	r2, [sp, #8]
 80012ba:	f001 fe4b 	bl	8002f54 <USB_HC_Halt>
 80012be:	9a02      	ldr	r2, [sp, #8]
 80012c0:	9b03      	ldr	r3, [sp, #12]
 80012c2:	e7d2      	b.n	800126a <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80012c4:	68b1      	ldr	r1, [r6, #8]
 80012c6:	0549      	lsls	r1, r1, #21
 80012c8:	d5cf      	bpl.n	800126a <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012ca:	68f1      	ldr	r1, [r6, #12]
 80012cc:	9303      	str	r3, [sp, #12]
 80012ce:	f041 0102 	orr.w	r1, r1, #2
 80012d2:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012d4:	4629      	mov	r1, r5
 80012d6:	9202      	str	r2, [sp, #8]
 80012d8:	f001 fe3c 	bl	8002f54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80012dc:	2110      	movs	r1, #16
 80012de:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80012e0:	fb07 4105 	mla	r1, r7, r5, r4
 80012e4:	2008      	movs	r0, #8
 80012e6:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80012ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ee:	60b1      	str	r1, [r6, #8]
 80012f0:	9b03      	ldr	r3, [sp, #12]
 80012f2:	9a02      	ldr	r2, [sp, #8]
 80012f4:	e7b9      	b.n	800126a <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80012f6:	68b1      	ldr	r1, [r6, #8]
 80012f8:	07c8      	lsls	r0, r1, #31
 80012fa:	d53d      	bpl.n	8001378 <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 80012fc:	6921      	ldr	r1, [r4, #16]
 80012fe:	b149      	cbz	r1, 8001314 <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001300:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001304:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001306:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800130a:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800130e:	1a09      	subs	r1, r1, r0
 8001310:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8001314:	fb07 4e05 	mla	lr, r7, r5, r4
 8001318:	2001      	movs	r0, #1
 800131a:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800131e:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001322:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001324:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8001328:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 800132c:	d116      	bne.n	800135c <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800132e:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001330:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001338:	4629      	mov	r1, r5
 800133a:	f001 fe0b 	bl	8002f54 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800133e:	2310      	movs	r3, #16
 8001340:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001342:	fb07 4505 	mla	r5, r7, r5, r4
 8001346:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 800134a:	f083 0301 	eor.w	r3, r3, #1
 800134e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001352:	f10a 0a01 	add.w	sl, sl, #1
 8001356:	f108 0820 	add.w	r8, r8, #32
 800135a:	e741      	b.n	80011e0 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800135c:	2903      	cmp	r1, #3
 800135e:	d1f0      	bne.n	8001342 <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001360:	58d1      	ldr	r1, [r2, r3]
 8001362:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8001366:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001368:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800136c:	4602      	mov	r2, r0
 800136e:	4629      	mov	r1, r5
 8001370:	4620      	mov	r0, r4
 8001372:	f004 fbd1 	bl	8005b18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001376:	e7e4      	b.n	8001342 <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001378:	68b1      	ldr	r1, [r6, #8]
 800137a:	0789      	lsls	r1, r1, #30
 800137c:	d536      	bpl.n	80013ec <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800137e:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001380:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001384:	f021 0102 	bic.w	r1, r1, #2
 8001388:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800138a:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 800138e:	2901      	cmp	r1, #1
 8001390:	d10c      	bne.n	80013ac <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001392:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001396:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800139a:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800139e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80013a2:	4629      	mov	r1, r5
 80013a4:	4620      	mov	r0, r4
 80013a6:	f004 fbb7 	bl	8005b18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80013aa:	e7d2      	b.n	8001352 <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80013ac:	2905      	cmp	r1, #5
 80013ae:	d0f0      	beq.n	8001392 <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80013b0:	2906      	cmp	r1, #6
 80013b2:	d001      	beq.n	80013b8 <HAL_HCD_IRQHandler+0x33c>
 80013b4:	2908      	cmp	r1, #8
 80013b6:	d114      	bne.n	80013e2 <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 80013b8:	fb07 4105 	mla	r1, r7, r5, r4
 80013bc:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80013be:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80013c0:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80013c2:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80013c4:	bf83      	ittte	hi
 80013c6:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 80013c8:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80013cc:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80013d0:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80013d4:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80013d6:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80013da:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80013de:	50d1      	str	r1, [r2, r3]
 80013e0:	e7d9      	b.n	8001396 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80013e2:	2903      	cmp	r1, #3
 80013e4:	d1d7      	bne.n	8001396 <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80013e6:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 80013ea:	e7f3      	b.n	80013d4 <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80013ec:	68b1      	ldr	r1, [r6, #8]
 80013ee:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 80013f2:	d012      	beq.n	800141a <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013f4:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013f6:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80013fe:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001402:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 8001404:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001406:	3201      	adds	r2, #1
 8001408:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 800140a:	2206      	movs	r2, #6
 800140c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001410:	f001 fda0 	bl	8002f54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	60b3      	str	r3, [r6, #8]
 8001418:	e79b      	b.n	8001352 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800141a:	68b3      	ldr	r3, [r6, #8]
 800141c:	06da      	lsls	r2, r3, #27
 800141e:	d598      	bpl.n	8001352 <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001420:	fb07 4205 	mla	r2, r7, r5, r4
 8001424:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8001428:	2b03      	cmp	r3, #3
 800142a:	d10a      	bne.n	8001442 <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800142c:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800142e:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001430:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001438:	4629      	mov	r1, r5
 800143a:	f001 fd8b 	bl	8002f54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800143e:	2310      	movs	r3, #16
 8001440:	e7e9      	b.n	8001416 <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001442:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8001446:	d1fa      	bne.n	800143e <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001448:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 800144a:	6923      	ldr	r3, [r4, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f6      	bne.n	800143e <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 8001450:	2303      	movs	r3, #3
 8001452:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8001456:	e7ea      	b.n	800142e <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001458:	0169      	lsls	r1, r5, #5
 800145a:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 800145e:	188e      	adds	r6, r1, r2
 8001460:	68b3      	ldr	r3, [r6, #8]
 8001462:	f013 0e04 	ands.w	lr, r3, #4
 8001466:	d006      	beq.n	8001476 <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001468:	2304      	movs	r3, #4
 800146a:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800146c:	68f3      	ldr	r3, [r6, #12]
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	60f3      	str	r3, [r6, #12]
 8001474:	e76d      	b.n	8001352 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001476:	68b3      	ldr	r3, [r6, #8]
 8001478:	f013 0320 	ands.w	r3, r3, #32
 800147c:	d014      	beq.n	80014a8 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800147e:	2320      	movs	r3, #32
 8001480:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001482:	fb07 4305 	mla	r3, r7, r5, r4
 8001486:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800148a:	2a01      	cmp	r2, #1
 800148c:	f47f af61 	bne.w	8001352 <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8001490:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001494:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001498:	68f3      	ldr	r3, [r6, #12]
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014a0:	4629      	mov	r1, r5
 80014a2:	f001 fd57 	bl	8002f54 <USB_HC_Halt>
 80014a6:	e754      	b.n	8001352 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80014a8:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80014ac:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80014b0:	d011      	beq.n	80014d6 <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 80014b2:	fb07 4205 	mla	r2, r7, r5, r4
 80014b6:	2104      	movs	r1, #4
 80014b8:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 80014bc:	2101      	movs	r1, #1
 80014be:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014c2:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014c4:	68f3      	ldr	r3, [r6, #12]
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014cc:	4629      	mov	r1, r5
 80014ce:	f001 fd41 	bl	8002f54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80014d2:	2340      	movs	r3, #64	; 0x40
 80014d4:	e79f      	b.n	8001416 <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80014d6:	68b3      	ldr	r3, [r6, #8]
 80014d8:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 80014dc:	d005      	beq.n	80014ea <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014de:	68f3      	ldr	r3, [r6, #12]
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014e6:	4629      	mov	r1, r5
 80014e8:	e6c8      	b.n	800127c <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80014ea:	68b3      	ldr	r3, [r6, #8]
 80014ec:	07db      	lsls	r3, r3, #31
 80014ee:	d511      	bpl.n	8001514 <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014f0:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014f2:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014f6:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014fa:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014fe:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001500:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001502:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001504:	f001 fd26 	bl	8002f54 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001508:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800150a:	2201      	movs	r2, #1
 800150c:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800150e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001512:	e71e      	b.n	8001352 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001514:	68b3      	ldr	r3, [r6, #8]
 8001516:	071b      	lsls	r3, r3, #28
 8001518:	d50e      	bpl.n	8001538 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800151a:	2308      	movs	r3, #8
 800151c:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800151e:	68f3      	ldr	r3, [r6, #12]
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001526:	4629      	mov	r1, r5
 8001528:	f001 fd14 	bl	8002f54 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800152c:	fb07 4505 	mla	r5, r7, r5, r4
 8001530:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001532:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001536:	e70c      	b.n	8001352 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001538:	68b3      	ldr	r3, [r6, #8]
 800153a:	06db      	lsls	r3, r3, #27
 800153c:	d515      	bpl.n	800156a <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800153e:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8001542:	2203      	movs	r2, #3
 8001544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001548:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800154c:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001550:	b92a      	cbnz	r2, 800155e <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001552:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001556:	b912      	cbnz	r2, 800155e <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 8001558:	2201      	movs	r2, #1
 800155a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800155e:	68f3      	ldr	r3, [r6, #12]
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001566:	4629      	mov	r1, r5
 8001568:	e767      	b.n	800143a <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800156a:	68b3      	ldr	r3, [r6, #8]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	d50c      	bpl.n	800158a <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001570:	68f3      	ldr	r3, [r6, #12]
 8001572:	f043 0302 	orr.w	r3, r3, #2
 8001576:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001578:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 800157a:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800157e:	f001 fce9 	bl	8002f54 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001582:	2306      	movs	r3, #6
 8001584:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001588:	e744      	b.n	8001414 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800158a:	68b3      	ldr	r3, [r6, #8]
 800158c:	055b      	lsls	r3, r3, #21
 800158e:	d50f      	bpl.n	80015b0 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001590:	68f3      	ldr	r3, [r6, #12]
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001598:	4629      	mov	r1, r5
 800159a:	f001 fcdb 	bl	8002f54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800159e:	2310      	movs	r3, #16
 80015a0:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80015a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a6:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80015a8:	fb07 4505 	mla	r5, r7, r5, r4
 80015ac:	2308      	movs	r3, #8
 80015ae:	e7c0      	b.n	8001532 <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80015b0:	68b3      	ldr	r3, [r6, #8]
 80015b2:	0798      	lsls	r0, r3, #30
 80015b4:	f57f aecd 	bpl.w	8001352 <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80015b8:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80015ba:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80015be:	f023 0302 	bic.w	r3, r3, #2
 80015c2:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80015c4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d10e      	bne.n	80015ea <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80015cc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80015d0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80015d4:	3b02      	subs	r3, #2
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	f63f aedd 	bhi.w	8001396 <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80015dc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 80015e8:	e6d5      	b.n	8001396 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d102      	bne.n	80015f4 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80015ee:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 80015f2:	e6d0      	b.n	8001396 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d0fa      	beq.n	80015ee <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d102      	bne.n	8001602 <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80015fc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8001600:	e6c9      	b.n	8001396 <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001602:	2b06      	cmp	r3, #6
 8001604:	d002      	beq.n	800160c <HAL_HCD_IRQHandler+0x590>
 8001606:	2b08      	cmp	r3, #8
 8001608:	f47f aec5 	bne.w	8001396 <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 800160c:	fb07 4005 	mla	r0, r7, r5, r4
 8001610:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001612:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001614:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8001616:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001618:	bf84      	itt	hi
 800161a:	2304      	movhi	r3, #4
 800161c:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001620:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001622:	bf88      	it	hi
 8001624:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001628:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800162c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001630:	bf98      	it	ls
 8001632:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001636:	508b      	str	r3, [r1, r2]
 8001638:	e6ad      	b.n	8001396 <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800163a:	6826      	ldr	r6, [r4, #0]
 800163c:	69b3      	ldr	r3, [r6, #24]
 800163e:	f023 0310 	bic.w	r3, r3, #16
 8001642:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8001644:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001646:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 800164a:	2a02      	cmp	r2, #2
 800164c:	d129      	bne.n	80016a2 <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800164e:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001652:	f1b8 0f00 	cmp.w	r8, #0
 8001656:	d024      	beq.n	80016a2 <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001658:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800165c:	2728      	movs	r7, #40	; 0x28
 800165e:	fb07 4705 	mla	r7, r7, r5, r4
 8001662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001664:	b1e9      	cbz	r1, 80016a2 <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8001666:	4642      	mov	r2, r8
 8001668:	4630      	mov	r0, r6
 800166a:	f001 faf9 	bl	8002c60 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800166e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001670:	4443      	add	r3, r8
 8001672:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001676:	4443      	add	r3, r8
 8001678:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800167a:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800167e:	016b      	lsls	r3, r5, #5
 8001680:	199a      	adds	r2, r3, r6
 8001682:	6911      	ldr	r1, [r2, #16]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_HCD_IRQHandler+0x634>)
 8001686:	400a      	ands	r2, r1
 8001688:	b15a      	cbz	r2, 80016a2 <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800168a:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800168c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001690:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001694:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8001696:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800169a:	f083 0301 	eor.w	r3, r3, #1
 800169e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016a2:	6822      	ldr	r2, [r4, #0]
 80016a4:	6993      	ldr	r3, [r2, #24]
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	e5a5      	b.n	80011fa <HAL_HCD_IRQHandler+0x17e>
 80016ae:	bf00      	nop
 80016b0:	1ff80000 	.word	0x1ff80000

080016b4 <HAL_HCD_Start>:
{
 80016b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80016b6:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80016ba:	2b01      	cmp	r3, #1
{
 80016bc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80016be:	d00d      	beq.n	80016dc <HAL_HCD_Start+0x28>
 80016c0:	2501      	movs	r5, #1
 80016c2:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80016c6:	6800      	ldr	r0, [r0, #0]
 80016c8:	f001 fa70 	bl	8002bac <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80016cc:	4629      	mov	r1, r5
 80016ce:	6820      	ldr	r0, [r4, #0]
 80016d0:	f001 fb16 	bl	8002d00 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80016da:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 80016dc:	2002      	movs	r0, #2
}
 80016de:	bd38      	pop	{r3, r4, r5, pc}

080016e0 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 80016e0:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80016e4:	2b01      	cmp	r3, #1
{
 80016e6:	b510      	push	{r4, lr}
 80016e8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80016ea:	d009      	beq.n	8001700 <HAL_HCD_Stop+0x20>
 80016ec:	2301      	movs	r3, #1
 80016ee:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80016f2:	6800      	ldr	r0, [r0, #0]
 80016f4:	f001 fd44 	bl	8003180 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80016fe:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001700:	2002      	movs	r0, #2
}
 8001702:	bd10      	pop	{r4, pc}

08001704 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001704:	6800      	ldr	r0, [r0, #0]
 8001706:	f001 badd 	b.w	8002cc4 <USB_ResetPort>

0800170a <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800170a:	2328      	movs	r3, #40	; 0x28
 800170c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001710:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8001714:	4770      	bx	lr

08001716 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8001716:	2328      	movs	r3, #40	; 0x28
 8001718:	fb03 0101 	mla	r1, r3, r1, r0
}
 800171c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800171e:	4770      	bx	lr

08001720 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001720:	6800      	ldr	r0, [r0, #0]
 8001722:	f001 bb88 	b.w	8002e36 <USB_GetCurrentFrame>

08001726 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001726:	6800      	ldr	r0, [r0, #0]
 8001728:	f001 bb7a 	b.w	8002e20 <USB_GetHostSpeed>

0800172c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800172c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800172e:	4604      	mov	r4, r0
 8001730:	b908      	cbnz	r0, 8001736 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001732:	2001      	movs	r0, #1
 8001734:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001736:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800173a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800173e:	b91b      	cbnz	r3, 8001748 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001740:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001744:	f003 ff62 	bl	800560c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001748:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800174a:	2324      	movs	r3, #36	; 0x24
 800174c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001750:	6813      	ldr	r3, [r2, #0]
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001758:	f000 fd0e 	bl	8002178 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800175c:	6865      	ldr	r5, [r4, #4]
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_I2C_Init+0x138>)
 8001760:	429d      	cmp	r5, r3
 8001762:	d84d      	bhi.n	8001800 <HAL_I2C_Init+0xd4>
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <HAL_I2C_Init+0x13c>)
 8001766:	4298      	cmp	r0, r3
 8001768:	d9e3      	bls.n	8001732 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800176a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800176c:	493f      	ldr	r1, [pc, #252]	; (800186c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800176e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001770:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001778:	430b      	orrs	r3, r1
 800177a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800177c:	6a13      	ldr	r3, [r2, #32]
 800177e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001782:	3101      	adds	r1, #1
 8001784:	4319      	orrs	r1, r3
 8001786:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001788:	69d1      	ldr	r1, [r2, #28]
 800178a:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_I2C_Init+0x138>)
 800178c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001790:	429d      	cmp	r5, r3
 8001792:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001796:	f100 30ff 	add.w	r0, r0, #4294967295
 800179a:	d848      	bhi.n	800182e <HAL_I2C_Init+0x102>
 800179c:	006d      	lsls	r5, r5, #1
 800179e:	fbb0 f0f5 	udiv	r0, r0, r5
 80017a2:	3001      	adds	r0, #1
 80017a4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	bf38      	it	cc
 80017ac:	2304      	movcc	r3, #4
 80017ae:	430b      	orrs	r3, r1
 80017b0:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017b2:	6811      	ldr	r1, [r2, #0]
 80017b4:	6a20      	ldr	r0, [r4, #32]
 80017b6:	69e3      	ldr	r3, [r4, #28]
 80017b8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80017bc:	4303      	orrs	r3, r0
 80017be:	430b      	orrs	r3, r1
 80017c0:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017c2:	6891      	ldr	r1, [r2, #8]
 80017c4:	68e0      	ldr	r0, [r4, #12]
 80017c6:	6923      	ldr	r3, [r4, #16]
 80017c8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80017cc:	4303      	orrs	r3, r0
 80017ce:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80017d2:	430b      	orrs	r3, r1
 80017d4:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017d6:	68d1      	ldr	r1, [r2, #12]
 80017d8:	69a0      	ldr	r0, [r4, #24]
 80017da:	6963      	ldr	r3, [r4, #20]
 80017dc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80017e0:	4303      	orrs	r3, r0
 80017e2:	430b      	orrs	r3, r1
 80017e4:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e6:	6813      	ldr	r3, [r2, #0]
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ee:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80017f0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_I2C_Init+0x144>)
 8001802:	4298      	cmp	r0, r3
 8001804:	d995      	bls.n	8001732 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001806:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001808:	4e18      	ldr	r6, [pc, #96]	; (800186c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800180a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800180c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001814:	4333      	orrs	r3, r6
 8001816:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001818:	6a13      	ldr	r3, [r2, #32]
 800181a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800181e:	4371      	muls	r1, r6
 8001820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001824:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001828:	fbb1 f1f6 	udiv	r1, r1, r6
 800182c:	e7a9      	b.n	8001782 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800182e:	68a3      	ldr	r3, [r4, #8]
 8001830:	b953      	cbnz	r3, 8001848 <HAL_I2C_Init+0x11c>
 8001832:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001836:	fbb0 f0f3 	udiv	r0, r0, r3
 800183a:	1c43      	adds	r3, r0, #1
 800183c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001840:	b16b      	cbz	r3, 800185e <HAL_I2C_Init+0x132>
 8001842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001846:	e7b2      	b.n	80017ae <HAL_I2C_Init+0x82>
 8001848:	2319      	movs	r3, #25
 800184a:	436b      	muls	r3, r5
 800184c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001850:	1c43      	adds	r3, r0, #1
 8001852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001856:	b113      	cbz	r3, 800185e <HAL_I2C_Init+0x132>
 8001858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800185c:	e7a7      	b.n	80017ae <HAL_I2C_Init+0x82>
 800185e:	2301      	movs	r3, #1
 8001860:	e7a5      	b.n	80017ae <HAL_I2C_Init+0x82>
 8001862:	bf00      	nop
 8001864:	000186a0 	.word	0x000186a0
 8001868:	001e847f 	.word	0x001e847f
 800186c:	000f4240 	.word	0x000f4240
 8001870:	003d08ff 	.word	0x003d08ff

08001874 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001876:	4604      	mov	r4, r0
 8001878:	2800      	cmp	r0, #0
 800187a:	d041      	beq.n	8001900 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800187c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001880:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001884:	b92b      	cbnz	r3, 8001892 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001886:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8001888:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800188c:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800188e:	f003 fef5 	bl	800567c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001892:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001894:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001896:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800189a:	69d3      	ldr	r3, [r2, #28]
 800189c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018a0:	f023 030f 	bic.w	r3, r3, #15
 80018a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018a6:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80018a8:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018aa:	428b      	cmp	r3, r1
 80018ac:	d031      	beq.n	8001912 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018ae:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018b0:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018b2:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 80018b4:	bf0c      	ite	eq
 80018b6:	2510      	moveq	r5, #16
 80018b8:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018ba:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018bc:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80018be:	bf98      	it	ls
 80018c0:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018c2:	f000 fd09 	bl	80022d8 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80018c6:	6923      	ldr	r3, [r4, #16]
 80018c8:	6961      	ldr	r1, [r4, #20]
 80018ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ce:	d11b      	bne.n	8001908 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80018d0:	68e3      	ldr	r3, [r4, #12]
 80018d2:	220a      	movs	r2, #10
 80018d4:	b1b3      	cbz	r3, 8001904 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018d6:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018dc:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80018de:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e4:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80018e6:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80018ea:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80018ee:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80018f0:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80018f2:	1e99      	subs	r1, r3, #2
 80018f4:	29fd      	cmp	r1, #253	; 0xfd
 80018f6:	d90e      	bls.n	8001916 <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80018f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001900:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8001902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001904:	00eb      	lsls	r3, r5, #3
 8001906:	e7e7      	b.n	80018d8 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001908:	230a      	movs	r3, #10
 800190a:	fbb0 f0f5 	udiv	r0, r0, r5
 800190e:	4343      	muls	r3, r0
 8001910:	e7e5      	b.n	80018de <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8001912:	2200      	movs	r2, #0
 8001914:	e7ed      	b.n	80018f2 <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001916:	4313      	orrs	r3, r2
 8001918:	6922      	ldr	r2, [r4, #16]
 800191a:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800191c:	6866      	ldr	r6, [r4, #4]
 800191e:	68e5      	ldr	r5, [r4, #12]
 8001920:	69a0      	ldr	r0, [r4, #24]
 8001922:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80019a0 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001926:	4313      	orrs	r3, r2
 8001928:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800192a:	68a3      	ldr	r3, [r4, #8]
 800192c:	69cf      	ldr	r7, [r1, #28]
 800192e:	ea46 0203 	orr.w	r2, r6, r3
 8001932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001936:	432a      	orrs	r2, r5
 8001938:	4302      	orrs	r2, r0
 800193a:	ea07 070e 	and.w	r7, r7, lr
 800193e:	433a      	orrs	r2, r7
 8001940:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001942:	6a22      	ldr	r2, [r4, #32]
 8001944:	2a01      	cmp	r2, #1
 8001946:	d11d      	bne.n	8001984 <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001948:	4a12      	ldr	r2, [pc, #72]	; (8001994 <HAL_I2S_Init+0x120>)
 800194a:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800194c:	4f12      	ldr	r7, [pc, #72]	; (8001998 <HAL_I2S_Init+0x124>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_I2S_Init+0x128>)
 8001950:	42b9      	cmp	r1, r7
 8001952:	bf18      	it	ne
 8001954:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001958:	432b      	orrs	r3, r5
 800195a:	69d1      	ldr	r1, [r2, #28]
 800195c:	ea01 010e 	and.w	r1, r1, lr
 8001960:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001962:	2102      	movs	r1, #2
 8001964:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001966:	69d7      	ldr	r7, [r2, #28]
 8001968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800196c:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 800196e:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8001972:	ea43 0307 	orr.w	r3, r3, r7
 8001976:	bf0c      	ite	eq
 8001978:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800197c:	2100      	movne	r1, #0
 800197e:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001980:	430b      	orrs	r3, r1
 8001982:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001984:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001986:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001988:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800198a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 800198e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001990:	080019ab 	.word	0x080019ab
 8001994:	08001aa9 	.word	0x08001aa9
 8001998:	40003800 	.word	0x40003800
 800199c:	40003400 	.word	0x40003400
 80019a0:	fffff040 	.word	0xfffff040

080019a4 <HAL_I2S_TxCpltCallback>:
 80019a4:	4770      	bx	lr

080019a6 <HAL_I2S_RxCpltCallback>:
 80019a6:	4770      	bx	lr

080019a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80019a8:	4770      	bx	lr

080019aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80019aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80019ac:	6803      	ldr	r3, [r0, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80019b2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80019b6:	2a04      	cmp	r2, #4
{
 80019b8:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80019ba:	d136      	bne.n	8001a2a <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80019bc:	9a01      	ldr	r2, [sp, #4]
 80019be:	07d1      	lsls	r1, r2, #31
 80019c0:	d517      	bpl.n	80019f2 <I2S_IRQHandler+0x48>
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	0652      	lsls	r2, r2, #25
 80019c6:	d514      	bpl.n	80019f2 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80019c8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80019ca:	68d9      	ldr	r1, [r3, #12]
 80019cc:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 80019d0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80019d2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80019d4:	3a01      	subs	r2, #1
 80019d6:	b292      	uxth	r2, r2
 80019d8:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80019da:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80019dc:	b292      	uxth	r2, r2
 80019de:	b942      	cbnz	r2, 80019f2 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019e6:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80019ee:	f7ff ffda 	bl	80019a6 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019f2:	9b01      	ldr	r3, [sp, #4]
 80019f4:	0659      	lsls	r1, r3, #25
 80019f6:	d518      	bpl.n	8001a2a <I2S_IRQHandler+0x80>
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	0692      	lsls	r2, r2, #26
 80019fe:	d514      	bpl.n	8001a2a <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	9202      	str	r2, [sp, #8]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	9202      	str	r2, [sp, #8]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a1e:	f043 0302 	orr.w	r3, r3, #2
 8001a22:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff ffbf 	bl	80019a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001a2a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d136      	bne.n	8001aa0 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	079b      	lsls	r3, r3, #30
 8001a36:	d519      	bpl.n	8001a6c <I2S_IRQHandler+0xc2>
 8001a38:	6822      	ldr	r2, [r4, #0]
 8001a3a:	6853      	ldr	r3, [r2, #4]
 8001a3c:	0618      	lsls	r0, r3, #24
 8001a3e:	d515      	bpl.n	8001a6c <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a42:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001a46:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8001a48:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001a52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b94b      	cbnz	r3, 8001a6c <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a58:	6853      	ldr	r3, [r2, #4]
 8001a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a5e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7ff ff9c 	bl	80019a4 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a6c:	9b01      	ldr	r3, [sp, #4]
 8001a6e:	0719      	lsls	r1, r3, #28
 8001a70:	d516      	bpl.n	8001aa0 <I2S_IRQHandler+0xf6>
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	0692      	lsls	r2, r2, #26
 8001a78:	d512      	bpl.n	8001aa0 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a82:	2200      	movs	r2, #0
 8001a84:	9203      	str	r2, [sp, #12]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	9303      	str	r3, [sp, #12]
 8001a8a:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f7ff ff84 	bl	80019a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001aa0:	b004      	add	sp, #16
 8001aa2:	bd10      	pop	{r4, pc}

08001aa4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001aa8:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001aaa:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001aac:	498b      	ldr	r1, [pc, #556]	; (8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001aae:	6893      	ldr	r3, [r2, #8]
{
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001ab4:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ab6:	4b8a      	ldr	r3, [pc, #552]	; (8001ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001ab8:	428a      	cmp	r2, r1
 8001aba:	bf18      	it	ne
 8001abc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001ac0:	6899      	ldr	r1, [r3, #8]
 8001ac2:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001ac4:	6851      	ldr	r1, [r2, #4]
 8001ac6:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001ac8:	6859      	ldr	r1, [r3, #4]
 8001aca:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001acc:	6841      	ldr	r1, [r0, #4]
 8001ace:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8001ad2:	f040 8090 	bne.w	8001bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ad6:	9b00      	ldr	r3, [sp, #0]
 8001ad8:	0799      	lsls	r1, r3, #30
 8001ada:	d51a      	bpl.n	8001b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8001adc:	9b02      	ldr	r3, [sp, #8]
 8001ade:	061b      	lsls	r3, r3, #24
 8001ae0:	d517      	bpl.n	8001b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001ae2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ae4:	1c99      	adds	r1, r3, #2
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	6241      	str	r1, [r0, #36]	; 0x24
 8001aea:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001aec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001af4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b95b      	cbnz	r3, 8001b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001afa:	6853      	ldr	r3, [r2, #4]
 8001afc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b00:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001b02:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	b923      	cbnz	r3, 8001b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001b0e:	f7ff ffc9 	bl	8001aa4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001b12:	9b01      	ldr	r3, [sp, #4]
 8001b14:	07d8      	lsls	r0, r3, #31
 8001b16:	d522      	bpl.n	8001b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8001b18:	9b03      	ldr	r3, [sp, #12]
 8001b1a:	0659      	lsls	r1, r3, #25
 8001b1c:	d51f      	bpl.n	8001b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001b1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b20:	6820      	ldr	r0, [r4, #0]
 8001b22:	496e      	ldr	r1, [pc, #440]	; (8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001b24:	1c93      	adds	r3, r2, #2
 8001b26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b28:	4b6d      	ldr	r3, [pc, #436]	; (8001ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001b2a:	4288      	cmp	r0, r1
 8001b2c:	bf18      	it	ne
 8001b2e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001b32:	68d9      	ldr	r1, [r3, #12]
 8001b34:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001b36:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	b292      	uxth	r2, r2
 8001b3c:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b3e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001b40:	b292      	uxth	r2, r2
 8001b42:	b962      	cbnz	r2, 8001b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b4a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001b4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b92b      	cbnz	r3, 8001b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff ffa3 	bl	8001aa4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001b5e:	9b01      	ldr	r3, [sp, #4]
 8001b60:	065a      	lsls	r2, r3, #25
 8001b62:	d522      	bpl.n	8001baa <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8001b64:	9b03      	ldr	r3, [sp, #12]
 8001b66:	069b      	lsls	r3, r3, #26
 8001b68:	d51f      	bpl.n	8001baa <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	495b      	ldr	r1, [pc, #364]	; (8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001b6e:	4a5c      	ldr	r2, [pc, #368]	; (8001ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001b70:	428b      	cmp	r3, r1
 8001b72:	bf18      	it	ne
 8001b74:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001b78:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b7a:	6851      	ldr	r1, [r2, #4]
 8001b7c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001b80:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b88:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	9204      	str	r2, [sp, #16]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	9204      	str	r2, [sp, #16]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	9304      	str	r3, [sp, #16]
 8001b96:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001ba6:	f7ff feff 	bl	80019a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001baa:	9b00      	ldr	r3, [sp, #0]
 8001bac:	0718      	lsls	r0, r3, #28
 8001bae:	d520      	bpl.n	8001bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001bb0:	9b02      	ldr	r3, [sp, #8]
 8001bb2:	0699      	lsls	r1, r3, #26
 8001bb4:	d51d      	bpl.n	8001bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bb6:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bb8:	4948      	ldr	r1, [pc, #288]	; (8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bc0:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bc2:	4a47      	ldr	r2, [pc, #284]	; (8001ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001bc4:	428b      	cmp	r3, r1
 8001bc6:	bf18      	it	ne
 8001bc8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001bcc:	6851      	ldr	r1, [r2, #4]
 8001bce:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001bd2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	9205      	str	r2, [sp, #20]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	9305      	str	r3, [sp, #20]
 8001bdc:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001be4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001bec:	4620      	mov	r0, r4
 8001bee:	f7ff fedb 	bl	80019a8 <HAL_I2S_ErrorCallback>
}
 8001bf2:	b006      	add	sp, #24
 8001bf4:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001bf6:	9a01      	ldr	r2, [sp, #4]
 8001bf8:	0792      	lsls	r2, r2, #30
 8001bfa:	d51a      	bpl.n	8001c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 8001bfc:	9a03      	ldr	r2, [sp, #12]
 8001bfe:	0611      	lsls	r1, r2, #24
 8001c00:	d517      	bpl.n	8001c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001c02:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001c04:	1c91      	adds	r1, r2, #2
 8001c06:	8812      	ldrh	r2, [r2, #0]
 8001c08:	6241      	str	r1, [r0, #36]	; 0x24
 8001c0a:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001c0c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001c0e:	3a01      	subs	r2, #1
 8001c10:	b292      	uxth	r2, r2
 8001c12:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001c14:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001c16:	b292      	uxth	r2, r2
 8001c18:	b95a      	cbnz	r2, 8001c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c20:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8001c22:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b923      	cbnz	r3, 8001c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c2e:	f7ff ff39 	bl	8001aa4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001c32:	9b00      	ldr	r3, [sp, #0]
 8001c34:	07da      	lsls	r2, r3, #31
 8001c36:	d51c      	bpl.n	8001c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001c38:	9b02      	ldr	r3, [sp, #8]
 8001c3a:	065b      	lsls	r3, r3, #25
 8001c3c:	d519      	bpl.n	8001c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001c3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c40:	1c9a      	adds	r2, r3, #2
 8001c42:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001c44:	6822      	ldr	r2, [r4, #0]
 8001c46:	68d1      	ldr	r1, [r2, #12]
 8001c48:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8001c4a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001c52:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b963      	cbnz	r3, 8001c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c58:	6853      	ldr	r3, [r2, #4]
 8001c5a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001c5e:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001c60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b92b      	cbnz	r3, 8001c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff ff19 	bl	8001aa4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c72:	9b00      	ldr	r3, [sp, #0]
 8001c74:	0658      	lsls	r0, r3, #25
 8001c76:	d51b      	bpl.n	8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c78:	9b02      	ldr	r3, [sp, #8]
 8001c7a:	0699      	lsls	r1, r3, #26
 8001c7c:	d518      	bpl.n	8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c7e:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c80:	4916      	ldr	r1, [pc, #88]	; (8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c82:	6853      	ldr	r3, [r2, #4]
 8001c84:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001c88:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001c8c:	428a      	cmp	r2, r1
 8001c8e:	bf18      	it	ne
 8001c90:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001c94:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c9c:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ca4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ca6:	f043 0302 	orr.w	r3, r3, #2
 8001caa:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001cac:	f7ff fe7c 	bl	80019a8 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cb0:	9b01      	ldr	r3, [sp, #4]
 8001cb2:	071a      	lsls	r2, r3, #28
 8001cb4:	d59d      	bpl.n	8001bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001cb6:	9b03      	ldr	r3, [sp, #12]
 8001cb8:	069b      	lsls	r3, r3, #26
 8001cba:	d59a      	bpl.n	8001bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	4907      	ldr	r1, [pc, #28]	; (8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	bf18      	it	ne
 8001cc6:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001cd0:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cd2:	6853      	ldr	r3, [r2, #4]
 8001cd4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001cd8:	6053      	str	r3, [r2, #4]
 8001cda:	e780      	b.n	8001bde <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8001cdc:	40003800 	.word	0x40003800
 8001ce0:	40003400 	.word	0x40003400

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce8:	4604      	mov	r4, r0
 8001cea:	b918      	cbnz	r0, 8001cf4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001cec:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001cee:	b002      	add	sp, #8
 8001cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf4:	6803      	ldr	r3, [r0, #0]
 8001cf6:	07dd      	lsls	r5, r3, #31
 8001cf8:	d410      	bmi.n	8001d1c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	0798      	lsls	r0, r3, #30
 8001cfe:	d458      	bmi.n	8001db2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	071a      	lsls	r2, r3, #28
 8001d04:	f100 809a 	bmi.w	8001e3c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	075b      	lsls	r3, r3, #29
 8001d0c:	f100 80b8 	bmi.w	8001e80 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d10:	69a2      	ldr	r2, [r4, #24]
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	f040 8119 	bne.w	8001f4a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	e7e8      	b.n	8001cee <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1c:	4ba6      	ldr	r3, [pc, #664]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	f002 020c 	and.w	r2, r2, #12
 8001d24:	2a04      	cmp	r2, #4
 8001d26:	d007      	beq.n	8001d38 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2e:	2a08      	cmp	r2, #8
 8001d30:	d10a      	bne.n	8001d48 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0259      	lsls	r1, r3, #9
 8001d36:	d507      	bpl.n	8001d48 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	4b9f      	ldr	r3, [pc, #636]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	039a      	lsls	r2, r3, #14
 8001d3e:	d5dc      	bpl.n	8001cfa <HAL_RCC_OscConfig+0x16>
 8001d40:	6863      	ldr	r3, [r4, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1d9      	bne.n	8001cfa <HAL_RCC_OscConfig+0x16>
 8001d46:	e7d1      	b.n	8001cec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d48:	6863      	ldr	r3, [r4, #4]
 8001d4a:	4d9b      	ldr	r5, [pc, #620]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d111      	bne.n	8001d76 <HAL_RCC_OscConfig+0x92>
 8001d52:	682b      	ldr	r3, [r5, #0]
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fc63 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4d96      	ldr	r5, [pc, #600]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001d60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	682b      	ldr	r3, [r5, #0]
 8001d64:	039b      	lsls	r3, r3, #14
 8001d66:	d4c8      	bmi.n	8001cfa <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d68:	f7fe fc5c 	bl	8000624 <HAL_GetTick>
 8001d6c:	1b80      	subs	r0, r0, r6
 8001d6e:	2864      	cmp	r0, #100	; 0x64
 8001d70:	d9f7      	bls.n	8001d62 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001d72:	2003      	movs	r0, #3
 8001d74:	e7bb      	b.n	8001cee <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7a:	d104      	bne.n	8001d86 <HAL_RCC_OscConfig+0xa2>
 8001d7c:	682b      	ldr	r3, [r5, #0]
 8001d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d82:	602b      	str	r3, [r5, #0]
 8001d84:	e7e5      	b.n	8001d52 <HAL_RCC_OscConfig+0x6e>
 8001d86:	682a      	ldr	r2, [r5, #0]
 8001d88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d8c:	602a      	str	r2, [r5, #0]
 8001d8e:	682a      	ldr	r2, [r5, #0]
 8001d90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d94:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1df      	bne.n	8001d5a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001d9a:	f7fe fc43 	bl	8000624 <HAL_GetTick>
 8001d9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da0:	682b      	ldr	r3, [r5, #0]
 8001da2:	039f      	lsls	r7, r3, #14
 8001da4:	d5a9      	bpl.n	8001cfa <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da6:	f7fe fc3d 	bl	8000624 <HAL_GetTick>
 8001daa:	1b80      	subs	r0, r0, r6
 8001dac:	2864      	cmp	r0, #100	; 0x64
 8001dae:	d9f7      	bls.n	8001da0 <HAL_RCC_OscConfig+0xbc>
 8001db0:	e7df      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db2:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	f012 0f0c 	tst.w	r2, #12
 8001dba:	d007      	beq.n	8001dcc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dc2:	2a08      	cmp	r2, #8
 8001dc4:	d111      	bne.n	8001dea <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	025e      	lsls	r6, r3, #9
 8001dca:	d40e      	bmi.n	8001dea <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dcc:	4b7a      	ldr	r3, [pc, #488]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	0795      	lsls	r5, r2, #30
 8001dd2:	d502      	bpl.n	8001dda <HAL_RCC_OscConfig+0xf6>
 8001dd4:	68e2      	ldr	r2, [r4, #12]
 8001dd6:	2a01      	cmp	r2, #1
 8001dd8:	d188      	bne.n	8001cec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	6921      	ldr	r1, [r4, #16]
 8001dde:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001de2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001de6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de8:	e78a      	b.n	8001d00 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dea:	68e2      	ldr	r2, [r4, #12]
 8001dec:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <HAL_RCC_OscConfig+0x2d8>)
 8001dee:	b1b2      	cbz	r2, 8001e1e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001df4:	f7fe fc16 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	4d6f      	ldr	r5, [pc, #444]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001dfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	682b      	ldr	r3, [r5, #0]
 8001dfe:	0798      	lsls	r0, r3, #30
 8001e00:	d507      	bpl.n	8001e12 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	682b      	ldr	r3, [r5, #0]
 8001e04:	6922      	ldr	r2, [r4, #16]
 8001e06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e0a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e0e:	602b      	str	r3, [r5, #0]
 8001e10:	e776      	b.n	8001d00 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e12:	f7fe fc07 	bl	8000624 <HAL_GetTick>
 8001e16:	1b80      	subs	r0, r0, r6
 8001e18:	2802      	cmp	r0, #2
 8001e1a:	d9ef      	bls.n	8001dfc <HAL_RCC_OscConfig+0x118>
 8001e1c:	e7a9      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e20:	f7fe fc00 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e24:	4d64      	ldr	r5, [pc, #400]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001e26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e28:	682b      	ldr	r3, [r5, #0]
 8001e2a:	0799      	lsls	r1, r3, #30
 8001e2c:	f57f af68 	bpl.w	8001d00 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e30:	f7fe fbf8 	bl	8000624 <HAL_GetTick>
 8001e34:	1b80      	subs	r0, r0, r6
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d9f6      	bls.n	8001e28 <HAL_RCC_OscConfig+0x144>
 8001e3a:	e79a      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3c:	6962      	ldr	r2, [r4, #20]
 8001e3e:	4b60      	ldr	r3, [pc, #384]	; (8001fc0 <HAL_RCC_OscConfig+0x2dc>)
 8001e40:	b17a      	cbz	r2, 8001e62 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e46:	f7fe fbed 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4a:	4d5b      	ldr	r5, [pc, #364]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001e4c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001e50:	079f      	lsls	r7, r3, #30
 8001e52:	f53f af59 	bmi.w	8001d08 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e56:	f7fe fbe5 	bl	8000624 <HAL_GetTick>
 8001e5a:	1b80      	subs	r0, r0, r6
 8001e5c:	2802      	cmp	r0, #2
 8001e5e:	d9f6      	bls.n	8001e4e <HAL_RCC_OscConfig+0x16a>
 8001e60:	e787      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001e62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e64:	f7fe fbde 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4d53      	ldr	r5, [pc, #332]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001e6a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001e6e:	0798      	lsls	r0, r3, #30
 8001e70:	f57f af4a 	bpl.w	8001d08 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e74:	f7fe fbd6 	bl	8000624 <HAL_GetTick>
 8001e78:	1b80      	subs	r0, r0, r6
 8001e7a:	2802      	cmp	r0, #2
 8001e7c:	d9f6      	bls.n	8001e6c <HAL_RCC_OscConfig+0x188>
 8001e7e:	e778      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e80:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
 8001e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e84:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001e88:	d128      	bne.n	8001edc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	9201      	str	r2, [sp, #4]
 8001e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e9e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea0:	4d48      	ldr	r5, [pc, #288]	; (8001fc4 <HAL_RCC_OscConfig+0x2e0>)
 8001ea2:	682b      	ldr	r3, [r5, #0]
 8001ea4:	05d9      	lsls	r1, r3, #23
 8001ea6:	d51b      	bpl.n	8001ee0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea8:	68a3      	ldr	r3, [r4, #8]
 8001eaa:	4d43      	ldr	r5, [pc, #268]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d127      	bne.n	8001f00 <HAL_RCC_OscConfig+0x21c>
 8001eb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001eb8:	f7fe fbb4 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	4d3e      	ldr	r5, [pc, #248]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001ebe:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ec6:	079b      	lsls	r3, r3, #30
 8001ec8:	d539      	bpl.n	8001f3e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001eca:	2e00      	cmp	r6, #0
 8001ecc:	f43f af20 	beq.w	8001d10 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4a39      	ldr	r2, [pc, #228]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
 8001ed2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	e719      	b.n	8001d10 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001edc:	2600      	movs	r6, #0
 8001ede:	e7df      	b.n	8001ea0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001ee8:	f7fe fb9c 	bl	8000624 <HAL_GetTick>
 8001eec:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eee:	682b      	ldr	r3, [r5, #0]
 8001ef0:	05da      	lsls	r2, r3, #23
 8001ef2:	d4d9      	bmi.n	8001ea8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef4:	f7fe fb96 	bl	8000624 <HAL_GetTick>
 8001ef8:	1bc0      	subs	r0, r0, r7
 8001efa:	2802      	cmp	r0, #2
 8001efc:	d9f7      	bls.n	8001eee <HAL_RCC_OscConfig+0x20a>
 8001efe:	e738      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	d104      	bne.n	8001f0e <HAL_RCC_OscConfig+0x22a>
 8001f04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	672b      	str	r3, [r5, #112]	; 0x70
 8001f0c:	e7d0      	b.n	8001eb0 <HAL_RCC_OscConfig+0x1cc>
 8001f0e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	672a      	str	r2, [r5, #112]	; 0x70
 8001f16:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001f18:	f022 0204 	bic.w	r2, r2, #4
 8001f1c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ca      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001f22:	f7fe fb7f 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f2a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f2e:	0798      	lsls	r0, r3, #30
 8001f30:	d5cb      	bpl.n	8001eca <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7fe fb77 	bl	8000624 <HAL_GetTick>
 8001f36:	1bc0      	subs	r0, r0, r7
 8001f38:	4540      	cmp	r0, r8
 8001f3a:	d9f7      	bls.n	8001f2c <HAL_RCC_OscConfig+0x248>
 8001f3c:	e719      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7fe fb71 	bl	8000624 <HAL_GetTick>
 8001f42:	1bc0      	subs	r0, r0, r7
 8001f44:	4540      	cmp	r0, r8
 8001f46:	d9bd      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x1e0>
 8001f48:	e713      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f4a:	4d1b      	ldr	r5, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
 8001f4c:	68ab      	ldr	r3, [r5, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	f43f aeca 	beq.w	8001cec <HAL_RCC_OscConfig+0x8>
 8001f58:	4e1b      	ldr	r6, [pc, #108]	; (8001fc8 <HAL_RCC_OscConfig+0x2e4>)
 8001f5a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f5c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f60:	d134      	bne.n	8001fcc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001f62:	f7fe fb5f 	bl	8000624 <HAL_GetTick>
 8001f66:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f68:	682b      	ldr	r3, [r5, #0]
 8001f6a:	0199      	lsls	r1, r3, #6
 8001f6c:	d41e      	bmi.n	8001fac <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f6e:	6a22      	ldr	r2, [r4, #32]
 8001f70:	69e3      	ldr	r3, [r4, #28]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f76:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	4c0d      	ldr	r4, [pc, #52]	; (8001fb8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f84:	0852      	lsrs	r2, r2, #1
 8001f86:	3a01      	subs	r2, #1
 8001f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f8c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f8e:	2301      	movs	r3, #1
 8001f90:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001f92:	f7fe fb47 	bl	8000624 <HAL_GetTick>
 8001f96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	019a      	lsls	r2, r3, #6
 8001f9c:	f53f aebc 	bmi.w	8001d18 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7fe fb40 	bl	8000624 <HAL_GetTick>
 8001fa4:	1b40      	subs	r0, r0, r5
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d9f6      	bls.n	8001f98 <HAL_RCC_OscConfig+0x2b4>
 8001faa:	e6e2      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe fb3a 	bl	8000624 <HAL_GetTick>
 8001fb0:	1bc0      	subs	r0, r0, r7
 8001fb2:	2802      	cmp	r0, #2
 8001fb4:	d9d8      	bls.n	8001f68 <HAL_RCC_OscConfig+0x284>
 8001fb6:	e6dc      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	42470000 	.word	0x42470000
 8001fc0:	42470e80 	.word	0x42470e80
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fb2a 	bl	8000624 <HAL_GetTick>
 8001fd0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	682b      	ldr	r3, [r5, #0]
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	f57f ae9f 	bpl.w	8001d18 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe fb23 	bl	8000624 <HAL_GetTick>
 8001fde:	1b00      	subs	r0, r0, r4
 8001fe0:	2802      	cmp	r0, #2
 8001fe2:	d9f6      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x2ee>
 8001fe4:	e6c5      	b.n	8001d72 <HAL_RCC_OscConfig+0x8e>
 8001fe6:	bf00      	nop

08001fe8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe8:	4913      	ldr	r1, [pc, #76]	; (8002038 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001fea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fec:	688b      	ldr	r3, [r1, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x16>
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d003      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ffa:	4810      	ldr	r0, [pc, #64]	; (800203c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ffc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001ffe:	4810      	ldr	r0, [pc, #64]	; (8002040 <HAL_RCC_GetSysClockFreq+0x58>)
 8002000:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002002:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002004:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002006:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002008:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200c:	bf14      	ite	ne
 800200e:	480c      	ldrne	r0, [pc, #48]	; (8002040 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002010:	480a      	ldreq	r0, [pc, #40]	; (800203c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002012:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002016:	bf18      	it	ne
 8002018:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800201a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201e:	fba1 0100 	umull	r0, r1, r1, r0
 8002022:	f7fe f92d 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_RCC_GetSysClockFreq+0x50>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800202e:	3301      	adds	r3, #1
 8002030:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002032:	fbb0 f0f3 	udiv	r0, r0, r3
 8002036:	bd08      	pop	{r3, pc}
 8002038:	40023800 	.word	0x40023800
 800203c:	00f42400 	.word	0x00f42400
 8002040:	007a1200 	.word	0x007a1200

08002044 <HAL_RCC_ClockConfig>:
{
 8002044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002048:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800204a:	4604      	mov	r4, r0
 800204c:	b910      	cbnz	r0, 8002054 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800204e:	2001      	movs	r0, #1
 8002050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b44      	ldr	r3, [pc, #272]	; (8002168 <HAL_RCC_ClockConfig+0x124>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	f002 020f 	and.w	r2, r2, #15
 800205c:	428a      	cmp	r2, r1
 800205e:	d328      	bcc.n	80020b2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002060:	6821      	ldr	r1, [r4, #0]
 8002062:	078f      	lsls	r7, r1, #30
 8002064:	d42d      	bmi.n	80020c2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	07c8      	lsls	r0, r1, #31
 8002068:	d440      	bmi.n	80020ec <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206a:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <HAL_RCC_ClockConfig+0x124>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	f002 020f 	and.w	r2, r2, #15
 8002072:	4295      	cmp	r5, r2
 8002074:	d366      	bcc.n	8002144 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002076:	6822      	ldr	r2, [r4, #0]
 8002078:	0751      	lsls	r1, r2, #29
 800207a:	d46c      	bmi.n	8002156 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	0713      	lsls	r3, r2, #28
 800207e:	d507      	bpl.n	8002090 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002080:	4a3a      	ldr	r2, [pc, #232]	; (800216c <HAL_RCC_ClockConfig+0x128>)
 8002082:	6921      	ldr	r1, [r4, #16]
 8002084:	6893      	ldr	r3, [r2, #8]
 8002086:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800208a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800208e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002090:	f7ff ffaa 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8002094:	4b35      	ldr	r3, [pc, #212]	; (800216c <HAL_RCC_ClockConfig+0x128>)
 8002096:	4a36      	ldr	r2, [pc, #216]	; (8002170 <HAL_RCC_ClockConfig+0x12c>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	40d8      	lsrs	r0, r3
 80020a2:	4b34      	ldr	r3, [pc, #208]	; (8002174 <HAL_RCC_ClockConfig+0x130>)
 80020a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7fe fa72 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 80020ac:	2000      	movs	r0, #0
 80020ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	b2ca      	uxtb	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	4299      	cmp	r1, r3
 80020be:	d1c6      	bne.n	800204e <HAL_RCC_ClockConfig+0xa>
 80020c0:	e7ce      	b.n	8002060 <HAL_RCC_ClockConfig+0x1c>
 80020c2:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c8:	bf1e      	ittt	ne
 80020ca:	689a      	ldrne	r2, [r3, #8]
 80020cc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80020d0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	bf42      	ittt	mi
 80020d6:	689a      	ldrmi	r2, [r3, #8]
 80020d8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80020dc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	68a0      	ldr	r0, [r4, #8]
 80020e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020e6:	4302      	orrs	r2, r0
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	e7bc      	b.n	8002066 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ec:	6862      	ldr	r2, [r4, #4]
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <HAL_RCC_ClockConfig+0x128>)
 80020f0:	2a01      	cmp	r2, #1
 80020f2:	d11d      	bne.n	8002130 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	d0a8      	beq.n	800204e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fc:	4e1b      	ldr	r6, [pc, #108]	; (800216c <HAL_RCC_ClockConfig+0x128>)
 80020fe:	68b3      	ldr	r3, [r6, #8]
 8002100:	f023 0303 	bic.w	r3, r3, #3
 8002104:	4313      	orrs	r3, r2
 8002106:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002108:	f7fe fa8c 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002110:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	68b3      	ldr	r3, [r6, #8]
 8002114:	6862      	ldr	r2, [r4, #4]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800211e:	d0a4      	beq.n	800206a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe fa80 	bl	8000624 <HAL_GetTick>
 8002124:	1bc0      	subs	r0, r0, r7
 8002126:	4540      	cmp	r0, r8
 8002128:	d9f3      	bls.n	8002112 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800212a:	2003      	movs	r0, #3
}
 800212c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002130:	1e91      	subs	r1, r2, #2
 8002132:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002134:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002136:	d802      	bhi.n	800213e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800213c:	e7dd      	b.n	80020fa <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	f013 0f02 	tst.w	r3, #2
 8002142:	e7da      	b.n	80020fa <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002144:	b2ea      	uxtb	r2, r5
 8002146:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	429d      	cmp	r5, r3
 8002150:	f47f af7d 	bne.w	800204e <HAL_RCC_ClockConfig+0xa>
 8002154:	e78f      	b.n	8002076 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002156:	4905      	ldr	r1, [pc, #20]	; (800216c <HAL_RCC_ClockConfig+0x128>)
 8002158:	68e0      	ldr	r0, [r4, #12]
 800215a:	688b      	ldr	r3, [r1, #8]
 800215c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002160:	4303      	orrs	r3, r0
 8002162:	608b      	str	r3, [r1, #8]
 8002164:	e78a      	b.n	800207c <HAL_RCC_ClockConfig+0x38>
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00
 800216c:	40023800 	.word	0x40023800
 8002170:	080088f6 	.word	0x080088f6
 8002174:	20000040 	.word	0x20000040

08002178 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_RCC_GetPCLK1Freq+0x14>)
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x18>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	4a03      	ldr	r2, [pc, #12]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002186:	6810      	ldr	r0, [r2, #0]
}
 8002188:	40d8      	lsrs	r0, r3
 800218a:	4770      	bx	lr
 800218c:	40023800 	.word	0x40023800
 8002190:	08008906 	.word	0x08008906
 8002194:	20000040 	.word	0x20000040

08002198 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002198:	6803      	ldr	r3, [r0, #0]
 800219a:	f013 0f05 	tst.w	r3, #5
{
 800219e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021a0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80021a2:	d13c      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	079a      	lsls	r2, r3, #30
 80021a8:	d530      	bpl.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021b0:	4d45      	ldr	r5, [pc, #276]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80021c4:	682b      	ldr	r3, [r5, #0]
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021cc:	f7fe fa2a 	bl	8000624 <HAL_GetTick>
 80021d0:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021d2:	682b      	ldr	r3, [r5, #0]
 80021d4:	05d9      	lsls	r1, r3, #23
 80021d6:	d54c      	bpl.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xda>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d8:	4d3a      	ldr	r5, [pc, #232]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80021da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021dc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80021e0:	d14d      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e2:	6923      	ldr	r3, [r4, #16]
 80021e4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80021e8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80021ec:	4a35      	ldr	r2, [pc, #212]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80021ee:	d165      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x124>
 80021f0:	6891      	ldr	r1, [r2, #8]
 80021f2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80021f6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80021fa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80021fe:	4301      	orrs	r1, r0
 8002200:	6091      	str	r1, [r2, #8]
 8002202:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	430b      	orrs	r3, r1
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800220c:	6820      	ldr	r0, [r4, #0]
 800220e:	f010 0008 	ands.w	r0, r0, #8
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002212:	bf1f      	itttt	ne
 8002214:	4b2d      	ldrne	r3, [pc, #180]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002216:	7d22      	ldrbne	r2, [r4, #20]
 8002218:	601a      	strne	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800221a:	2000      	movne	r0, #0
 800221c:	e027      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_PLLI2S_DISABLE();
 800221e:	4e2c      	ldr	r6, [pc, #176]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002220:	4d28      	ldr	r5, [pc, #160]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002226:	f7fe f9fd 	bl	8000624 <HAL_GetTick>
 800222a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800222c:	682b      	ldr	r3, [r5, #0]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	d417      	bmi.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002232:	68e3      	ldr	r3, [r4, #12]
 8002234:	68a2      	ldr	r2, [r4, #8]
 8002236:	071b      	lsls	r3, r3, #28
 8002238:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800223c:	6862      	ldr	r2, [r4, #4]
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002244:	2301      	movs	r3, #1
 8002246:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002248:	f7fe f9ec 	bl	8000624 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800224c:	4d1d      	ldr	r5, [pc, #116]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    tickstart = HAL_GetTick();
 800224e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	0118      	lsls	r0, r3, #4
 8002254:	d4a6      	bmi.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002256:	f7fe f9e5 	bl	8000624 <HAL_GetTick>
 800225a:	1b80      	subs	r0, r0, r6
 800225c:	2802      	cmp	r0, #2
 800225e:	d9f7      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8002260:	e004      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002262:	f7fe f9df 	bl	8000624 <HAL_GetTick>
 8002266:	1bc0      	subs	r0, r0, r7
 8002268:	2802      	cmp	r0, #2
 800226a:	d9df      	bls.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x94>
        return HAL_TIMEOUT;
 800226c:	2003      	movs	r0, #3
}
 800226e:	b003      	add	sp, #12
 8002270:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7fe f9d7 	bl	8000624 <HAL_GetTick>
 8002276:	1b80      	subs	r0, r0, r6
 8002278:	2802      	cmp	r0, #2
 800227a:	d9aa      	bls.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800227c:	e7f6      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800227e:	6922      	ldr	r2, [r4, #16]
 8002280:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002284:	4293      	cmp	r3, r2
 8002286:	d0ac      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002288:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800228c:	2101      	movs	r1, #1
 800228e:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002294:	2100      	movs	r1, #0
 8002296:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002298:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800229a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800229c:	07da      	lsls	r2, r3, #31
 800229e:	d5a0      	bpl.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 80022a0:	f7fe f9c0 	bl	8000624 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80022a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022ac:	079b      	lsls	r3, r3, #30
 80022ae:	d498      	bmi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe f9b8 	bl	8000624 <HAL_GetTick>
 80022b4:	1b80      	subs	r0, r0, r6
 80022b6:	42b8      	cmp	r0, r7
 80022b8:	d9f7      	bls.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x112>
 80022ba:	e7d7      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022bc:	6891      	ldr	r1, [r2, #8]
 80022be:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80022c2:	e79d      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40007000 	.word	0x40007000
 80022cc:	424711e0 	.word	0x424711e0
 80022d0:	42470068 	.word	0x42470068
 80022d4:	42470e40 	.word	0x42470e40

080022d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80022d8:	2801      	cmp	r0, #1
 80022da:	d121      	bne.n	8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 80022de:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 80022e0:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 80022e4:	d004      	beq.n	80022f0 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80022e6:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80022e8:	480f      	ldr	r0, [pc, #60]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80022ea:	bf18      	it	ne
 80022ec:	2000      	movne	r0, #0
 80022ee:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022f0:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80022f2:	490c      	ldr	r1, [pc, #48]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80022f4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022f8:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80022fa:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80022fe:	bf4c      	ite	mi
 8002300:	4b0a      	ldrmi	r3, [pc, #40]	; (800232c <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002302:	4b0b      	ldrpl	r3, [pc, #44]	; (8002330 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002304:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002308:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800230c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002310:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002314:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002316:	f3c0 7002 	ubfx	r0, r0, #28, #3
 800231a:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 800231e:	4770      	bx	lr
  uint32_t frequency = 0U;
 8002320:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002322:	4770      	bx	lr
 8002324:	40023800 	.word	0x40023800
 8002328:	00bb8000 	.word	0x00bb8000
 800232c:	007a1200 	.word	0x007a1200
 8002330:	00f42400 	.word	0x00f42400

08002334 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	4604      	mov	r4, r0
 8002338:	460e      	mov	r6, r1
 800233a:	4615      	mov	r5, r2
 800233c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233e:	6821      	ldr	r1, [r4, #0]
 8002340:	688a      	ldr	r2, [r1, #8]
 8002342:	ea36 0302 	bics.w	r3, r6, r2
 8002346:	d001      	beq.n	800234c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002348:	2000      	movs	r0, #0
}
 800234a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800234c:	1c6b      	adds	r3, r5, #1
 800234e:	d0f7      	beq.n	8002340 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002350:	f7fe f968 	bl	8000624 <HAL_GetTick>
 8002354:	1bc0      	subs	r0, r0, r7
 8002356:	4285      	cmp	r5, r0
 8002358:	d8f1      	bhi.n	800233e <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002362:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002364:	6862      	ldr	r2, [r4, #4]
 8002366:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800236a:	d10a      	bne.n	8002382 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 800236c:	68a2      	ldr	r2, [r4, #8]
 800236e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002372:	d002      	beq.n	800237a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002374:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002378:	d103      	bne.n	8002382 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002380:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002382:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002384:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002388:	d107      	bne.n	800239a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002398:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800239a:	2301      	movs	r3, #1
 800239c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80023a0:	2300      	movs	r3, #0
 80023a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80023a6:	2003      	movs	r0, #3
 80023a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080023ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023ae:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80023b0:	4a13      	ldr	r2, [pc, #76]	; (8002400 <SPI_EndRxTxTransaction+0x54>)
 80023b2:	4e14      	ldr	r6, [pc, #80]	; (8002404 <SPI_EndRxTxTransaction+0x58>)
 80023b4:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023b6:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80023b8:	fbb5 f6f6 	udiv	r6, r5, r6
 80023bc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80023c0:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023c2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80023c6:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80023c8:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ca:	d10d      	bne.n	80023e8 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023cc:	460a      	mov	r2, r1
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	f7ff ffb0 	bl	8002334 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80023d4:	b910      	cbnz	r0, 80023dc <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 80023d6:	2000      	movs	r0, #0
}
 80023d8:	b002      	add	sp, #8
 80023da:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023de:	f043 0320 	orr.w	r3, r3, #32
 80023e2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80023e4:	2003      	movs	r0, #3
 80023e6:	e7f7      	b.n	80023d8 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 80023e8:	9b01      	ldr	r3, [sp, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f3      	beq.n	80023d6 <SPI_EndRxTxTransaction+0x2a>
      count--;
 80023ee:	9b01      	ldr	r3, [sp, #4]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	061b      	lsls	r3, r3, #24
 80023fa:	d4f5      	bmi.n	80023e8 <SPI_EndRxTxTransaction+0x3c>
 80023fc:	e7eb      	b.n	80023d6 <SPI_EndRxTxTransaction+0x2a>
 80023fe:	bf00      	nop
 8002400:	20000040 	.word	0x20000040
 8002404:	016e3600 	.word	0x016e3600

08002408 <HAL_SPI_Init>:
{
 8002408:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800240a:	4604      	mov	r4, r0
 800240c:	2800      	cmp	r0, #0
 800240e:	d036      	beq.n	800247e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002410:	2300      	movs	r3, #0
 8002412:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002414:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002418:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800241c:	b91b      	cbnz	r3, 8002426 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800241e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002422:	f003 f9bd 	bl	80057a0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002426:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002428:	68a0      	ldr	r0, [r4, #8]
 800242a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800242c:	2302      	movs	r3, #2
 800242e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002432:	680b      	ldr	r3, [r1, #0]
 8002434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002438:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800243a:	6863      	ldr	r3, [r4, #4]
 800243c:	4303      	orrs	r3, r0
 800243e:	68e0      	ldr	r0, [r4, #12]
 8002440:	4303      	orrs	r3, r0
 8002442:	6920      	ldr	r0, [r4, #16]
 8002444:	4303      	orrs	r3, r0
 8002446:	6960      	ldr	r0, [r4, #20]
 8002448:	4303      	orrs	r3, r0
 800244a:	69e0      	ldr	r0, [r4, #28]
 800244c:	4303      	orrs	r3, r0
 800244e:	6a20      	ldr	r0, [r4, #32]
 8002450:	4303      	orrs	r3, r0
 8002452:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002454:	4303      	orrs	r3, r0
 8002456:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800245a:	4303      	orrs	r3, r0
 800245c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800245e:	0c12      	lsrs	r2, r2, #16
 8002460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002462:	f002 0204 	and.w	r2, r2, #4
 8002466:	431a      	orrs	r2, r3
 8002468:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800246a:	69cb      	ldr	r3, [r1, #28]
 800246c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002470:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002472:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002474:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002476:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002478:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 800247c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800247e:	2001      	movs	r0, #1
}
 8002480:	bd10      	pop	{r4, pc}

08002482 <HAL_SPI_Transmit>:
{
 8002482:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002486:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002488:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800248c:	2b01      	cmp	r3, #1
{
 800248e:	4604      	mov	r4, r0
 8002490:	460d      	mov	r5, r1
 8002492:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002494:	f000 809b 	beq.w	80025ce <HAL_SPI_Transmit+0x14c>
 8002498:	2301      	movs	r3, #1
 800249a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800249e:	f7fe f8c1 	bl	8000624 <HAL_GetTick>
 80024a2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80024a4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80024a8:	b2c0      	uxtb	r0, r0
 80024aa:	2801      	cmp	r0, #1
 80024ac:	f040 808d 	bne.w	80025ca <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 80024b0:	2d00      	cmp	r5, #0
 80024b2:	d05d      	beq.n	8002570 <HAL_SPI_Transmit+0xee>
 80024b4:	f1b8 0f00 	cmp.w	r8, #0
 80024b8:	d05a      	beq.n	8002570 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024ba:	2303      	movs	r3, #3
 80024bc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024c0:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024c2:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024c4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024c6:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80024c8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80024cc:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024ce:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024d0:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024d2:	6420      	str	r0, [r4, #64]	; 0x40
 80024d4:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024d6:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 80024dc:	bf08      	it	eq
 80024de:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 80024e0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80024e4:	bf04      	itt	eq
 80024e6:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80024ea:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024ec:	6803      	ldr	r3, [r0, #0]
 80024ee:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80024f0:	bf5e      	ittt	pl
 80024f2:	6803      	ldrpl	r3, [r0, #0]
 80024f4:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80024f8:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024fa:	68e3      	ldr	r3, [r4, #12]
 80024fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002500:	6863      	ldr	r3, [r4, #4]
 8002502:	d13e      	bne.n	8002582 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002504:	b113      	cbz	r3, 800250c <HAL_SPI_Transmit+0x8a>
 8002506:	f1b8 0f01 	cmp.w	r8, #1
 800250a:	d107      	bne.n	800251c <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800250c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002510:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002512:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002514:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002516:	3b01      	subs	r3, #1
 8002518:	b29b      	uxth	r3, r3
 800251a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800251c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800251e:	b29b      	uxth	r3, r3
 8002520:	b9a3      	cbnz	r3, 800254c <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002522:	463a      	mov	r2, r7
 8002524:	4631      	mov	r1, r6
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff ff40 	bl	80023ac <SPI_EndRxTxTransaction>
 800252c:	2800      	cmp	r0, #0
 800252e:	d149      	bne.n	80025c4 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002530:	68a3      	ldr	r3, [r4, #8]
 8002532:	b933      	cbnz	r3, 8002542 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	9201      	str	r2, [sp, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002542:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002544:	3000      	adds	r0, #0
 8002546:	bf18      	it	ne
 8002548:	2001      	movne	r0, #1
 800254a:	e011      	b.n	8002570 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800254c:	6822      	ldr	r2, [r4, #0]
 800254e:	6893      	ldr	r3, [r2, #8]
 8002550:	0798      	lsls	r0, r3, #30
 8002552:	d505      	bpl.n	8002560 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002554:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002556:	f833 1b02 	ldrh.w	r1, [r3], #2
 800255a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800255c:	6323      	str	r3, [r4, #48]	; 0x30
 800255e:	e7d9      	b.n	8002514 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002560:	f7fe f860 	bl	8000624 <HAL_GetTick>
 8002564:	1bc0      	subs	r0, r0, r7
 8002566:	42b0      	cmp	r0, r6
 8002568:	d3d8      	bcc.n	800251c <HAL_SPI_Transmit+0x9a>
 800256a:	1c71      	adds	r1, r6, #1
 800256c:	d0d6      	beq.n	800251c <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 800256e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002570:	2301      	movs	r3, #1
 8002572:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002576:	2300      	movs	r3, #0
 8002578:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800257c:	b002      	add	sp, #8
 800257e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002582:	b113      	cbz	r3, 800258a <HAL_SPI_Transmit+0x108>
 8002584:	f1b8 0f01 	cmp.w	r8, #1
 8002588:	d108      	bne.n	800259c <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800258a:	782b      	ldrb	r3, [r5, #0]
 800258c:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800258e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002590:	3301      	adds	r3, #1
 8002592:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002594:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002596:	3b01      	subs	r3, #1
 8002598:	b29b      	uxth	r3, r3
 800259a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800259c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0be      	beq.n	8002522 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	0792      	lsls	r2, r2, #30
 80025aa:	d503      	bpl.n	80025b4 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80025ae:	7812      	ldrb	r2, [r2, #0]
 80025b0:	731a      	strb	r2, [r3, #12]
 80025b2:	e7ec      	b.n	800258e <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025b4:	f7fe f836 	bl	8000624 <HAL_GetTick>
 80025b8:	1bc0      	subs	r0, r0, r7
 80025ba:	4286      	cmp	r6, r0
 80025bc:	d8ee      	bhi.n	800259c <HAL_SPI_Transmit+0x11a>
 80025be:	1c73      	adds	r3, r6, #1
 80025c0:	d0ec      	beq.n	800259c <HAL_SPI_Transmit+0x11a>
 80025c2:	e7d4      	b.n	800256e <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025c4:	2320      	movs	r3, #32
 80025c6:	6563      	str	r3, [r4, #84]	; 0x54
 80025c8:	e7b2      	b.n	8002530 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 80025ca:	2002      	movs	r0, #2
 80025cc:	e7d0      	b.n	8002570 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 80025ce:	2002      	movs	r0, #2
 80025d0:	e7d4      	b.n	800257c <HAL_SPI_Transmit+0xfa>
	...

080025d4 <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 80025d4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80025d8:	2b01      	cmp	r3, #1
{
 80025da:	b510      	push	{r4, lr}
 80025dc:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80025de:	d04e      	beq.n	800267e <HAL_SPI_Transmit_DMA+0xaa>
 80025e0:	2301      	movs	r3, #1
 80025e2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 80025e6:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
 80025ea:	b2c0      	uxtb	r0, r0
 80025ec:	4298      	cmp	r0, r3
 80025ee:	d144      	bne.n	800267a <HAL_SPI_Transmit_DMA+0xa6>
  if ((pData == NULL) || (Size == 0U))
 80025f0:	2900      	cmp	r1, #0
 80025f2:	d02d      	beq.n	8002650 <HAL_SPI_Transmit_DMA+0x7c>
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	d02b      	beq.n	8002650 <HAL_SPI_Transmit_DMA+0x7c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025f8:	2303      	movs	r3, #3
 80025fa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025fe:	2300      	movs	r3, #0
 8002600:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002602:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002604:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002606:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002608:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800260a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800260c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800260e:	68a3      	ldr	r3, [r4, #8]
  hspi->TxXferSize  = Size;
 8002610:	86a2      	strh	r2, [r4, #52]	; 0x34
 8002612:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002614:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002616:	6321      	str	r1, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800261c:	bf02      	ittt	eq
 800261e:	6813      	ldreq	r3, [r2, #0]
 8002620:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002624:	6013      	streq	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_SPI_Transmit_DMA+0xb0>)
 8002628:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_SPI_Transmit_DMA+0xb4>)
 800262c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <HAL_SPI_Transmit_DMA+0xb8>)
 8002630:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8002632:	2300      	movs	r3, #0
 8002634:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8002636:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002638:	320c      	adds	r2, #12
 800263a:	b29b      	uxth	r3, r3
 800263c:	f7fe f90a 	bl	8000854 <HAL_DMA_Start_IT>
 8002640:	b150      	cbz	r0, 8002658 <HAL_SPI_Transmit_DMA+0x84>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002642:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002644:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800264c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002650:	2300      	movs	r3, #0
 8002652:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002656:	bd10      	pop	{r4, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800265e:	bf5e      	ittt	pl
 8002660:	681a      	ldrpl	r2, [r3, #0]
 8002662:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002666:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	f042 0202 	orr.w	r2, r2, #2
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	e7ea      	b.n	8002650 <HAL_SPI_Transmit_DMA+0x7c>
    errorcode = HAL_BUSY;
 800267a:	2002      	movs	r0, #2
 800267c:	e7e8      	b.n	8002650 <HAL_SPI_Transmit_DMA+0x7c>
  __HAL_LOCK(hspi);
 800267e:	2002      	movs	r0, #2
}
 8002680:	bd10      	pop	{r4, pc}
 8002682:	bf00      	nop
 8002684:	08002695 	.word	0x08002695
 8002688:	080026c3 	.word	0x080026c3
 800268c:	080026a1 	.word	0x080026a1

08002690 <HAL_SPI_TxCpltCallback>:
 8002690:	4770      	bx	lr

08002692 <HAL_SPI_TxHalfCpltCallback>:
 8002692:	4770      	bx	lr

08002694 <SPI_DMAHalfTransmitCplt>:
{
 8002694:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002696:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002698:	f7ff fffb 	bl	8002692 <HAL_SPI_TxHalfCpltCallback>
 800269c:	bd08      	pop	{r3, pc}

0800269e <HAL_SPI_ErrorCallback>:
 800269e:	4770      	bx	lr

080026a0 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026a0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80026a2:	6802      	ldr	r2, [r0, #0]
{
 80026a4:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80026a6:	6853      	ldr	r3, [r2, #4]
 80026a8:	f023 0303 	bic.w	r3, r3, #3
 80026ac:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80026ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80026b0:	f043 0310 	orr.w	r3, r3, #16
 80026b4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 80026bc:	f7ff ffef 	bl	800269e <HAL_SPI_ErrorCallback>
 80026c0:	bd08      	pop	{r3, pc}

080026c2 <SPI_DMATransmitCplt>:
{
 80026c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026c4:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 80026c8:	f7fd ffac 	bl	8000624 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	05db      	lsls	r3, r3, #23
  tickstart = HAL_GetTick();
 80026d2:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80026d4:	d426      	bmi.n	8002724 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	f021 0120 	bic.w	r1, r1, #32
 80026de:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	f021 0102 	bic.w	r1, r1, #2
 80026e6:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80026e8:	4620      	mov	r0, r4
 80026ea:	2164      	movs	r1, #100	; 0x64
 80026ec:	f7ff fe5e 	bl	80023ac <SPI_EndRxTxTransaction>
 80026f0:	b118      	cbz	r0, 80026fa <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026f4:	f043 0320 	orr.w	r3, r3, #32
 80026f8:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026fa:	68a3      	ldr	r3, [r4, #8]
 80026fc:	b933      	cbnz	r3, 800270c <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	9201      	str	r2, [sp, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002710:	2301      	movs	r3, #1
 8002712:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002716:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002718:	b123      	cbz	r3, 8002724 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff ffbf 	bl	800269e <HAL_SPI_ErrorCallback>
}
 8002720:	b003      	add	sp, #12
 8002722:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff ffb3 	bl	8002690 <HAL_SPI_TxCpltCallback>
 800272a:	e7f9      	b.n	8002720 <SPI_DMATransmitCplt+0x5e>

0800272c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800272c:	6803      	ldr	r3, [r0, #0]
{
 800272e:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8002730:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002732:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002734:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8002738:	2d01      	cmp	r5, #1
{
 800273a:	b085      	sub	sp, #20
 800273c:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800273e:	d105      	bne.n	800274c <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002740:	064d      	lsls	r5, r1, #25
 8002742:	d503      	bpl.n	800274c <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8002744:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 8002746:	4798      	blx	r3
}
 8002748:	b005      	add	sp, #20
 800274a:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800274c:	0795      	lsls	r5, r2, #30
 800274e:	d504      	bpl.n	800275a <HAL_SPI_IRQHandler+0x2e>
 8002750:	0608      	lsls	r0, r1, #24
 8002752:	d502      	bpl.n	800275a <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8002754:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002756:	4620      	mov	r0, r4
 8002758:	e7f5      	b.n	8002746 <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800275a:	f412 7fb0 	tst.w	r2, #352	; 0x160
 800275e:	d0f3      	beq.n	8002748 <HAL_SPI_IRQHandler+0x1c>
 8002760:	068d      	lsls	r5, r1, #26
 8002762:	d5f1      	bpl.n	8002748 <HAL_SPI_IRQHandler+0x1c>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002764:	0650      	lsls	r0, r2, #25
 8002766:	d50f      	bpl.n	8002788 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002768:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800276c:	2803      	cmp	r0, #3
 800276e:	f04f 0500 	mov.w	r5, #0
 8002772:	d04c      	beq.n	800280e <HAL_SPI_IRQHandler+0xe2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002774:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002776:	f040 0004 	orr.w	r0, r0, #4
 800277a:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800277c:	9500      	str	r5, [sp, #0]
 800277e:	68d8      	ldr	r0, [r3, #12]
 8002780:	9000      	str	r0, [sp, #0]
 8002782:	6898      	ldr	r0, [r3, #8]
 8002784:	9000      	str	r0, [sp, #0]
 8002786:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002788:	0695      	lsls	r5, r2, #26
 800278a:	d50c      	bpl.n	80027a6 <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800278c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800278e:	f040 0001 	orr.w	r0, r0, #1
 8002792:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002794:	2000      	movs	r0, #0
 8002796:	9002      	str	r0, [sp, #8]
 8002798:	6898      	ldr	r0, [r3, #8]
 800279a:	9002      	str	r0, [sp, #8]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80027a2:	6018      	str	r0, [r3, #0]
 80027a4:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80027a6:	05d0      	lsls	r0, r2, #23
 80027a8:	d508      	bpl.n	80027bc <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80027aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80027ac:	f042 0208 	orr.w	r2, r2, #8
 80027b0:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80027b2:	2200      	movs	r2, #0
 80027b4:	9203      	str	r2, [sp, #12]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	9203      	str	r2, [sp, #12]
 80027ba:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d0c2      	beq.n	8002748 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027c8:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80027ca:	2201      	movs	r2, #1
 80027cc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80027d0:	078a      	lsls	r2, r1, #30
 80027d2:	d023      	beq.n	800281c <HAL_SPI_IRQHandler+0xf0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80027d4:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80027d6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80027d8:	f022 0203 	bic.w	r2, r2, #3
 80027dc:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80027de:	b140      	cbz	r0, 80027f2 <HAL_SPI_IRQHandler+0xc6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_SPI_IRQHandler+0xf8>)
 80027e2:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027e4:	f7fe f874 	bl	80008d0 <HAL_DMA_Abort_IT>
 80027e8:	b118      	cbz	r0, 80027f2 <HAL_SPI_IRQHandler+0xc6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f0:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80027f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d0a7      	beq.n	8002748 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_SPI_IRQHandler+0xf8>)
 80027fa:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80027fc:	f7fe f868 	bl	80008d0 <HAL_DMA_Abort_IT>
 8002800:	2800      	cmp	r0, #0
 8002802:	d0a1      	beq.n	8002748 <HAL_SPI_IRQHandler+0x1c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002804:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800280a:	6563      	str	r3, [r4, #84]	; 0x54
 800280c:	e79c      	b.n	8002748 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800280e:	9501      	str	r5, [sp, #4]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	9201      	str	r2, [sp, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	9b01      	ldr	r3, [sp, #4]
        return;
 800281a:	e795      	b.n	8002748 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff ff3e 	bl	800269e <HAL_SPI_ErrorCallback>
 8002822:	e791      	b.n	8002748 <HAL_SPI_IRQHandler+0x1c>
 8002824:	08002829 	.word	0x08002829

08002828 <SPI_DMAAbortOnError>:
{
 8002828:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800282a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002830:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8002832:	f7ff ff34 	bl	800269e <HAL_SPI_ErrorCallback>
 8002836:	bd08      	pop	{r3, pc}

08002838 <HAL_TIM_PeriodElapsedCallback>:
 8002838:	4770      	bx	lr

0800283a <HAL_TIM_OC_DelayElapsedCallback>:
 800283a:	4770      	bx	lr

0800283c <HAL_TIM_IC_CaptureCallback>:
 800283c:	4770      	bx	lr

0800283e <HAL_TIM_PWM_PulseFinishedCallback>:
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_TriggerCallback>:
 8002840:	4770      	bx	lr

08002842 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	0791      	lsls	r1, r2, #30
{
 8002848:	b510      	push	{r4, lr}
 800284a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800284c:	d50e      	bpl.n	800286c <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	0792      	lsls	r2, r2, #30
 8002852:	d50b      	bpl.n	800286c <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002854:	f06f 0202 	mvn.w	r2, #2
 8002858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800285a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800285c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800285e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002860:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002862:	d077      	beq.n	8002954 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002864:	f7ff ffea 	bl	800283c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002868:	2300      	movs	r3, #0
 800286a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	0750      	lsls	r0, r2, #29
 8002872:	d510      	bpl.n	8002896 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	0751      	lsls	r1, r2, #29
 8002878:	d50d      	bpl.n	8002896 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800287a:	f06f 0204 	mvn.w	r2, #4
 800287e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002880:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002882:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002884:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002888:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800288c:	d068      	beq.n	8002960 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800288e:	f7ff ffd5 	bl	800283c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	2300      	movs	r3, #0
 8002894:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	0712      	lsls	r2, r2, #28
 800289c:	d50f      	bpl.n	80028be <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	0710      	lsls	r0, r2, #28
 80028a2:	d50c      	bpl.n	80028be <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a4:	f06f 0208 	mvn.w	r2, #8
 80028a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ac:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028ae:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028b0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b4:	d05a      	beq.n	800296c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	f7ff ffc1 	bl	800283c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	2300      	movs	r3, #0
 80028bc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	06d2      	lsls	r2, r2, #27
 80028c4:	d510      	bpl.n	80028e8 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	06d0      	lsls	r0, r2, #27
 80028ca:	d50d      	bpl.n	80028e8 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028cc:	f06f 0210 	mvn.w	r2, #16
 80028d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028d4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028d6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028da:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028dc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028de:	d04b      	beq.n	8002978 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80028e0:	f7ff ffac 	bl	800283c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e4:	2300      	movs	r3, #0
 80028e6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	07d1      	lsls	r1, r2, #31
 80028ee:	d508      	bpl.n	8002902 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	07d2      	lsls	r2, r2, #31
 80028f4:	d505      	bpl.n	8002902 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028f6:	f06f 0201 	mvn.w	r2, #1
 80028fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028fc:	4620      	mov	r0, r4
 80028fe:	f7ff ff9b 	bl	8002838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	0610      	lsls	r0, r2, #24
 8002908:	d508      	bpl.n	800291c <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	0611      	lsls	r1, r2, #24
 800290e:	d505      	bpl.n	800291c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002916:	4620      	mov	r0, r4
 8002918:	f000 f8ee 	bl	8002af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	0652      	lsls	r2, r2, #25
 8002922:	d508      	bpl.n	8002936 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	0650      	lsls	r0, r2, #25
 8002928:	d505      	bpl.n	8002936 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800292a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800292e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002930:	4620      	mov	r0, r4
 8002932:	f7ff ff85 	bl	8002840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	0691      	lsls	r1, r2, #26
 800293c:	d522      	bpl.n	8002984 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	0692      	lsls	r2, r2, #26
 8002942:	d51f      	bpl.n	8002984 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002944:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002948:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800294a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800294c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002950:	f000 b8d1 	b.w	8002af6 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002954:	f7ff ff71 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	4620      	mov	r0, r4
 800295a:	f7ff ff70 	bl	800283e <HAL_TIM_PWM_PulseFinishedCallback>
 800295e:	e783      	b.n	8002868 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002960:	f7ff ff6b 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	4620      	mov	r0, r4
 8002966:	f7ff ff6a 	bl	800283e <HAL_TIM_PWM_PulseFinishedCallback>
 800296a:	e792      	b.n	8002892 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296c:	f7ff ff65 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	4620      	mov	r0, r4
 8002972:	f7ff ff64 	bl	800283e <HAL_TIM_PWM_PulseFinishedCallback>
 8002976:	e7a0      	b.n	80028ba <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002978:	f7ff ff5f 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff ff5e 	bl	800283e <HAL_TIM_PWM_PulseFinishedCallback>
 8002982:	e7af      	b.n	80028e4 <HAL_TIM_IRQHandler+0xa2>
 8002984:	bd10      	pop	{r4, pc}
	...

08002988 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002988:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 800298a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800298c:	4290      	cmp	r0, r2
 800298e:	d00e      	beq.n	80029ae <TIM_Base_SetConfig+0x26>
 8002990:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002994:	d00b      	beq.n	80029ae <TIM_Base_SetConfig+0x26>
 8002996:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800299a:	4290      	cmp	r0, r2
 800299c:	d007      	beq.n	80029ae <TIM_Base_SetConfig+0x26>
 800299e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029a2:	4290      	cmp	r0, r2
 80029a4:	d003      	beq.n	80029ae <TIM_Base_SetConfig+0x26>
 80029a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029aa:	4290      	cmp	r0, r2
 80029ac:	d115      	bne.n	80029da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80029ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029b4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <TIM_Base_SetConfig+0x94>)
 80029b8:	4290      	cmp	r0, r2
 80029ba:	d019      	beq.n	80029f0 <TIM_Base_SetConfig+0x68>
 80029bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80029c0:	d016      	beq.n	80029f0 <TIM_Base_SetConfig+0x68>
 80029c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80029c6:	4290      	cmp	r0, r2
 80029c8:	d012      	beq.n	80029f0 <TIM_Base_SetConfig+0x68>
 80029ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ce:	4290      	cmp	r0, r2
 80029d0:	d00e      	beq.n	80029f0 <TIM_Base_SetConfig+0x68>
 80029d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029d6:	4290      	cmp	r0, r2
 80029d8:	d00a      	beq.n	80029f0 <TIM_Base_SetConfig+0x68>
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <TIM_Base_SetConfig+0x98>)
 80029dc:	4290      	cmp	r0, r2
 80029de:	d007      	beq.n	80029f0 <TIM_Base_SetConfig+0x68>
 80029e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029e4:	4290      	cmp	r0, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_Base_SetConfig+0x68>
 80029e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ec:	4290      	cmp	r0, r2
 80029ee:	d103      	bne.n	80029f8 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f8:	694a      	ldr	r2, [r1, #20]
 80029fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002a00:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a02:	688b      	ldr	r3, [r1, #8]
 8002a04:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a06:	680b      	ldr	r3, [r1, #0]
 8002a08:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a0a:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <TIM_Base_SetConfig+0x94>)
 8002a0c:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a0e:	bf04      	itt	eq
 8002a10:	690b      	ldreq	r3, [r1, #16]
 8002a12:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a14:	2301      	movs	r3, #1
 8002a16:	6143      	str	r3, [r0, #20]
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40014000 	.word	0x40014000

08002a24 <HAL_TIM_Encoder_Init>:
{
 8002a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a26:	460c      	mov	r4, r1
  if (htim == NULL)
 8002a28:	4605      	mov	r5, r0
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d043      	beq.n	8002ab6 <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a36:	b91b      	cbnz	r3, 8002a40 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002a38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002a3c:	f002 ff36 	bl	80058ac <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a40:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8002a42:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a44:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a4c:	6883      	ldr	r3, [r0, #8]
 8002a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a52:	f023 0307 	bic.w	r3, r3, #7
 8002a56:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	f7ff ff96 	bl	8002988 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002a5c:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002a5e:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002a60:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002a62:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a64:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8002a66:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8002a68:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a6a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a70:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a74:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002a78:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a7a:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a7e:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a80:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a88:	68e1      	ldr	r1, [r4, #12]
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a8e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a92:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002a96:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a98:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a9a:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a9e:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002aa0:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002aa2:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8002aa6:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002aa8:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 8002aaa:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8002aac:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 8002aae:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002ab6:	2001      	movs	r0, #1
}
 8002ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002aba <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002abe:	2b01      	cmp	r3, #1
{
 8002ac0:	b530      	push	{r4, r5, lr}
 8002ac2:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002ac6:	d014      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac8:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002aca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002ace:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad0:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ad2:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ad4:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ad6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ade:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ae2:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ae4:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aec:	2300      	movs	r3, #0
 8002aee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002af2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002af4:	bd30      	pop	{r4, r5, pc}

08002af6 <HAL_TIMEx_CommutCallback>:
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	4770      	bx	lr
	...

08002afc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002afe:	3b01      	subs	r3, #1
 8002b00:	d101      	bne.n	8002b06 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002b02:	2003      	movs	r0, #3
 8002b04:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002b06:	6902      	ldr	r2, [r0, #16]
 8002b08:	2a00      	cmp	r2, #0
 8002b0a:	daf8      	bge.n	8002afe <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002b0c:	6903      	ldr	r3, [r0, #16]
 8002b0e:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <USB_CoreReset+0x2c>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002b16:	3a01      	subs	r2, #1
 8002b18:	d0f3      	beq.n	8002b02 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002b1a:	6903      	ldr	r3, [r0, #16]
 8002b1c:	f013 0301 	ands.w	r3, r3, #1
 8002b20:	d1f9      	bne.n	8002b16 <USB_CoreReset+0x1a>

  return HAL_OK;
 8002b22:	4618      	mov	r0, r3
}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	00030d41 	.word	0x00030d41

08002b2c <USB_CoreInit>:
{
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	b538      	push	{r3, r4, r5, lr}
 8002b30:	ad05      	add	r5, sp, #20
 8002b32:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b38:	2b01      	cmp	r3, #1
{
 8002b3a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b3c:	d125      	bne.n	8002b8a <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b44:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b46:	68c3      	ldr	r3, [r0, #12]
 8002b48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b50:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b52:	68c3      	ldr	r3, [r0, #12]
 8002b54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b58:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b5c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b5e:	bf02      	ittt	eq
 8002b60:	68c3      	ldreq	r3, [r0, #12]
 8002b62:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002b66:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002b68:	f7ff ffc8 	bl	8002afc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002b6c:	9b08      	ldr	r3, [sp, #32]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d107      	bne.n	8002b82 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b72:	68a3      	ldr	r3, [r4, #8]
 8002b74:	f043 0306 	orr.w	r3, r3, #6
 8002b78:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b7a:	68a3      	ldr	r3, [r4, #8]
 8002b7c:	f043 0320 	orr.w	r3, r3, #32
 8002b80:	60a3      	str	r3, [r4, #8]
}
 8002b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b86:	b004      	add	sp, #16
 8002b88:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b8a:	68c3      	ldr	r3, [r0, #12]
 8002b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b90:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002b92:	f7ff ffb3 	bl	8002afc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b98:	b923      	cbnz	r3, 8002ba4 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ba0:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ba2:	e7e3      	b.n	8002b6c <USB_CoreInit+0x40>
 8002ba4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002baa:	e7f9      	b.n	8002ba0 <USB_CoreInit+0x74>

08002bac <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002bac:	6883      	ldr	r3, [r0, #8]
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6083      	str	r3, [r0, #8]
}
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	4770      	bx	lr

08002bb8 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bb8:	6883      	ldr	r3, [r0, #8]
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	6083      	str	r3, [r0, #8]
}
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	4770      	bx	lr

08002bc4 <USB_SetCurrentMode>:
{
 8002bc4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bc6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002bc8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bca:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002bce:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002bd0:	d108      	bne.n	8002be4 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002bd2:	68c3      	ldr	r3, [r0, #12]
 8002bd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bd8:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002bda:	2032      	movs	r0, #50	; 0x32
 8002bdc:	f7fd fd28 	bl	8000630 <HAL_Delay>
  return HAL_OK;
 8002be0:	2000      	movs	r0, #0
 8002be2:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002be4:	b919      	cbnz	r1, 8002bee <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002be6:	68c3      	ldr	r3, [r0, #12]
 8002be8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bec:	e7f4      	b.n	8002bd8 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002bee:	2001      	movs	r0, #1
}
 8002bf0:	bd08      	pop	{r3, pc}
	...

08002bf4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002bf4:	0189      	lsls	r1, r1, #6
 8002bf6:	f041 0120 	orr.w	r1, r1, #32
 8002bfa:	4a06      	ldr	r2, [pc, #24]	; (8002c14 <USB_FlushTxFifo+0x20>)
 8002bfc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002bfe:	3a01      	subs	r2, #1
 8002c00:	d005      	beq.n	8002c0e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002c02:	6903      	ldr	r3, [r0, #16]
 8002c04:	f013 0320 	ands.w	r3, r3, #32
 8002c08:	d1f9      	bne.n	8002bfe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002c0e:	2003      	movs	r0, #3
}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	00030d41 	.word	0x00030d41

08002c18 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002c18:	2310      	movs	r3, #16
 8002c1a:	4a06      	ldr	r2, [pc, #24]	; (8002c34 <USB_FlushRxFifo+0x1c>)
 8002c1c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	d005      	beq.n	8002c2e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002c22:	6903      	ldr	r3, [r0, #16]
 8002c24:	f013 0310 	ands.w	r3, r3, #16
 8002c28:	d1f9      	bne.n	8002c1e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002c2e:	2003      	movs	r0, #3
}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	00030d41 	.word	0x00030d41

08002c38 <USB_WritePacket>:
{
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002c3e:	b94c      	cbnz	r4, 8002c54 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002c40:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002c42:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002c46:	f023 0303 	bic.w	r3, r3, #3
 8002c4a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002c4e:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002c50:	4299      	cmp	r1, r3
 8002c52:	d101      	bne.n	8002c58 <USB_WritePacket+0x20>
}
 8002c54:	2000      	movs	r0, #0
 8002c56:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002c58:	f851 2b04 	ldr.w	r2, [r1], #4
 8002c5c:	6002      	str	r2, [r0, #0]
 8002c5e:	e7f7      	b.n	8002c50 <USB_WritePacket+0x18>

08002c60 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002c60:	3203      	adds	r2, #3
 8002c62:	f022 0203 	bic.w	r2, r2, #3
 8002c66:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002c68:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8002c6c:	4291      	cmp	r1, r2
 8002c6e:	d101      	bne.n	8002c74 <USB_ReadPacket+0x14>
}
 8002c70:	4608      	mov	r0, r1
 8002c72:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002c74:	6803      	ldr	r3, [r0, #0]
 8002c76:	f841 3b04 	str.w	r3, [r1], #4
 8002c7a:	e7f7      	b.n	8002c6c <USB_ReadPacket+0xc>

08002c7c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002c7c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002c7e:	6980      	ldr	r0, [r0, #24]
}
 8002c80:	4010      	ands	r0, r2
 8002c82:	4770      	bx	lr

08002c84 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002c84:	6940      	ldr	r0, [r0, #20]
}
 8002c86:	f000 0001 	and.w	r0, r0, #1
 8002c8a:	4770      	bx	lr

08002c8c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002c8c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002c90:	f023 0303 	bic.w	r3, r3, #3
{
 8002c94:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002c96:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002c9a:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8002c9e:	f001 0303 	and.w	r3, r1, #3
 8002ca2:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8002ca4:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002ca6:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002caa:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8002cae:	d104      	bne.n	8002cba <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8002cb0:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8002cb4:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8002cba:	2902      	cmp	r1, #2
 8002cbc:	d1fb      	bne.n	8002cb6 <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8002cbe:	f241 7370 	movw	r3, #6000	; 0x1770
 8002cc2:	e7f7      	b.n	8002cb4 <USB_InitFSLSPClkSel+0x28>

08002cc4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8002cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8002cc6:	2500      	movs	r5, #0
 8002cc8:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002cca:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002cce:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002cd0:	9b01      	ldr	r3, [sp, #4]
 8002cd2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cd6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002cd8:	9b01      	ldr	r3, [sp, #4]
 8002cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002cde:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002ce0:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8002ce4:	2064      	movs	r0, #100	; 0x64
 8002ce6:	f7fd fca3 	bl	8000630 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8002cea:	9b01      	ldr	r3, [sp, #4]
 8002cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf0:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8002cf4:	200a      	movs	r0, #10
 8002cf6:	f7fd fc9b 	bl	8000630 <HAL_Delay>

  return HAL_OK;
}
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	b003      	add	sp, #12
 8002cfe:	bd30      	pop	{r4, r5, pc}

08002d00 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002d00:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002d06:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002d0a:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002d0c:	9b01      	ldr	r3, [sp, #4]
 8002d0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d12:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002d14:	9b01      	ldr	r3, [sp, #4]
 8002d16:	04da      	lsls	r2, r3, #19
 8002d18:	d406      	bmi.n	8002d28 <USB_DriveVbus+0x28>
 8002d1a:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002d1c:	bf02      	ittt	eq
 8002d1e:	9b01      	ldreq	r3, [sp, #4]
 8002d20:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8002d24:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002d28:	9b01      	ldr	r3, [sp, #4]
 8002d2a:	04db      	lsls	r3, r3, #19
 8002d2c:	d505      	bpl.n	8002d3a <USB_DriveVbus+0x3a>
 8002d2e:	b921      	cbnz	r1, 8002d3a <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002d30:	9b01      	ldr	r3, [sp, #4]
 8002d32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d36:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	b002      	add	sp, #8
 8002d3e:	4770      	bx	lr

08002d40 <USB_HostInit>:
{
 8002d40:	b084      	sub	sp, #16
 8002d42:	b538      	push	{r3, r4, r5, lr}
 8002d44:	4604      	mov	r4, r0
 8002d46:	a805      	add	r0, sp, #20
 8002d48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d58:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d5c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002d60:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d68:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d6c:	05da      	lsls	r2, r3, #23
 8002d6e:	d53f      	bpl.n	8002df0 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002d70:	9b07      	ldr	r3, [sp, #28]
 8002d72:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002d74:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002d78:	d13c      	bne.n	8002df4 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002d7e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002d82:	2110      	movs	r1, #16
 8002d84:	4620      	mov	r0, r4
 8002d86:	f7ff ff35 	bl	8002bf4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f7ff ff44 	bl	8002c18 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	9906      	ldr	r1, [sp, #24]
 8002d94:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8002d9c:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8002d9e:	428b      	cmp	r3, r1
 8002da0:	d12b      	bne.n	8002dfa <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8002da2:	2101      	movs	r1, #1
 8002da4:	4620      	mov	r0, r4
 8002da6:	f7ff ffab 	bl	8002d00 <USB_DriveVbus>
  HAL_Delay(200U);
 8002daa:	20c8      	movs	r0, #200	; 0xc8
 8002dac:	f7fd fc40 	bl	8000630 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295
 8002db8:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002dba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002dbc:	05db      	lsls	r3, r3, #23
 8002dbe:	d521      	bpl.n	8002e04 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8002dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc4:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8002dc6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002dca:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002dce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8002dd2:	9b08      	ldr	r3, [sp, #32]
 8002dd4:	b91b      	cbnz	r3, 8002dde <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002dd6:	69a3      	ldr	r3, [r4, #24]
 8002dd8:	f043 0310 	orr.w	r3, r3, #16
 8002ddc:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8002dde:	69a2      	ldr	r2, [r4, #24]
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <USB_HostInit+0xd8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61a3      	str	r3, [r4, #24]
}
 8002de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dea:	2000      	movs	r0, #0
 8002dec:	b004      	add	sp, #16
 8002dee:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002df0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	e7c1      	b.n	8002d7e <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002dfa:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8002dfc:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8002dfe:	60d5      	str	r5, [r2, #12]
 8002e00:	3220      	adds	r2, #32
 8002e02:	e7cc      	b.n	8002d9e <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8002e08:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8002e0c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002e0e:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <USB_HostInit+0xdc>)
 8002e10:	e7dd      	b.n	8002dce <USB_HostInit+0x8e>
 8002e12:	bf00      	nop
 8002e14:	00e00300 	.word	0x00e00300
 8002e18:	a3200008 	.word	0xa3200008
 8002e1c:	004000e0 	.word	0x004000e0

08002e20 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002e20:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002e26:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002e2a:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8002e2c:	9801      	ldr	r0, [sp, #4]
}
 8002e2e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8002e32:	b002      	add	sp, #8
 8002e34:	4770      	bx	lr

08002e36 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002e36:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002e3a:	6880      	ldr	r0, [r0, #8]
}
 8002e3c:	b280      	uxth	r0, r0
 8002e3e:	4770      	bx	lr

08002e40 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002e44:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8002e48:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8002e4c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8002e50:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002e52:	f04f 30ff 	mov.w	r0, #4294967295
 8002e56:	60a0      	str	r0, [r4, #8]
 8002e58:	fa4f f882 	sxtb.w	r8, r2
 8002e5c:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8002e60:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002e64:	2e03      	cmp	r6, #3
 8002e66:	d86c      	bhi.n	8002f42 <USB_HC_Init+0x102>
 8002e68:	e8df f006 	tbb	[pc, r6]
 8002e6c:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002e70:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8002e74:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002e78:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002e7a:	da03      	bge.n	8002e84 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002e7c:	68e1      	ldr	r1, [r4, #12]
 8002e7e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002e82:	e005      	b.n	8002e90 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8002e84:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8002e86:	05c9      	lsls	r1, r1, #23
 8002e88:	d542      	bpl.n	8002f10 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002e8a:	68e1      	ldr	r1, [r4, #12]
 8002e8c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8002e90:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e92:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002e94:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	fa01 f10e 	lsl.w	r1, r1, lr
 8002e9e:	4321      	orrs	r1, r4
 8002ea0:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002ea4:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8002ea6:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002eaa:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002eae:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002eb0:	bfb4      	ite	lt
 8002eb2:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 8002eb6:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002eb8:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 8002ebc:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002ec0:	059b      	lsls	r3, r3, #22
 8002ec2:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002ec6:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8002eca:	02d2      	lsls	r2, r2, #11
 8002ecc:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002ed0:	432b      	orrs	r3, r5
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	04b2      	lsls	r2, r6, #18
 8002ed6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 8002eda:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002edc:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 8002ee0:	bf0c      	ite	eq
 8002ee2:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 8002ee6:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002ee8:	4323      	orrs	r3, r4
 8002eea:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8002eec:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002eee:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8002ef2:	d128      	bne.n	8002f46 <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002ef4:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002ef8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002efc:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8002f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002f04:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8002f08:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002f0c:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002f0e:	dbb5      	blt.n	8002e7c <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002f10:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f10e 	lsl.w	r1, r1, lr
 8002f1a:	4301      	orrs	r1, r0
 8002f1c:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002f20:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f22:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002f24:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002f28:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	e7c4      	b.n	8002eb8 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002f2e:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8002f32:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002f36:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002f38:	daea      	bge.n	8002f10 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8002f3a:	68e1      	ldr	r1, [r4, #12]
 8002f3c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002f40:	e7a6      	b.n	8002e90 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8002f42:	2001      	movs	r0, #1
 8002f44:	e7a6      	b.n	8002e94 <USB_HC_Init+0x54>
}
 8002f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f4a <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002f4a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002f4e:	6940      	ldr	r0, [r0, #20]
}
 8002f50:	b280      	uxth	r0, r0
 8002f52:	4770      	bx	lr

08002f54 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002f54:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002f58:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8002f5c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002f60:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002f64:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002f68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f6c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002f70:	d11e      	bne.n	8002fb0 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002f72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002f74:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002f78:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002f7c:	d137      	bne.n	8002fee <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f82:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002f86:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f8e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002f92:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002f96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f9a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002f9e:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	d002      	beq.n	8002fac <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002fa6:	6811      	ldr	r1, [r2, #0]
 8002fa8:	2900      	cmp	r1, #0
 8002faa:	dbfa      	blt.n	8002fa2 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002fac:	2000      	movs	r0, #0
 8002fae:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002fb0:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8002fb4:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002fb8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002fbc:	d117      	bne.n	8002fee <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002fbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fc2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002fc6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fce:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002fd2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002fd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fda:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002fde:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	d0e2      	beq.n	8002fac <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002fe6:	6811      	ldr	r1, [r2, #0]
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	dbfa      	blt.n	8002fe2 <USB_HC_Halt+0x8e>
 8002fec:	e7de      	b.n	8002fac <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002fee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ff2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002ff6:	e7d9      	b.n	8002fac <USB_HC_Halt+0x58>

08002ff8 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002ff8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002ffc:	4a06      	ldr	r2, [pc, #24]	; (8003018 <USB_DoPing+0x20>)
 8002ffe:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8003002:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800300a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800300e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8003012:	2000      	movs	r0, #0
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	80080000 	.word	0x80080000

0800301c <USB_HC_StartXfer>:
{
 800301c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003020:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003022:	05db      	lsls	r3, r3, #23
{
 8003024:	4616      	mov	r6, r2
 8003026:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003028:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800302a:	d517      	bpl.n	800305c <USB_HC_StartXfer+0x40>
 800302c:	790d      	ldrb	r5, [r1, #4]
 800302e:	b9ad      	cbnz	r5, 800305c <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003030:	b94e      	cbnz	r6, 8003046 <USB_HC_StartXfer+0x2a>
 8003032:	794b      	ldrb	r3, [r1, #5]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d111      	bne.n	800305c <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8003038:	4611      	mov	r1, r2
 800303a:	f7ff ffdd 	bl	8002ff8 <USB_DoPing>
}
 800303e:	2000      	movs	r0, #0
 8003040:	b002      	add	sp, #8
 8003042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8003046:	2e01      	cmp	r6, #1
 8003048:	d108      	bne.n	800305c <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800304a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800304e:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8003052:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8003056:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 800305a:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 800305c:	6908      	ldr	r0, [r1, #16]
 800305e:	2800      	cmp	r0, #0
 8003060:	d066      	beq.n	8003130 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003062:	890b      	ldrh	r3, [r1, #8]
 8003064:	3801      	subs	r0, #1
 8003066:	4418      	add	r0, r3
 8003068:	fbb0 f0f3 	udiv	r0, r0, r3
 800306c:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 800306e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003072:	d903      	bls.n	800307c <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8003078:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 800307c:	78cf      	ldrb	r7, [r1, #3]
 800307e:	b117      	cbz	r7, 8003086 <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003080:	890b      	ldrh	r3, [r1, #8]
 8003082:	4343      	muls	r3, r0
 8003084:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003086:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800308a:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800308c:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003090:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003094:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003098:	ea4e 0e08 	orr.w	lr, lr, r8
 800309c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800317c <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80030a0:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80030a4:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 80030a8:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80030ac:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 80030b0:	b116      	cbz	r6, 80030b8 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80030b2:	68c8      	ldr	r0, [r1, #12]
 80030b4:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80030b8:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 80030bc:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80030c0:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 80030c4:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 80030c8:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80030cc:	43c0      	mvns	r0, r0
 80030ce:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 80030d2:	0740      	lsls	r0, r0, #29
 80030d4:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 80030d8:	ea40 000c 	orr.w	r0, r0, ip
 80030dc:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030e0:	4825      	ldr	r0, [pc, #148]	; (8003178 <USB_HC_StartXfer+0x15c>)
 80030e2:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 80030e6:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030ea:	f8d0 c000 	ldr.w	ip, [r0]
 80030ee:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 80030f2:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80030f6:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 80030fa:	b1df      	cbz	r7, 8003134 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80030fc:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003100:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003104:	f8d0 c000 	ldr.w	ip, [r0]
 8003108:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 800310c:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003110:	6800      	ldr	r0, [r0, #0]
 8003112:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8003116:	2e00      	cmp	r6, #0
 8003118:	d191      	bne.n	800303e <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800311a:	2f00      	cmp	r7, #0
 800311c:	d18f      	bne.n	800303e <USB_HC_StartXfer+0x22>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d08d      	beq.n	800303e <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8003122:	79c8      	ldrb	r0, [r1, #7]
 8003124:	2803      	cmp	r0, #3
 8003126:	d813      	bhi.n	8003150 <USB_HC_StartXfer+0x134>
 8003128:	e8df f000 	tbb	[pc, r0]
 800312c:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8003130:	2001      	movs	r0, #1
 8003132:	e7a3      	b.n	800307c <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003134:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8003138:	e7e2      	b.n	8003100 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800313a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800313c:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800313e:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8003142:	b280      	uxth	r0, r0
 8003144:	4285      	cmp	r5, r0
 8003146:	d903      	bls.n	8003150 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003148:	69a0      	ldr	r0, [r4, #24]
 800314a:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800314e:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003150:	2000      	movs	r0, #0
 8003152:	9000      	str	r0, [sp, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	68c9      	ldr	r1, [r1, #12]
 8003158:	4620      	mov	r0, r4
 800315a:	f7ff fd6d 	bl	8002c38 <USB_WritePacket>
 800315e:	e76e      	b.n	800303e <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003160:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003164:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003166:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800316a:	b280      	uxth	r0, r0
 800316c:	4285      	cmp	r5, r0
 800316e:	d9ef      	bls.n	8003150 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003170:	69a0      	ldr	r0, [r4, #24]
 8003172:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8003176:	e7ea      	b.n	800314e <USB_HC_StartXfer+0x132>
 8003178:	200000c4 	.word	0x200000c4
 800317c:	1ff80000 	.word	0x1ff80000

08003180 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003180:	6883      	ldr	r3, [r0, #8]
 8003182:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003186:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8003188:	2110      	movs	r1, #16
{
 800318a:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800318c:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800318e:	f7ff fd31 	bl	8002bf4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003192:	4620      	mov	r0, r4
 8003194:	f7ff fd40 	bl	8002c18 <USB_FlushRxFifo>
 8003198:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800319c:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 80031a0:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80031a2:	6811      	ldr	r1, [r2, #0]
 80031a4:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80031a8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80031ac:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 80031b0:	4290      	cmp	r0, r2
 80031b2:	d1f6      	bne.n	80031a2 <USB_StopHost+0x22>
 80031b4:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80031bc:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80031c0:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 80031c2:	3001      	adds	r0, #1
 80031c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80031c8:	d802      	bhi.n	80031d0 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	2900      	cmp	r1, #0
 80031ce:	dbf8      	blt.n	80031c2 <USB_StopHost+0x42>
 80031d0:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d1ef      	bne.n	80031b6 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80031de:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80031e0:	68a3      	ldr	r3, [r4, #8]
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80031e8:	2000      	movs	r0, #0
 80031ea:	bd10      	pop	{r4, pc}

080031ec <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 80031ec:	2000      	movs	r0, #0
 80031ee:	4770      	bx	lr

080031f0 <USBH_CDC_InterfaceDeInit>:
{
 80031f0:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80031f2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80031f6:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 80031f8:	7821      	ldrb	r1, [r4, #0]
{
 80031fa:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 80031fc:	b139      	cbz	r1, 800320e <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80031fe:	f000 fe17 	bl	8003e30 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8003202:	7821      	ldrb	r1, [r4, #0]
 8003204:	4628      	mov	r0, r5
 8003206:	f000 fe2f 	bl	8003e68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800320a:	2300      	movs	r3, #0
 800320c:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 800320e:	7b21      	ldrb	r1, [r4, #12]
 8003210:	b141      	cbz	r1, 8003224 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8003212:	4628      	mov	r0, r5
 8003214:	f000 fe0c 	bl	8003e30 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8003218:	7b21      	ldrb	r1, [r4, #12]
 800321a:	4628      	mov	r0, r5
 800321c:	f000 fe24 	bl	8003e68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8003220:	2300      	movs	r3, #0
 8003222:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8003224:	7b61      	ldrb	r1, [r4, #13]
 8003226:	b141      	cbz	r1, 800323a <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003228:	4628      	mov	r0, r5
 800322a:	f000 fe01 	bl	8003e30 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800322e:	7b61      	ldrb	r1, [r4, #13]
 8003230:	4628      	mov	r0, r5
 8003232:	f000 fe19 	bl	8003e68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8003236:	2300      	movs	r3, #0
 8003238:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 800323a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800323e:	69d8      	ldr	r0, [r3, #28]
 8003240:	b128      	cbz	r0, 800324e <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8003242:	f002 fd9d 	bl	8005d80 <free>
    phost->pActiveClass->pData = 0U;
 8003246:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]
}
 800324e:	2000      	movs	r0, #0
 8003250:	bd38      	pop	{r3, r4, r5, pc}

08003252 <USBH_CDC_InterfaceInit>:
{
 8003252:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8003254:	2202      	movs	r2, #2
{
 8003256:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8003258:	2301      	movs	r3, #1
 800325a:	4611      	mov	r1, r2
{
 800325c:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 800325e:	f000 f9b2 	bl	80035c6 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8003262:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8003264:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8003266:	d102      	bne.n	800326e <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8003268:	2002      	movs	r0, #2
}
 800326a:	b005      	add	sp, #20
 800326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 800326e:	4601      	mov	r1, r0
 8003270:	4628      	mov	r0, r5
 8003272:	f000 f99f 	bl	80035b4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003276:	2050      	movs	r0, #80	; 0x50
 8003278:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 800327c:	f002 fd78 	bl	8005d70 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003280:	231a      	movs	r3, #26
 8003282:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003286:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003288:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 800328c:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800328e:	bf42      	ittt	mi
 8003290:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003292:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8003296:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003298:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800329a:	7841      	ldrb	r1, [r0, #1]
 800329c:	4628      	mov	r0, r5
 800329e:	f000 fdcc 	bl	8003e3a <USBH_AllocPipe>
 80032a2:	4601      	mov	r1, r0
 80032a4:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 80032a6:	8960      	ldrh	r0, [r4, #10]
 80032a8:	9002      	str	r0, [sp, #8]
 80032aa:	2003      	movs	r0, #3
 80032ac:	9001      	str	r0, [sp, #4]
 80032ae:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80032b2:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80032b6:	7862      	ldrb	r2, [r4, #1]
 80032b8:	9000      	str	r0, [sp, #0]
 80032ba:	4628      	mov	r0, r5
 80032bc:	f000 fda9 	bl	8003e12 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80032c0:	2200      	movs	r2, #0
 80032c2:	7821      	ldrb	r1, [r4, #0]
 80032c4:	4628      	mov	r0, r5
 80032c6:	f002 fce4 	bl	8005c92 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 80032ca:	2300      	movs	r3, #0
 80032cc:	461a      	mov	r2, r3
 80032ce:	210a      	movs	r1, #10
 80032d0:	4628      	mov	r0, r5
 80032d2:	f000 f978 	bl	80035c6 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 80032d6:	28ff      	cmp	r0, #255	; 0xff
 80032d8:	d0c6      	beq.n	8003268 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80032da:	231a      	movs	r3, #26
 80032dc:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80032e0:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80032e4:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80032e8:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 80032ec:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80032f0:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80032f4:	bf0d      	iteet	eq
 80032f6:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80032f8:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80032fa:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80032fc:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80032fe:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003302:	bf08      	it	eq
 8003304:	73a3      	strbeq	r3, [r4, #14]
 8003306:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800330a:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800330c:	bf18      	it	ne
 800330e:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003310:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003312:	bf14      	ite	ne
 8003314:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003316:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003318:	f000 fd8f 	bl	8003e3a <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800331c:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800331e:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003320:	4628      	mov	r0, r5
 8003322:	f000 fd8a 	bl	8003e3a <USBH_AllocPipe>
 8003326:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8003328:	8b20      	ldrh	r0, [r4, #24]
 800332a:	9002      	str	r0, [sp, #8]
 800332c:	2602      	movs	r6, #2
 800332e:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003332:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003336:	7ba2      	ldrb	r2, [r4, #14]
 8003338:	7b61      	ldrb	r1, [r4, #13]
 800333a:	9601      	str	r6, [sp, #4]
 800333c:	9000      	str	r0, [sp, #0]
 800333e:	4628      	mov	r0, r5
 8003340:	f000 fd67 	bl	8003e12 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8003344:	8b60      	ldrh	r0, [r4, #26]
 8003346:	9002      	str	r0, [sp, #8]
 8003348:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800334c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003350:	7be2      	ldrb	r2, [r4, #15]
 8003352:	7b21      	ldrb	r1, [r4, #12]
 8003354:	9601      	str	r6, [sp, #4]
 8003356:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003358:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800335a:	4628      	mov	r0, r5
 800335c:	f000 fd59 	bl	8003e12 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003360:	4632      	mov	r2, r6
 8003362:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003364:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003368:	4628      	mov	r0, r5
 800336a:	f002 fc92 	bl	8005c92 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800336e:	4632      	mov	r2, r6
 8003370:	7b21      	ldrb	r1, [r4, #12]
 8003372:	4628      	mov	r0, r5
 8003374:	f002 fc8d 	bl	8005c92 <USBH_LL_SetToggle>
      status = USBH_OK;
 8003378:	4630      	mov	r0, r6
 800337a:	e776      	b.n	800326a <USBH_CDC_InterfaceInit+0x18>

0800337c <USBH_CDC_ClassRequest>:
{
 800337c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800337e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003382:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003384:	23a1      	movs	r3, #161	; 0xa1
 8003386:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003388:	2321      	movs	r3, #33	; 0x21
 800338a:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800338c:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003392:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003394:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003396:	3140      	adds	r1, #64	; 0x40
{
 8003398:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800339a:	f000 fac9 	bl	8003930 <USBH_CtlReq>
  if(status == USBH_OK)
 800339e:	4605      	mov	r5, r0
 80033a0:	b920      	cbnz	r0, 80033ac <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80033a2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80033a6:	2102      	movs	r1, #2
 80033a8:	4620      	mov	r0, r4
 80033aa:	4798      	blx	r3
}
 80033ac:	4628      	mov	r0, r5
 80033ae:	bd38      	pop	{r3, r4, r5, pc}

080033b0 <USBH_CDC_TransmitCallback>:
 80033b0:	4770      	bx	lr

080033b2 <USBH_CDC_ReceiveCallback>:
 80033b2:	4770      	bx	lr

080033b4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80033b4:	4770      	bx	lr

080033b6 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80033b6:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80033ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80033bc:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 80033be:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 80033c2:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d83d      	bhi.n	8003444 <USBH_CDC_Process+0x8e>
 80033c8:	e8df f003 	tbb	[pc, r3]
 80033cc:	42170603 	.word	0x42170603
 80033d0:	a6          	.byte	0xa6
 80033d1:	00          	.byte	0x00
    status = USBH_OK;
 80033d2:	2000      	movs	r0, #0
}
 80033d4:	b002      	add	sp, #8
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80033d8:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80033da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80033dc:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80033de:	2320      	movs	r3, #32
 80033e0:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80033e2:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80033e8:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80033ea:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80033ec:	f000 faa0 	bl	8003930 <USBH_CtlReq>
    if(req_status == USBH_OK)
 80033f0:	bb50      	cbnz	r0, 8003448 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80033f2:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 80033f4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80033f8:	e024      	b.n	8003444 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80033fa:	23a1      	movs	r3, #161	; 0xa1
 80033fc:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80033fe:	2321      	movs	r3, #33	; 0x21
 8003400:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003402:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003408:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800340a:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800340c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003410:	f000 fa8e 	bl	8003930 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003414:	b9c0      	cbnz	r0, 8003448 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003416:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003418:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 800341a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800341e:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8003428:	4291      	cmp	r1, r2
 800342a:	d10b      	bne.n	8003444 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800342c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003430:	795a      	ldrb	r2, [r3, #5]
 8003432:	4291      	cmp	r1, r2
 8003434:	d106      	bne.n	8003444 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8003436:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d102      	bne.n	8003444 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 800343e:	4628      	mov	r0, r5
 8003440:	f7ff ffb8 	bl	80033b4 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003444:	2001      	movs	r0, #1
 8003446:	e7c5      	b.n	80033d4 <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8003448:	2801      	cmp	r0, #1
 800344a:	d0fb      	beq.n	8003444 <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 800344c:	2304      	movs	r3, #4
 800344e:	e7d1      	b.n	80033f4 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8003450:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8003454:	2901      	cmp	r1, #1
 8003456:	d021      	beq.n	800349c <USBH_CDC_Process+0xe6>
 8003458:	2902      	cmp	r1, #2
 800345a:	d02e      	beq.n	80034ba <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800345c:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003460:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8003462:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8003466:	2b03      	cmp	r3, #3
 8003468:	d045      	beq.n	80034f6 <USBH_CDC_Process+0x140>
 800346a:	2b04      	cmp	r3, #4
 800346c:	d1ea      	bne.n	8003444 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800346e:	7b31      	ldrb	r1, [r6, #12]
 8003470:	4628      	mov	r0, r5
 8003472:	f002 fbfd 	bl	8005c70 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003476:	2801      	cmp	r0, #1
 8003478:	d1e4      	bne.n	8003444 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800347a:	7b31      	ldrb	r1, [r6, #12]
 800347c:	4628      	mov	r0, r5
 800347e:	f002 fbb3 	bl	8005be8 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8003482:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003484:	4298      	cmp	r0, r3
 8003486:	d040      	beq.n	800350a <USBH_CDC_Process+0x154>
 8003488:	8b72      	ldrh	r2, [r6, #26]
 800348a:	4290      	cmp	r0, r2
 800348c:	d93d      	bls.n	800350a <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 800348e:	1a1b      	subs	r3, r3, r0
 8003490:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8003492:	6a33      	ldr	r3, [r6, #32]
 8003494:	4418      	add	r0, r3
 8003496:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8003498:	2303      	movs	r3, #3
 800349a:	e033      	b.n	8003504 <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800349c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800349e:	8b22      	ldrh	r2, [r4, #24]
 80034a0:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 80034a2:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80034a4:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 80034a6:	bf98      	it	ls
 80034a8:	b282      	uxthls	r2, r0
 80034aa:	69e1      	ldr	r1, [r4, #28]
 80034ac:	4628      	mov	r0, r5
 80034ae:	f000 fc89 	bl	8003dc4 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80034b2:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80034b4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80034b8:	e7d0      	b.n	800345c <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80034ba:	7b61      	ldrb	r1, [r4, #13]
 80034bc:	f002 fbd8 	bl	8005c70 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 80034c0:	2801      	cmp	r0, #1
 80034c2:	d115      	bne.n	80034f0 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80034c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034c6:	8b22      	ldrh	r2, [r4, #24]
 80034c8:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80034ca:	bf83      	ittte	hi
 80034cc:	1a9b      	subhi	r3, r3, r2
 80034ce:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80034d0:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 80034d2:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80034d4:	bf8a      	itet	hi
 80034d6:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 80034d8:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80034da:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 80034dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034de:	b10b      	cbz	r3, 80034e4 <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e7e7      	b.n	80034b4 <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80034e4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80034e8:	4628      	mov	r0, r5
 80034ea:	f7ff ff61 	bl	80033b0 <USBH_CDC_TransmitCallback>
 80034ee:	e7b5      	b.n	800345c <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 80034f0:	2802      	cmp	r0, #2
 80034f2:	d1b3      	bne.n	800345c <USBH_CDC_Process+0xa6>
 80034f4:	e7f4      	b.n	80034e0 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 80034f6:	7b33      	ldrb	r3, [r6, #12]
 80034f8:	8b72      	ldrh	r2, [r6, #26]
 80034fa:	6a31      	ldr	r1, [r6, #32]
 80034fc:	4628      	mov	r0, r5
 80034fe:	f000 fc78 	bl	8003df2 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8003502:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8003504:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8003508:	e79c      	b.n	8003444 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800350a:	2300      	movs	r3, #0
 800350c:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8003510:	4628      	mov	r0, r5
 8003512:	f7ff ff4e 	bl	80033b2 <USBH_CDC_ReceiveCallback>
 8003516:	e795      	b.n	8003444 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8003518:	2100      	movs	r1, #0
 800351a:	f000 fc0d 	bl	8003d38 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 800351e:	2800      	cmp	r0, #0
 8003520:	d190      	bne.n	8003444 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8003522:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8003526:	e78d      	b.n	8003444 <USBH_CDC_Process+0x8e>

08003528 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003528:	f500 7360 	add.w	r3, r0, #896	; 0x380
 800352c:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8003530:	2100      	movs	r1, #0
 8003532:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8003536:	4293      	cmp	r3, r2
 8003538:	d1fb      	bne.n	8003532 <DeInitStateMachine+0xa>
 800353a:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800353e:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8003548:	4291      	cmp	r1, r2
 800354a:	d1fb      	bne.n	8003544 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800354c:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800354e:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8003550:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8003552:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8003554:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8003556:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 800355a:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800355c:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 800355e:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003560:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8003564:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8003568:	2000      	movs	r0, #0
 800356a:	4770      	bx	lr

0800356c <USBH_Init>:
{
 800356c:	b538      	push	{r3, r4, r5, lr}
 800356e:	460d      	mov	r5, r1
  if(phost == NULL)
 8003570:	4604      	mov	r4, r0
 8003572:	b180      	cbz	r0, 8003596 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8003574:	2300      	movs	r3, #0
  phost->id = id;
 8003576:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 800357a:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 800357e:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8003582:	f7ff ffd1 	bl	8003528 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8003586:	b10d      	cbz	r5, 800358c <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8003588:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 800358c:	4620      	mov	r0, r4
 800358e:	f002 facd 	bl	8005b2c <USBH_LL_Init>
  return USBH_OK;
 8003592:	2000      	movs	r0, #0
 8003594:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8003596:	2002      	movs	r0, #2
}
 8003598:	bd38      	pop	{r3, r4, r5, pc}

0800359a <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 800359a:	b149      	cbz	r1, 80035b0 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800359c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80035a0:	b933      	cbnz	r3, 80035b0 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80035a2:	2201      	movs	r2, #1
 80035a4:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 80035a8:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 80035ac:	4618      	mov	r0, r3
 80035ae:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80035b0:	2002      	movs	r0, #2
  }

  return status;
}
 80035b2:	4770      	bx	lr

080035b4 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80035b4:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 80035b8:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80035ba:	bf86      	itte	hi
 80035bc:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 80035c0:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80035c2:	2002      	movls	r0, #2
  }
  return status;
}
 80035c4:	4770      	bx	lr

080035c6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80035c6:	b570      	push	{r4, r5, r6, lr}
 80035c8:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80035ca:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 80035ce:	428e      	cmp	r6, r1
 80035d0:	b2e5      	uxtb	r5, r4
 80035d2:	d001      	beq.n	80035d8 <USBH_FindInterface+0x12>
 80035d4:	29ff      	cmp	r1, #255	; 0xff
 80035d6:	d10b      	bne.n	80035f0 <USBH_FindInterface+0x2a>
 80035d8:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 80035dc:	4296      	cmp	r6, r2
 80035de:	d001      	beq.n	80035e4 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80035e0:	2aff      	cmp	r2, #255	; 0xff
 80035e2:	d105      	bne.n	80035f0 <USBH_FindInterface+0x2a>
 80035e4:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 80035e8:	429e      	cmp	r6, r3
 80035ea:	d007      	beq.n	80035fc <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80035ec:	2bff      	cmp	r3, #255	; 0xff
 80035ee:	d005      	beq.n	80035fc <USBH_FindInterface+0x36>
 80035f0:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80035f2:	2c02      	cmp	r4, #2
 80035f4:	f100 001a 	add.w	r0, r0, #26
 80035f8:	d1e7      	bne.n	80035ca <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 80035fa:	25ff      	movs	r5, #255	; 0xff
}
 80035fc:	4628      	mov	r0, r5
 80035fe:	bd70      	pop	{r4, r5, r6, pc}

08003600 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003600:	b510      	push	{r4, lr}
 8003602:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003604:	f002 fab8 	bl	8005b78 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8003608:	2101      	movs	r1, #1
 800360a:	4620      	mov	r0, r4
 800360c:	f002 fb34 	bl	8005c78 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8003610:	2000      	movs	r0, #0
 8003612:	bd10      	pop	{r4, pc}

08003614 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003614:	b530      	push	{r4, r5, lr}
 8003616:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8003618:	2302      	movs	r3, #2
 800361a:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 800361e:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 8003622:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8003624:	b933      	cbnz	r3, 8003634 <USBH_Process+0x20>
 8003626:	7802      	ldrb	r2, [r0, #0]
 8003628:	b122      	cbz	r2, 8003634 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800362a:	7802      	ldrb	r2, [r0, #0]
 800362c:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 800362e:	bf1c      	itt	ne
 8003630:	2203      	movne	r2, #3
 8003632:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8003634:	7822      	ldrb	r2, [r4, #0]
 8003636:	2a0b      	cmp	r2, #11
 8003638:	d818      	bhi.n	800366c <USBH_Process+0x58>
 800363a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800363e:	000c      	.short	0x000c
 8003640:	001f001a 	.word	0x001f001a
 8003644:	00170121 	.word	0x00170121
 8003648:	0107004f 	.word	0x0107004f
 800364c:	00d000c6 	.word	0x00d000c6
 8003650:	00e700da 	.word	0x00e700da
 8003654:	0118      	.short	0x0118
    if (phost->device.is_connected)
 8003656:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800365a:	b13b      	cbz	r3, 800366c <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800365c:	2301      	movs	r3, #1
      USBH_Delay(200U);
 800365e:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003660:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 8003662:	f002 fb25 	bl	8005cb0 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8003666:	4620      	mov	r0, r4
 8003668:	f002 fab0 	bl	8005bcc <USBH_LL_ResetPort>
}
 800366c:	2000      	movs	r0, #0
 800366e:	b007      	add	sp, #28
 8003670:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 8003672:	2b01      	cmp	r3, #1
 8003674:	d1fa      	bne.n	800366c <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 8003676:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 8003678:	7023      	strb	r3, [r4, #0]
 800367a:	e7f7      	b.n	800366c <USBH_Process+0x58>
    USBH_Delay(100U);
 800367c:	2064      	movs	r0, #100	; 0x64
 800367e:	f002 fb17 	bl	8005cb0 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003682:	4620      	mov	r0, r4
 8003684:	f002 fa94 	bl	8005bb0 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8003688:	2305      	movs	r3, #5
 800368a:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800368c:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8003690:	2100      	movs	r1, #0
 8003692:	4620      	mov	r0, r4
 8003694:	f000 fbd1 	bl	8003e3a <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8003698:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800369a:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800369c:	4620      	mov	r0, r4
 800369e:	f000 fbcc 	bl	8003e3a <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80036a2:	79a2      	ldrb	r2, [r4, #6]
 80036a4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80036a8:	7120      	strb	r0, [r4, #4]
 80036aa:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80036ac:	9202      	str	r2, [sp, #8]
 80036ae:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 80036b0:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80036b4:	9200      	str	r2, [sp, #0]
 80036b6:	9501      	str	r5, [sp, #4]
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	4620      	mov	r0, r4
 80036bc:	f000 fba9 	bl	8003e12 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80036c0:	79a2      	ldrb	r2, [r4, #6]
 80036c2:	9202      	str	r2, [sp, #8]
 80036c4:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80036c8:	9200      	str	r2, [sp, #0]
 80036ca:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80036ce:	7961      	ldrb	r1, [r4, #5]
 80036d0:	9501      	str	r5, [sp, #4]
 80036d2:	462a      	mov	r2, r5
 80036d4:	4620      	mov	r0, r4
 80036d6:	f000 fb9c 	bl	8003e12 <USBH_OpenPipe>
 80036da:	e7c7      	b.n	800366c <USBH_Process+0x58>
  switch (phost->EnumState)
 80036dc:	7863      	ldrb	r3, [r4, #1]
 80036de:	2b07      	cmp	r3, #7
 80036e0:	d8c4      	bhi.n	800366c <USBH_Process+0x58>
 80036e2:	e8df f003 	tbb	[pc, r3]
 80036e6:	1504      	.short	0x1504
 80036e8:	4138301e 	.word	0x4138301e
 80036ec:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80036ee:	2108      	movs	r1, #8
 80036f0:	4620      	mov	r0, r4
 80036f2:	f000 f9fa 	bl	8003aea <USBH_Get_DevDesc>
 80036f6:	4605      	mov	r5, r0
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d1b7      	bne.n	800366c <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80036fc:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80036fe:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003702:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8003704:	7921      	ldrb	r1, [r4, #4]
 8003706:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800370a:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 800370c:	9202      	str	r2, [sp, #8]
 800370e:	e7cf      	b.n	80036b0 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8003710:	2112      	movs	r1, #18
 8003712:	4620      	mov	r0, r4
 8003714:	f000 f9e9 	bl	8003aea <USBH_Get_DevDesc>
 8003718:	2800      	cmp	r0, #0
 800371a:	d1a7      	bne.n	800366c <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 800371c:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800371e:	7063      	strb	r3, [r4, #1]
 8003720:	e7a4      	b.n	800366c <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8003722:	2101      	movs	r1, #1
 8003724:	4620      	mov	r0, r4
 8003726:	f000 fadd 	bl	8003ce4 <USBH_SetAddress>
 800372a:	4605      	mov	r5, r0
 800372c:	2800      	cmp	r0, #0
 800372e:	d19d      	bne.n	800366c <USBH_Process+0x58>
      USBH_Delay(2U);
 8003730:	2002      	movs	r0, #2
 8003732:	f002 fabd 	bl	8005cb0 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8003736:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003738:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 800373a:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 800373c:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8003740:	7921      	ldrb	r1, [r4, #4]
 8003742:	79a2      	ldrb	r2, [r4, #6]
 8003744:	e7e2      	b.n	800370c <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 8003746:	2109      	movs	r1, #9
 8003748:	4620      	mov	r0, r4
 800374a:	f000 fa16 	bl	8003b7a <USBH_Get_CfgDesc>
 800374e:	2800      	cmp	r0, #0
 8003750:	d18c      	bne.n	800366c <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003752:	2304      	movs	r3, #4
 8003754:	e7e3      	b.n	800371e <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 8003756:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 800375a:	4620      	mov	r0, r4
 800375c:	f000 fa0d 	bl	8003b7a <USBH_Get_CfgDesc>
 8003760:	2800      	cmp	r0, #0
 8003762:	d183      	bne.n	800366c <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003764:	2305      	movs	r3, #5
 8003766:	e7da      	b.n	800371e <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8003768:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 800376c:	b141      	cbz	r1, 8003780 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 800376e:	23ff      	movs	r3, #255	; 0xff
 8003770:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8003774:	4620      	mov	r0, r4
 8003776:	f000 fa8e 	bl	8003c96 <USBH_Get_StringDesc>
 800377a:	2800      	cmp	r0, #0
 800377c:	f47f af76 	bne.w	800366c <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003780:	2306      	movs	r3, #6
 8003782:	e7cc      	b.n	800371e <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 8003784:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8003788:	b141      	cbz	r1, 800379c <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 800378a:	23ff      	movs	r3, #255	; 0xff
 800378c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8003790:	4620      	mov	r0, r4
 8003792:	f000 fa80 	bl	8003c96 <USBH_Get_StringDesc>
 8003796:	2800      	cmp	r0, #0
 8003798:	f47f af68 	bne.w	800366c <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800379c:	2307      	movs	r3, #7
 800379e:	e7be      	b.n	800371e <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80037a0:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 80037a4:	b141      	cbz	r1, 80037b8 <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 80037a6:	23ff      	movs	r3, #255	; 0xff
 80037a8:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80037ac:	4620      	mov	r0, r4
 80037ae:	f000 fa72 	bl	8003c96 <USBH_Get_StringDesc>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	f47f af5a 	bne.w	800366c <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80037be:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d009      	beq.n	80037da <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 80037c6:	2307      	movs	r3, #7
 80037c8:	e756      	b.n	8003678 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 80037ca:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f43f af4c 	beq.w	800366c <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80037d4:	2101      	movs	r1, #1
 80037d6:	4620      	mov	r0, r4
 80037d8:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 80037da:	2308      	movs	r3, #8
 80037dc:	e74c      	b.n	8003678 <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80037de:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80037e2:	4620      	mov	r0, r4
 80037e4:	f000 fa8c 	bl	8003d00 <USBH_SetCfg>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	f47f af3f 	bne.w	800366c <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80037ee:	2309      	movs	r3, #9
 80037f0:	e742      	b.n	8003678 <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80037f2:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80037f6:	069b      	lsls	r3, r3, #26
 80037f8:	d506      	bpl.n	8003808 <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80037fa:	2101      	movs	r1, #1
 80037fc:	4620      	mov	r0, r4
 80037fe:	f000 fa8d 	bl	8003d1c <USBH_SetFeature>
 8003802:	2800      	cmp	r0, #0
 8003804:	f47f af32 	bne.w	800366c <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 8003808:	230a      	movs	r3, #10
 800380a:	e735      	b.n	8003678 <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 800380c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8003810:	2b00      	cmp	r3, #0
 8003812:	f43f af2b 	beq.w	800366c <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800381c:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003820:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 8003824:	7919      	ldrb	r1, [r3, #4]
 8003826:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8003828:	bf08      	it	eq
 800382a:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 800382e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003832:	b1d3      	cbz	r3, 800386a <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4620      	mov	r0, r4
 8003838:	4798      	blx	r3
 800383a:	b9b0      	cbnz	r0, 800386a <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 800383c:	2306      	movs	r3, #6
 800383e:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8003840:	2103      	movs	r1, #3
 8003842:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003846:	4620      	mov	r0, r4
 8003848:	4798      	blx	r3
 800384a:	e70f      	b.n	800366c <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 800384c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003850:	b15b      	cbz	r3, 800386a <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	4620      	mov	r0, r4
 8003856:	4798      	blx	r3
 8003858:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800385c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f af03 	bne.w	800366c <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 8003866:	230b      	movs	r3, #11
 8003868:	e706      	b.n	8003678 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 800386a:	230d      	movs	r3, #13
 800386c:	e704      	b.n	8003678 <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 800386e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003872:	2b00      	cmp	r3, #0
 8003874:	f43f aefa 	beq.w	800366c <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	4620      	mov	r0, r4
 800387c:	4798      	blx	r3
 800387e:	e6f5      	b.n	800366c <USBH_Process+0x58>
    DeInitStateMachine(phost);
 8003880:	4620      	mov	r0, r4
 8003882:	f7ff fe51 	bl	8003528 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8003886:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800388a:	2b00      	cmp	r3, #0
 800388c:	f43f aeee 	beq.w	800366c <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4620      	mov	r0, r4
 8003894:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 800389c:	e6e6      	b.n	800366c <USBH_Process+0x58>

0800389e <USBH_LL_SetTimer>:
  phost->Timer = time;
 800389e:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80038a2:	4770      	bx	lr

080038a4 <USBH_LL_IncTimer>:
  phost->Timer ++;
 80038a4:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 80038a8:	3201      	adds	r2, #1
 80038aa:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80038ae:	7802      	ldrb	r2, [r0, #0]
 80038b0:	2a0b      	cmp	r2, #11
 80038b2:	d104      	bne.n	80038be <USBH_LL_IncTimer+0x1a>
 80038b4:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80038b8:	b10b      	cbz	r3, 80038be <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	4718      	bx	r3
 80038be:	4770      	bx	lr

080038c0 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80038c6:	4770      	bx	lr

080038c8 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80038ce:	4770      	bx	lr

080038d0 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 80038d0:	7802      	ldrb	r2, [r0, #0]
{
 80038d2:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80038d4:	b94a      	cbnz	r2, 80038ea <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 80038d6:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 80038da:	2201      	movs	r2, #1
 80038dc:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80038e0:	b10b      	cbz	r3, 80038e6 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80038e2:	2104      	movs	r1, #4
 80038e4:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80038e6:	2000      	movs	r0, #0
 80038e8:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 80038ea:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 80038ee:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 80038f0:	bf04      	itt	eq
 80038f2:	2202      	moveq	r2, #2
 80038f4:	7002      	strbeq	r2, [r0, #0]
 80038f6:	e7f6      	b.n	80038e6 <USBH_LL_Connect+0x16>

080038f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 80038fc:	f002 f94a 	bl	8005b94 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8003900:	7921      	ldrb	r1, [r4, #4]
 8003902:	4620      	mov	r0, r4
 8003904:	f000 fab0 	bl	8003e68 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8003908:	7961      	ldrb	r1, [r4, #5]
 800390a:	4620      	mov	r0, r4
 800390c:	f000 faac 	bl	8003e68 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 8003916:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800391a:	b113      	cbz	r3, 8003922 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800391c:	2105      	movs	r1, #5
 800391e:	4620      	mov	r0, r4
 8003920:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003922:	4620      	mov	r0, r4
 8003924:	f002 f928 	bl	8005b78 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8003928:	2303      	movs	r3, #3
 800392a:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800392c:	2000      	movs	r0, #0
 800392e:	bd10      	pop	{r4, pc}

08003930 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8003930:	b513      	push	{r0, r1, r4, lr}
 8003932:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8003934:	7880      	ldrb	r0, [r0, #2]
 8003936:	2801      	cmp	r0, #1
 8003938:	d003      	beq.n	8003942 <USBH_CtlReq+0x12>
 800393a:	2802      	cmp	r0, #2
 800393c:	d008      	beq.n	8003950 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 800393e:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8003940:	e004      	b.n	800394c <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8003942:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8003944:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8003946:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8003948:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 800394a:	70a3      	strb	r3, [r4, #2]
}
 800394c:	b002      	add	sp, #8
 800394e:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8003950:	7e23      	ldrb	r3, [r4, #24]
 8003952:	3b01      	subs	r3, #1
 8003954:	2101      	movs	r1, #1
 8003956:	2b0a      	cmp	r3, #10
 8003958:	d8f1      	bhi.n	800393e <USBH_CtlReq+0xe>
 800395a:	e8df f003 	tbb	[pc, r3]
 800395e:	0f06      	.short	0x0f06
 8003960:	4c40362b 	.word	0x4c40362b
 8003964:	8c806f64 	.word	0x8c806f64
 8003968:	95          	.byte	0x95
 8003969:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800396a:	7962      	ldrb	r2, [r4, #5]
 800396c:	f104 0110 	add.w	r1, r4, #16
 8003970:	4620      	mov	r0, r4
 8003972:	f000 f9ef 	bl	8003d54 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8003976:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8003978:	7623      	strb	r3, [r4, #24]
 800397a:	e7e0      	b.n	800393e <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800397c:	7961      	ldrb	r1, [r4, #5]
 800397e:	4620      	mov	r0, r4
 8003980:	f002 f976 	bl	8005c70 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003984:	2801      	cmp	r0, #1
 8003986:	d10f      	bne.n	80039a8 <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 8003988:	8ae2      	ldrh	r2, [r4, #22]
 800398a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800398e:	b12a      	cbz	r2, 800399c <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8003990:	2b00      	cmp	r3, #0
 8003992:	da01      	bge.n	8003998 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8003994:	2303      	movs	r3, #3
 8003996:	e7ef      	b.n	8003978 <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8003998:	2305      	movs	r3, #5
 800399a:	e7ed      	b.n	8003978 <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800399c:	2b00      	cmp	r3, #0
 800399e:	da01      	bge.n	80039a4 <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80039a0:	2309      	movs	r3, #9
 80039a2:	e7e9      	b.n	8003978 <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 80039a4:	2307      	movs	r3, #7
 80039a6:	e7e7      	b.n	8003978 <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80039a8:	2804      	cmp	r0, #4
 80039aa:	d001      	beq.n	80039b0 <USBH_CtlReq+0x80>
 80039ac:	2802      	cmp	r0, #2
 80039ae:	d1c6      	bne.n	800393e <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80039b0:	230b      	movs	r3, #11
 80039b2:	e7e1      	b.n	8003978 <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 80039b4:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80039b8:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 80039ba:	89a2      	ldrh	r2, [r4, #12]
 80039bc:	7923      	ldrb	r3, [r4, #4]
 80039be:	68a1      	ldr	r1, [r4, #8]
 80039c0:	4620      	mov	r0, r4
 80039c2:	f000 f9ef 	bl	8003da4 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80039c6:	2304      	movs	r3, #4
 80039c8:	e7d6      	b.n	8003978 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80039ca:	7921      	ldrb	r1, [r4, #4]
 80039cc:	4620      	mov	r0, r4
 80039ce:	f002 f94f 	bl	8005c70 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80039d2:	2801      	cmp	r0, #1
 80039d4:	d0e4      	beq.n	80039a0 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80039d6:	2805      	cmp	r0, #5
 80039d8:	d015      	beq.n	8003a06 <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80039da:	2804      	cmp	r0, #4
 80039dc:	e7e7      	b.n	80039ae <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 80039de:	7963      	ldrb	r3, [r4, #5]
 80039e0:	9100      	str	r1, [sp, #0]
 80039e2:	89a2      	ldrh	r2, [r4, #12]
 80039e4:	68a1      	ldr	r1, [r4, #8]
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 f9c5 	bl	8003d76 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80039ec:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80039f0:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80039f2:	2306      	movs	r3, #6
 80039f4:	e7c0      	b.n	8003978 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80039f6:	7961      	ldrb	r1, [r4, #5]
 80039f8:	4620      	mov	r0, r4
 80039fa:	f002 f939 	bl	8005c70 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80039fe:	2801      	cmp	r0, #1
 8003a00:	d0d0      	beq.n	80039a4 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 8003a02:	2805      	cmp	r0, #5
 8003a04:	d105      	bne.n	8003a12 <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 8003a06:	2301      	movs	r3, #1
 8003a08:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8003a0e:	2003      	movs	r0, #3
 8003a10:	e79c      	b.n	800394c <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003a12:	2802      	cmp	r0, #2
 8003a14:	d0c0      	beq.n	8003998 <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 8003a16:	2804      	cmp	r0, #4
 8003a18:	d191      	bne.n	800393e <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8003a1a:	230b      	movs	r3, #11
 8003a1c:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8003a22:	2002      	movs	r0, #2
 8003a24:	e792      	b.n	800394c <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 8003a26:	2200      	movs	r2, #0
 8003a28:	7923      	ldrb	r3, [r4, #4]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f000 f9b9 	bl	8003da4 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8003a32:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003a36:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8003a38:	2308      	movs	r3, #8
 8003a3a:	e79d      	b.n	8003978 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8003a3c:	7921      	ldrb	r1, [r4, #4]
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f002 f916 	bl	8005c70 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8003a44:	2801      	cmp	r0, #1
 8003a46:	d104      	bne.n	8003a52 <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 8003a48:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 8003a4a:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8003a4c:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8003a4e:	7620      	strb	r0, [r4, #24]
 8003a50:	e77c      	b.n	800394c <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8003a52:	2804      	cmp	r0, #4
 8003a54:	d0ac      	beq.n	80039b0 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 8003a56:	2805      	cmp	r0, #5
 8003a58:	f47f af71 	bne.w	800393e <USBH_CtlReq+0xe>
 8003a5c:	e7d3      	b.n	8003a06 <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 8003a5e:	2200      	movs	r2, #0
 8003a60:	7963      	ldrb	r3, [r4, #5]
 8003a62:	9100      	str	r1, [sp, #0]
 8003a64:	4620      	mov	r0, r4
 8003a66:	4611      	mov	r1, r2
 8003a68:	f000 f985 	bl	8003d76 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8003a6c:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003a70:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8003a72:	230a      	movs	r3, #10
 8003a74:	e780      	b.n	8003978 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8003a76:	7961      	ldrb	r1, [r4, #5]
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f002 f8f9 	bl	8005c70 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003a7e:	2801      	cmp	r0, #1
 8003a80:	d0e2      	beq.n	8003a48 <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003a82:	2802      	cmp	r0, #2
 8003a84:	d1a9      	bne.n	80039da <USBH_CtlReq+0xaa>
 8003a86:	e78b      	b.n	80039a0 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8003a88:	7e63      	ldrb	r3, [r4, #25]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	7663      	strb	r3, [r4, #25]
 8003a92:	d806      	bhi.n	8003aa2 <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8003a94:	4620      	mov	r0, r4
 8003a96:	f002 f87d 	bl	8005b94 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8003a9e:	70a3      	strb	r3, [r4, #2]
 8003aa0:	e74d      	b.n	800393e <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8003aa2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003aa6:	2106      	movs	r1, #6
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	7663      	strb	r3, [r4, #25]
 8003ab0:	e7b5      	b.n	8003a1e <USBH_CtlReq+0xee>

08003ab2 <USBH_GetDescriptor>:
{
 8003ab2:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8003ab4:	7884      	ldrb	r4, [r0, #2]
{
 8003ab6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8003aba:	2c01      	cmp	r4, #1
 8003abc:	d110      	bne.n	8003ae0 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8003abe:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8003ac2:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8003ac4:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8003ac8:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8003acc:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003ace:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8003ad2:	bf0c      	ite	eq
 8003ad4:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8003ad8:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003ada:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8003adc:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8003ade:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8003ae0:	462a      	mov	r2, r5
 8003ae2:	4619      	mov	r1, r3
}
 8003ae4:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8003ae6:	f7ff bf23 	b.w	8003930 <USBH_CtlReq>

08003aea <USBH_Get_DevDesc>:
{
 8003aea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8003aec:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003af0:	460d      	mov	r5, r1
 8003af2:	9100      	str	r1, [sp, #0]
 8003af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003af8:	2100      	movs	r1, #0
{
 8003afa:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003afc:	f7ff ffd9 	bl	8003ab2 <USBH_GetDescriptor>
 8003b00:	bbc8      	cbnz	r0, 8003b76 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8003b02:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8003b06:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8003b0a:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8003b0e:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8003b12:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8003b16:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8003b1a:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8003b1e:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8003b22:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8003b26:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8003b2a:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8003b2e:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 8003b32:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8003b34:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8003b38:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8003b3c:	d91b      	bls.n	8003b76 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8003b3e:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8003b42:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8003b46:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8003b4a:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003b4e:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8003b52:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8003b56:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8003b5a:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8003b5e:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8003b62:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8003b66:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003b6a:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8003b6e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8003b72:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8003b76:	b003      	add	sp, #12
 8003b78:	bd30      	pop	{r4, r5, pc}

08003b7a <USBH_Get_CfgDesc>:
{
 8003b7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8003b7e:	f100 051c 	add.w	r5, r0, #28
{
 8003b82:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8003b84:	9100      	str	r1, [sp, #0]
 8003b86:	462b      	mov	r3, r5
 8003b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b8c:	2100      	movs	r1, #0
{
 8003b8e:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003b90:	f7ff ff8f 	bl	8003ab2 <USBH_GetDescriptor>
 8003b94:	bb48      	cbnz	r0, 8003bea <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8003b96:	7f23      	ldrb	r3, [r4, #28]
 8003b98:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8003b9c:	7f63      	ldrb	r3, [r4, #29]
 8003b9e:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8003ba2:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003ba6:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8003baa:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003bae:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8003bb2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003bb6:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8003bba:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003bbe:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8003bc2:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8003bc6:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8003bc8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003bcc:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8003bd0:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8003bd4:	d909      	bls.n	8003bea <USBH_Get_CfgDesc+0x70>
 8003bd6:	4627      	mov	r7, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	4606      	mov	r6, r0
 8003bdc:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003bde:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8003be2:	2e02      	cmp	r6, #2
 8003be4:	d001      	beq.n	8003bea <USBH_Get_CfgDesc+0x70>
 8003be6:	4596      	cmp	lr, r2
 8003be8:	d802      	bhi.n	8003bf0 <USBH_Get_CfgDesc+0x76>
}
 8003bea:	b003      	add	sp, #12
 8003bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003bf0:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003bf2:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003bf4:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8003bf6:	7859      	ldrb	r1, [r3, #1]
 8003bf8:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003bfa:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8003bfc:	d1f1      	bne.n	8003be2 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8003bfe:	7819      	ldrb	r1, [r3, #0]
 8003c00:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8003c04:	7859      	ldrb	r1, [r3, #1]
 8003c06:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8003c0a:	7899      	ldrb	r1, [r3, #2]
 8003c0c:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8003c10:	78d9      	ldrb	r1, [r3, #3]
 8003c12:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8003c16:	7919      	ldrb	r1, [r3, #4]
 8003c18:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8003c1c:	7959      	ldrb	r1, [r3, #5]
 8003c1e:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8003c22:	7999      	ldrb	r1, [r3, #6]
 8003c24:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8003c28:	79d9      	ldrb	r1, [r3, #7]
 8003c2a:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8003c2e:	7a19      	ldrb	r1, [r3, #8]
 8003c30:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003c34:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 8003c38:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8003c3a:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8003c3e:	428d      	cmp	r5, r1
 8003c40:	d802      	bhi.n	8003c48 <USBH_Get_CfgDesc+0xce>
 8003c42:	3601      	adds	r6, #1
 8003c44:	371a      	adds	r7, #26
 8003c46:	e7cc      	b.n	8003be2 <USBH_Get_CfgDesc+0x68>
 8003c48:	4596      	cmp	lr, r2
 8003c4a:	d9fa      	bls.n	8003c42 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003c4c:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003c4e:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003c50:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003c52:	785d      	ldrb	r5, [r3, #1]
 8003c54:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003c56:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003c58:	d1ef      	bne.n	8003c3a <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003c5a:	1c4d      	adds	r5, r1, #1
 8003c5c:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8003c60:	4421      	add	r1, r4
 8003c62:	f893 9000 	ldrb.w	r9, [r3]
 8003c66:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8003c6a:	f893 9001 	ldrb.w	r9, [r3, #1]
 8003c6e:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8003c72:	f893 9002 	ldrb.w	r9, [r3, #2]
 8003c76:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8003c7a:	f893 9003 	ldrb.w	r9, [r3, #3]
 8003c7e:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8003c82:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8003c86:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8003c8a:	f893 9006 	ldrb.w	r9, [r3, #6]
 8003c8e:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8003c92:	b2e9      	uxtb	r1, r5
 8003c94:	e7d1      	b.n	8003c3a <USBH_Get_CfgDesc+0xc0>

08003c96 <USBH_Get_StringDesc>:
{
 8003c96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8003c98:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	2100      	movs	r1, #0
{
 8003caa:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8003cac:	f7ff ff01 	bl	8003ab2 <USBH_GetDescriptor>
 8003cb0:	b978      	cbnz	r0, 8003cd2 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8003cb2:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d10b      	bne.n	8003cd2 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8003cba:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8003cbe:	3b02      	subs	r3, #2
 8003cc0:	42bb      	cmp	r3, r7
 8003cc2:	bf28      	it	cs
 8003cc4:	463b      	movcs	r3, r7
 8003cc6:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d803      	bhi.n	8003cd6 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8003cce:	2300      	movs	r3, #0
 8003cd0:	7023      	strb	r3, [r4, #0]
}
 8003cd2:	b003      	add	sp, #12
 8003cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8003cd6:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8003cd8:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8003cda:	7889      	ldrb	r1, [r1, #2]
 8003cdc:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	e7f2      	b.n	8003cca <USBH_Get_StringDesc+0x34>

08003ce4 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8003ce4:	7883      	ldrb	r3, [r0, #2]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d106      	bne.n	8003cf8 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003cea:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003cec:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003cee:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003cf0:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8003cf2:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003cf4:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003cf6:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	f7ff be18 	b.w	8003930 <USBH_CtlReq>

08003d00 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8003d00:	7883      	ldrb	r3, [r0, #2]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d106      	bne.n	8003d14 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003d06:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003d08:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003d0a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003d0c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8003d0e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003d10:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003d12:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003d14:	2200      	movs	r2, #0
 8003d16:	4611      	mov	r1, r2
 8003d18:	f7ff be0a 	b.w	8003930 <USBH_CtlReq>

08003d1c <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8003d1c:	7883      	ldrb	r3, [r0, #2]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d106      	bne.n	8003d30 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003d22:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003d24:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003d26:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003d28:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8003d2a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003d2c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003d2e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003d30:	2200      	movs	r2, #0
 8003d32:	4611      	mov	r1, r2
 8003d34:	f7ff bdfc 	b.w	8003930 <USBH_CtlReq>

08003d38 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8003d38:	7883      	ldrb	r3, [r0, #2]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d106      	bne.n	8003d4c <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003d3e:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8003d40:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003d42:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003d44:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003d46:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8003d48:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003d4a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	4611      	mov	r1, r2
 8003d50:	f7ff bdee 	b.w	8003930 <USBH_CtlReq>

08003d54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8003d54:	b530      	push	{r4, r5, lr}
 8003d56:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003d58:	2400      	movs	r4, #0
{
 8003d5a:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	9302      	str	r3, [sp, #8]
 8003d60:	9101      	str	r1, [sp, #4]
 8003d62:	9403      	str	r4, [sp, #12]
 8003d64:	9400      	str	r4, [sp, #0]
 8003d66:	4623      	mov	r3, r4
 8003d68:	4622      	mov	r2, r4
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	f001 ff66 	bl	8005c3c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8003d70:	4620      	mov	r0, r4
 8003d72:	b005      	add	sp, #20
 8003d74:	bd30      	pop	{r4, r5, pc}

08003d76 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8003d76:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003d78:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003d7c:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003d7e:	2d00      	cmp	r5, #0
{
 8003d80:	461c      	mov	r4, r3
 8003d82:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003d86:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8003d88:	bf18      	it	ne
 8003d8a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003d8c:	9303      	str	r3, [sp, #12]
 8003d8e:	2301      	movs	r3, #1
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9101      	str	r1, [sp, #4]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4621      	mov	r1, r4
 8003d9a:	f001 ff4f 	bl	8005c3c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8003d9e:	2000      	movs	r0, #0
 8003da0:	b005      	add	sp, #20
 8003da2:	bd30      	pop	{r4, r5, pc}

08003da4 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003da4:	b530      	push	{r4, r5, lr}
 8003da6:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003da8:	2400      	movs	r4, #0
{
 8003daa:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003dac:	9202      	str	r2, [sp, #8]
 8003dae:	2201      	movs	r2, #1
 8003db0:	9101      	str	r1, [sp, #4]
 8003db2:	9403      	str	r4, [sp, #12]
 8003db4:	9200      	str	r2, [sp, #0]
 8003db6:	4623      	mov	r3, r4
 8003db8:	4629      	mov	r1, r5
 8003dba:	f001 ff3f 	bl	8005c3c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	b005      	add	sp, #20
 8003dc2:	bd30      	pop	{r4, r5, pc}

08003dc4 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8003dc4:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003dc6:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003dca:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003dcc:	2d00      	cmp	r5, #0
{
 8003dce:	461c      	mov	r4, r3
 8003dd0:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003dd4:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8003dd6:	bf18      	it	ne
 8003dd8:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003dda:	9303      	str	r3, [sp, #12]
 8003ddc:	2301      	movs	r3, #1
 8003dde:	9101      	str	r1, [sp, #4]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	2302      	movs	r3, #2
 8003de6:	4621      	mov	r1, r4
 8003de8:	f001 ff28 	bl	8005c3c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8003dec:	2000      	movs	r0, #0
 8003dee:	b005      	add	sp, #20
 8003df0:	bd30      	pop	{r4, r5, pc}

08003df2 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003df2:	b530      	push	{r4, r5, lr}
 8003df4:	b085      	sub	sp, #20
 8003df6:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003df8:	2400      	movs	r4, #0
 8003dfa:	9202      	str	r2, [sp, #8]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	9101      	str	r1, [sp, #4]
 8003e00:	9403      	str	r4, [sp, #12]
 8003e02:	9200      	str	r2, [sp, #0]
 8003e04:	2302      	movs	r3, #2
 8003e06:	4629      	mov	r1, r5
 8003e08:	f001 ff18 	bl	8005c3c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	b005      	add	sp, #20
 8003e10:	bd30      	pop	{r4, r5, pc}

08003e12 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8003e12:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8003e14:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003e18:	9402      	str	r4, [sp, #8]
 8003e1a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003e1e:	9401      	str	r4, [sp, #4]
 8003e20:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003e24:	9400      	str	r4, [sp, #0]
 8003e26:	f001 fee3 	bl	8005bf0 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	b004      	add	sp, #16
 8003e2e:	bd10      	pop	{r4, pc}

08003e30 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8003e30:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8003e32:	f001 fef5 	bl	8005c20 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8003e36:	2000      	movs	r0, #0
 8003e38:	bd08      	pop	{r3, pc}

08003e3a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8003e3a:	b530      	push	{r4, r5, lr}
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8003e42:	f854 5b04 	ldr.w	r5, [r4], #4
 8003e46:	042d      	lsls	r5, r5, #16
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	d407      	bmi.n	8003e5c <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8003e4c:	33e0      	adds	r3, #224	; 0xe0
 8003e4e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003e52:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8003e56:	b292      	uxth	r2, r2
}
 8003e58:	b2d0      	uxtb	r0, r2
 8003e5a:	bd30      	pop	{r4, r5, pc}
 8003e5c:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8003e5e:	2b0b      	cmp	r3, #11
 8003e60:	d1ef      	bne.n	8003e42 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8003e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e66:	e7f7      	b.n	8003e58 <USBH_AllocPipe+0x1e>

08003e68 <USBH_FreePipe>:
   if(idx < 11U)
 8003e68:	290a      	cmp	r1, #10
 8003e6a:	bf9f      	itttt	ls
 8003e6c:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8003e70:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8003e74:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8003e78:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	4770      	bx	lr

08003e80 <ILI9341_Select>:
extern uint8_t spi4_dma_completed;
HAL_StatusTypeDef errr;
uint16_t test = 0;

static void ILI9341_Select() {
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8003e80:	2200      	movs	r2, #0
 8003e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e86:	4801      	ldr	r0, [pc, #4]	; (8003e8c <ILI9341_Select+0xc>)
 8003e88:	f7fc bffc 	b.w	8000e84 <HAL_GPIO_WritePin>
 8003e8c:	40020c00 	.word	0x40020c00

08003e90 <ILI9341_WriteCommand>:
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
}

static void ILI9341_WriteCommand(uint8_t cmd) {
 8003e90:	b513      	push	{r0, r1, r4, lr}
 8003e92:	ac02      	add	r4, sp, #8
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8003e94:	2200      	movs	r2, #0
static void ILI9341_WriteCommand(uint8_t cmd) {
 8003e96:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8003e9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e9e:	4805      	ldr	r0, [pc, #20]	; (8003eb4 <ILI9341_WriteCommand+0x24>)
 8003ea0:	f7fc fff0 	bl	8000e84 <HAL_GPIO_WritePin>
//    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
//	while (!spi4_dma_completed)
//	spi4_dma_completed = 0;
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), 10);
 8003ea4:	230a      	movs	r3, #10
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	4803      	ldr	r0, [pc, #12]	; (8003eb8 <ILI9341_WriteCommand+0x28>)
 8003eac:	f7fe fae9 	bl	8002482 <HAL_SPI_Transmit>
}
 8003eb0:	b002      	add	sp, #8
 8003eb2:	bd10      	pop	{r4, pc}
 8003eb4:	40020c00 	.word	0x40020c00
 8003eb8:	200001c8 	.word	0x200001c8

08003ebc <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8003ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8003ec0:	2201      	movs	r2, #1
static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	460c      	mov	r4, r1
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8003ec6:	4811      	ldr	r0, [pc, #68]	; (8003f0c <ILI9341_WriteData+0x50>)

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;

		spi4_dma_completed = 0;
 8003ec8:	4f11      	ldr	r7, [pc, #68]	; (8003f10 <ILI9341_WriteData+0x54>)
		errr = HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, chunk_size);
 8003eca:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8003f14 <ILI9341_WriteData+0x58>
 8003ece:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003f18 <ILI9341_WriteData+0x5c>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8003ed2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ed6:	f7fc ffd5 	bl	8000e84 <HAL_GPIO_WritePin>
    while(buff_size > 0) {
 8003eda:	b90c      	cbnz	r4, 8003ee0 <ILI9341_WriteData+0x24>
		while (get_spi4_dma_completed() == 0);

        buff += chunk_size;
        buff_size -= chunk_size;
    }
}
 8003edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8003ee0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8003ee4:	4626      	mov	r6, r4
 8003ee6:	bf28      	it	cs
 8003ee8:	f44f 4600 	movcs.w	r6, #32768	; 0x8000
		spi4_dma_completed = 0;
 8003eec:	2300      	movs	r3, #0
		errr = HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, chunk_size);
 8003eee:	b2b2      	uxth	r2, r6
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4640      	mov	r0, r8
		spi4_dma_completed = 0;
 8003ef4:	703b      	strb	r3, [r7, #0]
		errr = HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, chunk_size);
 8003ef6:	f7fe fb6d 	bl	80025d4 <HAL_SPI_Transmit_DMA>
 8003efa:	f889 0000 	strb.w	r0, [r9]
		while (get_spi4_dma_completed() == 0);
 8003efe:	f001 fd37 	bl	8005970 <get_spi4_dma_completed>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d0fb      	beq.n	8003efe <ILI9341_WriteData+0x42>
        buff += chunk_size;
 8003f06:	4435      	add	r5, r6
        buff_size -= chunk_size;
 8003f08:	1ba4      	subs	r4, r4, r6
 8003f0a:	e7e6      	b.n	8003eda <ILI9341_WriteData+0x1e>
 8003f0c:	40020c00 	.word	0x40020c00
 8003f10:	200000da 	.word	0x200000da
 8003f14:	200001c8 	.word	0x200001c8
 8003f18:	20000110 	.word	0x20000110

08003f1c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8003f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1e:	4607      	mov	r7, r0
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8003f20:	202a      	movs	r0, #42	; 0x2a
static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8003f22:	4616      	mov	r6, r2
 8003f24:	460d      	mov	r5, r1
 8003f26:	461c      	mov	r4, r3
    ILI9341_WriteCommand(0x2A); // CASET
 8003f28:	f7ff ffb2 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
        ILI9341_WriteData(data, sizeof(data));
 8003f2c:	2104      	movs	r1, #4
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8003f2e:	0a3b      	lsrs	r3, r7, #8
        ILI9341_WriteData(data, sizeof(data));
 8003f30:	eb0d 0001 	add.w	r0, sp, r1
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8003f34:	f88d 3004 	strb.w	r3, [sp, #4]
 8003f38:	0a33      	lsrs	r3, r6, #8
 8003f3a:	f88d 3006 	strb.w	r3, [sp, #6]
 8003f3e:	f88d 7005 	strb.w	r7, [sp, #5]
 8003f42:	f88d 6007 	strb.w	r6, [sp, #7]
        ILI9341_WriteData(data, sizeof(data));
 8003f46:	f7ff ffb9 	bl	8003ebc <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8003f4a:	202b      	movs	r0, #43	; 0x2b
 8003f4c:	f7ff ffa0 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
        ILI9341_WriteData(data, sizeof(data));
 8003f50:	2104      	movs	r1, #4
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8003f52:	0a2b      	lsrs	r3, r5, #8
        ILI9341_WriteData(data, sizeof(data));
 8003f54:	eb0d 0001 	add.w	r0, sp, r1
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8003f58:	f88d 3004 	strb.w	r3, [sp, #4]
 8003f5c:	0a23      	lsrs	r3, r4, #8
 8003f5e:	f88d 3006 	strb.w	r3, [sp, #6]
 8003f62:	f88d 5005 	strb.w	r5, [sp, #5]
 8003f66:	f88d 4007 	strb.w	r4, [sp, #7]
        ILI9341_WriteData(data, sizeof(data));
 8003f6a:	f7ff ffa7 	bl	8003ebc <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8003f6e:	202c      	movs	r0, #44	; 0x2c
 8003f70:	f7ff ff8e 	bl	8003e90 <ILI9341_WriteCommand>
}
 8003f74:	b003      	add	sp, #12
 8003f76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f78 <ILI9341_Unselect>:
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f7e:	4801      	ldr	r0, [pc, #4]	; (8003f84 <ILI9341_Unselect+0xc>)
 8003f80:	f7fc bf80 	b.w	8000e84 <HAL_GPIO_WritePin>
 8003f84:	40020c00 	.word	0x40020c00

08003f88 <ILI9341_Init>:

void ILI9341_Init() {
 8003f88:	b530      	push	{r4, r5, lr}
 8003f8a:	b085      	sub	sp, #20
    ILI9341_Select();
 8003f8c:	f7ff ff78 	bl	8003e80 <ILI9341_Select>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8003f90:	2200      	movs	r2, #0
 8003f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f96:	4888      	ldr	r0, [pc, #544]	; (80041b8 <ILI9341_Init+0x230>)
    HAL_Delay(1000);

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8003f98:	4c88      	ldr	r4, [pc, #544]	; (80041bc <ILI9341_Init+0x234>)
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8003f9a:	f7fc ff73 	bl	8000e84 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003f9e:	2005      	movs	r0, #5
 8003fa0:	f7fc fb46 	bl	8000630 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003faa:	4883      	ldr	r0, [pc, #524]	; (80041b8 <ILI9341_Init+0x230>)
 8003fac:	f7fc ff6a 	bl	8000e84 <HAL_GPIO_WritePin>
    ILI9341_WriteCommand(0x01);
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	f7ff ff6d 	bl	8003e90 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8003fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fba:	f7fc fb39 	bl	8000630 <HAL_Delay>
    ILI9341_WriteCommand(0xCB);
 8003fbe:	20cb      	movs	r0, #203	; 0xcb
 8003fc0:	f7ff ff66 	bl	8003e90 <ILI9341_WriteCommand>
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8003fc4:	6820      	ldr	r0, [r4, #0]
 8003fc6:	7923      	ldrb	r3, [r4, #4]
 8003fc8:	9000      	str	r0, [sp, #0]
        ILI9341_WriteData(data, sizeof(data));
 8003fca:	2105      	movs	r1, #5
 8003fcc:	4668      	mov	r0, sp
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8003fce:	f88d 3004 	strb.w	r3, [sp, #4]
        ILI9341_WriteData(data, sizeof(data));
 8003fd2:	f7ff ff73 	bl	8003ebc <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8003fd6:	20cf      	movs	r0, #207	; 0xcf
 8003fd8:	f7ff ff5a 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8003fdc:	4623      	mov	r3, r4
        ILI9341_WriteData(data, sizeof(data));
 8003fde:	2103      	movs	r1, #3
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8003fe0:	f833 2f05 	ldrh.w	r2, [r3, #5]!
 8003fe4:	f8ad 2000 	strh.w	r2, [sp]
 8003fe8:	789b      	ldrb	r3, [r3, #2]
 8003fea:	f88d 3002 	strb.w	r3, [sp, #2]
        ILI9341_WriteData(data, sizeof(data));
 8003fee:	4668      	mov	r0, sp
 8003ff0:	f7ff ff64 	bl	8003ebc <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8003ff4:	20e8      	movs	r0, #232	; 0xe8
 8003ff6:	f7ff ff4b 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8003ffa:	4623      	mov	r3, r4
        ILI9341_WriteData(data, sizeof(data));
 8003ffc:	2103      	movs	r1, #3
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8003ffe:	f833 2f08 	ldrh.w	r2, [r3, #8]!
 8004002:	f8ad 2000 	strh.w	r2, [sp]
 8004006:	789b      	ldrb	r3, [r3, #2]
 8004008:	f88d 3002 	strb.w	r3, [sp, #2]
        ILI9341_WriteData(data, sizeof(data));
 800400c:	4668      	mov	r0, sp
 800400e:	f7ff ff55 	bl	8003ebc <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8004012:	20ea      	movs	r0, #234	; 0xea
 8004014:	f7ff ff3c 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8004018:	2500      	movs	r5, #0
        ILI9341_WriteData(data, sizeof(data));
 800401a:	2102      	movs	r1, #2
 800401c:	4668      	mov	r0, sp
        uint8_t data[] = { 0x00, 0x00 };
 800401e:	f88d 5000 	strb.w	r5, [sp]
 8004022:	f88d 5001 	strb.w	r5, [sp, #1]
        ILI9341_WriteData(data, sizeof(data));
 8004026:	f7ff ff49 	bl	8003ebc <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800402a:	20ed      	movs	r0, #237	; 0xed
 800402c:	f7ff ff30 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8004030:	f8d4 000b 	ldr.w	r0, [r4, #11]
 8004034:	9000      	str	r0, [sp, #0]
        ILI9341_WriteData(data, sizeof(data));
 8004036:	2104      	movs	r1, #4
 8004038:	4668      	mov	r0, sp
 800403a:	f7ff ff3f 	bl	8003ebc <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 800403e:	20f7      	movs	r0, #247	; 0xf7
 8004040:	f7ff ff26 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8004044:	2320      	movs	r3, #32
        ILI9341_WriteData(data, sizeof(data));
 8004046:	2101      	movs	r1, #1
 8004048:	4668      	mov	r0, sp
        uint8_t data[] = { 0x20 };
 800404a:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 800404e:	f7ff ff35 	bl	8003ebc <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8004052:	20c0      	movs	r0, #192	; 0xc0
 8004054:	f7ff ff1c 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8004058:	2323      	movs	r3, #35	; 0x23
        ILI9341_WriteData(data, sizeof(data));
 800405a:	2101      	movs	r1, #1
 800405c:	4668      	mov	r0, sp
        uint8_t data[] = { 0x23 };
 800405e:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8004062:	f7ff ff2b 	bl	8003ebc <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8004066:	20c1      	movs	r0, #193	; 0xc1
 8004068:	f7ff ff12 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800406c:	2310      	movs	r3, #16
        ILI9341_WriteData(data, sizeof(data));
 800406e:	2101      	movs	r1, #1
 8004070:	4668      	mov	r0, sp
        uint8_t data[] = { 0x10 };
 8004072:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8004076:	f7ff ff21 	bl	8003ebc <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 800407a:	20c5      	movs	r0, #197	; 0xc5
 800407c:	f7ff ff08 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8004080:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 8004084:	f8ad 3000 	strh.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8004088:	2102      	movs	r1, #2
 800408a:	4668      	mov	r0, sp
 800408c:	f7ff ff16 	bl	8003ebc <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8004090:	20c7      	movs	r0, #199	; 0xc7
 8004092:	f7ff fefd 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8004096:	2386      	movs	r3, #134	; 0x86
        ILI9341_WriteData(data, sizeof(data));
 8004098:	2101      	movs	r1, #1
 800409a:	4668      	mov	r0, sp
        uint8_t data[] = { 0x86 };
 800409c:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 80040a0:	f7ff ff0c 	bl	8003ebc <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80040a4:	2036      	movs	r0, #54	; 0x36
 80040a6:	f7ff fef3 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80040aa:	2348      	movs	r3, #72	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 80040ac:	2101      	movs	r1, #1
 80040ae:	4668      	mov	r0, sp
        uint8_t data[] = { 0x48 };
 80040b0:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 80040b4:	f7ff ff02 	bl	8003ebc <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80040b8:	203a      	movs	r0, #58	; 0x3a
 80040ba:	f7ff fee9 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80040be:	2355      	movs	r3, #85	; 0x55
        ILI9341_WriteData(data, sizeof(data));
 80040c0:	2101      	movs	r1, #1
 80040c2:	4668      	mov	r0, sp
        uint8_t data[] = { 0x55 };
 80040c4:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 80040c8:	f7ff fef8 	bl	8003ebc <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80040cc:	20b1      	movs	r0, #177	; 0xb1
 80040ce:	f7ff fedf 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80040d2:	2318      	movs	r3, #24
        ILI9341_WriteData(data, sizeof(data));
 80040d4:	2102      	movs	r1, #2
 80040d6:	4668      	mov	r0, sp
        uint8_t data[] = { 0x00, 0x18 };
 80040d8:	f88d 3001 	strb.w	r3, [sp, #1]
 80040dc:	f88d 5000 	strb.w	r5, [sp]
        ILI9341_WriteData(data, sizeof(data));
 80040e0:	f7ff feec 	bl	8003ebc <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80040e4:	20b6      	movs	r0, #182	; 0xb6
 80040e6:	f7ff fed3 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80040ea:	4623      	mov	r3, r4
        ILI9341_WriteData(data, sizeof(data));
 80040ec:	2103      	movs	r1, #3
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80040ee:	f833 2f11 	ldrh.w	r2, [r3, #17]!
 80040f2:	f8ad 2000 	strh.w	r2, [sp]
 80040f6:	789b      	ldrb	r3, [r3, #2]
 80040f8:	f88d 3002 	strb.w	r3, [sp, #2]
        ILI9341_WriteData(data, sizeof(data));
 80040fc:	4668      	mov	r0, sp
 80040fe:	f7ff fedd 	bl	8003ebc <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8004102:	20f2      	movs	r0, #242	; 0xf2
 8004104:	f7ff fec4 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8004108:	2101      	movs	r1, #1
 800410a:	4668      	mov	r0, sp
        uint8_t data[] = { 0x00 };
 800410c:	f88d 5000 	strb.w	r5, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8004110:	f7ff fed4 	bl	8003ebc <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8004114:	2026      	movs	r0, #38	; 0x26
 8004116:	f7ff febb 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800411a:	2101      	movs	r1, #1
        ILI9341_WriteData(data, sizeof(data));
 800411c:	4668      	mov	r0, sp
        uint8_t data[] = { 0x01 };
 800411e:	f88d 1000 	strb.w	r1, [sp]
        ILI9341_WriteData(data, sizeof(data));
 8004122:	f7ff fecb 	bl	8003ebc <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8004126:	20e0      	movs	r0, #224	; 0xe0
 8004128:	f7ff feb2 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800412c:	f104 0314 	add.w	r3, r4, #20
 8004130:	466a      	mov	r2, sp
 8004132:	341c      	adds	r4, #28
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	4615      	mov	r5, r2
 800413a:	c503      	stmia	r5!, {r0, r1}
 800413c:	3308      	adds	r3, #8
 800413e:	42a3      	cmp	r3, r4
 8004140:	462a      	mov	r2, r5
 8004142:	d1f7      	bne.n	8004134 <ILI9341_Init+0x1ac>
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	8899      	ldrh	r1, [r3, #4]
 8004148:	799b      	ldrb	r3, [r3, #6]
 800414a:	71ab      	strb	r3, [r5, #6]
 800414c:	6028      	str	r0, [r5, #0]
 800414e:	80a9      	strh	r1, [r5, #4]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8004150:	4668      	mov	r0, sp
 8004152:	210f      	movs	r1, #15
 8004154:	f7ff feb2 	bl	8003ebc <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8004158:	20e1      	movs	r0, #225	; 0xe1
 800415a:	f7ff fe99 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <ILI9341_Init+0x238>)
 8004160:	466a      	mov	r2, sp
 8004162:	f103 0508 	add.w	r5, r3, #8
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	6859      	ldr	r1, [r3, #4]
 800416a:	4614      	mov	r4, r2
 800416c:	c403      	stmia	r4!, {r0, r1}
 800416e:	3308      	adds	r3, #8
 8004170:	42ab      	cmp	r3, r5
 8004172:	4622      	mov	r2, r4
 8004174:	d1f7      	bne.n	8004166 <ILI9341_Init+0x1de>
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	8899      	ldrh	r1, [r3, #4]
 800417a:	799b      	ldrb	r3, [r3, #6]
 800417c:	71a3      	strb	r3, [r4, #6]
 800417e:	6020      	str	r0, [r4, #0]
 8004180:	80a1      	strh	r1, [r4, #4]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8004182:	4668      	mov	r0, sp
 8004184:	210f      	movs	r1, #15
 8004186:	f7ff fe99 	bl	8003ebc <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800418a:	2011      	movs	r0, #17
 800418c:	f7ff fe80 	bl	8003e90 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8004190:	2078      	movs	r0, #120	; 0x78
 8004192:	f7fc fa4d 	bl	8000630 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8004196:	2029      	movs	r0, #41	; 0x29
 8004198:	f7ff fe7a 	bl	8003e90 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800419c:	2036      	movs	r0, #54	; 0x36
 800419e:	f7ff fe77 	bl	8003e90 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80041a2:	23e8      	movs	r3, #232	; 0xe8
        ILI9341_WriteData(data, sizeof(data));
 80041a4:	2101      	movs	r1, #1
 80041a6:	4668      	mov	r0, sp
        uint8_t data[] = { ILI9341_ROTATION };
 80041a8:	f88d 3000 	strb.w	r3, [sp]
        ILI9341_WriteData(data, sizeof(data));
 80041ac:	f7ff fe86 	bl	8003ebc <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80041b0:	f7ff fee2 	bl	8003f78 <ILI9341_Unselect>
}
 80041b4:	b005      	add	sp, #20
 80041b6:	bd30      	pop	{r4, r5, pc}
 80041b8:	40020c00 	.word	0x40020c00
 80041bc:	08006610 	.word	0x08006610
 80041c0:	08006633 	.word	0x08006633

080041c4 <ILI9341_DrawPixel>:
	}

}

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80041c4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80041c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041ca:	4604      	mov	r4, r0
 80041cc:	460d      	mov	r5, r1
 80041ce:	4616      	mov	r6, r2
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80041d0:	d216      	bcs.n	8004200 <ILI9341_DrawPixel+0x3c>
 80041d2:	29ef      	cmp	r1, #239	; 0xef
 80041d4:	d814      	bhi.n	8004200 <ILI9341_DrawPixel+0x3c>
        return;

    ILI9341_Select();
 80041d6:	f7ff fe53 	bl	8003e80 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 80041da:	1c6b      	adds	r3, r5, #1
 80041dc:	1c62      	adds	r2, r4, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	b292      	uxth	r2, r2
 80041e2:	4629      	mov	r1, r5
 80041e4:	4620      	mov	r0, r4
 80041e6:	f7ff fe99 	bl	8003f1c <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80041ea:	0a33      	lsrs	r3, r6, #8
    ILI9341_WriteData(data, sizeof(data));
 80041ec:	2102      	movs	r1, #2
 80041ee:	a801      	add	r0, sp, #4
    uint8_t data[] = { color >> 8, color & 0xFF };
 80041f0:	f88d 3004 	strb.w	r3, [sp, #4]
 80041f4:	f88d 6005 	strb.w	r6, [sp, #5]
    ILI9341_WriteData(data, sizeof(data));
 80041f8:	f7ff fe60 	bl	8003ebc <ILI9341_WriteData>

    ILI9341_Unselect();
 80041fc:	f7ff febc 	bl	8003f78 <ILI9341_Unselect>
}
 8004200:	b002      	add	sp, #8
 8004202:	bd70      	pop	{r4, r5, r6, pc}

08004204 <ili9341_drawline>:
{
 8004204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004208:	1a17      	subs	r7, r2, r0
 800420a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800420e:	4605      	mov	r5, r0
 8004210:	4616      	mov	r6, r2
 8004212:	eba3 0801 	sub.w	r8, r3, r1
 8004216:	fb07 f401 	mul.w	r4, r7, r1
	for (uint32_t x = x1; x < x2; x++){
 800421a:	42b5      	cmp	r5, r6
 800421c:	d301      	bcc.n	8004222 <ili9341_drawline+0x1e>
}
 800421e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		y = ((y2 * (x - x1)) + (y1 * (x2 - x))) / (x2 - x1);
 8004222:	fbb4 f1f7 	udiv	r1, r4, r7
		ILI9341_DrawPixel(x, y, color);
 8004226:	b2a8      	uxth	r0, r5
 8004228:	464a      	mov	r2, r9
 800422a:	b289      	uxth	r1, r1
 800422c:	f7ff ffca 	bl	80041c4 <ILI9341_DrawPixel>
	for (uint32_t x = x1; x < x2; x++){
 8004230:	3501      	adds	r5, #1
 8004232:	4444      	add	r4, r8
 8004234:	e7f1      	b.n	800421a <ili9341_drawline+0x16>

08004236 <ILI9341_WriteString>:
        }
    }
    ILI9341_WriteData(allData, sizeof(allData));
}

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004236:	b082      	sub	sp, #8
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	b08b      	sub	sp, #44	; 0x2c
 800423e:	af00      	add	r7, sp, #0
 8004240:	4614      	mov	r4, r2
 8004242:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8004246:	61fa      	str	r2, [r7, #28]
 8004248:	fa5f f883 	uxtb.w	r8, r3
 800424c:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8004250:	657b      	str	r3, [r7, #84]	; 0x54
 8004252:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8004256:	4683      	mov	fp, r0
 8004258:	460d      	mov	r5, r1
 800425a:	61ba      	str	r2, [r7, #24]
    ILI9341_Select();
 800425c:	f7ff fe10 	bl	8003e80 <ILI9341_Select>
    uint8_t allData[(font.height * font.width) * 2];
 8004260:	fb18 f306 	smulbb	r3, r8, r6
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
            	allData[line_nr++] = (bgcolor >> 8);
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	623c      	str	r4, [r7, #32]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	60fb      	str	r3, [r7, #12]
            	allData[line_nr++] = (color >> 8);
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	613b      	str	r3, [r7, #16]
    uint8_t allData[(font.height * font.width) * 2];
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	3307      	adds	r3, #7
 800427a:	f023 0307 	bic.w	r3, r3, #7
 800427e:	607b      	str	r3, [r7, #4]

    while(*str) {
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f813 4b01 	ldrb.w	r4, [r3], #1
 8004286:	623b      	str	r3, [r7, #32]
 8004288:	b93c      	cbnz	r4, 800429a <ILI9341_WriteString+0x64>
        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
        x += font.width;
        str++;
    }

    ILI9341_Unselect();
 800428a:	f7ff fe75 	bl	8003f78 <ILI9341_Unselect>
}
 800428e:	372c      	adds	r7, #44	; 0x2c
 8004290:	46bd      	mov	sp, r7
 8004292:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004296:	b002      	add	sp, #8
 8004298:	4770      	bx	lr
        if(x + font.width >= ILI9341_WIDTH) {
 800429a:	eb0b 0308 	add.w	r3, fp, r8
 800429e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042a2:	db08      	blt.n	80042b6 <ILI9341_WriteString+0x80>
            y += font.height;
 80042a4:	4435      	add	r5, r6
 80042a6:	b2ad      	uxth	r5, r5
            if(y + font.height >= ILI9341_HEIGHT) {
 80042a8:	19ab      	adds	r3, r5, r6
 80042aa:	2bef      	cmp	r3, #239	; 0xef
 80042ac:	dced      	bgt.n	800428a <ILI9341_WriteString+0x54>
            if(*str == ' ') {
 80042ae:	2c20      	cmp	r4, #32
 80042b0:	d04c      	beq.n	800434c <ILI9341_WriteString+0x116>
            x = 0;
 80042b2:	f04f 0b00 	mov.w	fp, #0
    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80042b6:	eb0b 0908 	add.w	r9, fp, r8
 80042ba:	fa1f f989 	uxth.w	r9, r9
 80042be:	1e73      	subs	r3, r6, #1
 80042c0:	442b      	add	r3, r5
 80042c2:	f109 32ff 	add.w	r2, r9, #4294967295
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	b292      	uxth	r2, r2
 80042ca:	4629      	mov	r1, r5
 80042cc:	4658      	mov	r0, fp
 80042ce:	f8d7 a058 	ldr.w	sl, [r7, #88]	; 0x58
static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80042d2:	f8c7 d014 	str.w	sp, [r7, #20]
    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80042d6:	f7ff fe21 	bl	8003f1c <ILI9341_SetAddressWindow>
    uint8_t allData[(font.height * font.width) * 2];
 80042da:	687b      	ldr	r3, [r7, #4]
        b = font.data[(ch - 32) * font.height + i];
 80042dc:	3c20      	subs	r4, #32
    uint8_t allData[(font.height * font.width) * 2];
 80042de:	ebad 0d03 	sub.w	sp, sp, r3
        b = font.data[(ch - 32) * font.height + i];
 80042e2:	4374      	muls	r4, r6
 80042e4:	eb0a 0344 	add.w	r3, sl, r4, lsl #1
    uint8_t allData[(font.height * font.width) * 2];
 80042e8:	4668      	mov	r0, sp
 80042ea:	60bb      	str	r3, [r7, #8]
        b = font.data[(ch - 32) * font.height + i];
 80042ec:	466a      	mov	r2, sp
    for(i = 0; i < font.height; i++) {
 80042ee:	2100      	movs	r1, #0
 80042f0:	f1c0 0a02 	rsb	sl, r0, #2
 80042f4:	42b1      	cmp	r1, r6
 80042f6:	d306      	bcc.n	8004306 <ILI9341_WriteString+0xd0>
    ILI9341_WriteData(allData, sizeof(allData));
 80042f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042fa:	f7ff fddf 	bl	8003ebc <ILI9341_WriteData>
 80042fe:	f8d7 d014 	ldr.w	sp, [r7, #20]
            x = 0;
 8004302:	46cb      	mov	fp, r9
 8004304:	e7bc      	b.n	8004280 <ILI9341_WriteString+0x4a>
        b = font.data[(ch - 32) * font.height + i];
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	eb0a 0e02 	add.w	lr, sl, r2
 800430c:	f833 b011 	ldrh.w	fp, [r3, r1, lsl #1]
        for(j = 0; j < font.width; j++) {
 8004310:	2300      	movs	r3, #0
 8004312:	4543      	cmp	r3, r8
 8004314:	d304      	bcc.n	8004320 <ILI9341_WriteString+0xea>
 8004316:	2302      	movs	r3, #2
    for(i = 0; i < font.height; i++) {
 8004318:	3101      	adds	r1, #1
 800431a:	fb13 2208 	smlabb	r2, r3, r8, r2
 800431e:	e7e9      	b.n	80042f4 <ILI9341_WriteString+0xbe>
            if((b << j) & 0x8000)  {
 8004320:	fa0b fc03 	lsl.w	ip, fp, r3
 8004324:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
            	allData[line_nr++] = (color >> 8);
 8004328:	bf16      	itet	ne
 800432a:	7c3c      	ldrbne	r4, [r7, #16]
            	allData[line_nr++] = (bgcolor >> 8);
 800432c:	7b3c      	ldrbeq	r4, [r7, #12]
            	allData[line_nr++] = (color >> 8);
 800432e:	f802 4013 	strbne.w	r4, [r2, r3, lsl #1]
 8004332:	eb00 0c0e 	add.w	ip, r0, lr
            	allData[line_nr++] = (bgcolor >> 8);
 8004336:	bf0a      	itet	eq
 8004338:	f802 4013 	strbeq.w	r4, [r2, r3, lsl #1]
            	allData[line_nr++] = (color & 0xFF);
 800433c:	7f3c      	ldrbne	r4, [r7, #28]
            	allData[line_nr++] = (bgcolor & 0xFF);
 800433e:	7e3c      	ldrbeq	r4, [r7, #24]
 8004340:	f80c 4c01 	strb.w	r4, [ip, #-1]
        for(j = 0; j < font.width; j++) {
 8004344:	3301      	adds	r3, #1
 8004346:	f10e 0e02 	add.w	lr, lr, #2
 800434a:	e7e2      	b.n	8004312 <ILI9341_WriteString+0xdc>
            x = 0;
 800434c:	f04f 0900 	mov.w	r9, #0
 8004350:	e7d7      	b.n	8004302 <ILI9341_WriteString+0xcc>
	...

08004354 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800435c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004360:	4604      	mov	r4, r0
 8004362:	4688      	mov	r8, r1
 8004364:	4616      	mov	r6, r2
 8004366:	461d      	mov	r5, r3
 8004368:	f8b7 b030 	ldrh.w	fp, [r7, #48]	; 0x30
 800436c:	46ea      	mov	sl, sp
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800436e:	d25c      	bcs.n	800442a <ILI9341_FillRectangle+0xd6>
 8004370:	29ef      	cmp	r1, #239	; 0xef
 8004372:	d85a      	bhi.n	800442a <ILI9341_FillRectangle+0xd6>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8004374:	1883      	adds	r3, r0, r2
 8004376:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800437a:	bfc8      	it	gt
 800437c:	f5c0 76a0 	rsbgt	r6, r0, #320	; 0x140
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8004380:	eb01 0305 	add.w	r3, r1, r5
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8004384:	bfc8      	it	gt
 8004386:	b2b6      	uxthgt	r6, r6
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8004388:	2bf0      	cmp	r3, #240	; 0xf0
 800438a:	bfc4      	itt	gt
 800438c:	f1c1 05f0 	rsbgt	r5, r1, #240	; 0xf0
 8004390:	b2ad      	uxthgt	r5, r5

    ILI9341_Select();
 8004392:	f7ff fd75 	bl	8003e80 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004396:	4620      	mov	r0, r4
 8004398:	1e62      	subs	r2, r4, #1
 800439a:	f108 33ff 	add.w	r3, r8, #4294967295
    uint16_t dlen = w * h * 2;
 800439e:	0074      	lsls	r4, r6, #1
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80043a0:	442b      	add	r3, r5
 80043a2:	4432      	add	r2, r6
    uint16_t dlen = w * h * 2;
 80043a4:	fb14 f405 	smulbb	r4, r4, r5
 80043a8:	b2a4      	uxth	r4, r4
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	b292      	uxth	r2, r2
 80043ae:	4641      	mov	r1, r8
 80043b0:	f7ff fdb4 	bl	8003f1c <ILI9341_SetAddressWindow>
    if (dlen > 19200) dlen = 19200;
    uint8_t data[dlen]; // = { color >> 8, color & 0xFF };
 80043b4:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
 80043b8:	bf28      	it	cs
 80043ba:	f44f 4496 	movcs.w	r4, #19200	; 0x4b00
 80043be:	1de3      	adds	r3, r4, #7
 80043c0:	f023 0307 	bic.w	r3, r3, #7
 80043c4:	ebad 0d03 	sub.w	sp, sp, r3
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80043c8:	2201      	movs	r2, #1
 80043ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043ce:	4819      	ldr	r0, [pc, #100]	; (8004434 <ILI9341_FillRectangle+0xe0>)
 80043d0:	f7fc fd58 	bl	8000e84 <HAL_GPIO_WritePin>
    uint8_t data[dlen]; // = { color >> 8, color & 0xFF };
 80043d4:	46e9      	mov	r9, sp
    uint32_t d_index = 0;

    for(y = h; y > 0; y--) {
        for(x = w; x > 0; x--) {
        	data[d_index++] = (color >> 8);
 80043d6:	ea4f 221b 	mov.w	r2, fp, lsr #8
    uint32_t d_index = 0;
 80043da:	2100      	movs	r1, #0
    for(y = h; y > 0; y--) {
 80043dc:	b1fd      	cbz	r5, 800441e <ILI9341_FillRectangle+0xca>
 80043de:	46b0      	mov	r8, r6
 80043e0:	e017      	b.n	8004412 <ILI9341_FillRectangle+0xbe>
        	data[d_index++] = (color >> 8);
 80043e2:	1c4b      	adds	r3, r1, #1
 80043e4:	f809 2001 	strb.w	r2, [r9, r1]
        	data[d_index++] = (color & 0xFF);
 80043e8:	3102      	adds	r1, #2
 80043ea:	f809 b003 	strb.w	fp, [r9, r3]
            if ((d_index % dlen) == 0){
 80043ee:	fbb1 f3f4 	udiv	r3, r1, r4
 80043f2:	fb04 1313 	mls	r3, r4, r3, r1
 80043f6:	b943      	cbnz	r3, 800440a <ILI9341_FillRectangle+0xb6>
            	ILI9341_WriteData(data, sizeof(data));
 80043f8:	4621      	mov	r1, r4
 80043fa:	4648      	mov	r0, r9
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	f7ff fd5c 	bl	8003ebc <ILI9341_WriteData>
            	d_index = 0;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4619      	mov	r1, r3
        for(x = w; x > 0; x--) {
 800440a:	f108 38ff 	add.w	r8, r8, #4294967295
 800440e:	fa1f f888 	uxth.w	r8, r8
 8004412:	f1b8 0f00 	cmp.w	r8, #0
 8004416:	d1e4      	bne.n	80043e2 <ILI9341_FillRectangle+0x8e>
    for(y = h; y > 0; y--) {
 8004418:	3d01      	subs	r5, #1
 800441a:	b2ad      	uxth	r5, r5
 800441c:	e7de      	b.n	80043dc <ILI9341_FillRectangle+0x88>
            }
        }
    }
    ILI9341_WriteData(data, sizeof(data));
 800441e:	4621      	mov	r1, r4
 8004420:	4648      	mov	r0, r9
 8004422:	f7ff fd4b 	bl	8003ebc <ILI9341_WriteData>
    ILI9341_Unselect();
 8004426:	f7ff fda7 	bl	8003f78 <ILI9341_Unselect>
}
 800442a:	370c      	adds	r7, #12
 800442c:	46d5      	mov	sp, sl
 800442e:	46bd      	mov	sp, r7
 8004430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004434:	40020c00 	.word	0x40020c00

08004438 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8004438:	b507      	push	{r0, r1, r2, lr}
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 800443a:	2100      	movs	r1, #0
 800443c:	9000      	str	r0, [sp, #0]
 800443e:	23f0      	movs	r3, #240	; 0xf0
 8004440:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004444:	4608      	mov	r0, r1
 8004446:	f7ff ff85 	bl	8004354 <ILI9341_FillRectangle>
}
 800444a:	b003      	add	sp, #12
 800444c:	f85d fb04 	ldr.w	pc, [sp], #4

08004450 <ILI9341_WriteChar_2>:
    ILI9341_Select();
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_Unselect();
}

void ILI9341_WriteChar_2(uint16_t x, uint16_t y, uint8_t number, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004450:	b082      	sub	sp, #8
 8004452:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004456:	fa5f fb83 	uxtb.w	fp, r3
 800445a:	b085      	sub	sp, #20
 800445c:	f3c3 2407 	ubfx	r4, r3, #8, #8

	const uint16_t * fdata = &font.data[number * ((font.width / 8) * font.height)];
 8004460:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8004464:	fb16 f604 	smulbb	r6, r6, r4
void ILI9341_WriteChar_2(uint16_t x, uint16_t y, uint8_t number, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004468:	af00      	add	r7, sp, #0
	const uint16_t * fdata = &font.data[number * ((font.width / 8) * font.height)];
 800446a:	4372      	muls	r2, r6
void ILI9341_WriteChar_2(uint16_t x, uint16_t y, uint8_t number, FontDef font, uint16_t color, uint16_t bgcolor) {
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004472:	f8b7 8044 	ldrh.w	r8, [r7, #68]	; 0x44
 8004476:	f8b7 9048 	ldrh.w	r9, [r7, #72]	; 0x48
 800447a:	f8c7 d00c 	str.w	sp, [r7, #12]
	const uint16_t * fdata = &font.data[number * ((font.width / 8) * font.height)];
 800447e:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8004482:	0055      	lsls	r5, r2, #1

	ILI9341_Select();
 8004484:	f7ff fcfc 	bl	8003e80 <ILI9341_Select>
    if(x + font.width >= ILI9341_WIDTH) {
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	eb00 030b 	add.w	r3, r0, fp
 8004490:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004494:	db05      	blt.n	80044a2 <ILI9341_WriteChar_2+0x52>
        x = 0;
        y += font.height;
 8004496:	4421      	add	r1, r4
 8004498:	b289      	uxth	r1, r1
        if(y + font.height >= ILI9341_HEIGHT) {
 800449a:	190b      	adds	r3, r1, r4
 800449c:	2bef      	cmp	r3, #239	; 0xef
 800449e:	dc23      	bgt.n	80044e8 <ILI9341_WriteChar_2+0x98>
        x = 0;
 80044a0:	2000      	movs	r0, #0
    }

    uint32_t  b, j, k;
    uint32_t line_nr = 0;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80044a2:	1e63      	subs	r3, r4, #1
 80044a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80044a8:	440b      	add	r3, r1
 80044aa:	4402      	add	r2, r0
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	b292      	uxth	r2, r2
 80044b0:	f7ff fd34 	bl	8003f1c <ILI9341_SetAddressWindow>
    uint8_t allData[(font.width * font.height) * 2];
 80044b4:	fb14 f10b 	smulbb	r1, r4, fp
 80044b8:	0049      	lsls	r1, r1, #1
 80044ba:	1dcb      	adds	r3, r1, #7
 80044bc:	f023 0307 	bic.w	r3, r3, #7
 80044c0:	ebad 0d03 	sub.w	sp, sp, r3
		for(k = 0; k < 8; k++) {
			if((b << k) & 0x80)  {
				allData[line_nr++] = (color >> 8);
				allData[line_nr++] = (color & 0xFF);
			} else {
				allData[line_nr++] = (bgcolor >> 8);
 80044c4:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80044c8:	607b      	str	r3, [r7, #4]
				allData[line_nr++] = (color >> 8);
 80044ca:	ea4f 2318 	mov.w	r3, r8, lsr #8
    uint8_t allData[(font.width * font.height) * 2];
 80044ce:	4668      	mov	r0, sp
				allData[line_nr++] = (color >> 8);
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	46ec      	mov	ip, sp
	for(j = 0; j < byte_len; j++) {
 80044d4:	2400      	movs	r4, #0
		b = fdata[j];
 80044d6:	4455      	add	r5, sl
	for(j = 0; j < byte_len; j++) {
 80044d8:	42b4      	cmp	r4, r6
 80044da:	d10b      	bne.n	80044f4 <ILI9341_WriteChar_2+0xa4>
				allData[line_nr++] = (bgcolor & 0xFF);
			}
		}
	}

    ILI9341_WriteData(allData, sizeof(allData));
 80044dc:	f7ff fcee 	bl	8003ebc <ILI9341_WriteData>
    ILI9341_Unselect();
 80044e0:	f7ff fd4a 	bl	8003f78 <ILI9341_Unselect>
 80044e4:	f8d7 d00c 	ldr.w	sp, [r7, #12]
}
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f0:	b002      	add	sp, #8
 80044f2:	4770      	bx	lr
 80044f4:	ea4f 1e04 	mov.w	lr, r4, lsl #4
		b = fdata[j];
 80044f8:	f835 a014 	ldrh.w	sl, [r5, r4, lsl #1]
 80044fc:	f10e 0e02 	add.w	lr, lr, #2
		for(k = 0; k < 8; k++) {
 8004500:	2300      	movs	r3, #0
			if((b << k) & 0x80)  {
 8004502:	fa0a fb03 	lsl.w	fp, sl, r3
 8004506:	f01b 0f80 	tst.w	fp, #128	; 0x80
				allData[line_nr++] = (color >> 8);
 800450a:	bf16      	itet	ne
 800450c:	7a3a      	ldrbne	r2, [r7, #8]
				allData[line_nr++] = (bgcolor >> 8);
 800450e:	793a      	ldrbeq	r2, [r7, #4]
				allData[line_nr++] = (color >> 8);
 8004510:	f80c 2013 	strbne.w	r2, [ip, r3, lsl #1]
 8004514:	eb00 0b0e 	add.w	fp, r0, lr
				allData[line_nr++] = (bgcolor >> 8);
 8004518:	bf08      	it	eq
 800451a:	f80c 2013 	strbeq.w	r2, [ip, r3, lsl #1]
		for(k = 0; k < 8; k++) {
 800451e:	f103 0301 	add.w	r3, r3, #1
				allData[line_nr++] = (color & 0xFF);
 8004522:	bf14      	ite	ne
 8004524:	f80b 8c01 	strbne.w	r8, [fp, #-1]
				allData[line_nr++] = (bgcolor & 0xFF);
 8004528:	f80b 9c01 	strbeq.w	r9, [fp, #-1]
		for(k = 0; k < 8; k++) {
 800452c:	2b08      	cmp	r3, #8
 800452e:	f10e 0e02 	add.w	lr, lr, #2
 8004532:	d1e6      	bne.n	8004502 <ILI9341_WriteChar_2+0xb2>
	for(j = 0; j < byte_len; j++) {
 8004534:	3401      	adds	r4, #1
 8004536:	f10c 0c10 	add.w	ip, ip, #16
 800453a:	e7cd      	b.n	80044d8 <ILI9341_WriteChar_2+0x88>

0800453c <ILI9341_WriteNumber>:

void ILI9341_WriteNumber(uint16_t x, uint16_t y, uint32_t number, FontDef font, uint16_t color, uint16_t bgcolor) {
 800453c:	b082      	sub	sp, #8
 800453e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	460e      	mov	r6, r1
 8004546:	9311      	str	r3, [sp, #68]	; 0x44
 8004548:	fa5f f883 	uxtb.w	r8, r3
 800454c:	f3c3 2907 	ubfx	r9, r3, #8, #8
 8004550:	4605      	mov	r5, r0
 8004552:	4617      	mov	r7, r2
    ILI9341_Select();
 8004554:	f7ff fc94 	bl	8003e80 <ILI9341_Select>

    uint8_t nrs[10];
    uint8_t nrs_count = 0;

    while(number) {
 8004558:	2300      	movs	r3, #0
            if(y + font.height >= ILI9341_HEIGHT) {
                break;
            }
        }

        nrs[nrs_count++] = number % 10;
 800455a:	210a      	movs	r1, #10
 800455c:	b2dc      	uxtb	r4, r3
    while(number) {
 800455e:	b94f      	cbnz	r7, 8004574 <ILI9341_WriteNumber+0x38>
    }


    while(nrs_count){
    	nrs_count--;
    	ILI9341_WriteChar_2(x, y, nrs[nrs_count], font, ILI9341_GREEN, ILI9341_BLACK);
 8004560:	2700      	movs	r7, #0
 8004562:	f44f 6afc 	mov.w	sl, #2016	; 0x7e0
    while(nrs_count){
 8004566:	b9ec      	cbnz	r4, 80045a4 <ILI9341_WriteNumber+0x68>
    	x += font.width;
	}

    ILI9341_Unselect();
}
 8004568:	b008      	add	sp, #32
 800456a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800456e:	b002      	add	sp, #8
    ILI9341_Unselect();
 8004570:	f7ff bd02 	b.w	8003f78 <ILI9341_Unselect>
        if(x + font.width >= ILI9341_WIDTH) {
 8004574:	eb05 0208 	add.w	r2, r5, r8
 8004578:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 800457c:	db07      	blt.n	800458e <ILI9341_WriteNumber+0x52>
            y += font.height;
 800457e:	444e      	add	r6, r9
 8004580:	b2b6      	uxth	r6, r6
            if(y + font.height >= ILI9341_HEIGHT) {
 8004582:	eb06 0209 	add.w	r2, r6, r9
 8004586:	2aef      	cmp	r2, #239	; 0xef
            x = 0;
 8004588:	f04f 0500 	mov.w	r5, #0
            if(y + font.height >= ILI9341_HEIGHT) {
 800458c:	dce8      	bgt.n	8004560 <ILI9341_WriteNumber+0x24>
        nrs[nrs_count++] = number % 10;
 800458e:	fbb7 f0f1 	udiv	r0, r7, r1
 8004592:	aa08      	add	r2, sp, #32
 8004594:	4414      	add	r4, r2
 8004596:	fb01 7710 	mls	r7, r1, r0, r7
 800459a:	f804 7c0c 	strb.w	r7, [r4, #-12]
 800459e:	3301      	adds	r3, #1
        number /= 10;
 80045a0:	4607      	mov	r7, r0
 80045a2:	e7db      	b.n	800455c <ILI9341_WriteNumber+0x20>
    	nrs_count--;
 80045a4:	3c01      	subs	r4, #1
 80045a6:	b2e4      	uxtb	r4, r4
    	ILI9341_WriteChar_2(x, y, nrs[nrs_count], font, ILI9341_GREEN, ILI9341_BLACK);
 80045a8:	ab08      	add	r3, sp, #32
 80045aa:	4423      	add	r3, r4
 80045ac:	f88d 8044 	strb.w	r8, [sp, #68]	; 0x44
 80045b0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80045b4:	f88d 9045 	strb.w	r9, [sp, #69]	; 0x45
 80045b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4628      	mov	r0, r5
 80045be:	9702      	str	r7, [sp, #8]
 80045c0:	f8cd a004 	str.w	sl, [sp, #4]
 80045c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045c6:	4631      	mov	r1, r6
 80045c8:	4445      	add	r5, r8
 80045ca:	f7ff ff41 	bl	8004450 <ILI9341_WriteChar_2>
 80045ce:	b2ad      	uxth	r5, r5
 80045d0:	e7c9      	b.n	8004566 <ILI9341_WriteNumber+0x2a>
	...

080045d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045d8:	2230      	movs	r2, #48	; 0x30
 80045da:	2100      	movs	r1, #0
 80045dc:	a80e      	add	r0, sp, #56	; 0x38
 80045de:	f001 fbd7 	bl	8005d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045e2:	2214      	movs	r2, #20
 80045e4:	2100      	movs	r1, #0
 80045e6:	a803      	add	r0, sp, #12
 80045e8:	f001 fbd2 	bl	8005d90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045ec:	2100      	movs	r1, #0
 80045ee:	2218      	movs	r2, #24
 80045f0:	a808      	add	r0, sp, #32
 80045f2:	f001 fbcd 	bl	8005d90 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045f6:	2400      	movs	r4, #0
 80045f8:	4b20      	ldr	r3, [pc, #128]	; (800467c <SystemClock_Config+0xa8>)
 80045fa:	9401      	str	r4, [sp, #4]
 80045fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800460e:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <SystemClock_Config+0xac>)
 8004610:	9402      	str	r4, [sp, #8]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004620:	9302      	str	r3, [sp, #8]
 8004622:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004628:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800462a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800462e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004630:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004632:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004634:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004636:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004638:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800463a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800463c:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800463e:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004640:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004642:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004644:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004646:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004648:	f7fd fb4c 	bl	8001ce4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800464c:	230f      	movs	r3, #15
 800464e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004650:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004652:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004656:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004658:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800465a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800465c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800465e:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004660:	f7fd fcf0 	bl	8002044 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8004664:	23c8      	movs	r3, #200	; 0xc8
 8004666:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004668:	a808      	add	r0, sp, #32
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800466a:	2305      	movs	r3, #5
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800466c:	9608      	str	r6, [sp, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800466e:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004670:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004672:	f7fd fd91 	bl	8002198 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004676:	b01a      	add	sp, #104	; 0x68
 8004678:	bd70      	pop	{r4, r5, r6, pc}
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	40007000 	.word	0x40007000

08004684 <main>:
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b092      	sub	sp, #72	; 0x48
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004688:	2400      	movs	r4, #0
 800468a:	4da1      	ldr	r5, [pc, #644]	; (8004910 <main+0x28c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800468c:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8004954 <main+0x2d0>
  HAL_Init();
 8004690:	f7fb ffa2 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 8004694:	f7ff ff9e 	bl	80045d4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	2214      	movs	r2, #20
 800469a:	2100      	movs	r1, #0
 800469c:	a809      	add	r0, sp, #36	; 0x24
 800469e:	f001 fb77 	bl	8005d90 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046a2:	9401      	str	r4, [sp, #4]
 80046a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80046a6:	489b      	ldr	r0, [pc, #620]	; (8004914 <main+0x290>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046a8:	f043 0310 	orr.w	r3, r3, #16
 80046ac:	632b      	str	r3, [r5, #48]	; 0x30
 80046ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b8:	9402      	str	r4, [sp, #8]
 80046ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80046bc:	f043 0304 	orr.w	r3, r3, #4
 80046c0:	632b      	str	r3, [r5, #48]	; 0x30
 80046c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	9302      	str	r3, [sp, #8]
 80046ca:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046cc:	9403      	str	r4, [sp, #12]
 80046ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80046d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d4:	632b      	str	r3, [r5, #48]	; 0x30
 80046d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	9303      	str	r3, [sp, #12]
 80046de:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e0:	9404      	str	r4, [sp, #16]
 80046e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	632b      	str	r3, [r5, #48]	; 0x30
 80046ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	9304      	str	r3, [sp, #16]
 80046f2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f4:	9405      	str	r4, [sp, #20]
 80046f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80046f8:	f043 0302 	orr.w	r3, r3, #2
 80046fc:	632b      	str	r3, [r5, #48]	; 0x30
 80046fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	9305      	str	r3, [sp, #20]
 8004706:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004708:	9406      	str	r4, [sp, #24]
 800470a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800470c:	f043 0308 	orr.w	r3, r3, #8
 8004710:	632b      	str	r3, [r5, #48]	; 0x30
 8004712:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004714:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004718:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800471a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800471c:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800471e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004720:	f7fc fbb0 	bl	8000e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004724:	2201      	movs	r2, #1
 8004726:	4611      	mov	r1, r2
 8004728:	487b      	ldr	r0, [pc, #492]	; (8004918 <main+0x294>)
 800472a:	f7fc fbab 	bl	8000e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ILI_CS_Pin|ILI_RESET_Pin|ILI_LED_Pin|ILI_DC_RS_Pin
 800472e:	4622      	mov	r2, r4
 8004730:	f64f 7110 	movw	r1, #65296	; 0xff10
 8004734:	4879      	ldr	r0, [pc, #484]	; (800491c <main+0x298>)
 8004736:	f7fc fba5 	bl	8000e84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800473a:	2304      	movs	r3, #4
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800473c:	a909      	add	r1, sp, #36	; 0x24
 800473e:	4875      	ldr	r0, [pc, #468]	; (8004914 <main+0x290>)
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8004740:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004742:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004744:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004746:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800474a:	f7fc fabf 	bl	8000ccc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800474e:	2308      	movs	r3, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004750:	a909      	add	r1, sp, #36	; 0x24
 8004752:	4870      	ldr	r0, [pc, #448]	; (8004914 <main+0x290>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004754:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004758:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475a:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800475c:	f7fc fab6 	bl	8000ccc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8004760:	2332      	movs	r3, #50	; 0x32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004762:	a909      	add	r1, sp, #36	; 0x24
 8004764:	486b      	ldr	r0, [pc, #428]	; (8004914 <main+0x290>)
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8004766:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004768:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800476e:	f7fc faad 	bl	8000ccc <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004772:	a909      	add	r1, sp, #36	; 0x24
 8004774:	4868      	ldr	r0, [pc, #416]	; (8004918 <main+0x294>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004776:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004778:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800477a:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800477c:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800477e:	f7fc faa5 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004782:	a909      	add	r1, sp, #36	; 0x24
 8004784:	4866      	ldr	r0, [pc, #408]	; (8004920 <main+0x29c>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004786:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800478c:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478e:	f7fc fa9d 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI_CS_Pin ILI_RESET_Pin ILI_LED_Pin ILI_DC_RS_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = ILI_CS_Pin|ILI_RESET_Pin|ILI_LED_Pin|ILI_DC_RS_Pin
 8004792:	f64f 7310 	movw	r3, #65296	; 0xff10
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004796:	a909      	add	r1, sp, #36	; 0x24
 8004798:	4860      	ldr	r0, [pc, #384]	; (800491c <main+0x298>)
  GPIO_InitStruct.Pin = ILI_CS_Pin|ILI_RESET_Pin|ILI_LED_Pin|ILI_DC_RS_Pin
 800479a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800479e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a0:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047a2:	f7fc fa93 	bl	8000ccc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047a6:	a909      	add	r1, sp, #36	; 0x24
 80047a8:	485c      	ldr	r0, [pc, #368]	; (800491c <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047aa:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ac:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 80047ae:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047b0:	f7fc fa8c 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80047b4:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80047b6:	a909      	add	r1, sp, #36	; 0x24
 80047b8:	4858      	ldr	r0, [pc, #352]	; (800491c <main+0x298>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80047ba:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047bc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047be:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80047c0:	f7fc fa84 	bl	8000ccc <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80047c4:	9400      	str	r4, [sp, #0]
 80047c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80047c8:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8004958 <main+0x2d4>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80047cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047d0:	632b      	str	r3, [r5, #48]	; 0x30
 80047d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80047d8:	4621      	mov	r1, r4
 80047da:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80047dc:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80047de:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 80047e0:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80047e2:	f7fb ff4b 	bl	800067c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80047e6:	2039      	movs	r0, #57	; 0x39
 80047e8:	f7fb ff7c 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80047ec:	484d      	ldr	r0, [pc, #308]	; (8004924 <main+0x2a0>)
  hi2c1.Init.ClockSpeed = 100000;
 80047ee:	4a4e      	ldr	r2, [pc, #312]	; (8004928 <main+0x2a4>)
 80047f0:	4b4e      	ldr	r3, [pc, #312]	; (800492c <main+0x2a8>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047f2:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80047f4:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80047fc:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047fe:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004800:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004802:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004804:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004806:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004808:	f7fc ff90 	bl	800172c <HAL_I2C_Init>
  hi2s2.Instance = SPI2;
 800480c:	4848      	ldr	r0, [pc, #288]	; (8004930 <main+0x2ac>)
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800480e:	4b49      	ldr	r3, [pc, #292]	; (8004934 <main+0x2b0>)
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8004810:	6084      	str	r4, [r0, #8]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8004812:	f44f 7500 	mov.w	r5, #512	; 0x200
 8004816:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800481a:	60c4      	str	r4, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800481c:	6104      	str	r4, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800481e:	f8c0 8014 	str.w	r8, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8004822:	6184      	str	r4, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8004824:	61c4      	str	r4, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8004826:	6206      	str	r6, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8004828:	f7fd f824 	bl	8001874 <HAL_I2S_Init>
  hi2s3.Instance = SPI3;
 800482c:	4842      	ldr	r0, [pc, #264]	; (8004938 <main+0x2b4>)
 800482e:	4b43      	ldr	r3, [pc, #268]	; (800493c <main+0x2b8>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8004830:	6084      	str	r4, [r0, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8004832:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004836:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8004838:	6105      	str	r5, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800483a:	f8c0 8014 	str.w	r8, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800483e:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8004840:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8004842:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8004844:	f7fd f816 	bl	8001874 <HAL_I2S_Init>
  hspi1.Instance = SPI1;
 8004848:	483d      	ldr	r0, [pc, #244]	; (8004940 <main+0x2bc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800484a:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <main+0x2c0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800484c:	6084      	str	r4, [r0, #8]
  hspi1.Init.CRCPolynomial = 10;
 800484e:	f04f 080a 	mov.w	r8, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004852:	f44f 7982 	mov.w	r9, #260	; 0x104
 8004856:	e880 0208 	stmia.w	r0, {r3, r9}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800485a:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800485c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800485e:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004860:	6185      	str	r5, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004862:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004864:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004866:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004868:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800486a:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800486e:	f7fd fdcb 	bl	8002408 <HAL_SPI_Init>
  MX_USB_HOST_Init();
 8004872:	f001 f8d5 	bl	8005a20 <MX_USB_HOST_Init>
  hspi4.Instance = SPI4;
 8004876:	4834      	ldr	r0, [pc, #208]	; (8004948 <main+0x2c4>)
 8004878:	4b34      	ldr	r3, [pc, #208]	; (800494c <main+0x2c8>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800487a:	6084      	str	r4, [r0, #8]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800487c:	e880 0208 	stmia.w	r0, {r3, r9}
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004880:	60c4      	str	r4, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004882:	6104      	str	r4, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004884:	6144      	str	r4, [r0, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004886:	6185      	str	r5, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004888:	61c4      	str	r4, [r0, #28]
  htim2.Instance = TIM2;
 800488a:	4d31      	ldr	r5, [pc, #196]	; (8004950 <main+0x2cc>)
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800488c:	6204      	str	r4, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800488e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004890:	6284      	str	r4, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004892:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004896:	f7fd fdb7 	bl	8002408 <HAL_SPI_Init>
  ILI_Init();
 800489a:	f000 f8e5 	bl	8004a68 <ILI_Init>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	eb0d 0002 	add.w	r0, sp, r2
 80048a4:	4621      	mov	r1, r4
 80048a6:	f001 fa73 	bl	8005d90 <memset>
  htim2.Instance = TIM2;
 80048aa:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
  htim2.Init.Period = 0xFFFFFFFF;
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80048b2:	a909      	add	r1, sp, #36	; 0x24
 80048b4:	4628      	mov	r0, r5
  htim2.Init.Period = 0xFFFFFFFF;
 80048b6:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b8:	9407      	str	r4, [sp, #28]
 80048ba:	9408      	str	r4, [sp, #32]
  htim2.Init.Prescaler = 0;
 80048bc:	606c      	str	r4, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048be:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048c0:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048c2:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 80048c4:	f8c5 9000 	str.w	r9, [r5]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80048c8:	9709      	str	r7, [sp, #36]	; 0x24
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80048ca:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.IC1Filter = 10;
 80048cc:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80048d0:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfig.IC2Filter = 10;
 80048d2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80048d6:	f7fe f8a5 	bl	8002a24 <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048da:	a907      	add	r1, sp, #28
 80048dc:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048de:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048e0:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048e2:	f7fe f8ea 	bl	8002aba <HAL_TIMEx_MasterConfigSynchronization>
  TIM2->CR1 = 1;
 80048e6:	f8c9 6000 	str.w	r6, [r9]
  init_display();
 80048ea:	f000 f8d9 	bl	8004aa0 <init_display>
    display_menu(!HAL_GPIO_ReadPin(GPIOD, ENCODER_BUTTON_Pin));
 80048ee:	4c0b      	ldr	r4, [pc, #44]	; (800491c <main+0x298>)
    MX_USB_HOST_Process();
 80048f0:	f001 f8b6 	bl	8005a60 <MX_USB_HOST_Process>
    display_menu(!HAL_GPIO_ReadPin(GPIOD, ENCODER_BUTTON_Pin));
 80048f4:	2101      	movs	r1, #1
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7fc fabe 	bl	8000e78 <HAL_GPIO_ReadPin>
 80048fc:	fab0 f080 	clz	r0, r0
 8004900:	0940      	lsrs	r0, r0, #5
 8004902:	f000 fe59 	bl	80055b8 <display_menu>
    HAL_Delay(40);
 8004906:	2028      	movs	r0, #40	; 0x28
 8004908:	f7fb fe92 	bl	8000630 <HAL_Delay>
 800490c:	e7f0      	b.n	80048f0 <main+0x26c>
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800
 8004914:	40021000 	.word	0x40021000
 8004918:	40020800 	.word	0x40020800
 800491c:	40020c00 	.word	0x40020c00
 8004920:	40020000 	.word	0x40020000
 8004924:	20000114 	.word	0x20000114
 8004928:	40005400 	.word	0x40005400
 800492c:	000186a0 	.word	0x000186a0
 8004930:	200002bc 	.word	0x200002bc
 8004934:	40003800 	.word	0x40003800
 8004938:	20000304 	.word	0x20000304
 800493c:	40003c00 	.word	0x40003c00
 8004940:	20000220 	.word	0x20000220
 8004944:	40013000 	.word	0x40013000
 8004948:	200001c8 	.word	0x200001c8
 800494c:	40013400 	.word	0x40013400
 8004950:	20000278 	.word	0x20000278
 8004954:	10120000 	.word	0x10120000
 8004958:	00017700 	.word	0x00017700

0800495c <Error_Handler>:
 800495c:	4770      	bx	lr
	...

08004960 <set_menu_ex>:
//	ILI9341_WriteString(0, 0, disp_str, Font_16x26, ILI9341_RED, ILI9341_WHITE);
//	HAL_Delay(500);
}

void set_menu_ex(void){
	systemState = Exit;
 8004960:	4b01      	ldr	r3, [pc, #4]	; (8004968 <set_menu_ex+0x8>)
 8004962:	2213      	movs	r2, #19
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	4770      	bx	lr
 8004968:	2000003c 	.word	0x2000003c

0800496c <set_menu0>:
}
void set_menu0(void){
	systemState = EditM1;
 800496c:	4b01      	ldr	r3, [pc, #4]	; (8004974 <set_menu0+0x8>)
 800496e:	2203      	movs	r2, #3
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	4770      	bx	lr
 8004974:	2000003c 	.word	0x2000003c

08004978 <set_menu1>:
}
void set_menu1(void){
	systemState = EditM2;
 8004978:	4b01      	ldr	r3, [pc, #4]	; (8004980 <set_menu1+0x8>)
 800497a:	2204      	movs	r2, #4
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	4770      	bx	lr
 8004980:	2000003c 	.word	0x2000003c

08004984 <set_menu2>:
}
void set_menu2(void){
	systemState = EditM3;
 8004984:	4b01      	ldr	r3, [pc, #4]	; (800498c <set_menu2+0x8>)
 8004986:	2205      	movs	r2, #5
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	4770      	bx	lr
 800498c:	2000003c 	.word	0x2000003c

08004990 <set_menu3>:
}
void set_menu3(void){
	systemState = EditM4;
 8004990:	4b01      	ldr	r3, [pc, #4]	; (8004998 <set_menu3+0x8>)
 8004992:	2206      	movs	r2, #6
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	4770      	bx	lr
 8004998:	2000003c 	.word	0x2000003c

0800499c <set_menu4>:
}
void set_menu4(void){
	systemState = EditM5;
 800499c:	4b01      	ldr	r3, [pc, #4]	; (80049a4 <set_menu4+0x8>)
 800499e:	2207      	movs	r2, #7
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	4770      	bx	lr
 80049a4:	2000003c 	.word	0x2000003c

080049a8 <set_menu5>:
}
void set_menu5(void){
	systemState = EditM6;
 80049a8:	4b01      	ldr	r3, [pc, #4]	; (80049b0 <set_menu5+0x8>)
 80049aa:	2208      	movs	r2, #8
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	4770      	bx	lr
 80049b0:	2000003c 	.word	0x2000003c

080049b4 <set_menu6>:
}
void set_menu6(void){
	systemState = EditM7;
 80049b4:	4b01      	ldr	r3, [pc, #4]	; (80049bc <set_menu6+0x8>)
 80049b6:	2209      	movs	r2, #9
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	4770      	bx	lr
 80049bc:	2000003c 	.word	0x2000003c

080049c0 <set_menu7>:
}
void set_menu7(void){
	systemState = EditM8;
 80049c0:	4b01      	ldr	r3, [pc, #4]	; (80049c8 <set_menu7+0x8>)
 80049c2:	220a      	movs	r2, #10
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	4770      	bx	lr
 80049c8:	2000003c 	.word	0x2000003c

080049cc <set_menu8>:
}
void set_menu8(void){
	systemState = EditM9;
 80049cc:	4b01      	ldr	r3, [pc, #4]	; (80049d4 <set_menu8+0x8>)
 80049ce:	220b      	movs	r2, #11
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	4770      	bx	lr
 80049d4:	2000003c 	.word	0x2000003c

080049d8 <set_menu9>:
}
void set_menu9(void){
	systemState = EditM10;
 80049d8:	4b01      	ldr	r3, [pc, #4]	; (80049e0 <set_menu9+0x8>)
 80049da:	220c      	movs	r2, #12
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	4770      	bx	lr
 80049e0:	2000003c 	.word	0x2000003c

080049e4 <set_menu10>:
}
void set_menu10(void){
	systemState = EditM11;
 80049e4:	4b01      	ldr	r3, [pc, #4]	; (80049ec <set_menu10+0x8>)
 80049e6:	220d      	movs	r2, #13
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	4770      	bx	lr
 80049ec:	2000003c 	.word	0x2000003c

080049f0 <set_menu11>:
}
void set_menu11(void){
	systemState = EditM12;
 80049f0:	4b01      	ldr	r3, [pc, #4]	; (80049f8 <set_menu11+0x8>)
 80049f2:	220e      	movs	r2, #14
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	4770      	bx	lr
 80049f8:	2000003c 	.word	0x2000003c

080049fc <set_menu12>:
}
void set_menu12(void){
	systemState = EditM13;
 80049fc:	4b01      	ldr	r3, [pc, #4]	; (8004a04 <set_menu12+0x8>)
 80049fe:	220f      	movs	r2, #15
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	4770      	bx	lr
 8004a04:	2000003c 	.word	0x2000003c

08004a08 <set_menu13>:
}
void set_menu13(void){
	systemState = EditM14;
 8004a08:	4b01      	ldr	r3, [pc, #4]	; (8004a10 <set_menu13+0x8>)
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	4770      	bx	lr
 8004a10:	2000003c 	.word	0x2000003c

08004a14 <set_menu14>:
}
void set_menu14(void){
	systemState = EditM15;
 8004a14:	4b01      	ldr	r3, [pc, #4]	; (8004a1c <set_menu14+0x8>)
 8004a16:	2211      	movs	r2, #17
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	4770      	bx	lr
 8004a1c:	2000003c 	.word	0x2000003c

08004a20 <set_menu15>:
}
void set_menu15(void){
	systemState = EditM16;
 8004a20:	4b01      	ldr	r3, [pc, #4]	; (8004a28 <set_menu15+0x8>)
 8004a22:	2212      	movs	r2, #18
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	4770      	bx	lr
 8004a28:	2000003c 	.word	0x2000003c

08004a2c <flash_write>:
void flash_write(menu_item * menus[]){
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4604      	mov	r4, r0
    HAL_FLASH_Unlock();
 8004a30:	f7fc f898 	bl	8000b64 <HAL_FLASH_Unlock>
    FLASH_Erase_Sector(FLASH_SECTOR_4, VOLTAGE_RANGE_3);
 8004a34:	2102      	movs	r1, #2
 8004a36:	2004      	movs	r0, #4
 8004a38:	f7fc f922 	bl	8000c80 <FLASH_Erase_Sector>
 8004a3c:	f104 0508 	add.w	r5, r4, #8
		while(menus[i]->next){
 8004a40:	6821      	ldr	r1, [r4, #0]
 8004a42:	690b      	ldr	r3, [r1, #16]
 8004a44:	b933      	cbnz	r3, 8004a54 <flash_write+0x28>
 8004a46:	3404      	adds	r4, #4
    for (int i = 0; i < 2; i++){
 8004a48:	42a5      	cmp	r5, r4
 8004a4a:	d1f9      	bne.n	8004a40 <flash_write+0x14>
}
 8004a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_FLASH_Lock();
 8004a50:	f7fc b89a 	b.w	8000b88 <HAL_FLASH_Lock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, menus[i]->address, menus[i]->value);
 8004a54:	69ca      	ldr	r2, [r1, #28]
 8004a56:	6989      	ldr	r1, [r1, #24]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2002      	movs	r0, #2
 8004a5c:	f7fc f8c8 	bl	8000bf0 <HAL_FLASH_Program>
			menus[i] = menus[i]->next;
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	e7eb      	b.n	8004a40 <flash_write+0x14>

08004a68 <ILI_Init>:
	ILI9341_Init();
 8004a68:	f7ff ba8e 	b.w	8003f88 <ILI9341_Init>

08004a6c <count_menuitem>:
}

void count_menuitem(menu_item * menu_to_count){
	nr_menuitem = 0;
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <count_menuitem+0x2c>)
 8004a6e:	2300      	movs	r3, #0
void count_menuitem(menu_item * menu_to_count){
 8004a70:	b510      	push	{r4, lr}
	while(menu_to_count->next){
 8004a72:	4619      	mov	r1, r3
	nr_menuitem = 0;
 8004a74:	6013      	str	r3, [r2, #0]
	while(menu_to_count->next){
 8004a76:	6900      	ldr	r0, [r0, #16]
 8004a78:	1c5c      	adds	r4, r3, #1
 8004a7a:	b948      	cbnz	r0, 8004a90 <count_menuitem+0x24>
 8004a7c:	b101      	cbz	r1, 8004a80 <count_menuitem+0x14>
 8004a7e:	6013      	str	r3, [r2, #0]
		menu_to_count = menu_to_count->next;
		nr_menuitem++;
	}
	nr_menuitem++;
 8004a80:	6813      	ldr	r3, [r2, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SetCounter(&htim2, 0);
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <count_menuitem+0x30>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004a8e:	bd10      	pop	{r4, pc}
 8004a90:	4623      	mov	r3, r4
 8004a92:	2101      	movs	r1, #1
 8004a94:	e7ef      	b.n	8004a76 <count_menuitem+0xa>
 8004a96:	bf00      	nop
 8004a98:	200003a4 	.word	0x200003a4
 8004a9c:	20000278 	.word	0x20000278

08004aa0 <init_display>:
}

void init_display(void){
 8004aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ILI9341_FillScreen(ILI9341_BLACK);
 8004aa4:	2000      	movs	r0, #0
void init_display(void){
 8004aa6:	b08f      	sub	sp, #60	; 0x3c
	ILI9341_FillScreen(ILI9341_BLACK);
 8004aa8:	f7ff fcc6 	bl	8004438 <ILI9341_FillScreen>

	menu_00 = (menu_item * )malloc(sizeof(menu_item));
 8004aac:	2024      	movs	r0, #36	; 0x24
 8004aae:	f001 f95f 	bl	8005d70 <malloc>
 8004ab2:	4bae      	ldr	r3, [pc, #696]	; (8004d6c <init_display+0x2cc>)
	menu_14 = (menu_item * )malloc(sizeof(menu_item));
	menu_15 = (menu_item * )malloc(sizeof(menu_item));

	menu_00_ex = (menu_item * )malloc(sizeof(menu_item));
	menu_01_ex = (menu_item * )malloc(sizeof(menu_item));
	menu_ex = (menu_item * )malloc(sizeof(menu_item));
 8004ab4:	4cae      	ldr	r4, [pc, #696]	; (8004d70 <init_display+0x2d0>)
	menu_00 = (menu_item * )malloc(sizeof(menu_item));
 8004ab6:	6018      	str	r0, [r3, #0]
 8004ab8:	4606      	mov	r6, r0
	menu_01 = (menu_item * )malloc(sizeof(menu_item));
 8004aba:	2024      	movs	r0, #36	; 0x24
 8004abc:	f001 f958 	bl	8005d70 <malloc>
 8004ac0:	4bac      	ldr	r3, [pc, #688]	; (8004d74 <init_display+0x2d4>)
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	6018      	str	r0, [r3, #0]
	menu_0 = (menu_item * )malloc(sizeof(menu_item));
 8004ac6:	2024      	movs	r0, #36	; 0x24
 8004ac8:	f001 f952 	bl	8005d70 <malloc>
 8004acc:	4baa      	ldr	r3, [pc, #680]	; (8004d78 <init_display+0x2d8>)
 8004ace:	900d      	str	r0, [sp, #52]	; 0x34
 8004ad0:	6018      	str	r0, [r3, #0]
	menu_1 = (menu_item * )malloc(sizeof(menu_item));
 8004ad2:	2024      	movs	r0, #36	; 0x24
 8004ad4:	f001 f94c 	bl	8005d70 <malloc>
 8004ad8:	49a8      	ldr	r1, [pc, #672]	; (8004d7c <init_display+0x2dc>)
 8004ada:	900c      	str	r0, [sp, #48]	; 0x30
 8004adc:	6008      	str	r0, [r1, #0]
	menu_2 = (menu_item * )malloc(sizeof(menu_item));
 8004ade:	2024      	movs	r0, #36	; 0x24
 8004ae0:	f001 f946 	bl	8005d70 <malloc>
 8004ae4:	49a6      	ldr	r1, [pc, #664]	; (8004d80 <init_display+0x2e0>)
 8004ae6:	4683      	mov	fp, r0
 8004ae8:	6008      	str	r0, [r1, #0]
	menu_3 = (menu_item * )malloc(sizeof(menu_item));
 8004aea:	2024      	movs	r0, #36	; 0x24
 8004aec:	f001 f940 	bl	8005d70 <malloc>
 8004af0:	49a4      	ldr	r1, [pc, #656]	; (8004d84 <init_display+0x2e4>)
 8004af2:	4682      	mov	sl, r0
 8004af4:	6008      	str	r0, [r1, #0]
	menu_4 = (menu_item * )malloc(sizeof(menu_item));
 8004af6:	2024      	movs	r0, #36	; 0x24
 8004af8:	f001 f93a 	bl	8005d70 <malloc>
 8004afc:	49a2      	ldr	r1, [pc, #648]	; (8004d88 <init_display+0x2e8>)
 8004afe:	4681      	mov	r9, r0
 8004b00:	6008      	str	r0, [r1, #0]
	menu_5 = (menu_item * )malloc(sizeof(menu_item));
 8004b02:	2024      	movs	r0, #36	; 0x24
 8004b04:	f001 f934 	bl	8005d70 <malloc>
 8004b08:	49a0      	ldr	r1, [pc, #640]	; (8004d8c <init_display+0x2ec>)
 8004b0a:	4680      	mov	r8, r0
 8004b0c:	6008      	str	r0, [r1, #0]
	menu_6 = (menu_item * )malloc(sizeof(menu_item));
 8004b0e:	2024      	movs	r0, #36	; 0x24
 8004b10:	f001 f92e 	bl	8005d70 <malloc>
 8004b14:	499e      	ldr	r1, [pc, #632]	; (8004d90 <init_display+0x2f0>)
 8004b16:	4607      	mov	r7, r0
 8004b18:	6008      	str	r0, [r1, #0]
	menu_7 = (menu_item * )malloc(sizeof(menu_item));
 8004b1a:	2024      	movs	r0, #36	; 0x24
 8004b1c:	f001 f928 	bl	8005d70 <malloc>
 8004b20:	499c      	ldr	r1, [pc, #624]	; (8004d94 <init_display+0x2f4>)
 8004b22:	9001      	str	r0, [sp, #4]
 8004b24:	6008      	str	r0, [r1, #0]
	menu_8 = (menu_item * )malloc(sizeof(menu_item));
 8004b26:	2024      	movs	r0, #36	; 0x24
 8004b28:	f001 f922 	bl	8005d70 <malloc>
 8004b2c:	499a      	ldr	r1, [pc, #616]	; (8004d98 <init_display+0x2f8>)
 8004b2e:	9002      	str	r0, [sp, #8]
 8004b30:	6008      	str	r0, [r1, #0]
	menu_9 = (menu_item * )malloc(sizeof(menu_item));
 8004b32:	2024      	movs	r0, #36	; 0x24
 8004b34:	f001 f91c 	bl	8005d70 <malloc>
 8004b38:	4998      	ldr	r1, [pc, #608]	; (8004d9c <init_display+0x2fc>)
 8004b3a:	9003      	str	r0, [sp, #12]
 8004b3c:	6008      	str	r0, [r1, #0]
	menu_10 = (menu_item * )malloc(sizeof(menu_item));
 8004b3e:	2024      	movs	r0, #36	; 0x24
 8004b40:	f001 f916 	bl	8005d70 <malloc>
 8004b44:	4996      	ldr	r1, [pc, #600]	; (8004da0 <init_display+0x300>)
 8004b46:	9004      	str	r0, [sp, #16]
 8004b48:	6008      	str	r0, [r1, #0]
	menu_11 = (menu_item * )malloc(sizeof(menu_item));
 8004b4a:	2024      	movs	r0, #36	; 0x24
 8004b4c:	f001 f910 	bl	8005d70 <malloc>
 8004b50:	4994      	ldr	r1, [pc, #592]	; (8004da4 <init_display+0x304>)
 8004b52:	9005      	str	r0, [sp, #20]
 8004b54:	6008      	str	r0, [r1, #0]
	menu_12 = (menu_item * )malloc(sizeof(menu_item));
 8004b56:	2024      	movs	r0, #36	; 0x24
 8004b58:	f001 f90a 	bl	8005d70 <malloc>
 8004b5c:	4992      	ldr	r1, [pc, #584]	; (8004da8 <init_display+0x308>)
 8004b5e:	9006      	str	r0, [sp, #24]
 8004b60:	6008      	str	r0, [r1, #0]
	menu_13 = (menu_item * )malloc(sizeof(menu_item));
 8004b62:	2024      	movs	r0, #36	; 0x24
 8004b64:	f001 f904 	bl	8005d70 <malloc>
 8004b68:	4990      	ldr	r1, [pc, #576]	; (8004dac <init_display+0x30c>)
 8004b6a:	9007      	str	r0, [sp, #28]
 8004b6c:	6008      	str	r0, [r1, #0]
	menu_14 = (menu_item * )malloc(sizeof(menu_item));
 8004b6e:	2024      	movs	r0, #36	; 0x24
 8004b70:	f001 f8fe 	bl	8005d70 <malloc>
 8004b74:	498e      	ldr	r1, [pc, #568]	; (8004db0 <init_display+0x310>)
 8004b76:	9008      	str	r0, [sp, #32]
 8004b78:	6008      	str	r0, [r1, #0]
	menu_15 = (menu_item * )malloc(sizeof(menu_item));
 8004b7a:	2024      	movs	r0, #36	; 0x24
 8004b7c:	f001 f8f8 	bl	8005d70 <malloc>
 8004b80:	498c      	ldr	r1, [pc, #560]	; (8004db4 <init_display+0x314>)
 8004b82:	9009      	str	r0, [sp, #36]	; 0x24
 8004b84:	6008      	str	r0, [r1, #0]
	menu_00_ex = (menu_item * )malloc(sizeof(menu_item));
 8004b86:	2024      	movs	r0, #36	; 0x24
 8004b88:	f001 f8f2 	bl	8005d70 <malloc>
 8004b8c:	4601      	mov	r1, r0
 8004b8e:	488a      	ldr	r0, [pc, #552]	; (8004db8 <init_display+0x318>)
 8004b90:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b92:	6001      	str	r1, [r0, #0]
	menu_01_ex = (menu_item * )malloc(sizeof(menu_item));
 8004b94:	2024      	movs	r0, #36	; 0x24
 8004b96:	f001 f8eb 	bl	8005d70 <malloc>
 8004b9a:	900a      	str	r0, [sp, #40]	; 0x28
 8004b9c:	4887      	ldr	r0, [pc, #540]	; (8004dbc <init_display+0x31c>)
 8004b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba0:	6003      	str	r3, [r0, #0]
	menu_ex = (menu_item * )malloc(sizeof(menu_item));
 8004ba2:	2024      	movs	r0, #36	; 0x24
 8004ba4:	f001 f8e4 	bl	8005d70 <malloc>
	menu->label = label;
 8004ba8:	f8df e27c 	ldr.w	lr, [pc, #636]	; 8004e28 <init_display+0x388>
	menu_ex = (menu_item * )malloc(sizeof(menu_item));
 8004bac:	6020      	str	r0, [r4, #0]
	menu->label = label;
 8004bae:	f8c5 e000 	str.w	lr, [r5]
 8004bb2:	4c83      	ldr	r4, [pc, #524]	; (8004dc0 <init_display+0x320>)
 8004bb4:	f8df e274 	ldr.w	lr, [pc, #628]	; 8004e2c <init_display+0x38c>
 8004bb8:	6034      	str	r4, [r6, #0]
 8004bba:	f8c0 e000 	str.w	lr, [r0]
	menu->parent = parent;
 8004bbe:	2400      	movs	r4, #0
	menu->Callback = function;
 8004bc0:	f8df e26c 	ldr.w	lr, [pc, #620]	; 8004e30 <init_display+0x390>
	menu->child = child;
 8004bc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	menu->next = next;
 8004bc6:	6128      	str	r0, [r5, #16]
	menu->parent = parent;
 8004bc8:	6044      	str	r4, [r0, #4]
	menu->child = child;
 8004bca:	6084      	str	r4, [r0, #8]
	menu->previous = previous;
 8004bcc:	60c5      	str	r5, [r0, #12]
	menu->next = next;
 8004bce:	6104      	str	r4, [r0, #16]
	menu->address = address;
 8004bd0:	6184      	str	r4, [r0, #24]
	menu->Callback = function;
 8004bd2:	f8c0 e014 	str.w	lr, [r0, #20]
	menu->type = type;
 8004bd6:	f880 4020 	strb.w	r4, [r0, #32]
	menu->label = label;
 8004bda:	487a      	ldr	r0, [pc, #488]	; (8004dc4 <init_display+0x324>)
	menu->next = next;
 8004bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	menu->child = child;
 8004bde:	60b2      	str	r2, [r6, #8]
	menu->parent = parent;
 8004be0:	e882 0041 	stmia.w	r2, {r0, r6}
	menu->address = address;
 8004be4:	4878      	ldr	r0, [pc, #480]	; (8004dc8 <init_display+0x328>)
	menu->child = child;
 8004be6:	6094      	str	r4, [r2, #8]
	menu->previous = previous;
 8004be8:	60d4      	str	r4, [r2, #12]
	menu->next = next;
 8004bea:	6113      	str	r3, [r2, #16]
	menu->parent = parent;
 8004bec:	6074      	str	r4, [r6, #4]
	menu->previous = previous;
 8004bee:	60f4      	str	r4, [r6, #12]
	menu->next = next;
 8004bf0:	6135      	str	r5, [r6, #16]
	menu->address = address;
 8004bf2:	61b4      	str	r4, [r6, #24]
	menu->Callback = function;
 8004bf4:	6174      	str	r4, [r6, #20]
	menu->type = type;
 8004bf6:	f886 4020 	strb.w	r4, [r6, #32]
	menu->parent = parent;
 8004bfa:	606c      	str	r4, [r5, #4]
	menu->child = child;
 8004bfc:	60af      	str	r7, [r5, #8]
	menu->previous = previous;
 8004bfe:	60ee      	str	r6, [r5, #12]
	menu->address = address;
 8004c00:	61ac      	str	r4, [r5, #24]
	menu->Callback = function;
 8004c02:	616c      	str	r4, [r5, #20]
	menu->type = type;
 8004c04:	f885 4020 	strb.w	r4, [r5, #32]
	menu->address = address;
 8004c08:	6190      	str	r0, [r2, #24]
  return (*(__IO uint32_t *)address);
 8004c0a:	6800      	ldr	r0, [r0, #0]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004c0c:	61d0      	str	r0, [r2, #28]
	menu->Callback = function;
 8004c0e:	f8df e224 	ldr.w	lr, [pc, #548]	; 8004e34 <init_display+0x394>
 8004c12:	f8c2 e014 	str.w	lr, [r2, #20]
	menu->type = type;
 8004c16:	2001      	movs	r0, #1
 8004c18:	f882 0020 	strb.w	r0, [r2, #32]
	menu->previous = previous;
 8004c1c:	60da      	str	r2, [r3, #12]
	menu->address = address;
 8004c1e:	4a6b      	ldr	r2, [pc, #428]	; (8004dcc <init_display+0x32c>)
 8004c20:	619a      	str	r2, [r3, #24]
	menu->label = label;
 8004c22:	f8df e214 	ldr.w	lr, [pc, #532]	; 8004e38 <init_display+0x398>
  return (*(__IO uint32_t *)address);
 8004c26:	6812      	ldr	r2, [r2, #0]
	menu->label = label;
 8004c28:	f8c3 e000 	str.w	lr, [r3]
	menu->Callback = function;
 8004c2c:	f8df e20c 	ldr.w	lr, [pc, #524]	; 8004e3c <init_display+0x39c>
	menu->parent = parent;
 8004c30:	605e      	str	r6, [r3, #4]
	menu->child = child;
 8004c32:	609c      	str	r4, [r3, #8]
	menu->next = next;
 8004c34:	f8c3 b010 	str.w	fp, [r3, #16]
	menu->Callback = function;
 8004c38:	f8c3 e014 	str.w	lr, [r3, #20]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004c3c:	61da      	str	r2, [r3, #28]
	menu->type = type;
 8004c3e:	f883 0020 	strb.w	r0, [r3, #32]
	menu->previous = previous;
 8004c42:	f8cb 300c 	str.w	r3, [fp, #12]
	menu->address = address;
 8004c46:	4b62      	ldr	r3, [pc, #392]	; (8004dd0 <init_display+0x330>)
 8004c48:	f8cb 3018 	str.w	r3, [fp, #24]
  return (*(__IO uint32_t *)address);
 8004c4c:	681b      	ldr	r3, [r3, #0]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004c4e:	f8cb 301c 	str.w	r3, [fp, #28]
	menu->label = label;
 8004c52:	4b60      	ldr	r3, [pc, #384]	; (8004dd4 <init_display+0x334>)
 8004c54:	4a60      	ldr	r2, [pc, #384]	; (8004dd8 <init_display+0x338>)
	menu->type = type;
 8004c56:	f88b 0020 	strb.w	r0, [fp, #32]
	menu->parent = parent;
 8004c5a:	e88a 0048 	stmia.w	sl, {r3, r6}
	menu->address = address;
 8004c5e:	4b5f      	ldr	r3, [pc, #380]	; (8004ddc <init_display+0x33c>)
 8004c60:	f8ca 3018 	str.w	r3, [sl, #24]
	menu->parent = parent;
 8004c64:	e88b 0044 	stmia.w	fp, {r2, r6}
	menu->Callback = function;
 8004c68:	4a5d      	ldr	r2, [pc, #372]	; (8004de0 <init_display+0x340>)
 8004c6a:	f8cb 2014 	str.w	r2, [fp, #20]
  return (*(__IO uint32_t *)address);
 8004c6e:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004c70:	4a5c      	ldr	r2, [pc, #368]	; (8004de4 <init_display+0x344>)
 8004c72:	f8ca 2014 	str.w	r2, [sl, #20]
	menu->child = child;
 8004c76:	f8cb 4008 	str.w	r4, [fp, #8]
	menu->next = next;
 8004c7a:	f8cb a010 	str.w	sl, [fp, #16]
	menu->child = child;
 8004c7e:	f8ca 4008 	str.w	r4, [sl, #8]
	menu->previous = previous;
 8004c82:	f8ca b00c 	str.w	fp, [sl, #12]
	menu->next = next;
 8004c86:	f8ca 9010 	str.w	r9, [sl, #16]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004c8a:	f8ca 301c 	str.w	r3, [sl, #28]
	menu->label = label;
 8004c8e:	4b56      	ldr	r3, [pc, #344]	; (8004de8 <init_display+0x348>)
	menu->next = next;
 8004c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
	menu->Callback = function;
 8004c92:	4a56      	ldr	r2, [pc, #344]	; (8004dec <init_display+0x34c>)
	menu->label = label;
 8004c94:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8004e40 <init_display+0x3a0>
	menu->Callback = function;
 8004c98:	f8c9 2014 	str.w	r2, [r9, #20]
	menu->parent = parent;
 8004c9c:	e889 0048 	stmia.w	r9, {r3, r6}
	menu->address = address;
 8004ca0:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <init_display+0x350>)
 8004ca2:	f8c9 3018 	str.w	r3, [r9, #24]
  return (*(__IO uint32_t *)address);
 8004ca6:	681b      	ldr	r3, [r3, #0]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004ca8:	f8c9 301c 	str.w	r3, [r9, #28]
	menu->label = label;
 8004cac:	4b51      	ldr	r3, [pc, #324]	; (8004df4 <init_display+0x354>)
	menu->Callback = function;
 8004cae:	4a52      	ldr	r2, [pc, #328]	; (8004df8 <init_display+0x358>)
	menu->type = type;
 8004cb0:	f88a 0020 	strb.w	r0, [sl, #32]
	menu->parent = parent;
 8004cb4:	e888 0048 	stmia.w	r8, {r3, r6}
	menu->address = address;
 8004cb8:	4b50      	ldr	r3, [pc, #320]	; (8004dfc <init_display+0x35c>)
 8004cba:	f8c8 3018 	str.w	r3, [r8, #24]
  return (*(__IO uint32_t *)address);
 8004cbe:	681b      	ldr	r3, [r3, #0]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004cc0:	f8c8 301c 	str.w	r3, [r8, #28]
	menu->label = label;
 8004cc4:	4b4e      	ldr	r3, [pc, #312]	; (8004e00 <init_display+0x360>)
 8004cc6:	f8c1 c000 	str.w	ip, [r1]
	menu->type = type;
 8004cca:	f04f 0e03 	mov.w	lr, #3
 8004cce:	f881 e020 	strb.w	lr, [r1, #32]
 8004cd2:	f889 0020 	strb.w	r0, [r9, #32]
	menu->next = next;
 8004cd6:	f8c8 1010 	str.w	r1, [r8, #16]
	menu->Callback = function;
 8004cda:	f8c8 2014 	str.w	r2, [r8, #20]
	menu->type = type;
 8004cde:	f888 0020 	strb.w	r0, [r8, #32]
	menu->parent = parent;
 8004ce2:	604e      	str	r6, [r1, #4]
	menu->child = child;
 8004ce4:	608c      	str	r4, [r1, #8]
	menu->previous = previous;
 8004ce6:	f8c1 800c 	str.w	r8, [r1, #12]
	menu->next = next;
 8004cea:	610c      	str	r4, [r1, #16]
	menu->address = address;
 8004cec:	618c      	str	r4, [r1, #24]
	menu->Callback = function;
 8004cee:	614c      	str	r4, [r1, #20]
	menu->parent = parent;
 8004cf0:	e887 0028 	stmia.w	r7, {r3, r5}
	menu->child = child;
 8004cf4:	f8c9 4008 	str.w	r4, [r9, #8]
	menu->previous = previous;
 8004cf8:	f8c9 a00c 	str.w	sl, [r9, #12]
	menu->next = next;
 8004cfc:	f8c9 8010 	str.w	r8, [r9, #16]
	menu->child = child;
 8004d00:	f8c8 4008 	str.w	r4, [r8, #8]
	menu->previous = previous;
 8004d04:	f8c8 900c 	str.w	r9, [r8, #12]
	menu->child = child;
 8004d08:	60bc      	str	r4, [r7, #8]
	menu->next = next;
 8004d0a:	9b01      	ldr	r3, [sp, #4]
 8004d0c:	613b      	str	r3, [r7, #16]
	menu->address = address;
 8004d0e:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <init_display+0x364>)
 8004d10:	61bb      	str	r3, [r7, #24]
	menu->Callback = function;
 8004d12:	4a3d      	ldr	r2, [pc, #244]	; (8004e08 <init_display+0x368>)
  return (*(__IO uint32_t *)address);
 8004d14:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004d16:	617a      	str	r2, [r7, #20]
	menu->label = label;
 8004d18:	9a01      	ldr	r2, [sp, #4]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004d1a:	61fb      	str	r3, [r7, #28]
	menu->label = label;
 8004d1c:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <init_display+0x36c>)
 8004d1e:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004d20:	9b02      	ldr	r3, [sp, #8]
 8004d22:	6113      	str	r3, [r2, #16]
	menu->Callback = function;
 8004d24:	9901      	ldr	r1, [sp, #4]
	menu->address = address;
 8004d26:	4b3a      	ldr	r3, [pc, #232]	; (8004e10 <init_display+0x370>)
 8004d28:	6193      	str	r3, [r2, #24]
	menu->parent = parent;
 8004d2a:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004d2c:	6094      	str	r4, [r2, #8]
	menu->previous = previous;
 8004d2e:	60d7      	str	r7, [r2, #12]
	menu->Callback = function;
 8004d30:	4a38      	ldr	r2, [pc, #224]	; (8004e14 <init_display+0x374>)
  return (*(__IO uint32_t *)address);
 8004d32:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004d34:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004d36:	9a02      	ldr	r2, [sp, #8]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004d38:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004d3a:	4b37      	ldr	r3, [pc, #220]	; (8004e18 <init_display+0x378>)
 8004d3c:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	6113      	str	r3, [r2, #16]
	menu->address = address;
 8004d42:	4b36      	ldr	r3, [pc, #216]	; (8004e1c <init_display+0x37c>)
	menu->previous = previous;
 8004d44:	60d1      	str	r1, [r2, #12]
	menu->address = address;
 8004d46:	6193      	str	r3, [r2, #24]
	menu->type = type;
 8004d48:	f881 0020 	strb.w	r0, [r1, #32]
	menu->Callback = function;
 8004d4c:	9902      	ldr	r1, [sp, #8]
	menu->parent = parent;
 8004d4e:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004d50:	6094      	str	r4, [r2, #8]
  return (*(__IO uint32_t *)address);
 8004d52:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004d54:	4a32      	ldr	r2, [pc, #200]	; (8004e20 <init_display+0x380>)
	menu->type = type;
 8004d56:	f887 0020 	strb.w	r0, [r7, #32]
	menu->Callback = function;
 8004d5a:	614a      	str	r2, [r1, #20]
	menu->previous = previous;
 8004d5c:	60fc      	str	r4, [r7, #12]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004d5e:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004d60:	9a03      	ldr	r2, [sp, #12]
 8004d62:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <init_display+0x384>)
 8004d64:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004d66:	9b04      	ldr	r3, [sp, #16]
	menu->previous = previous;
 8004d68:	60d1      	str	r1, [r2, #12]
 8004d6a:	e06b      	b.n	8004e44 <init_display+0x3a4>
 8004d6c:	200003c8 	.word	0x200003c8
 8004d70:	20000358 	.word	0x20000358
 8004d74:	20000390 	.word	0x20000390
 8004d78:	2000039c 	.word	0x2000039c
 8004d7c:	200003d8 	.word	0x200003d8
 8004d80:	2000038c 	.word	0x2000038c
 8004d84:	200003b8 	.word	0x200003b8
 8004d88:	20000360 	.word	0x20000360
 8004d8c:	20000398 	.word	0x20000398
 8004d90:	200003c4 	.word	0x200003c4
 8004d94:	20000364 	.word	0x20000364
 8004d98:	200003b0 	.word	0x200003b0
 8004d9c:	20000354 	.word	0x20000354
 8004da0:	20000350 	.word	0x20000350
 8004da4:	200003d0 	.word	0x200003d0
 8004da8:	2000035c 	.word	0x2000035c
 8004dac:	200003ac 	.word	0x200003ac
 8004db0:	200003d4 	.word	0x200003d4
 8004db4:	200003c0 	.word	0x200003c0
 8004db8:	20000368 	.word	0x20000368
 8004dbc:	200003cc 	.word	0x200003cc
 8004dc0:	08008850 	.word	0x08008850
 8004dc4:	0800886b 	.word	0x0800886b
 8004dc8:	08010000 	.word	0x08010000
 8004dcc:	08010004 	.word	0x08010004
 8004dd0:	08010008 	.word	0x08010008
 8004dd4:	08008883 	.word	0x08008883
 8004dd8:	0800887b 	.word	0x0800887b
 8004ddc:	0801000c 	.word	0x0801000c
 8004de0:	08004985 	.word	0x08004985
 8004de4:	08004991 	.word	0x08004991
 8004de8:	0800888b 	.word	0x0800888b
 8004dec:	0800499d 	.word	0x0800499d
 8004df0:	08010010 	.word	0x08010010
 8004df4:	08008893 	.word	0x08008893
 8004df8:	080049a9 	.word	0x080049a9
 8004dfc:	08010014 	.word	0x08010014
 8004e00:	080088a3 	.word	0x080088a3
 8004e04:	08010018 	.word	0x08010018
 8004e08:	080049b5 	.word	0x080049b5
 8004e0c:	080088ab 	.word	0x080088ab
 8004e10:	0801001c 	.word	0x0801001c
 8004e14:	080049c1 	.word	0x080049c1
 8004e18:	080088b3 	.word	0x080088b3
 8004e1c:	08010020 	.word	0x08010020
 8004e20:	080049cd 	.word	0x080049cd
 8004e24:	080088bb 	.word	0x080088bb
 8004e28:	08008859 	.word	0x08008859
 8004e2c:	08008862 	.word	0x08008862
 8004e30:	08004961 	.word	0x08004961
 8004e34:	0800496d 	.word	0x0800496d
 8004e38:	08008873 	.word	0x08008873
 8004e3c:	08004979 	.word	0x08004979
 8004e40:	0800889b 	.word	0x0800889b
	menu->next = next;
 8004e44:	6113      	str	r3, [r2, #16]
	menu->type = type;
 8004e46:	f881 0020 	strb.w	r0, [r1, #32]
	menu->address = address;
 8004e4a:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <init_display+0x4b8>)
	menu->Callback = function;
 8004e4c:	9903      	ldr	r1, [sp, #12]
	menu->parent = parent;
 8004e4e:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004e50:	6094      	str	r4, [r2, #8]
	menu->address = address;
 8004e52:	6193      	str	r3, [r2, #24]
	menu->Callback = function;
 8004e54:	4a41      	ldr	r2, [pc, #260]	; (8004f5c <init_display+0x4bc>)
  return (*(__IO uint32_t *)address);
 8004e56:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004e58:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004e5a:	9a04      	ldr	r2, [sp, #16]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004e5c:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004e5e:	4b40      	ldr	r3, [pc, #256]	; (8004f60 <init_display+0x4c0>)
 8004e60:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004e62:	9b05      	ldr	r3, [sp, #20]
	menu->previous = previous;
 8004e64:	60d1      	str	r1, [r2, #12]
	menu->next = next;
 8004e66:	6113      	str	r3, [r2, #16]
	menu->type = type;
 8004e68:	f881 0020 	strb.w	r0, [r1, #32]
	menu->address = address;
 8004e6c:	4b3d      	ldr	r3, [pc, #244]	; (8004f64 <init_display+0x4c4>)
	menu->Callback = function;
 8004e6e:	9904      	ldr	r1, [sp, #16]
	menu->parent = parent;
 8004e70:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004e72:	6094      	str	r4, [r2, #8]
	menu->address = address;
 8004e74:	6193      	str	r3, [r2, #24]
	menu->Callback = function;
 8004e76:	4a3c      	ldr	r2, [pc, #240]	; (8004f68 <init_display+0x4c8>)
  return (*(__IO uint32_t *)address);
 8004e78:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004e7a:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004e7c:	9a05      	ldr	r2, [sp, #20]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004e7e:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004e80:	4b3a      	ldr	r3, [pc, #232]	; (8004f6c <init_display+0x4cc>)
	menu->type = type;
 8004e82:	f881 0020 	strb.w	r0, [r1, #32]
	menu->parent = parent;
 8004e86:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004e88:	6094      	str	r4, [r2, #8]
	menu->previous = previous;
 8004e8a:	60d1      	str	r1, [r2, #12]
	menu->label = label;
 8004e8c:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004e8e:	9b06      	ldr	r3, [sp, #24]
 8004e90:	6113      	str	r3, [r2, #16]
	menu->Callback = function;
 8004e92:	9905      	ldr	r1, [sp, #20]
	menu->address = address;
 8004e94:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <init_display+0x4d0>)
 8004e96:	6193      	str	r3, [r2, #24]
	menu->Callback = function;
 8004e98:	4a36      	ldr	r2, [pc, #216]	; (8004f74 <init_display+0x4d4>)
  return (*(__IO uint32_t *)address);
 8004e9a:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004e9c:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004e9e:	9a06      	ldr	r2, [sp, #24]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004ea0:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004ea2:	4b35      	ldr	r3, [pc, #212]	; (8004f78 <init_display+0x4d8>)
 8004ea4:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004ea6:	9b07      	ldr	r3, [sp, #28]
	menu->previous = previous;
 8004ea8:	60d1      	str	r1, [r2, #12]
	menu->next = next;
 8004eaa:	6113      	str	r3, [r2, #16]
	menu->type = type;
 8004eac:	f881 0020 	strb.w	r0, [r1, #32]
	menu->address = address;
 8004eb0:	4b32      	ldr	r3, [pc, #200]	; (8004f7c <init_display+0x4dc>)
	menu->Callback = function;
 8004eb2:	9906      	ldr	r1, [sp, #24]
	menu->address = address;
 8004eb4:	6193      	str	r3, [r2, #24]
	menu->parent = parent;
 8004eb6:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004eb8:	6094      	str	r4, [r2, #8]
	menu->Callback = function;
 8004eba:	4a31      	ldr	r2, [pc, #196]	; (8004f80 <init_display+0x4e0>)
  return (*(__IO uint32_t *)address);
 8004ebc:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004ebe:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004ec0:	9a07      	ldr	r2, [sp, #28]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004ec2:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004ec4:	4b2f      	ldr	r3, [pc, #188]	; (8004f84 <init_display+0x4e4>)
 8004ec6:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004ec8:	9b08      	ldr	r3, [sp, #32]
 8004eca:	6113      	str	r3, [r2, #16]
	menu->address = address;
 8004ecc:	4b2e      	ldr	r3, [pc, #184]	; (8004f88 <init_display+0x4e8>)
	menu->previous = previous;
 8004ece:	60d1      	str	r1, [r2, #12]
	menu->address = address;
 8004ed0:	6193      	str	r3, [r2, #24]
	menu->type = type;
 8004ed2:	f881 0020 	strb.w	r0, [r1, #32]
	menu->Callback = function;
 8004ed6:	9907      	ldr	r1, [sp, #28]
	menu->parent = parent;
 8004ed8:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004eda:	6094      	str	r4, [r2, #8]
  return (*(__IO uint32_t *)address);
 8004edc:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004ede:	4a2b      	ldr	r2, [pc, #172]	; (8004f8c <init_display+0x4ec>)
 8004ee0:	614a      	str	r2, [r1, #20]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004ee2:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004ee4:	9a08      	ldr	r2, [sp, #32]
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <init_display+0x4f0>)
 8004ee8:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
	menu->previous = previous;
 8004eec:	60d1      	str	r1, [r2, #12]
	menu->next = next;
 8004eee:	6113      	str	r3, [r2, #16]
	menu->type = type;
 8004ef0:	f881 0020 	strb.w	r0, [r1, #32]
	menu->address = address;
 8004ef4:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <init_display+0x4f4>)
	menu->Callback = function;
 8004ef6:	9908      	ldr	r1, [sp, #32]
	menu->address = address;
 8004ef8:	6193      	str	r3, [r2, #24]
	menu->parent = parent;
 8004efa:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004efc:	6094      	str	r4, [r2, #8]
	menu->Callback = function;
 8004efe:	4a26      	ldr	r2, [pc, #152]	; (8004f98 <init_display+0x4f8>)
  return (*(__IO uint32_t *)address);
 8004f00:	681b      	ldr	r3, [r3, #0]
	menu->Callback = function;
 8004f02:	614a      	str	r2, [r1, #20]
	menu->label = label;
 8004f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
	if (address > 0) menu->value = readFromEEPROM(address);
 8004f06:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004f08:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <init_display+0x4fc>)
 8004f0a:	6013      	str	r3, [r2, #0]
	menu->next = next;
 8004f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f0e:	6113      	str	r3, [r2, #16]
	menu->address = address;
 8004f10:	4b23      	ldr	r3, [pc, #140]	; (8004fa0 <init_display+0x500>)
	menu->previous = previous;
 8004f12:	60d1      	str	r1, [r2, #12]
	menu->address = address;
 8004f14:	6193      	str	r3, [r2, #24]
	menu->type = type;
 8004f16:	f881 0020 	strb.w	r0, [r1, #32]
	menu->Callback = function;
 8004f1a:	9909      	ldr	r1, [sp, #36]	; 0x24
  return (*(__IO uint32_t *)address);
 8004f1c:	681b      	ldr	r3, [r3, #0]
	menu->parent = parent;
 8004f1e:	6055      	str	r5, [r2, #4]
	menu->child = child;
 8004f20:	6094      	str	r4, [r2, #8]
	if (address > 0) menu->value = readFromEEPROM(address);
 8004f22:	61cb      	str	r3, [r1, #28]
	menu->label = label;
 8004f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	menu->Callback = function;
 8004f26:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <init_display+0x504>)
 8004f28:	614a      	str	r2, [r1, #20]
	menu->previous = previous;
 8004f2a:	461a      	mov	r2, r3
	menu->label = label;
 8004f2c:	f8c3 c000 	str.w	ip, [r3]
	menu->parent = parent;
 8004f30:	605d      	str	r5, [r3, #4]
	menu->child = child;
 8004f32:	609c      	str	r4, [r3, #8]
	create_menu(menu_13, "Menu 14", menu_01, NULL, menu_12, menu_14, 0x08010034, &set_menu13, numeric);
	create_menu(menu_14, "Menu 15", menu_01, NULL, menu_13, menu_15, 0x08010038, &set_menu14, numeric);
	create_menu(menu_15, "Menu 16", menu_01, NULL, menu_14, menu_01_ex, 0x0801003C, &set_menu15, numeric);
	create_menu(menu_01_ex, "Exit   ", menu_01, NULL, menu_15, NULL, 0, NULL, exit_menu);

	display_menu_head = menu_00;
 8004f34:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <init_display+0x508>)
	menu->type = type;
 8004f36:	f881 0020 	strb.w	r0, [r1, #32]
	menu->previous = previous;
 8004f3a:	60d1      	str	r1, [r2, #12]
	count_menuitem(display_menu_head);
 8004f3c:	4630      	mov	r0, r6
	menu->next = next;
 8004f3e:	6114      	str	r4, [r2, #16]
	menu->address = address;
 8004f40:	6194      	str	r4, [r2, #24]
	menu->Callback = function;
 8004f42:	6154      	str	r4, [r2, #20]
	menu->type = type;
 8004f44:	f882 e020 	strb.w	lr, [r2, #32]
	display_menu_head = menu_00;
 8004f48:	601e      	str	r6, [r3, #0]
	count_menuitem(display_menu_head);
 8004f4a:	f7ff fd8f 	bl	8004a6c <count_menuitem>
	parent_menu_encoder_state = 0;
 8004f4e:	4b17      	ldr	r3, [pc, #92]	; (8004fac <init_display+0x50c>)
 8004f50:	601c      	str	r4, [r3, #0]

}
 8004f52:	b00f      	add	sp, #60	; 0x3c
 8004f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f58:	08010024 	.word	0x08010024
 8004f5c:	080049d9 	.word	0x080049d9
 8004f60:	080088c3 	.word	0x080088c3
 8004f64:	08010028 	.word	0x08010028
 8004f68:	080049e5 	.word	0x080049e5
 8004f6c:	080088cb 	.word	0x080088cb
 8004f70:	0801002c 	.word	0x0801002c
 8004f74:	080049f1 	.word	0x080049f1
 8004f78:	080088d3 	.word	0x080088d3
 8004f7c:	08010030 	.word	0x08010030
 8004f80:	080049fd 	.word	0x080049fd
 8004f84:	080088db 	.word	0x080088db
 8004f88:	08010034 	.word	0x08010034
 8004f8c:	08004a09 	.word	0x08004a09
 8004f90:	080088e3 	.word	0x080088e3
 8004f94:	08010038 	.word	0x08010038
 8004f98:	08004a15 	.word	0x08004a15
 8004f9c:	080088eb 	.word	0x080088eb
 8004fa0:	0801003c 	.word	0x0801003c
 8004fa4:	08004a21 	.word	0x08004a21
 8004fa8:	200003a0 	.word	0x200003a0
 8004fac:	200003bc 	.word	0x200003bc

08004fb0 <edit_menu1>:

void edit_menu1(GPIO_PinState button_state, menu_item * actual_menu, uint16_t x, uint16_t y, uint16_t counter_pos){
 8004fb0:	b5f0      	push	{r4, r5, r6, r7, lr}

	if (systemState != previousSystemState){
 8004fb2:	4c29      	ldr	r4, [pc, #164]	; (8005058 <edit_menu1+0xa8>)
 8004fb4:	4e29      	ldr	r6, [pc, #164]	; (800505c <edit_menu1+0xac>)
 8004fb6:	7822      	ldrb	r2, [r4, #0]
 8004fb8:	7833      	ldrb	r3, [r6, #0]
 8004fba:	429a      	cmp	r2, r3
void edit_menu1(GPIO_PinState button_state, menu_item * actual_menu, uint16_t x, uint16_t y, uint16_t counter_pos){
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	4605      	mov	r5, r0
	if (systemState != previousSystemState){
 8004fc0:	d00b      	beq.n	8004fda <edit_menu1+0x2a>
		__HAL_TIM_SetCounter(&htim2, readFromEEPROM(set_actual_menu->address));
 8004fc2:	4a27      	ldr	r2, [pc, #156]	; (8005060 <edit_menu1+0xb0>)
 8004fc4:	4b27      	ldr	r3, [pc, #156]	; (8005064 <edit_menu1+0xb4>)
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
  return (*(__IO uint32_t *)address);
 8004fca:	6992      	ldr	r2, [r2, #24]
 8004fcc:	6812      	ldr	r2, [r2, #0]
		__HAL_TIM_SetCounter(&htim2, readFromEEPROM(set_actual_menu->address));
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24
		ILI9341_FillScreen(ILI9341_BLACK);
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f7ff fa31 	bl	8004438 <ILI9341_FillScreen>
		previousSystemState = systemState;
 8004fd6:	7823      	ldrb	r3, [r4, #0]
 8004fd8:	7033      	strb	r3, [r6, #0]
	}

	if ((button_state == 1) & (buttonDown == 0)){
 8004fda:	4f23      	ldr	r7, [pc, #140]	; (8005068 <edit_menu1+0xb8>)
 8004fdc:	4e23      	ldr	r6, [pc, #140]	; (800506c <edit_menu1+0xbc>)
 8004fde:	783a      	ldrb	r2, [r7, #0]
 8004fe0:	1e6b      	subs	r3, r5, #1
 8004fe2:	425d      	negs	r5, r3
 8004fe4:	415d      	adcs	r5, r3
 8004fe6:	b922      	cbnz	r2, 8004ff2 <edit_menu1+0x42>
 8004fe8:	b11d      	cbz	r5, 8004ff2 <edit_menu1+0x42>
		edit_state ^= 1;
 8004fea:	7833      	ldrb	r3, [r6, #0]
 8004fec:	f083 0301 	eor.w	r3, r3, #1
 8004ff0:	7033      	strb	r3, [r6, #0]
	}

	if(edit_state == 1){
 8004ff2:	7833      	ldrb	r3, [r6, #0]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d109      	bne.n	800500c <edit_menu1+0x5c>
		ili9341_drawline(encoder_pos, 20, 160, 220, ILI9341_RED);
 8004ff8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ffc:	481c      	ldr	r0, [pc, #112]	; (8005070 <edit_menu1+0xc0>)
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	22a0      	movs	r2, #160	; 0xa0
 8005002:	23dc      	movs	r3, #220	; 0xdc
 8005004:	2114      	movs	r1, #20
 8005006:	6800      	ldr	r0, [r0, #0]
 8005008:	f7ff f8fc 	bl	8004204 <ili9341_drawline>
	}

	if((button_state == 1) & (buttonDown == 0) & (edit_state == 0)){
 800500c:	783a      	ldrb	r2, [r7, #0]
 800500e:	7833      	ldrb	r3, [r6, #0]
 8005010:	2a00      	cmp	r2, #0
 8005012:	bf08      	it	eq
 8005014:	2b00      	cmpeq	r3, #0
 8005016:	d11c      	bne.n	8005052 <edit_menu1+0xa2>
 8005018:	b1dd      	cbz	r5, 8005052 <edit_menu1+0xa2>
		if (encoder_pos_raw > 400){
 800501a:	4b16      	ldr	r3, [pc, #88]	; (8005074 <edit_menu1+0xc4>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
			encoder_pos_raw = 400;
 8005022:	bf84      	itt	hi
 8005024:	f44f 72c8 	movhi.w	r2, #400	; 0x190
 8005028:	601a      	strhi	r2, [r3, #0]
		}
		set_actual_menu->value = encoder_pos_raw;
 800502a:	4a0d      	ldr	r2, [pc, #52]	; (8005060 <edit_menu1+0xb0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	61d3      	str	r3, [r2, #28]
		menu_item * menus_to_save[] = {menu_0, menu_6};
 8005032:	4b11      	ldr	r3, [pc, #68]	; (8005078 <edit_menu1+0xc8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	9302      	str	r3, [sp, #8]
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <edit_menu1+0xcc>)
		flash_write(menus_to_save);
 800503a:	a802      	add	r0, sp, #8
		menu_item * menus_to_save[] = {menu_0, menu_6};
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	9303      	str	r3, [sp, #12]
		flash_write(menus_to_save);
 8005040:	f7ff fcf4 	bl	8004a2c <flash_write>
		__HAL_TIM_SetCounter(&htim2, counter_pos);
 8005044:	4b07      	ldr	r3, [pc, #28]	; (8005064 <edit_menu1+0xb4>)
 8005046:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24
		systemState = Idle;
 800504e:	2301      	movs	r3, #1
 8005050:	7023      	strb	r3, [r4, #0]
	}
}
 8005052:	b005      	add	sp, #20
 8005054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005056:	bf00      	nop
 8005058:	2000003c 	.word	0x2000003c
 800505c:	200000d9 	.word	0x200000d9
 8005060:	200003a8 	.word	0x200003a8
 8005064:	20000278 	.word	0x20000278
 8005068:	2000034c 	.word	0x2000034c
 800506c:	200000cc 	.word	0x200000cc
 8005070:	200000d0 	.word	0x200000d0
 8005074:	200000d4 	.word	0x200000d4
 8005078:	2000039c 	.word	0x2000039c
 800507c:	200003c4 	.word	0x200003c4

08005080 <edit_menu_item>:

void edit_menu_item(GPIO_PinState button_state, menu_item * actual_menu, uint16_t x, uint16_t y, uint16_t counter_pos){
 8005080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005084:	4699      	mov	r9, r3

	if (systemState != previousSystemState){
 8005086:	4c2e      	ldr	r4, [pc, #184]	; (8005140 <edit_menu_item+0xc0>)
 8005088:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <edit_menu_item+0xc4>)
void edit_menu_item(GPIO_PinState button_state, menu_item * actual_menu, uint16_t x, uint16_t y, uint16_t counter_pos){
 800508a:	4690      	mov	r8, r2
	if (systemState != previousSystemState){
 800508c:	7819      	ldrb	r1, [r3, #0]
 800508e:	7822      	ldrb	r2, [r4, #0]
 8005090:	4291      	cmp	r1, r2
void edit_menu_item(GPIO_PinState button_state, menu_item * actual_menu, uint16_t x, uint16_t y, uint16_t counter_pos){
 8005092:	b08b      	sub	sp, #44	; 0x2c
	if (systemState != previousSystemState){
 8005094:	d007      	beq.n	80050a6 <edit_menu_item+0x26>
		__HAL_TIM_SetCounter(&htim2, readFromEEPROM(set_actual_menu->address));
 8005096:	4d2c      	ldr	r5, [pc, #176]	; (8005148 <edit_menu_item+0xc8>)
 8005098:	492c      	ldr	r1, [pc, #176]	; (800514c <edit_menu_item+0xcc>)
 800509a:	682d      	ldr	r5, [r5, #0]
 800509c:	6809      	ldr	r1, [r1, #0]
  return (*(__IO uint32_t *)address);
 800509e:	69ad      	ldr	r5, [r5, #24]
 80050a0:	682d      	ldr	r5, [r5, #0]
		__HAL_TIM_SetCounter(&htim2, readFromEEPROM(set_actual_menu->address));
 80050a2:	624d      	str	r5, [r1, #36]	; 0x24
		previousSystemState = systemState;
 80050a4:	701a      	strb	r2, [r3, #0]
	}

	if ((button_state == 1) & (buttonDown == 0)){
 80050a6:	1e43      	subs	r3, r0, #1
 80050a8:	4f29      	ldr	r7, [pc, #164]	; (8005150 <edit_menu_item+0xd0>)
 80050aa:	4e2a      	ldr	r6, [pc, #168]	; (8005154 <edit_menu_item+0xd4>)
 80050ac:	425d      	negs	r5, r3
 80050ae:	415d      	adcs	r5, r3
 80050b0:	783b      	ldrb	r3, [r7, #0]
 80050b2:	b923      	cbnz	r3, 80050be <edit_menu_item+0x3e>
 80050b4:	b11d      	cbz	r5, 80050be <edit_menu_item+0x3e>
		edit_state ^= 1;
 80050b6:	7833      	ldrb	r3, [r6, #0]
 80050b8:	f083 0301 	eor.w	r3, r3, #1
 80050bc:	7033      	strb	r3, [r6, #0]
	}
	if(edit_state == 1){
 80050be:	7833      	ldrb	r3, [r6, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d116      	bne.n	80050f2 <edit_menu_item+0x72>
		char disp_str[20];
		snprintf(disp_str, sizeof(disp_str), "%10lu", (unsigned long)encoder_pos);
 80050c4:	4b24      	ldr	r3, [pc, #144]	; (8005158 <edit_menu_item+0xd8>)
 80050c6:	4a25      	ldr	r2, [pc, #148]	; (800515c <edit_menu_item+0xdc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2114      	movs	r1, #20
 80050cc:	eb0d 0001 	add.w	r0, sp, r1
 80050d0:	f000 ff22 	bl	8005f18 <sniprintf>
		ILI9341_WriteString(x, y, disp_str, Font_16x26, ILI9341_RED, ILI9341_WHITE);
 80050d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d8:	9202      	str	r2, [sp, #8]
 80050da:	4b21      	ldr	r3, [pc, #132]	; (8005160 <edit_menu_item+0xe0>)
 80050dc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80050e0:	9201      	str	r2, [sp, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	9200      	str	r2, [sp, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	aa05      	add	r2, sp, #20
 80050ea:	4649      	mov	r1, r9
 80050ec:	4640      	mov	r0, r8
 80050ee:	f7ff f8a2 	bl	8004236 <ILI9341_WriteString>
	}
	if((button_state == 1) & (buttonDown == 0) & (edit_state == 0)){
 80050f2:	783a      	ldrb	r2, [r7, #0]
 80050f4:	7833      	ldrb	r3, [r6, #0]
 80050f6:	2a00      	cmp	r2, #0
 80050f8:	bf08      	it	eq
 80050fa:	2b00      	cmpeq	r3, #0
 80050fc:	d11c      	bne.n	8005138 <edit_menu_item+0xb8>
 80050fe:	b1dd      	cbz	r5, 8005138 <edit_menu_item+0xb8>
		if (encoder_pos_raw > 400){
 8005100:	4b18      	ldr	r3, [pc, #96]	; (8005164 <edit_menu_item+0xe4>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
			encoder_pos_raw = 400;
 8005108:	bf84      	itt	hi
 800510a:	f44f 72c8 	movhi.w	r2, #400	; 0x190
 800510e:	601a      	strhi	r2, [r3, #0]
		}
		set_actual_menu->value = encoder_pos_raw;
 8005110:	4a0d      	ldr	r2, [pc, #52]	; (8005148 <edit_menu_item+0xc8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	61d3      	str	r3, [r2, #28]

		menu_item * menus_to_save[] = {menu_0, menu_6};
 8005118:	4b13      	ldr	r3, [pc, #76]	; (8005168 <edit_menu_item+0xe8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	9305      	str	r3, [sp, #20]
 800511e:	4b13      	ldr	r3, [pc, #76]	; (800516c <edit_menu_item+0xec>)
		flash_write(menus_to_save);
 8005120:	a805      	add	r0, sp, #20
		menu_item * menus_to_save[] = {menu_0, menu_6};
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	9306      	str	r3, [sp, #24]
		flash_write(menus_to_save);
 8005126:	f7ff fc81 	bl	8004a2c <flash_write>
		__HAL_TIM_SetCounter(&htim2, counter_pos);
 800512a:	4b08      	ldr	r3, [pc, #32]	; (800514c <edit_menu_item+0xcc>)
 800512c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24
		systemState = Idle;
 8005134:	2301      	movs	r3, #1
 8005136:	7023      	strb	r3, [r4, #0]
	}
}
 8005138:	b00b      	add	sp, #44	; 0x2c
 800513a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800513e:	bf00      	nop
 8005140:	2000003c 	.word	0x2000003c
 8005144:	200000d9 	.word	0x200000d9
 8005148:	200003a8 	.word	0x200003a8
 800514c:	20000278 	.word	0x20000278
 8005150:	2000034c 	.word	0x2000034c
 8005154:	200000cc 	.word	0x200000cc
 8005158:	200000d0 	.word	0x200000d0
 800515c:	0800884a 	.word	0x0800884a
 8005160:	20000028 	.word	0x20000028
 8005164:	200000d4 	.word	0x200000d4
 8005168:	2000039c 	.word	0x2000039c
 800516c:	200003c4 	.word	0x200003c4

08005170 <render_menu>:


void render_menu(menu_item * menu_root, GPIO_PinState button_state){
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	460d      	mov	r5, r1
	char disp_str[20];
	uint32_t menu_pos = 0;
	menu_item * actual_menu = menu_root;

	encoder_pos_raw = __HAL_TIM_GetCounter(&htim2);
 8005176:	49ba      	ldr	r1, [pc, #744]	; (8005460 <render_menu+0x2f0>)
 8005178:	4aba      	ldr	r2, [pc, #744]	; (8005464 <render_menu+0x2f4>)
 800517a:	680b      	ldr	r3, [r1, #0]
	encoder_pos = encoder_pos_raw / 4;
 800517c:	4fba      	ldr	r7, [pc, #744]	; (8005468 <render_menu+0x2f8>)
	encoder_pos_raw = __HAL_TIM_GetCounter(&htim2);
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	if (systemState == Idle){
 8005180:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8005494 <render_menu+0x324>
	encoder_pos_raw = __HAL_TIM_GetCounter(&htim2);
 8005184:	6013      	str	r3, [r2, #0]
	encoder_pos = encoder_pos_raw / 4;
 8005186:	089b      	lsrs	r3, r3, #2
 8005188:	603b      	str	r3, [r7, #0]
	if (systemState == Idle){
 800518a:	f898 3000 	ldrb.w	r3, [r8]
void render_menu(menu_item * menu_root, GPIO_PinState button_state){
 800518e:	b08d      	sub	sp, #52	; 0x34
	if (systemState == Idle){
 8005190:	2b01      	cmp	r3, #1
void render_menu(menu_item * menu_root, GPIO_PinState button_state){
 8005192:	4604      	mov	r4, r0
 8005194:	4689      	mov	r9, r1
 8005196:	9205      	str	r2, [sp, #20]
	if (systemState == Idle){
 8005198:	f040 8081 	bne.w	800529e <render_menu+0x12e>

		if (systemState != previousSystemState){
 800519c:	4eb3      	ldr	r6, [pc, #716]	; (800546c <render_menu+0x2fc>)
 800519e:	7833      	ldrb	r3, [r6, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d005      	beq.n	80051b0 <render_menu+0x40>
			ILI9341_FillScreen(ILI9341_BLACK);
 80051a4:	2000      	movs	r0, #0
 80051a6:	f7ff f947 	bl	8004438 <ILI9341_FillScreen>
			previousSystemState = systemState;
 80051aa:	f898 3000 	ldrb.w	r3, [r8]
 80051ae:	7033      	strb	r3, [r6, #0]
		}

		if ((encoder_pos_raw >= 0x7FFFFFFF) & (encoder_pos_raw <= 0xFFFFFFFF)){
 80051b0:	9b05      	ldr	r3, [sp, #20]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4bae      	ldr	r3, [pc, #696]	; (8005470 <render_menu+0x300>)
 80051b6:	429a      	cmp	r2, r3
			__HAL_TIM_SetCounter(&htim2, 0);
 80051b8:	bf81      	itttt	hi
 80051ba:	f8d9 1000 	ldrhi.w	r1, [r9]
 80051be:	2300      	movhi	r3, #0
 80051c0:	624b      	strhi	r3, [r1, #36]	; 0x24
			encoder_pos = 0;
 80051c2:	603b      	strhi	r3, [r7, #0]
		}

		if ((encoder_pos > nr_menuitem - 1) & (encoder_pos_raw < 0x7FFFFFFF)){
 80051c4:	4bab      	ldr	r3, [pc, #684]	; (8005474 <render_menu+0x304>)
 80051c6:	6838      	ldr	r0, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	1e59      	subs	r1, r3, #1
 80051cc:	4281      	cmp	r1, r0
 80051ce:	d20a      	bcs.n	80051e6 <render_menu+0x76>
 80051d0:	48a7      	ldr	r0, [pc, #668]	; (8005470 <render_menu+0x300>)
 80051d2:	4282      	cmp	r2, r0
 80051d4:	d807      	bhi.n	80051e6 <render_menu+0x76>
			__HAL_TIM_SetCounter(&htim2, ((nr_menuitem - 1) * 4));
 80051d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051da:	f8d9 2000 	ldr.w	r2, [r9]
			encoder_pos = nr_menuitem - 1;
 80051de:	6039      	str	r1, [r7, #0]
			__HAL_TIM_SetCounter(&htim2, ((nr_menuitem - 1) * 4));
 80051e0:	3b01      	subs	r3, #1
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	6253      	str	r3, [r2, #36]	; 0x24
		}

		menu_shift = nr_menuitem_visible * (encoder_pos >> 3);	// div 8
 80051e6:	4aa4      	ldr	r2, [pc, #656]	; (8005478 <render_menu+0x308>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	08db      	lsrs	r3, r3, #3
 80051ee:	fb13 f302 	smulbb	r3, r3, r2
 80051f2:	4aa2      	ldr	r2, [pc, #648]	; (800547c <render_menu+0x30c>)
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	7013      	strb	r3, [r2, #0]

		for (uint8_t i = 0; i < menu_shift; i++){
 80051f8:	2200      	movs	r2, #0
 80051fa:	b2d1      	uxtb	r1, r2
 80051fc:	428b      	cmp	r3, r1
 80051fe:	f200 8169 	bhi.w	80054d4 <render_menu+0x364>
 8005202:	f8df 829c 	ldr.w	r8, [pc, #668]	; 80054a0 <render_menu+0x330>
 8005206:	2600      	movs	r6, #0
		}

		uint8_t residual_menu_hide = 0;
		uint8_t menu_display = 1;
		while(menu_display){
			snprintf(disp_str, sizeof(disp_str), "%s", actual_menu->label);
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	4a9d      	ldr	r2, [pc, #628]	; (8005480 <render_menu+0x310>)
 800520c:	2114      	movs	r1, #20
 800520e:	a807      	add	r0, sp, #28
 8005210:	f000 fe82 	bl	8005f18 <sniprintf>

			if ((encoder_pos - menu_shift) == (menu_pos / 30)){
 8005214:	4b99      	ldr	r3, [pc, #612]	; (800547c <render_menu+0x30c>)
 8005216:	781a      	ldrb	r2, [r3, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	1a9a      	subs	r2, r3, r2
 800521c:	231e      	movs	r3, #30
 800521e:	fbb6 f3f3 	udiv	r3, r6, r3
 8005222:	429a      	cmp	r2, r3
 8005224:	fa1f fa86 	uxth.w	sl, r6
 8005228:	f040 8194 	bne.w	8005554 <render_menu+0x3e4>
				ILI9341_WriteString(0, menu_pos, disp_str, Font_16x26, ILI9341_BLACK, ILI9341_WHITE);
 800522c:	f04f 0b00 	mov.w	fp, #0
 8005230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005234:	9302      	str	r3, [sp, #8]
 8005236:	f8cd b004 	str.w	fp, [sp, #4]
 800523a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	f8d8 3000 	ldr.w	r3, [r8]
 8005244:	aa07      	add	r2, sp, #28
 8005246:	4651      	mov	r1, sl
 8005248:	4658      	mov	r0, fp
 800524a:	f7fe fff4 	bl	8004236 <ILI9341_WriteString>
				if ((button_state == 1) & (buttonDown == 0)){
 800524e:	4b8d      	ldr	r3, [pc, #564]	; (8005484 <render_menu+0x314>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	455b      	cmp	r3, fp
 8005254:	bf08      	it	eq
 8005256:	2d01      	cmpeq	r5, #1
 8005258:	bf0c      	ite	eq
 800525a:	f04f 0e01 	moveq.w	lr, #1
 800525e:	f04f 0e00 	movne.w	lr, #0
 8005262:	f040 814a 	bne.w	80054fa <render_menu+0x38a>
					set_actual_menu = actual_menu;
 8005266:	4b88      	ldr	r3, [pc, #544]	; (8005488 <render_menu+0x318>)
 8005268:	601c      	str	r4, [r3, #0]

					if(actual_menu->type == exit_menu){
 800526a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800526e:	2b03      	cmp	r3, #3
 8005270:	f040 8136 	bne.w	80054e0 <render_menu+0x370>
						display_menu_head = actual_menu->parent;
 8005274:	4a85      	ldr	r2, [pc, #532]	; (800548c <render_menu+0x31c>)
 8005276:	6860      	ldr	r0, [r4, #4]
 8005278:	6010      	str	r0, [r2, #0]
						while(display_menu_head->previous){
 800527a:	465b      	mov	r3, fp
 800527c:	68c1      	ldr	r1, [r0, #12]
 800527e:	2900      	cmp	r1, #0
 8005280:	f040 812b 	bne.w	80054da <render_menu+0x36a>
 8005284:	b103      	cbz	r3, 8005288 <render_menu+0x118>
 8005286:	6010      	str	r0, [r2, #0]
							display_menu_head = display_menu_head->previous;
						}
						count_menuitem(display_menu_head);
 8005288:	f7ff fbf0 	bl	8004a6c <count_menuitem>
						__HAL_TIM_SetCounter(&htim2, parent_menu_encoder_state);
 800528c:	4a80      	ldr	r2, [pc, #512]	; (8005490 <render_menu+0x320>)
 800528e:	f8d9 3000 	ldr.w	r3, [r9]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	625a      	str	r2, [r3, #36]	; 0x24
			residual_menu_hide++;
			if (actual_menu == NULL) menu_display = 0;
		}

		while(menu_pos < 240){
			ILI9341_FillRectangle(0, menu_pos, 320, 30, ILI9341_BLACK);
 8005296:	2700      	movs	r7, #0
		while(menu_pos < 240){
 8005298:	2eef      	cmp	r6, #239	; 0xef
 800529a:	f240 817d 	bls.w	8005598 <render_menu+0x428>
			menu_pos += 30;
		}
	}


	if (systemState == EditM1){
 800529e:	4e7d      	ldr	r6, [pc, #500]	; (8005494 <render_menu+0x324>)
 80052a0:	7833      	ldrb	r3, [r6, #0]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d106      	bne.n	80052b4 <render_menu+0x144>
		edit_menu1(button_state, actual_menu, 150, 0, 0);
 80052a6:	2300      	movs	r3, #0
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	2296      	movs	r2, #150	; 0x96
 80052ac:	4621      	mov	r1, r4
 80052ae:	4628      	mov	r0, r5
 80052b0:	f7ff fe7e 	bl	8004fb0 <edit_menu1>
	}

	if (systemState == EditM2){
 80052b4:	7833      	ldrb	r3, [r6, #0]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d106      	bne.n	80052c8 <render_menu+0x158>
		edit_menu_item(button_state, actual_menu, 150, 30, 4);
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	2296      	movs	r2, #150	; 0x96
 80052be:	231e      	movs	r3, #30
 80052c0:	4621      	mov	r1, r4
 80052c2:	4628      	mov	r0, r5
 80052c4:	f7ff fedc 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM3){
 80052c8:	7833      	ldrb	r3, [r6, #0]
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d107      	bne.n	80052de <render_menu+0x16e>
		edit_menu_item(button_state, actual_menu, 150, 60, 8);
 80052ce:	2308      	movs	r3, #8
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	2296      	movs	r2, #150	; 0x96
 80052d4:	233c      	movs	r3, #60	; 0x3c
 80052d6:	4621      	mov	r1, r4
 80052d8:	4628      	mov	r0, r5
 80052da:	f7ff fed1 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM4){
 80052de:	7833      	ldrb	r3, [r6, #0]
 80052e0:	2b06      	cmp	r3, #6
 80052e2:	d107      	bne.n	80052f4 <render_menu+0x184>
		edit_menu_item(button_state, actual_menu, 150, 90, 12);
 80052e4:	230c      	movs	r3, #12
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	2296      	movs	r2, #150	; 0x96
 80052ea:	235a      	movs	r3, #90	; 0x5a
 80052ec:	4621      	mov	r1, r4
 80052ee:	4628      	mov	r0, r5
 80052f0:	f7ff fec6 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM5){
 80052f4:	7833      	ldrb	r3, [r6, #0]
 80052f6:	2b07      	cmp	r3, #7
 80052f8:	d107      	bne.n	800530a <render_menu+0x19a>
		edit_menu_item(button_state, actual_menu, 150, 120, 16);
 80052fa:	2310      	movs	r3, #16
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	2296      	movs	r2, #150	; 0x96
 8005300:	2378      	movs	r3, #120	; 0x78
 8005302:	4621      	mov	r1, r4
 8005304:	4628      	mov	r0, r5
 8005306:	f7ff febb 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM6){
 800530a:	7833      	ldrb	r3, [r6, #0]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d107      	bne.n	8005320 <render_menu+0x1b0>
		edit_menu_item(button_state, actual_menu, 150, 150, 20);
 8005310:	2314      	movs	r3, #20
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	2396      	movs	r3, #150	; 0x96
 8005316:	461a      	mov	r2, r3
 8005318:	4621      	mov	r1, r4
 800531a:	4628      	mov	r0, r5
 800531c:	f7ff feb0 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM7){
 8005320:	7833      	ldrb	r3, [r6, #0]
 8005322:	2b09      	cmp	r3, #9
 8005324:	d106      	bne.n	8005334 <render_menu+0x1c4>
		edit_menu_item(button_state, actual_menu, 150, 0, 0);
 8005326:	2300      	movs	r3, #0
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	2296      	movs	r2, #150	; 0x96
 800532c:	4621      	mov	r1, r4
 800532e:	4628      	mov	r0, r5
 8005330:	f7ff fea6 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM8){
 8005334:	7833      	ldrb	r3, [r6, #0]
 8005336:	2b0a      	cmp	r3, #10
 8005338:	d107      	bne.n	800534a <render_menu+0x1da>
		edit_menu_item(button_state, actual_menu, 150, 30, 4);
 800533a:	2304      	movs	r3, #4
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	2296      	movs	r2, #150	; 0x96
 8005340:	231e      	movs	r3, #30
 8005342:	4621      	mov	r1, r4
 8005344:	4628      	mov	r0, r5
 8005346:	f7ff fe9b 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM9){
 800534a:	7833      	ldrb	r3, [r6, #0]
 800534c:	2b0b      	cmp	r3, #11
 800534e:	d107      	bne.n	8005360 <render_menu+0x1f0>
		edit_menu_item(button_state, actual_menu, 150, 60, 8);
 8005350:	2308      	movs	r3, #8
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2296      	movs	r2, #150	; 0x96
 8005356:	233c      	movs	r3, #60	; 0x3c
 8005358:	4621      	mov	r1, r4
 800535a:	4628      	mov	r0, r5
 800535c:	f7ff fe90 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM10){
 8005360:	7833      	ldrb	r3, [r6, #0]
 8005362:	2b0c      	cmp	r3, #12
 8005364:	d106      	bne.n	8005374 <render_menu+0x204>
		edit_menu_item(button_state, actual_menu, 150, 90, 12);
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	2296      	movs	r2, #150	; 0x96
 800536a:	235a      	movs	r3, #90	; 0x5a
 800536c:	4621      	mov	r1, r4
 800536e:	4628      	mov	r0, r5
 8005370:	f7ff fe86 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM11){
 8005374:	7833      	ldrb	r3, [r6, #0]
 8005376:	2b0d      	cmp	r3, #13
 8005378:	d107      	bne.n	800538a <render_menu+0x21a>
		edit_menu_item(button_state, actual_menu, 150, 120, 16);
 800537a:	2310      	movs	r3, #16
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	2296      	movs	r2, #150	; 0x96
 8005380:	2378      	movs	r3, #120	; 0x78
 8005382:	4621      	mov	r1, r4
 8005384:	4628      	mov	r0, r5
 8005386:	f7ff fe7b 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM12){
 800538a:	7833      	ldrb	r3, [r6, #0]
 800538c:	2b0e      	cmp	r3, #14
 800538e:	d107      	bne.n	80053a0 <render_menu+0x230>
		edit_menu_item(button_state, actual_menu, 150, 150, 20);
 8005390:	2314      	movs	r3, #20
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	2396      	movs	r3, #150	; 0x96
 8005396:	461a      	mov	r2, r3
 8005398:	4621      	mov	r1, r4
 800539a:	4628      	mov	r0, r5
 800539c:	f7ff fe70 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM13){
 80053a0:	7833      	ldrb	r3, [r6, #0]
 80053a2:	2b0f      	cmp	r3, #15
 80053a4:	d107      	bne.n	80053b6 <render_menu+0x246>
		edit_menu_item(button_state, actual_menu, 150, 180, 24);
 80053a6:	2318      	movs	r3, #24
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	2296      	movs	r2, #150	; 0x96
 80053ac:	23b4      	movs	r3, #180	; 0xb4
 80053ae:	4621      	mov	r1, r4
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7ff fe65 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM14){
 80053b6:	7833      	ldrb	r3, [r6, #0]
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d107      	bne.n	80053cc <render_menu+0x25c>
		edit_menu_item(button_state, actual_menu, 150, 210, 28);
 80053bc:	231c      	movs	r3, #28
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2296      	movs	r2, #150	; 0x96
 80053c2:	23d2      	movs	r3, #210	; 0xd2
 80053c4:	4621      	mov	r1, r4
 80053c6:	4628      	mov	r0, r5
 80053c8:	f7ff fe5a 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM15){
 80053cc:	7833      	ldrb	r3, [r6, #0]
 80053ce:	2b11      	cmp	r3, #17
 80053d0:	d107      	bne.n	80053e2 <render_menu+0x272>
		edit_menu_item(button_state, actual_menu, 150, 0, 32);
 80053d2:	2320      	movs	r3, #32
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	2296      	movs	r2, #150	; 0x96
 80053d8:	2300      	movs	r3, #0
 80053da:	4621      	mov	r1, r4
 80053dc:	4628      	mov	r0, r5
 80053de:	f7ff fe4f 	bl	8005080 <edit_menu_item>
	}

	if (systemState == EditM16){
 80053e2:	7833      	ldrb	r3, [r6, #0]
 80053e4:	2b12      	cmp	r3, #18
 80053e6:	d107      	bne.n	80053f8 <render_menu+0x288>
		edit_menu_item(button_state, actual_menu, 150, 30, 36);
 80053e8:	2324      	movs	r3, #36	; 0x24
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	2296      	movs	r2, #150	; 0x96
 80053ee:	231e      	movs	r3, #30
 80053f0:	4621      	mov	r1, r4
 80053f2:	4628      	mov	r0, r5
 80053f4:	f7ff fe44 	bl	8005080 <edit_menu_item>
	}

	if(systemState == Exit){
 80053f8:	7833      	ldrb	r3, [r6, #0]
 80053fa:	4f22      	ldr	r7, [pc, #136]	; (8005484 <render_menu+0x314>)
 80053fc:	2b13      	cmp	r3, #19
 80053fe:	d162      	bne.n	80054c6 <render_menu+0x356>

		if (systemState != previousSystemState){
 8005400:	4c1a      	ldr	r4, [pc, #104]	; (800546c <render_menu+0x2fc>)
 8005402:	7823      	ldrb	r3, [r4, #0]
 8005404:	2b13      	cmp	r3, #19
 8005406:	d004      	beq.n	8005412 <render_menu+0x2a2>
			ILI9341_FillScreen(ILI9341_BLACK);
 8005408:	2000      	movs	r0, #0
 800540a:	f7ff f815 	bl	8004438 <ILI9341_FillScreen>
			previousSystemState = systemState;
 800540e:	7833      	ldrb	r3, [r6, #0]
 8005410:	7023      	strb	r3, [r4, #0]
		}

		if ((button_state == 1) & (buttonDown == 0)){
 8005412:	1e6a      	subs	r2, r5, #1
 8005414:	783b      	ldrb	r3, [r7, #0]
 8005416:	4c20      	ldr	r4, [pc, #128]	; (8005498 <render_menu+0x328>)
 8005418:	f1d2 0a00 	rsbs	sl, r2, #0
 800541c:	eb4a 0a02 	adc.w	sl, sl, r2
 8005420:	b933      	cbnz	r3, 8005430 <render_menu+0x2c0>
 8005422:	f1ba 0f00 	cmp.w	sl, #0
 8005426:	d003      	beq.n	8005430 <render_menu+0x2c0>
			edit_state_exit ^= 1;
 8005428:	7823      	ldrb	r3, [r4, #0]
 800542a:	f083 0301 	eor.w	r3, r3, #1
 800542e:	7023      	strb	r3, [r4, #0]
		}

		if(edit_state_exit == 0){
 8005430:	7820      	ldrb	r0, [r4, #0]
 8005432:	2800      	cmp	r0, #0
 8005434:	d138      	bne.n	80054a8 <render_menu+0x338>
			ILI9341_WriteNumber(0, 50, counter, angelcode_28x47_7seg, ILI9341_GREEN, ILI9341_BLACK);
 8005436:	4b19      	ldr	r3, [pc, #100]	; (800549c <render_menu+0x32c>)
 8005438:	9002      	str	r0, [sp, #8]
 800543a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800543e:	9201      	str	r2, [sp, #4]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80054a4 <render_menu+0x334>
 8005446:	9200      	str	r2, [sp, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8d8 2000 	ldr.w	r2, [r8]
 800544e:	2132      	movs	r1, #50	; 0x32
 8005450:	f7ff f874 	bl	800453c <ILI9341_WriteNumber>
			counter++;
 8005454:	f8d8 3000 	ldr.w	r3, [r8]
 8005458:	3301      	adds	r3, #1
 800545a:	f8c8 3000 	str.w	r3, [r8]
 800545e:	e023      	b.n	80054a8 <render_menu+0x338>
 8005460:	20000278 	.word	0x20000278
 8005464:	200000d4 	.word	0x200000d4
 8005468:	200000d0 	.word	0x200000d0
 800546c:	200000d9 	.word	0x200000d9
 8005470:	7ffffffe 	.word	0x7ffffffe
 8005474:	200003a4 	.word	0x200003a4
 8005478:	20000038 	.word	0x20000038
 800547c:	200000d8 	.word	0x200000d8
 8005480:	080088f3 	.word	0x080088f3
 8005484:	2000034c 	.word	0x2000034c
 8005488:	200003a8 	.word	0x200003a8
 800548c:	200003a0 	.word	0x200003a0
 8005490:	200003bc 	.word	0x200003bc
 8005494:	2000003c 	.word	0x2000003c
 8005498:	200000cd 	.word	0x200000cd
 800549c:	20000030 	.word	0x20000030
 80054a0:	20000028 	.word	0x20000028
 80054a4:	200000c8 	.word	0x200000c8
		}
		if((button_state == 1) & (buttonDown == 0) & (edit_state_exit == 1)){
 80054a8:	783a      	ldrb	r2, [r7, #0]
 80054aa:	7823      	ldrb	r3, [r4, #0]
 80054ac:	2a00      	cmp	r2, #0
 80054ae:	bf08      	it	eq
 80054b0:	2b01      	cmpeq	r3, #1
 80054b2:	d108      	bne.n	80054c6 <render_menu+0x356>
 80054b4:	f1ba 0f00 	cmp.w	sl, #0
 80054b8:	d005      	beq.n	80054c6 <render_menu+0x356>
			__HAL_TIM_SetCounter(&htim2, 0);
 80054ba:	f8d9 3000 	ldr.w	r3, [r9]
 80054be:	2200      	movs	r2, #0
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24
			systemState = Idle;
 80054c2:	2301      	movs	r3, #1
 80054c4:	7033      	strb	r3, [r6, #0]
		}
	}

	buttonDown = (button_state == 1);
 80054c6:	1e6b      	subs	r3, r5, #1
 80054c8:	425d      	negs	r5, r3
 80054ca:	415d      	adcs	r5, r3
 80054cc:	703d      	strb	r5, [r7, #0]
}
 80054ce:	b00d      	add	sp, #52	; 0x34
 80054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			actual_menu = actual_menu->next;
 80054d4:	6924      	ldr	r4, [r4, #16]
 80054d6:	3201      	adds	r2, #1
 80054d8:	e68f      	b.n	80051fa <render_menu+0x8a>
 80054da:	4673      	mov	r3, lr
 80054dc:	4608      	mov	r0, r1
 80054de:	e6cd      	b.n	800527c <render_menu+0x10c>
					if(actual_menu->child != NULL){
 80054e0:	68a0      	ldr	r0, [r4, #8]
 80054e2:	b140      	cbz	r0, 80054f6 <render_menu+0x386>
						display_menu_head = actual_menu->child;
 80054e4:	4b31      	ldr	r3, [pc, #196]	; (80055ac <render_menu+0x43c>)
 80054e6:	6018      	str	r0, [r3, #0]
						count_menuitem(display_menu_head);
 80054e8:	f7ff fac0 	bl	8004a6c <count_menuitem>
						parent_menu_encoder_state = encoder_pos_raw;
 80054ec:	9b05      	ldr	r3, [sp, #20]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b2f      	ldr	r3, [pc, #188]	; (80055b0 <render_menu+0x440>)
 80054f2:	601a      	str	r2, [r3, #0]
						break;
 80054f4:	e6cf      	b.n	8005296 <render_menu+0x126>
					actual_menu->Callback();
 80054f6:	6963      	ldr	r3, [r4, #20]
 80054f8:	4798      	blx	r3
				if(actual_menu->type == numeric){
 80054fa:	f894 3020 	ldrb.w	r3, [r4, #32]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d115      	bne.n	800552e <render_menu+0x3be>
					snprintf(disp_str, sizeof(disp_str), "%10lu", ((unsigned long)actual_menu->value / 4));
 8005502:	69e3      	ldr	r3, [r4, #28]
 8005504:	4a2b      	ldr	r2, [pc, #172]	; (80055b4 <render_menu+0x444>)
 8005506:	089b      	lsrs	r3, r3, #2
 8005508:	2114      	movs	r1, #20
 800550a:	a807      	add	r0, sp, #28
 800550c:	f000 fd04 	bl	8005f18 <sniprintf>
					ILI9341_WriteString(150, menu_pos, disp_str, Font_16x26, ILI9341_BLACK, ILI9341_WHITE);
 8005510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005514:	9302      	str	r3, [sp, #8]
 8005516:	2300      	movs	r3, #0
 8005518:	9301      	str	r3, [sp, #4]
					ILI9341_WriteString(150, menu_pos, disp_str, Font_16x26, ILI9341_BLACK, ILI9341_WHITE);
 800551a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	f8d8 3000 	ldr.w	r3, [r8]
 8005524:	aa07      	add	r2, sp, #28
 8005526:	4651      	mov	r1, sl
 8005528:	2096      	movs	r0, #150	; 0x96
 800552a:	f7fe fe84 	bl	8004236 <ILI9341_WriteString>
				if((actual_menu->type == exit_menu) | (actual_menu->type == none)){
 800552e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005532:	2b03      	cmp	r3, #3
 8005534:	d000      	beq.n	8005538 <render_menu+0x3c8>
 8005536:	b93b      	cbnz	r3, 8005548 <render_menu+0x3d8>
					ILI9341_FillRectangle(150, menu_pos, 170, 30, ILI9341_BLACK);
 8005538:	2300      	movs	r3, #0
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	22aa      	movs	r2, #170	; 0xaa
 800553e:	231e      	movs	r3, #30
 8005540:	4651      	mov	r1, sl
 8005542:	2096      	movs	r0, #150	; 0x96
 8005544:	f7fe ff06 	bl	8004354 <ILI9341_FillRectangle>
			actual_menu = actual_menu->next;
 8005548:	6924      	ldr	r4, [r4, #16]
			menu_pos += 30;
 800554a:	361e      	adds	r6, #30
		while(menu_display){
 800554c:	2c00      	cmp	r4, #0
 800554e:	f47f ae5b 	bne.w	8005208 <render_menu+0x98>
 8005552:	e6a0      	b.n	8005296 <render_menu+0x126>
				ILI9341_WriteString(0, menu_pos, disp_str, Font_16x26, ILI9341_GREEN, ILI9341_BLACK);
 8005554:	f04f 0b00 	mov.w	fp, #0
 8005558:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800555c:	f8cd b008 	str.w	fp, [sp, #8]
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	f8d8 3000 	ldr.w	r3, [r8]
 800556c:	aa07      	add	r2, sp, #28
 800556e:	4651      	mov	r1, sl
 8005570:	4658      	mov	r0, fp
 8005572:	f7fe fe60 	bl	8004236 <ILI9341_WriteString>
				if(actual_menu->type == numeric){
 8005576:	f894 3020 	ldrb.w	r3, [r4, #32]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d1d7      	bne.n	800552e <render_menu+0x3be>
					snprintf(disp_str, sizeof(disp_str), "%10lu", ((unsigned long)actual_menu->value / 4));
 800557e:	69e3      	ldr	r3, [r4, #28]
 8005580:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <render_menu+0x444>)
 8005582:	089b      	lsrs	r3, r3, #2
 8005584:	2114      	movs	r1, #20
 8005586:	a807      	add	r0, sp, #28
 8005588:	f000 fcc6 	bl	8005f18 <sniprintf>
					ILI9341_WriteString(150, menu_pos, disp_str, Font_16x26, ILI9341_BLACK, ILI9341_WHITE);
 800558c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005590:	9302      	str	r3, [sp, #8]
 8005592:	f8cd b004 	str.w	fp, [sp, #4]
 8005596:	e7c0      	b.n	800551a <render_menu+0x3aa>
			ILI9341_FillRectangle(0, menu_pos, 320, 30, ILI9341_BLACK);
 8005598:	b2b1      	uxth	r1, r6
 800559a:	9700      	str	r7, [sp, #0]
 800559c:	231e      	movs	r3, #30
 800559e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80055a2:	2000      	movs	r0, #0
 80055a4:	f7fe fed6 	bl	8004354 <ILI9341_FillRectangle>
			menu_pos += 30;
 80055a8:	361e      	adds	r6, #30
 80055aa:	e675      	b.n	8005298 <render_menu+0x128>
 80055ac:	200003a0 	.word	0x200003a0
 80055b0:	200003bc 	.word	0x200003bc
 80055b4:	0800884a 	.word	0x0800884a

080055b8 <display_menu>:

uint8_t display_menu(GPIO_PinState button_state){
 80055b8:	b508      	push	{r3, lr}

	render_menu(display_menu_head, button_state);
 80055ba:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <display_menu+0x10>)
 80055bc:	4601      	mov	r1, r0
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	f7ff fdd6 	bl	8005170 <render_menu>

}
 80055c4:	bd08      	pop	{r3, pc}
 80055c6:	bf00      	nop
 80055c8:	200003a0 	.word	0x200003a0

080055cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055cc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ce:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <HAL_MspInit+0x3c>)
 80055d0:	2100      	movs	r1, #0
 80055d2:	9100      	str	r1, [sp, #0]
 80055d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055da:	645a      	str	r2, [r3, #68]	; 0x44
 80055dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80055e2:	9200      	str	r2, [sp, #0]
 80055e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055e6:	9101      	str	r1, [sp, #4]
 80055e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80055f8:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80055fa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80055fc:	f7fb f82c 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005600:	b003      	add	sp, #12
 8005602:	f85d fb04 	ldr.w	pc, [sp], #4
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800

0800560c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800560c:	b530      	push	{r4, r5, lr}
 800560e:	4604      	mov	r4, r0
 8005610:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005612:	2214      	movs	r2, #20
 8005614:	2100      	movs	r1, #0
 8005616:	a803      	add	r0, sp, #12
 8005618:	f000 fbba 	bl	8005d90 <memset>
  if(hi2c->Instance==I2C1)
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	4b14      	ldr	r3, [pc, #80]	; (8005670 <HAL_I2C_MspInit+0x64>)
 8005620:	429a      	cmp	r2, r3
 8005622:	d122      	bne.n	800566a <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005624:	4c13      	ldr	r4, [pc, #76]	; (8005674 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005626:	4814      	ldr	r0, [pc, #80]	; (8005678 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005628:	2500      	movs	r5, #0
 800562a:	9501      	str	r5, [sp, #4]
 800562c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800562e:	f043 0302 	orr.w	r3, r3, #2
 8005632:	6323      	str	r3, [r4, #48]	; 0x30
 8005634:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800563e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005642:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005644:	2312      	movs	r3, #18
 8005646:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005648:	2301      	movs	r3, #1
 800564a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800564c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800564e:	2304      	movs	r3, #4
 8005650:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005652:	f7fb fb3b 	bl	8000ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005656:	9502      	str	r5, [sp, #8]
 8005658:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800565a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800565e:	6423      	str	r3, [r4, #64]	; 0x40
 8005660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005666:	9302      	str	r3, [sp, #8]
 8005668:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800566a:	b009      	add	sp, #36	; 0x24
 800566c:	bd30      	pop	{r4, r5, pc}
 800566e:	bf00      	nop
 8005670:	40005400 	.word	0x40005400
 8005674:	40023800 	.word	0x40023800
 8005678:	40020400 	.word	0x40020400

0800567c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	4604      	mov	r4, r0
 8005680:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005682:	2214      	movs	r2, #20
 8005684:	2100      	movs	r1, #0
 8005686:	a807      	add	r0, sp, #28
 8005688:	f000 fb82 	bl	8005d90 <memset>
  if(hi2s->Instance==SPI2)
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	4a3e      	ldr	r2, [pc, #248]	; (8005788 <HAL_I2S_MspInit+0x10c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d141      	bne.n	8005718 <HAL_I2S_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005694:	4b3d      	ldr	r3, [pc, #244]	; (800578c <HAL_I2S_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005696:	483e      	ldr	r0, [pc, #248]	; (8005790 <HAL_I2S_MspInit+0x114>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005698:	2400      	movs	r4, #0
 800569a:	9401      	str	r4, [sp, #4]
 800569c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800569e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40
 80056a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80056aa:	9201      	str	r2, [sp, #4]
 80056ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056ae:	9402      	str	r4, [sp, #8]
 80056b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b2:	f042 0204 	orr.w	r2, r2, #4
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
 80056b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ba:	f002 0204 	and.w	r2, r2, #4
 80056be:	9202      	str	r2, [sp, #8]
 80056c0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056c2:	9403      	str	r4, [sp, #12]
 80056c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c6:	f042 0202 	orr.w	r2, r2, #2
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	9303      	str	r3, [sp, #12]
 80056d4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80056d6:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d8:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80056da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056dc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80056de:	2306      	movs	r3, #6
 80056e0:	930b      	str	r3, [sp, #44]	; 0x2c

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80056e2:	2605      	movs	r6, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e4:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056e6:	f7fb faf1 	bl	8000ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80056ea:	2308      	movs	r3, #8
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80056ec:	a907      	add	r1, sp, #28
 80056ee:	4828      	ldr	r0, [pc, #160]	; (8005790 <HAL_I2S_MspInit+0x114>)
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80056f0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056f6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80056f8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80056fa:	f7fb fae7 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80056fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005702:	4824      	ldr	r0, [pc, #144]	; (8005794 <HAL_I2S_MspInit+0x118>)
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8005704:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005706:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800570c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800570e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005710:	f7fb fadc 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005714:	b00c      	add	sp, #48	; 0x30
 8005716:	bd70      	pop	{r4, r5, r6, pc}
  else if(hi2s->Instance==SPI3)
 8005718:	4a1f      	ldr	r2, [pc, #124]	; (8005798 <HAL_I2S_MspInit+0x11c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d1fa      	bne.n	8005714 <HAL_I2S_MspInit+0x98>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800571e:	4b1b      	ldr	r3, [pc, #108]	; (800578c <HAL_I2S_MspInit+0x110>)
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005720:	481e      	ldr	r0, [pc, #120]	; (800579c <HAL_I2S_MspInit+0x120>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005722:	2400      	movs	r4, #0
 8005724:	9404      	str	r4, [sp, #16]
 8005726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005728:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
 800572e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005730:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005734:	9204      	str	r2, [sp, #16]
 8005736:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005738:	9405      	str	r4, [sp, #20]
 800573a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573c:	f042 0201 	orr.w	r2, r2, #1
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
 8005742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005744:	f002 0201 	and.w	r2, r2, #1
 8005748:	9205      	str	r2, [sp, #20]
 800574a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800574c:	9406      	str	r4, [sp, #24]
 800574e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005750:	f042 0204 	orr.w	r2, r2, #4
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	9306      	str	r3, [sp, #24]
 800575e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005760:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005762:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005764:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005766:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005768:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800576c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800576e:	f7fb faad 	bl	8000ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005772:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005776:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005778:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800577c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800577e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005780:	a907      	add	r1, sp, #28
 8005782:	4803      	ldr	r0, [pc, #12]	; (8005790 <HAL_I2S_MspInit+0x114>)
 8005784:	e7c4      	b.n	8005710 <HAL_I2S_MspInit+0x94>
 8005786:	bf00      	nop
 8005788:	40003800 	.word	0x40003800
 800578c:	40023800 	.word	0x40023800
 8005790:	40020800 	.word	0x40020800
 8005794:	40020400 	.word	0x40020400
 8005798:	40003c00 	.word	0x40003c00
 800579c:	40020000 	.word	0x40020000

080057a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057a0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a2:	2214      	movs	r2, #20
{
 80057a4:	b08a      	sub	sp, #40	; 0x28
 80057a6:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a8:	2100      	movs	r1, #0
 80057aa:	eb0d 0002 	add.w	r0, sp, r2
 80057ae:	f000 faef 	bl	8005d90 <memset>
  if(hspi->Instance==SPI1)
 80057b2:	6833      	ldr	r3, [r6, #0]
 80057b4:	4a36      	ldr	r2, [pc, #216]	; (8005890 <HAL_SPI_MspInit+0xf0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d123      	bne.n	8005802 <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80057ba:	4b36      	ldr	r3, [pc, #216]	; (8005894 <HAL_SPI_MspInit+0xf4>)
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057bc:	4836      	ldr	r0, [pc, #216]	; (8005898 <HAL_SPI_MspInit+0xf8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80057be:	2100      	movs	r1, #0
 80057c0:	9101      	str	r1, [sp, #4]
 80057c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057c8:	645a      	str	r2, [r3, #68]	; 0x44
 80057ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80057d0:	9201      	str	r2, [sp, #4]
 80057d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057d4:	9102      	str	r1, [sp, #8]
 80057d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	631a      	str	r2, [r3, #48]	; 0x30
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	9302      	str	r3, [sp, #8]
 80057e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80057e8:	23e0      	movs	r3, #224	; 0xe0
 80057ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ec:	2302      	movs	r3, #2
 80057ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f0:	2303      	movs	r3, #3
 80057f2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057f4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80057f6:	2305      	movs	r3, #5
 80057f8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057fa:	f7fb fa67 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80057fe:	b00a      	add	sp, #40	; 0x28
 8005800:	bd70      	pop	{r4, r5, r6, pc}
  else if(hspi->Instance==SPI4)
 8005802:	4a26      	ldr	r2, [pc, #152]	; (800589c <HAL_SPI_MspInit+0xfc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d1fa      	bne.n	80057fe <HAL_SPI_MspInit+0x5e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005808:	2500      	movs	r5, #0
 800580a:	4b22      	ldr	r3, [pc, #136]	; (8005894 <HAL_SPI_MspInit+0xf4>)
 800580c:	9503      	str	r5, [sp, #12]
 800580e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005810:	4823      	ldr	r0, [pc, #140]	; (80058a0 <HAL_SPI_MspInit+0x100>)
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8005812:	4c24      	ldr	r4, [pc, #144]	; (80058a4 <HAL_SPI_MspInit+0x104>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005818:	645a      	str	r2, [r3, #68]	; 0x44
 800581a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800581c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005820:	9203      	str	r2, [sp, #12]
 8005822:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005824:	9504      	str	r5, [sp, #16]
 8005826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005828:	f042 0210 	orr.w	r2, r2, #16
 800582c:	631a      	str	r2, [r3, #48]	; 0x30
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 8005838:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 800583c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800583e:	2302      	movs	r3, #2
 8005840:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005842:	2303      	movs	r3, #3
 8005844:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005846:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005848:	2305      	movs	r3, #5
 800584a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800584c:	f7fb fa3e 	bl	8000ccc <HAL_GPIO_Init>
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005850:	4915      	ldr	r1, [pc, #84]	; (80058a8 <HAL_SPI_MspInit+0x108>)
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005852:	60e5      	str	r5, [r4, #12]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800585a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800585e:	4620      	mov	r0, r4
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005864:	6123      	str	r3, [r4, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005866:	6165      	str	r5, [r4, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005868:	61a5      	str	r5, [r4, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800586a:	61e5      	str	r5, [r4, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800586c:	6225      	str	r5, [r4, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800586e:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8005870:	f7fa ff72 	bl	8000758 <HAL_DMA_Init>
 8005874:	b108      	cbz	r0, 800587a <HAL_SPI_MspInit+0xda>
      Error_Handler();
 8005876:	f7ff f871 	bl	800495c <Error_Handler>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800587a:	2200      	movs	r2, #0
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800587c:	64b4      	str	r4, [r6, #72]	; 0x48
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800587e:	4611      	mov	r1, r2
 8005880:	2054      	movs	r0, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8005882:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8005884:	f7fa fefa 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8005888:	2054      	movs	r0, #84	; 0x54
 800588a:	f7fa ff2b 	bl	80006e4 <HAL_NVIC_EnableIRQ>
}
 800588e:	e7b6      	b.n	80057fe <HAL_SPI_MspInit+0x5e>
 8005890:	40013000 	.word	0x40013000
 8005894:	40023800 	.word	0x40023800
 8005898:	40020000 	.word	0x40020000
 800589c:	40013400 	.word	0x40013400
 80058a0:	40021000 	.word	0x40021000
 80058a4:	20000168 	.word	0x20000168
 80058a8:	40026428 	.word	0x40026428

080058ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80058ac:	b510      	push	{r4, lr}
 80058ae:	4604      	mov	r4, r0
 80058b0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b2:	2214      	movs	r2, #20
 80058b4:	2100      	movs	r1, #0
 80058b6:	a803      	add	r0, sp, #12
 80058b8:	f000 fa6a 	bl	8005d90 <memset>
  if(htim_encoder->Instance==TIM2)
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c2:	d12a      	bne.n	800591a <HAL_TIM_Encoder_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058c4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80058c8:	2400      	movs	r4, #0
 80058ca:	9401      	str	r4, [sp, #4]
 80058cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ce:	4814      	ldr	r0, [pc, #80]	; (8005920 <HAL_TIM_Encoder_MspInit+0x74>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058d0:	f042 0201 	orr.w	r2, r2, #1
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
 80058d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058d8:	f002 0201 	and.w	r2, r2, #1
 80058dc:	9201      	str	r2, [sp, #4]
 80058de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058e0:	9402      	str	r4, [sp, #8]
 80058e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	631a      	str	r2, [r3, #48]	; 0x30
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	9302      	str	r3, [sp, #8]
 80058f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80058f4:	f248 0302 	movw	r3, #32770	; 0x8002
 80058f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058fa:	2302      	movs	r3, #2
 80058fc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058fe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005900:	2301      	movs	r3, #1
 8005902:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005904:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005906:	f7fb f9e1 	bl	8000ccc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800590a:	201c      	movs	r0, #28
 800590c:	4622      	mov	r2, r4
 800590e:	4621      	mov	r1, r4
 8005910:	f7fa feb4 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005914:	201c      	movs	r0, #28
 8005916:	f7fa fee5 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800591a:	b008      	add	sp, #32
 800591c:	bd10      	pop	{r4, pc}
 800591e:	bf00      	nop
 8005920:	40020000 	.word	0x40020000

08005924 <NMI_Handler>:
 8005924:	4770      	bx	lr

08005926 <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)

{
 8005926:	e7fe      	b.n	8005926 <HardFault_Handler>

08005928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005928:	e7fe      	b.n	8005928 <MemManage_Handler>

0800592a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800592a:	e7fe      	b.n	800592a <BusFault_Handler>

0800592c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800592c:	e7fe      	b.n	800592c <UsageFault_Handler>

0800592e <SVC_Handler>:
 800592e:	4770      	bx	lr

08005930 <DebugMon_Handler>:
 8005930:	4770      	bx	lr

08005932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005932:	4770      	bx	lr

08005934 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005934:	f7fa be6a 	b.w	800060c <HAL_IncTick>

08005938 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005938:	4801      	ldr	r0, [pc, #4]	; (8005940 <TIM2_IRQHandler+0x8>)
 800593a:	f7fc bf82 	b.w	8002842 <HAL_TIM_IRQHandler>
 800593e:	bf00      	nop
 8005940:	20000278 	.word	0x20000278

08005944 <DMA2_Stream1_IRQHandler>:
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	spi4_dma_completed = 1;
 8005944:	4b02      	ldr	r3, [pc, #8]	; (8005950 <DMA2_Stream1_IRQHandler+0xc>)
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8005946:	4803      	ldr	r0, [pc, #12]	; (8005954 <DMA2_Stream1_IRQHandler+0x10>)
	spi4_dma_completed = 1;
 8005948:	2201      	movs	r2, #1
 800594a:	701a      	strb	r2, [r3, #0]
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800594c:	f7fa bfd2 	b.w	80008f4 <HAL_DMA_IRQHandler>
 8005950:	200000da 	.word	0x200000da
 8005954:	20000168 	.word	0x20000168

08005958 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <OTG_FS_IRQHandler+0x8>)
 800595a:	f7fb bb8f 	b.w	800107c <HAL_HCD_IRQHandler>
 800595e:	bf00      	nop
 8005960:	200007ac 	.word	0x200007ac

08005964 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8005964:	4801      	ldr	r0, [pc, #4]	; (800596c <SPI4_IRQHandler+0x8>)
 8005966:	f7fc bee1 	b.w	800272c <HAL_SPI_IRQHandler>
 800596a:	bf00      	nop
 800596c:	200001c8 	.word	0x200001c8

08005970 <get_spi4_dma_completed>:
}

/* USER CODE BEGIN 1 */
uint8_t get_spi4_dma_completed(void){
	return spi4_dma_completed;
}
 8005970:	4b01      	ldr	r3, [pc, #4]	; (8005978 <get_spi4_dma_completed+0x8>)
 8005972:	7818      	ldrb	r0, [r3, #0]
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	200000da 	.word	0x200000da

0800597c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800597c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <_sbrk+0x2c>)
 8005980:	6819      	ldr	r1, [r3, #0]
{
 8005982:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005984:	b909      	cbnz	r1, 800598a <_sbrk+0xe>
		heap_end = &end;
 8005986:	4909      	ldr	r1, [pc, #36]	; (80059ac <_sbrk+0x30>)
 8005988:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800598a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800598c:	4669      	mov	r1, sp
 800598e:	4402      	add	r2, r0
 8005990:	428a      	cmp	r2, r1
 8005992:	d906      	bls.n	80059a2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005994:	f000 f9c2 	bl	8005d1c <__errno>
 8005998:	230c      	movs	r3, #12
 800599a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80059a2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80059a4:	bd08      	pop	{r3, pc}
 80059a6:	bf00      	nop
 80059a8:	200000dc 	.word	0x200000dc
 80059ac:	20000a74 	.word	0x20000a74

080059b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059b0:	490f      	ldr	r1, [pc, #60]	; (80059f0 <SystemInit+0x40>)
 80059b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80059b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80059be:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <SystemInit+0x44>)
 80059c0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80059c2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80059ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80059d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80059d8:	4a07      	ldr	r2, [pc, #28]	; (80059f8 <SystemInit+0x48>)
 80059da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80059e4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059ea:	608b      	str	r3, [r1, #8]
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	e000ed00 	.word	0xe000ed00
 80059f4:	40023800 	.word	0x40023800
 80059f8:	24003010 	.word	0x24003010

080059fc <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80059fc:	2904      	cmp	r1, #4
 80059fe:	d00a      	beq.n	8005a16 <USBH_UserProcess+0x1a>
 8005a00:	2905      	cmp	r1, #5
 8005a02:	d004      	beq.n	8005a0e <USBH_UserProcess+0x12>
 8005a04:	2902      	cmp	r1, #2
 8005a06:	d105      	bne.n	8005a14 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <USBH_UserProcess+0x20>)
 8005a0a:	7019      	strb	r1, [r3, #0]
  break;
 8005a0c:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8005a0e:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8005a10:	4b02      	ldr	r3, [pc, #8]	; (8005a1c <USBH_UserProcess+0x20>)
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	4770      	bx	lr
 8005a16:	2201      	movs	r2, #1
 8005a18:	e7fa      	b.n	8005a10 <USBH_UserProcess+0x14>
 8005a1a:	bf00      	nop
 8005a1c:	200000e0 	.word	0x200000e0

08005a20 <MX_USB_HOST_Init>:
{
 8005a20:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8005a22:	2201      	movs	r2, #1
 8005a24:	490b      	ldr	r1, [pc, #44]	; (8005a54 <MX_USB_HOST_Init+0x34>)
 8005a26:	480c      	ldr	r0, [pc, #48]	; (8005a58 <MX_USB_HOST_Init+0x38>)
 8005a28:	f7fd fda0 	bl	800356c <USBH_Init>
 8005a2c:	b108      	cbz	r0, 8005a32 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8005a2e:	f7fe ff95 	bl	800495c <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8005a32:	490a      	ldr	r1, [pc, #40]	; (8005a5c <MX_USB_HOST_Init+0x3c>)
 8005a34:	4808      	ldr	r0, [pc, #32]	; (8005a58 <MX_USB_HOST_Init+0x38>)
 8005a36:	f7fd fdb0 	bl	800359a <USBH_RegisterClass>
 8005a3a:	b108      	cbz	r0, 8005a40 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8005a3c:	f7fe ff8e 	bl	800495c <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8005a40:	4805      	ldr	r0, [pc, #20]	; (8005a58 <MX_USB_HOST_Init+0x38>)
 8005a42:	f7fd fddd 	bl	8003600 <USBH_Start>
 8005a46:	b118      	cbz	r0, 8005a50 <MX_USB_HOST_Init+0x30>
}
 8005a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005a4c:	f7fe bf86 	b.w	800495c <Error_Handler>
 8005a50:	bd08      	pop	{r3, pc}
 8005a52:	bf00      	nop
 8005a54:	080059fd 	.word	0x080059fd
 8005a58:	200003e0 	.word	0x200003e0
 8005a5c:	20000008 	.word	0x20000008

08005a60 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 8005a60:	4801      	ldr	r0, [pc, #4]	; (8005a68 <MX_USB_HOST_Process+0x8>)
 8005a62:	f7fd bdd7 	b.w	8003614 <USBH_Process>
 8005a66:	bf00      	nop
 8005a68:	200003e0 	.word	0x200003e0

08005a6c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8005a6c:	b530      	push	{r4, r5, lr}
 8005a6e:	4604      	mov	r4, r0
 8005a70:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a72:	2214      	movs	r2, #20
 8005a74:	2100      	movs	r1, #0
 8005a76:	a803      	add	r0, sp, #12
 8005a78:	f000 f98a 	bl	8005d90 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a82:	d136      	bne.n	8005af2 <HAL_HCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a84:	4c1c      	ldr	r4, [pc, #112]	; (8005af8 <HAL_HCD_MspInit+0x8c>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005a86:	481d      	ldr	r0, [pc, #116]	; (8005afc <HAL_HCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a88:	2500      	movs	r5, #0
 8005a8a:	9501      	str	r5, [sp, #4]
 8005a8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6323      	str	r3, [r4, #48]	; 0x30
 8005a94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005a9e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005aa6:	f7fb f911 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005aaa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005aae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005aba:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005abc:	480f      	ldr	r0, [pc, #60]	; (8005afc <HAL_HCD_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005abe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ac2:	f7fb f903 	bl	8000ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005ac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005acc:	6363      	str	r3, [r4, #52]	; 0x34
 8005ace:	9502      	str	r5, [sp, #8]
 8005ad0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad6:	6463      	str	r3, [r4, #68]	; 0x44
 8005ad8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ade:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005ae0:	2043      	movs	r0, #67	; 0x43
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005ae6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005ae8:	f7fa fdc8 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005aec:	2043      	movs	r0, #67	; 0x43
 8005aee:	f7fa fdf9 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005af2:	b009      	add	sp, #36	; 0x24
 8005af4:	bd30      	pop	{r4, r5, pc}
 8005af6:	bf00      	nop
 8005af8:	40023800 	.word	0x40023800
 8005afc:	40020000 	.word	0x40020000

08005b00 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8005b00:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005b04:	f7fd bece 	b.w	80038a4 <USBH_LL_IncTimer>

08005b08 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8005b08:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005b0c:	f7fd bee0 	b.w	80038d0 <USBH_LL_Connect>

08005b10 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8005b10:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005b14:	f7fd bef0 	b.w	80038f8 <USBH_LL_Disconnect>

08005b18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005b18:	4770      	bx	lr

08005b1a <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8005b1a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005b1e:	f7fd becf 	b.w	80038c0 <USBH_LL_PortEnabled>

08005b22 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8005b22:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005b26:	f7fd becf 	b.w	80038c8 <USBH_LL_PortDisabled>
	...

08005b2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8005b2c:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8005b2e:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8005b32:	2b01      	cmp	r3, #1
{
 8005b34:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8005b36:	d11b      	bne.n	8005b70 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005b38:	480e      	ldr	r0, [pc, #56]	; (8005b74 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 8005b3a:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005b3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b42:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8005b44:	2208      	movs	r2, #8
 8005b46:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005b48:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005b4a:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005b4c:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8005b4e:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005b52:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005b54:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005b56:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005b58:	f7fb f9e3 	bl	8000f22 <HAL_HCD_Init>
 8005b5c:	b108      	cbz	r0, 8005b62 <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 8005b5e:	f7fe fefd 	bl	800495c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8005b62:	4804      	ldr	r0, [pc, #16]	; (8005b74 <USBH_LL_Init+0x48>)
 8005b64:	f7fb fddc 	bl	8001720 <HAL_HCD_GetCurrentFrame>
 8005b68:	4601      	mov	r1, r0
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7fd fe97 	bl	800389e <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8005b70:	2000      	movs	r0, #0
 8005b72:	bd10      	pop	{r4, pc}
 8005b74:	200007ac 	.word	0x200007ac

08005b78 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005b78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8005b7a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005b7e:	f7fb fd99 	bl	80016b4 <HAL_HCD_Start>
 8005b82:	2803      	cmp	r0, #3
 8005b84:	bf9a      	itte	ls
 8005b86:	4b02      	ldrls	r3, [pc, #8]	; (8005b90 <USBH_LL_Start+0x18>)
 8005b88:	5c18      	ldrbls	r0, [r3, r0]
 8005b8a:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005b8c:	bd08      	pop	{r3, pc}
 8005b8e:	bf00      	nop
 8005b90:	08008911 	.word	0x08008911

08005b94 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005b94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8005b96:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005b9a:	f7fb fda1 	bl	80016e0 <HAL_HCD_Stop>
 8005b9e:	2803      	cmp	r0, #3
 8005ba0:	bf9a      	itte	ls
 8005ba2:	4b02      	ldrls	r3, [pc, #8]	; (8005bac <USBH_LL_Stop+0x18>)
 8005ba4:	5c18      	ldrbls	r0, [r3, r0]
 8005ba6:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8005ba8:	bd08      	pop	{r3, pc}
 8005baa:	bf00      	nop
 8005bac:	08008911 	.word	0x08008911

08005bb0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8005bb0:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8005bb2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005bb6:	f7fb fdb6 	bl	8001726 <HAL_HCD_GetCurrentSpeed>
 8005bba:	2802      	cmp	r0, #2
 8005bbc:	bf9a      	itte	ls
 8005bbe:	4b02      	ldrls	r3, [pc, #8]	; (8005bc8 <USBH_LL_GetSpeed+0x18>)
 8005bc0:	5c18      	ldrbls	r0, [r3, r0]
 8005bc2:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8005bc4:	bd08      	pop	{r3, pc}
 8005bc6:	bf00      	nop
 8005bc8:	0800890e 	.word	0x0800890e

08005bcc <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8005bcc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8005bce:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005bd2:	f7fb fd97 	bl	8001704 <HAL_HCD_ResetPort>
 8005bd6:	2803      	cmp	r0, #3
 8005bd8:	bf9a      	itte	ls
 8005bda:	4b02      	ldrls	r3, [pc, #8]	; (8005be4 <USBH_LL_ResetPort+0x18>)
 8005bdc:	5c18      	ldrbls	r0, [r3, r0]
 8005bde:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005be0:	bd08      	pop	{r3, pc}
 8005be2:	bf00      	nop
 8005be4:	08008911 	.word	0x08008911

08005be8 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8005be8:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005bec:	f7fb bd93 	b.w	8001716 <HAL_HCD_HC_GetXferCount>

08005bf0 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005bf2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005bf6:	9402      	str	r4, [sp, #8]
 8005bf8:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8005bfc:	9401      	str	r4, [sp, #4]
 8005bfe:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005c02:	9400      	str	r4, [sp, #0]
 8005c04:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005c08:	f7fb f941 	bl	8000e8e <HAL_HCD_HC_Init>
 8005c0c:	2803      	cmp	r0, #3
 8005c0e:	bf9a      	itte	ls
 8005c10:	4b02      	ldrls	r3, [pc, #8]	; (8005c1c <USBH_LL_OpenPipe+0x2c>)
 8005c12:	5c18      	ldrbls	r0, [r3, r0]
 8005c14:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005c16:	b004      	add	sp, #16
 8005c18:	bd10      	pop	{r4, pc}
 8005c1a:	bf00      	nop
 8005c1c:	08008911 	.word	0x08008911

08005c20 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005c20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8005c22:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005c26:	f7fb f96a 	bl	8000efe <HAL_HCD_HC_Halt>
 8005c2a:	2803      	cmp	r0, #3
 8005c2c:	bf9a      	itte	ls
 8005c2e:	4b02      	ldrls	r3, [pc, #8]	; (8005c38 <USBH_LL_ClosePipe+0x18>)
 8005c30:	5c18      	ldrbls	r0, [r3, r0]
 8005c32:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005c34:	bd08      	pop	{r3, pc}
 8005c36:	bf00      	nop
 8005c38:	08008911 	.word	0x08008911

08005c3c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005c3e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8005c42:	9403      	str	r4, [sp, #12]
 8005c44:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005c48:	9402      	str	r4, [sp, #8]
 8005c4a:	9c07      	ldr	r4, [sp, #28]
 8005c4c:	9401      	str	r4, [sp, #4]
 8005c4e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005c52:	9400      	str	r4, [sp, #0]
 8005c54:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005c58:	f7fb f9ae 	bl	8000fb8 <HAL_HCD_HC_SubmitRequest>
 8005c5c:	2803      	cmp	r0, #3
 8005c5e:	bf9a      	itte	ls
 8005c60:	4b02      	ldrls	r3, [pc, #8]	; (8005c6c <USBH_LL_SubmitURB+0x30>)
 8005c62:	5c18      	ldrbls	r0, [r3, r0]
 8005c64:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005c66:	b004      	add	sp, #16
 8005c68:	bd10      	pop	{r4, pc}
 8005c6a:	bf00      	nop
 8005c6c:	08008911 	.word	0x08008911

08005c70 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8005c70:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005c74:	f7fb bd49 	b.w	800170a <HAL_HCD_HC_GetURBState>

08005c78 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8005c78:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8005c7a:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d102      	bne.n	8005c88 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8005c82:	4608      	mov	r0, r1
 8005c84:	f000 f816 	bl	8005cb4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8005c88:	20c8      	movs	r0, #200	; 0xc8
 8005c8a:	f7fa fcd1 	bl	8000630 <HAL_Delay>
  return USBH_OK;
}
 8005c8e:	2000      	movs	r0, #0
 8005c90:	bd08      	pop	{r3, pc}

08005c92 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8005c92:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8005c96:	2328      	movs	r3, #40	; 0x28
 8005c98:	fb03 0101 	mla	r1, r3, r1, r0
 8005c9c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8005ca0:	b11b      	cbz	r3, 8005caa <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8005ca2:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8005caa:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8005cae:	e7fa      	b.n	8005ca6 <USBH_LL_SetToggle+0x14>

08005cb0 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8005cb0:	f7fa bcbe 	b.w	8000630 <HAL_Delay>

08005cb4 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8005cb4:	fab0 f280 	clz	r2, r0
 8005cb8:	0952      	lsrs	r2, r2, #5
 8005cba:	2101      	movs	r1, #1
 8005cbc:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <MX_DriverVbusFS+0x10>)
 8005cbe:	f7fb b8e1 	b.w	8000e84 <HAL_GPIO_WritePin>
 8005cc2:	bf00      	nop
 8005cc4:	40020800 	.word	0x40020800

08005cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ccc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005cce:	e003      	b.n	8005cd8 <LoopCopyDataInit>

08005cd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005cd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005cd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005cd6:	3104      	adds	r1, #4

08005cd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005cd8:	480b      	ldr	r0, [pc, #44]	; (8005d08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005cda:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005cdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005cde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ce0:	d3f6      	bcc.n	8005cd0 <CopyDataInit>
  ldr  r2, =_sbss
 8005ce2:	4a0b      	ldr	r2, [pc, #44]	; (8005d10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ce4:	e002      	b.n	8005cec <LoopFillZerobss>

08005ce6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005ce6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005ce8:	f842 3b04 	str.w	r3, [r2], #4

08005cec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005cee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005cf0:	d3f9      	bcc.n	8005ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005cf2:	f7ff fe5d 	bl	80059b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cf6:	f000 f817 	bl	8005d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cfa:	f7fe fcc3 	bl	8004684 <main>
  bx  lr    
 8005cfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005d00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005d04:	08008958 	.word	0x08008958
  ldr  r0, =_sdata
 8005d08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005d0c:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8005d10:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8005d14:	20000a74 	.word	0x20000a74

08005d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d18:	e7fe      	b.n	8005d18 <ADC_IRQHandler>
	...

08005d1c <__errno>:
 8005d1c:	4b01      	ldr	r3, [pc, #4]	; (8005d24 <__errno+0x8>)
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000044 	.word	0x20000044

08005d28 <__libc_init_array>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	4e0d      	ldr	r6, [pc, #52]	; (8005d60 <__libc_init_array+0x38>)
 8005d2c:	4c0d      	ldr	r4, [pc, #52]	; (8005d64 <__libc_init_array+0x3c>)
 8005d2e:	1ba4      	subs	r4, r4, r6
 8005d30:	10a4      	asrs	r4, r4, #2
 8005d32:	2500      	movs	r5, #0
 8005d34:	42a5      	cmp	r5, r4
 8005d36:	d109      	bne.n	8005d4c <__libc_init_array+0x24>
 8005d38:	4e0b      	ldr	r6, [pc, #44]	; (8005d68 <__libc_init_array+0x40>)
 8005d3a:	4c0c      	ldr	r4, [pc, #48]	; (8005d6c <__libc_init_array+0x44>)
 8005d3c:	f000 fc5c 	bl	80065f8 <_init>
 8005d40:	1ba4      	subs	r4, r4, r6
 8005d42:	10a4      	asrs	r4, r4, #2
 8005d44:	2500      	movs	r5, #0
 8005d46:	42a5      	cmp	r5, r4
 8005d48:	d105      	bne.n	8005d56 <__libc_init_array+0x2e>
 8005d4a:	bd70      	pop	{r4, r5, r6, pc}
 8005d4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d50:	4798      	blx	r3
 8005d52:	3501      	adds	r5, #1
 8005d54:	e7ee      	b.n	8005d34 <__libc_init_array+0xc>
 8005d56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d5a:	4798      	blx	r3
 8005d5c:	3501      	adds	r5, #1
 8005d5e:	e7f2      	b.n	8005d46 <__libc_init_array+0x1e>
 8005d60:	08008950 	.word	0x08008950
 8005d64:	08008950 	.word	0x08008950
 8005d68:	08008950 	.word	0x08008950
 8005d6c:	08008954 	.word	0x08008954

08005d70 <malloc>:
 8005d70:	4b02      	ldr	r3, [pc, #8]	; (8005d7c <malloc+0xc>)
 8005d72:	4601      	mov	r1, r0
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	f000 b861 	b.w	8005e3c <_malloc_r>
 8005d7a:	bf00      	nop
 8005d7c:	20000044 	.word	0x20000044

08005d80 <free>:
 8005d80:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <free+0xc>)
 8005d82:	4601      	mov	r1, r0
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f000 b80b 	b.w	8005da0 <_free_r>
 8005d8a:	bf00      	nop
 8005d8c:	20000044 	.word	0x20000044

08005d90 <memset>:
 8005d90:	4402      	add	r2, r0
 8005d92:	4603      	mov	r3, r0
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d100      	bne.n	8005d9a <memset+0xa>
 8005d98:	4770      	bx	lr
 8005d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d9e:	e7f9      	b.n	8005d94 <memset+0x4>

08005da0 <_free_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4605      	mov	r5, r0
 8005da4:	2900      	cmp	r1, #0
 8005da6:	d045      	beq.n	8005e34 <_free_r+0x94>
 8005da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dac:	1f0c      	subs	r4, r1, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bfb8      	it	lt
 8005db2:	18e4      	addlt	r4, r4, r3
 8005db4:	f000 f8e4 	bl	8005f80 <__malloc_lock>
 8005db8:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <_free_r+0x98>)
 8005dba:	6813      	ldr	r3, [r2, #0]
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	b933      	cbnz	r3, 8005dce <_free_r+0x2e>
 8005dc0:	6063      	str	r3, [r4, #4]
 8005dc2:	6014      	str	r4, [r2, #0]
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dca:	f000 b8da 	b.w	8005f82 <__malloc_unlock>
 8005dce:	42a3      	cmp	r3, r4
 8005dd0:	d90c      	bls.n	8005dec <_free_r+0x4c>
 8005dd2:	6821      	ldr	r1, [r4, #0]
 8005dd4:	1862      	adds	r2, r4, r1
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	bf04      	itt	eq
 8005dda:	681a      	ldreq	r2, [r3, #0]
 8005ddc:	685b      	ldreq	r3, [r3, #4]
 8005dde:	6063      	str	r3, [r4, #4]
 8005de0:	bf04      	itt	eq
 8005de2:	1852      	addeq	r2, r2, r1
 8005de4:	6022      	streq	r2, [r4, #0]
 8005de6:	6004      	str	r4, [r0, #0]
 8005de8:	e7ec      	b.n	8005dc4 <_free_r+0x24>
 8005dea:	4613      	mov	r3, r2
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	b10a      	cbz	r2, 8005df4 <_free_r+0x54>
 8005df0:	42a2      	cmp	r2, r4
 8005df2:	d9fa      	bls.n	8005dea <_free_r+0x4a>
 8005df4:	6819      	ldr	r1, [r3, #0]
 8005df6:	1858      	adds	r0, r3, r1
 8005df8:	42a0      	cmp	r0, r4
 8005dfa:	d10b      	bne.n	8005e14 <_free_r+0x74>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	4401      	add	r1, r0
 8005e00:	1858      	adds	r0, r3, r1
 8005e02:	4282      	cmp	r2, r0
 8005e04:	6019      	str	r1, [r3, #0]
 8005e06:	d1dd      	bne.n	8005dc4 <_free_r+0x24>
 8005e08:	6810      	ldr	r0, [r2, #0]
 8005e0a:	6852      	ldr	r2, [r2, #4]
 8005e0c:	605a      	str	r2, [r3, #4]
 8005e0e:	4401      	add	r1, r0
 8005e10:	6019      	str	r1, [r3, #0]
 8005e12:	e7d7      	b.n	8005dc4 <_free_r+0x24>
 8005e14:	d902      	bls.n	8005e1c <_free_r+0x7c>
 8005e16:	230c      	movs	r3, #12
 8005e18:	602b      	str	r3, [r5, #0]
 8005e1a:	e7d3      	b.n	8005dc4 <_free_r+0x24>
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	1821      	adds	r1, r4, r0
 8005e20:	428a      	cmp	r2, r1
 8005e22:	bf04      	itt	eq
 8005e24:	6811      	ldreq	r1, [r2, #0]
 8005e26:	6852      	ldreq	r2, [r2, #4]
 8005e28:	6062      	str	r2, [r4, #4]
 8005e2a:	bf04      	itt	eq
 8005e2c:	1809      	addeq	r1, r1, r0
 8005e2e:	6021      	streq	r1, [r4, #0]
 8005e30:	605c      	str	r4, [r3, #4]
 8005e32:	e7c7      	b.n	8005dc4 <_free_r+0x24>
 8005e34:	bd38      	pop	{r3, r4, r5, pc}
 8005e36:	bf00      	nop
 8005e38:	200000e4 	.word	0x200000e4

08005e3c <_malloc_r>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	1ccd      	adds	r5, r1, #3
 8005e40:	f025 0503 	bic.w	r5, r5, #3
 8005e44:	3508      	adds	r5, #8
 8005e46:	2d0c      	cmp	r5, #12
 8005e48:	bf38      	it	cc
 8005e4a:	250c      	movcc	r5, #12
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	4606      	mov	r6, r0
 8005e50:	db01      	blt.n	8005e56 <_malloc_r+0x1a>
 8005e52:	42a9      	cmp	r1, r5
 8005e54:	d903      	bls.n	8005e5e <_malloc_r+0x22>
 8005e56:	230c      	movs	r3, #12
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	bd70      	pop	{r4, r5, r6, pc}
 8005e5e:	f000 f88f 	bl	8005f80 <__malloc_lock>
 8005e62:	4a23      	ldr	r2, [pc, #140]	; (8005ef0 <_malloc_r+0xb4>)
 8005e64:	6814      	ldr	r4, [r2, #0]
 8005e66:	4621      	mov	r1, r4
 8005e68:	b991      	cbnz	r1, 8005e90 <_malloc_r+0x54>
 8005e6a:	4c22      	ldr	r4, [pc, #136]	; (8005ef4 <_malloc_r+0xb8>)
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	b91b      	cbnz	r3, 8005e78 <_malloc_r+0x3c>
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 f841 	bl	8005ef8 <_sbrk_r>
 8005e76:	6020      	str	r0, [r4, #0]
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f000 f83c 	bl	8005ef8 <_sbrk_r>
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	d126      	bne.n	8005ed2 <_malloc_r+0x96>
 8005e84:	230c      	movs	r3, #12
 8005e86:	6033      	str	r3, [r6, #0]
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f000 f87a 	bl	8005f82 <__malloc_unlock>
 8005e8e:	e7e4      	b.n	8005e5a <_malloc_r+0x1e>
 8005e90:	680b      	ldr	r3, [r1, #0]
 8005e92:	1b5b      	subs	r3, r3, r5
 8005e94:	d41a      	bmi.n	8005ecc <_malloc_r+0x90>
 8005e96:	2b0b      	cmp	r3, #11
 8005e98:	d90f      	bls.n	8005eba <_malloc_r+0x7e>
 8005e9a:	600b      	str	r3, [r1, #0]
 8005e9c:	50cd      	str	r5, [r1, r3]
 8005e9e:	18cc      	adds	r4, r1, r3
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f000 f86e 	bl	8005f82 <__malloc_unlock>
 8005ea6:	f104 000b 	add.w	r0, r4, #11
 8005eaa:	1d23      	adds	r3, r4, #4
 8005eac:	f020 0007 	bic.w	r0, r0, #7
 8005eb0:	1ac3      	subs	r3, r0, r3
 8005eb2:	d01b      	beq.n	8005eec <_malloc_r+0xb0>
 8005eb4:	425a      	negs	r2, r3
 8005eb6:	50e2      	str	r2, [r4, r3]
 8005eb8:	bd70      	pop	{r4, r5, r6, pc}
 8005eba:	428c      	cmp	r4, r1
 8005ebc:	bf0d      	iteet	eq
 8005ebe:	6863      	ldreq	r3, [r4, #4]
 8005ec0:	684b      	ldrne	r3, [r1, #4]
 8005ec2:	6063      	strne	r3, [r4, #4]
 8005ec4:	6013      	streq	r3, [r2, #0]
 8005ec6:	bf18      	it	ne
 8005ec8:	460c      	movne	r4, r1
 8005eca:	e7e9      	b.n	8005ea0 <_malloc_r+0x64>
 8005ecc:	460c      	mov	r4, r1
 8005ece:	6849      	ldr	r1, [r1, #4]
 8005ed0:	e7ca      	b.n	8005e68 <_malloc_r+0x2c>
 8005ed2:	1cc4      	adds	r4, r0, #3
 8005ed4:	f024 0403 	bic.w	r4, r4, #3
 8005ed8:	42a0      	cmp	r0, r4
 8005eda:	d005      	beq.n	8005ee8 <_malloc_r+0xac>
 8005edc:	1a21      	subs	r1, r4, r0
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f000 f80a 	bl	8005ef8 <_sbrk_r>
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d0cd      	beq.n	8005e84 <_malloc_r+0x48>
 8005ee8:	6025      	str	r5, [r4, #0]
 8005eea:	e7d9      	b.n	8005ea0 <_malloc_r+0x64>
 8005eec:	bd70      	pop	{r4, r5, r6, pc}
 8005eee:	bf00      	nop
 8005ef0:	200000e4 	.word	0x200000e4
 8005ef4:	200000e8 	.word	0x200000e8

08005ef8 <_sbrk_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4c06      	ldr	r4, [pc, #24]	; (8005f14 <_sbrk_r+0x1c>)
 8005efc:	2300      	movs	r3, #0
 8005efe:	4605      	mov	r5, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	f7ff fd3a 	bl	800597c <_sbrk>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_sbrk_r+0x1a>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_sbrk_r+0x1a>
 8005f10:	602b      	str	r3, [r5, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	20000a70 	.word	0x20000a70

08005f18 <sniprintf>:
 8005f18:	b40c      	push	{r2, r3}
 8005f1a:	b530      	push	{r4, r5, lr}
 8005f1c:	4b17      	ldr	r3, [pc, #92]	; (8005f7c <sniprintf+0x64>)
 8005f1e:	1e0c      	subs	r4, r1, #0
 8005f20:	b09d      	sub	sp, #116	; 0x74
 8005f22:	681d      	ldr	r5, [r3, #0]
 8005f24:	da08      	bge.n	8005f38 <sniprintf+0x20>
 8005f26:	238b      	movs	r3, #139	; 0x8b
 8005f28:	602b      	str	r3, [r5, #0]
 8005f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2e:	b01d      	add	sp, #116	; 0x74
 8005f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f34:	b002      	add	sp, #8
 8005f36:	4770      	bx	lr
 8005f38:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f40:	bf14      	ite	ne
 8005f42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f46:	4623      	moveq	r3, r4
 8005f48:	9304      	str	r3, [sp, #16]
 8005f4a:	9307      	str	r3, [sp, #28]
 8005f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f50:	9002      	str	r0, [sp, #8]
 8005f52:	9006      	str	r0, [sp, #24]
 8005f54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f5a:	ab21      	add	r3, sp, #132	; 0x84
 8005f5c:	a902      	add	r1, sp, #8
 8005f5e:	4628      	mov	r0, r5
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	f000 f86b 	bl	800603c <_svfiprintf_r>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	bfbc      	itt	lt
 8005f6a:	238b      	movlt	r3, #139	; 0x8b
 8005f6c:	602b      	strlt	r3, [r5, #0]
 8005f6e:	2c00      	cmp	r4, #0
 8005f70:	d0dd      	beq.n	8005f2e <sniprintf+0x16>
 8005f72:	9b02      	ldr	r3, [sp, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	e7d9      	b.n	8005f2e <sniprintf+0x16>
 8005f7a:	bf00      	nop
 8005f7c:	20000044 	.word	0x20000044

08005f80 <__malloc_lock>:
 8005f80:	4770      	bx	lr

08005f82 <__malloc_unlock>:
 8005f82:	4770      	bx	lr

08005f84 <__ssputs_r>:
 8005f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	688e      	ldr	r6, [r1, #8]
 8005f8a:	429e      	cmp	r6, r3
 8005f8c:	4682      	mov	sl, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	4691      	mov	r9, r2
 8005f92:	4698      	mov	r8, r3
 8005f94:	d835      	bhi.n	8006002 <__ssputs_r+0x7e>
 8005f96:	898a      	ldrh	r2, [r1, #12]
 8005f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f9c:	d031      	beq.n	8006002 <__ssputs_r+0x7e>
 8005f9e:	6825      	ldr	r5, [r4, #0]
 8005fa0:	6909      	ldr	r1, [r1, #16]
 8005fa2:	1a6f      	subs	r7, r5, r1
 8005fa4:	6965      	ldr	r5, [r4, #20]
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fac:	fb95 f5f3 	sdiv	r5, r5, r3
 8005fb0:	f108 0301 	add.w	r3, r8, #1
 8005fb4:	443b      	add	r3, r7
 8005fb6:	429d      	cmp	r5, r3
 8005fb8:	bf38      	it	cc
 8005fba:	461d      	movcc	r5, r3
 8005fbc:	0553      	lsls	r3, r2, #21
 8005fbe:	d531      	bpl.n	8006024 <__ssputs_r+0xa0>
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	f7ff ff3b 	bl	8005e3c <_malloc_r>
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	b950      	cbnz	r0, 8005fe0 <__ssputs_r+0x5c>
 8005fca:	230c      	movs	r3, #12
 8005fcc:	f8ca 3000 	str.w	r3, [sl]
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd6:	81a3      	strh	r3, [r4, #12]
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe0:	463a      	mov	r2, r7
 8005fe2:	6921      	ldr	r1, [r4, #16]
 8005fe4:	f000 fab4 	bl	8006550 <memcpy>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	6126      	str	r6, [r4, #16]
 8005ff6:	6165      	str	r5, [r4, #20]
 8005ff8:	443e      	add	r6, r7
 8005ffa:	1bed      	subs	r5, r5, r7
 8005ffc:	6026      	str	r6, [r4, #0]
 8005ffe:	60a5      	str	r5, [r4, #8]
 8006000:	4646      	mov	r6, r8
 8006002:	4546      	cmp	r6, r8
 8006004:	bf28      	it	cs
 8006006:	4646      	movcs	r6, r8
 8006008:	4632      	mov	r2, r6
 800600a:	4649      	mov	r1, r9
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	f000 faaa 	bl	8006566 <memmove>
 8006012:	68a3      	ldr	r3, [r4, #8]
 8006014:	1b9b      	subs	r3, r3, r6
 8006016:	60a3      	str	r3, [r4, #8]
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	441e      	add	r6, r3
 800601c:	6026      	str	r6, [r4, #0]
 800601e:	2000      	movs	r0, #0
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	462a      	mov	r2, r5
 8006026:	f000 fab8 	bl	800659a <_realloc_r>
 800602a:	4606      	mov	r6, r0
 800602c:	2800      	cmp	r0, #0
 800602e:	d1e1      	bne.n	8005ff4 <__ssputs_r+0x70>
 8006030:	6921      	ldr	r1, [r4, #16]
 8006032:	4650      	mov	r0, sl
 8006034:	f7ff feb4 	bl	8005da0 <_free_r>
 8006038:	e7c7      	b.n	8005fca <__ssputs_r+0x46>
	...

0800603c <_svfiprintf_r>:
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	b09d      	sub	sp, #116	; 0x74
 8006042:	4680      	mov	r8, r0
 8006044:	9303      	str	r3, [sp, #12]
 8006046:	898b      	ldrh	r3, [r1, #12]
 8006048:	061c      	lsls	r4, r3, #24
 800604a:	460d      	mov	r5, r1
 800604c:	4616      	mov	r6, r2
 800604e:	d50f      	bpl.n	8006070 <_svfiprintf_r+0x34>
 8006050:	690b      	ldr	r3, [r1, #16]
 8006052:	b96b      	cbnz	r3, 8006070 <_svfiprintf_r+0x34>
 8006054:	2140      	movs	r1, #64	; 0x40
 8006056:	f7ff fef1 	bl	8005e3c <_malloc_r>
 800605a:	6028      	str	r0, [r5, #0]
 800605c:	6128      	str	r0, [r5, #16]
 800605e:	b928      	cbnz	r0, 800606c <_svfiprintf_r+0x30>
 8006060:	230c      	movs	r3, #12
 8006062:	f8c8 3000 	str.w	r3, [r8]
 8006066:	f04f 30ff 	mov.w	r0, #4294967295
 800606a:	e0c5      	b.n	80061f8 <_svfiprintf_r+0x1bc>
 800606c:	2340      	movs	r3, #64	; 0x40
 800606e:	616b      	str	r3, [r5, #20]
 8006070:	2300      	movs	r3, #0
 8006072:	9309      	str	r3, [sp, #36]	; 0x24
 8006074:	2320      	movs	r3, #32
 8006076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800607a:	2330      	movs	r3, #48	; 0x30
 800607c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006080:	f04f 0b01 	mov.w	fp, #1
 8006084:	4637      	mov	r7, r6
 8006086:	463c      	mov	r4, r7
 8006088:	f814 3b01 	ldrb.w	r3, [r4], #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d13c      	bne.n	800610a <_svfiprintf_r+0xce>
 8006090:	ebb7 0a06 	subs.w	sl, r7, r6
 8006094:	d00b      	beq.n	80060ae <_svfiprintf_r+0x72>
 8006096:	4653      	mov	r3, sl
 8006098:	4632      	mov	r2, r6
 800609a:	4629      	mov	r1, r5
 800609c:	4640      	mov	r0, r8
 800609e:	f7ff ff71 	bl	8005f84 <__ssputs_r>
 80060a2:	3001      	adds	r0, #1
 80060a4:	f000 80a3 	beq.w	80061ee <_svfiprintf_r+0x1b2>
 80060a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060aa:	4453      	add	r3, sl
 80060ac:	9309      	str	r3, [sp, #36]	; 0x24
 80060ae:	783b      	ldrb	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 809c 	beq.w	80061ee <_svfiprintf_r+0x1b2>
 80060b6:	2300      	movs	r3, #0
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295
 80060bc:	9304      	str	r3, [sp, #16]
 80060be:	9307      	str	r3, [sp, #28]
 80060c0:	9205      	str	r2, [sp, #20]
 80060c2:	9306      	str	r3, [sp, #24]
 80060c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060c8:	931a      	str	r3, [sp, #104]	; 0x68
 80060ca:	2205      	movs	r2, #5
 80060cc:	7821      	ldrb	r1, [r4, #0]
 80060ce:	4850      	ldr	r0, [pc, #320]	; (8006210 <_svfiprintf_r+0x1d4>)
 80060d0:	f7fa f886 	bl	80001e0 <memchr>
 80060d4:	1c67      	adds	r7, r4, #1
 80060d6:	9b04      	ldr	r3, [sp, #16]
 80060d8:	b9d8      	cbnz	r0, 8006112 <_svfiprintf_r+0xd6>
 80060da:	06d9      	lsls	r1, r3, #27
 80060dc:	bf44      	itt	mi
 80060de:	2220      	movmi	r2, #32
 80060e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060e4:	071a      	lsls	r2, r3, #28
 80060e6:	bf44      	itt	mi
 80060e8:	222b      	movmi	r2, #43	; 0x2b
 80060ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060ee:	7822      	ldrb	r2, [r4, #0]
 80060f0:	2a2a      	cmp	r2, #42	; 0x2a
 80060f2:	d016      	beq.n	8006122 <_svfiprintf_r+0xe6>
 80060f4:	9a07      	ldr	r2, [sp, #28]
 80060f6:	2100      	movs	r1, #0
 80060f8:	200a      	movs	r0, #10
 80060fa:	4627      	mov	r7, r4
 80060fc:	3401      	adds	r4, #1
 80060fe:	783b      	ldrb	r3, [r7, #0]
 8006100:	3b30      	subs	r3, #48	; 0x30
 8006102:	2b09      	cmp	r3, #9
 8006104:	d951      	bls.n	80061aa <_svfiprintf_r+0x16e>
 8006106:	b1c9      	cbz	r1, 800613c <_svfiprintf_r+0x100>
 8006108:	e011      	b.n	800612e <_svfiprintf_r+0xf2>
 800610a:	2b25      	cmp	r3, #37	; 0x25
 800610c:	d0c0      	beq.n	8006090 <_svfiprintf_r+0x54>
 800610e:	4627      	mov	r7, r4
 8006110:	e7b9      	b.n	8006086 <_svfiprintf_r+0x4a>
 8006112:	4a3f      	ldr	r2, [pc, #252]	; (8006210 <_svfiprintf_r+0x1d4>)
 8006114:	1a80      	subs	r0, r0, r2
 8006116:	fa0b f000 	lsl.w	r0, fp, r0
 800611a:	4318      	orrs	r0, r3
 800611c:	9004      	str	r0, [sp, #16]
 800611e:	463c      	mov	r4, r7
 8006120:	e7d3      	b.n	80060ca <_svfiprintf_r+0x8e>
 8006122:	9a03      	ldr	r2, [sp, #12]
 8006124:	1d11      	adds	r1, r2, #4
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	9103      	str	r1, [sp, #12]
 800612a:	2a00      	cmp	r2, #0
 800612c:	db01      	blt.n	8006132 <_svfiprintf_r+0xf6>
 800612e:	9207      	str	r2, [sp, #28]
 8006130:	e004      	b.n	800613c <_svfiprintf_r+0x100>
 8006132:	4252      	negs	r2, r2
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	9207      	str	r2, [sp, #28]
 800613a:	9304      	str	r3, [sp, #16]
 800613c:	783b      	ldrb	r3, [r7, #0]
 800613e:	2b2e      	cmp	r3, #46	; 0x2e
 8006140:	d10e      	bne.n	8006160 <_svfiprintf_r+0x124>
 8006142:	787b      	ldrb	r3, [r7, #1]
 8006144:	2b2a      	cmp	r3, #42	; 0x2a
 8006146:	f107 0101 	add.w	r1, r7, #1
 800614a:	d132      	bne.n	80061b2 <_svfiprintf_r+0x176>
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	1d1a      	adds	r2, r3, #4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	9203      	str	r2, [sp, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	bfb8      	it	lt
 8006158:	f04f 33ff 	movlt.w	r3, #4294967295
 800615c:	3702      	adds	r7, #2
 800615e:	9305      	str	r3, [sp, #20]
 8006160:	4c2c      	ldr	r4, [pc, #176]	; (8006214 <_svfiprintf_r+0x1d8>)
 8006162:	7839      	ldrb	r1, [r7, #0]
 8006164:	2203      	movs	r2, #3
 8006166:	4620      	mov	r0, r4
 8006168:	f7fa f83a 	bl	80001e0 <memchr>
 800616c:	b138      	cbz	r0, 800617e <_svfiprintf_r+0x142>
 800616e:	2340      	movs	r3, #64	; 0x40
 8006170:	1b00      	subs	r0, r0, r4
 8006172:	fa03 f000 	lsl.w	r0, r3, r0
 8006176:	9b04      	ldr	r3, [sp, #16]
 8006178:	4303      	orrs	r3, r0
 800617a:	9304      	str	r3, [sp, #16]
 800617c:	3701      	adds	r7, #1
 800617e:	7839      	ldrb	r1, [r7, #0]
 8006180:	4825      	ldr	r0, [pc, #148]	; (8006218 <_svfiprintf_r+0x1dc>)
 8006182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006186:	2206      	movs	r2, #6
 8006188:	1c7e      	adds	r6, r7, #1
 800618a:	f7fa f829 	bl	80001e0 <memchr>
 800618e:	2800      	cmp	r0, #0
 8006190:	d035      	beq.n	80061fe <_svfiprintf_r+0x1c2>
 8006192:	4b22      	ldr	r3, [pc, #136]	; (800621c <_svfiprintf_r+0x1e0>)
 8006194:	b9fb      	cbnz	r3, 80061d6 <_svfiprintf_r+0x19a>
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	3307      	adds	r3, #7
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	3308      	adds	r3, #8
 80061a0:	9303      	str	r3, [sp, #12]
 80061a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a4:	444b      	add	r3, r9
 80061a6:	9309      	str	r3, [sp, #36]	; 0x24
 80061a8:	e76c      	b.n	8006084 <_svfiprintf_r+0x48>
 80061aa:	fb00 3202 	mla	r2, r0, r2, r3
 80061ae:	2101      	movs	r1, #1
 80061b0:	e7a3      	b.n	80060fa <_svfiprintf_r+0xbe>
 80061b2:	2300      	movs	r3, #0
 80061b4:	9305      	str	r3, [sp, #20]
 80061b6:	4618      	mov	r0, r3
 80061b8:	240a      	movs	r4, #10
 80061ba:	460f      	mov	r7, r1
 80061bc:	3101      	adds	r1, #1
 80061be:	783a      	ldrb	r2, [r7, #0]
 80061c0:	3a30      	subs	r2, #48	; 0x30
 80061c2:	2a09      	cmp	r2, #9
 80061c4:	d903      	bls.n	80061ce <_svfiprintf_r+0x192>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0ca      	beq.n	8006160 <_svfiprintf_r+0x124>
 80061ca:	9005      	str	r0, [sp, #20]
 80061cc:	e7c8      	b.n	8006160 <_svfiprintf_r+0x124>
 80061ce:	fb04 2000 	mla	r0, r4, r0, r2
 80061d2:	2301      	movs	r3, #1
 80061d4:	e7f1      	b.n	80061ba <_svfiprintf_r+0x17e>
 80061d6:	ab03      	add	r3, sp, #12
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	462a      	mov	r2, r5
 80061dc:	4b10      	ldr	r3, [pc, #64]	; (8006220 <_svfiprintf_r+0x1e4>)
 80061de:	a904      	add	r1, sp, #16
 80061e0:	4640      	mov	r0, r8
 80061e2:	f3af 8000 	nop.w
 80061e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80061ea:	4681      	mov	r9, r0
 80061ec:	d1d9      	bne.n	80061a2 <_svfiprintf_r+0x166>
 80061ee:	89ab      	ldrh	r3, [r5, #12]
 80061f0:	065b      	lsls	r3, r3, #25
 80061f2:	f53f af38 	bmi.w	8006066 <_svfiprintf_r+0x2a>
 80061f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061f8:	b01d      	add	sp, #116	; 0x74
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fe:	ab03      	add	r3, sp, #12
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	462a      	mov	r2, r5
 8006204:	4b06      	ldr	r3, [pc, #24]	; (8006220 <_svfiprintf_r+0x1e4>)
 8006206:	a904      	add	r1, sp, #16
 8006208:	4640      	mov	r0, r8
 800620a:	f000 f881 	bl	8006310 <_printf_i>
 800620e:	e7ea      	b.n	80061e6 <_svfiprintf_r+0x1aa>
 8006210:	08008915 	.word	0x08008915
 8006214:	0800891b 	.word	0x0800891b
 8006218:	0800891f 	.word	0x0800891f
 800621c:	00000000 	.word	0x00000000
 8006220:	08005f85 	.word	0x08005f85

08006224 <_printf_common>:
 8006224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006228:	4691      	mov	r9, r2
 800622a:	461f      	mov	r7, r3
 800622c:	688a      	ldr	r2, [r1, #8]
 800622e:	690b      	ldr	r3, [r1, #16]
 8006230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006234:	4293      	cmp	r3, r2
 8006236:	bfb8      	it	lt
 8006238:	4613      	movlt	r3, r2
 800623a:	f8c9 3000 	str.w	r3, [r9]
 800623e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006242:	4606      	mov	r6, r0
 8006244:	460c      	mov	r4, r1
 8006246:	b112      	cbz	r2, 800624e <_printf_common+0x2a>
 8006248:	3301      	adds	r3, #1
 800624a:	f8c9 3000 	str.w	r3, [r9]
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	0699      	lsls	r1, r3, #26
 8006252:	bf42      	ittt	mi
 8006254:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006258:	3302      	addmi	r3, #2
 800625a:	f8c9 3000 	strmi.w	r3, [r9]
 800625e:	6825      	ldr	r5, [r4, #0]
 8006260:	f015 0506 	ands.w	r5, r5, #6
 8006264:	d107      	bne.n	8006276 <_printf_common+0x52>
 8006266:	f104 0a19 	add.w	sl, r4, #25
 800626a:	68e3      	ldr	r3, [r4, #12]
 800626c:	f8d9 2000 	ldr.w	r2, [r9]
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	429d      	cmp	r5, r3
 8006274:	db29      	blt.n	80062ca <_printf_common+0xa6>
 8006276:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	3300      	adds	r3, #0
 800627e:	bf18      	it	ne
 8006280:	2301      	movne	r3, #1
 8006282:	0692      	lsls	r2, r2, #26
 8006284:	d42e      	bmi.n	80062e4 <_printf_common+0xc0>
 8006286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800628a:	4639      	mov	r1, r7
 800628c:	4630      	mov	r0, r6
 800628e:	47c0      	blx	r8
 8006290:	3001      	adds	r0, #1
 8006292:	d021      	beq.n	80062d8 <_printf_common+0xb4>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	68e5      	ldr	r5, [r4, #12]
 8006298:	f8d9 2000 	ldr.w	r2, [r9]
 800629c:	f003 0306 	and.w	r3, r3, #6
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	bf08      	it	eq
 80062a4:	1aad      	subeq	r5, r5, r2
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	6922      	ldr	r2, [r4, #16]
 80062aa:	bf0c      	ite	eq
 80062ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b0:	2500      	movne	r5, #0
 80062b2:	4293      	cmp	r3, r2
 80062b4:	bfc4      	itt	gt
 80062b6:	1a9b      	subgt	r3, r3, r2
 80062b8:	18ed      	addgt	r5, r5, r3
 80062ba:	f04f 0900 	mov.w	r9, #0
 80062be:	341a      	adds	r4, #26
 80062c0:	454d      	cmp	r5, r9
 80062c2:	d11b      	bne.n	80062fc <_printf_common+0xd8>
 80062c4:	2000      	movs	r0, #0
 80062c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ca:	2301      	movs	r3, #1
 80062cc:	4652      	mov	r2, sl
 80062ce:	4639      	mov	r1, r7
 80062d0:	4630      	mov	r0, r6
 80062d2:	47c0      	blx	r8
 80062d4:	3001      	adds	r0, #1
 80062d6:	d103      	bne.n	80062e0 <_printf_common+0xbc>
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e0:	3501      	adds	r5, #1
 80062e2:	e7c2      	b.n	800626a <_printf_common+0x46>
 80062e4:	18e1      	adds	r1, r4, r3
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	2030      	movs	r0, #48	; 0x30
 80062ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062ee:	4422      	add	r2, r4
 80062f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062f8:	3302      	adds	r3, #2
 80062fa:	e7c4      	b.n	8006286 <_printf_common+0x62>
 80062fc:	2301      	movs	r3, #1
 80062fe:	4622      	mov	r2, r4
 8006300:	4639      	mov	r1, r7
 8006302:	4630      	mov	r0, r6
 8006304:	47c0      	blx	r8
 8006306:	3001      	adds	r0, #1
 8006308:	d0e6      	beq.n	80062d8 <_printf_common+0xb4>
 800630a:	f109 0901 	add.w	r9, r9, #1
 800630e:	e7d7      	b.n	80062c0 <_printf_common+0x9c>

08006310 <_printf_i>:
 8006310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006314:	4617      	mov	r7, r2
 8006316:	7e0a      	ldrb	r2, [r1, #24]
 8006318:	b085      	sub	sp, #20
 800631a:	2a6e      	cmp	r2, #110	; 0x6e
 800631c:	4698      	mov	r8, r3
 800631e:	4606      	mov	r6, r0
 8006320:	460c      	mov	r4, r1
 8006322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006324:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006328:	f000 80bc 	beq.w	80064a4 <_printf_i+0x194>
 800632c:	d81a      	bhi.n	8006364 <_printf_i+0x54>
 800632e:	2a63      	cmp	r2, #99	; 0x63
 8006330:	d02e      	beq.n	8006390 <_printf_i+0x80>
 8006332:	d80a      	bhi.n	800634a <_printf_i+0x3a>
 8006334:	2a00      	cmp	r2, #0
 8006336:	f000 80c8 	beq.w	80064ca <_printf_i+0x1ba>
 800633a:	2a58      	cmp	r2, #88	; 0x58
 800633c:	f000 808a 	beq.w	8006454 <_printf_i+0x144>
 8006340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006344:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006348:	e02a      	b.n	80063a0 <_printf_i+0x90>
 800634a:	2a64      	cmp	r2, #100	; 0x64
 800634c:	d001      	beq.n	8006352 <_printf_i+0x42>
 800634e:	2a69      	cmp	r2, #105	; 0x69
 8006350:	d1f6      	bne.n	8006340 <_printf_i+0x30>
 8006352:	6821      	ldr	r1, [r4, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	f011 0f80 	tst.w	r1, #128	; 0x80
 800635a:	d023      	beq.n	80063a4 <_printf_i+0x94>
 800635c:	1d11      	adds	r1, r2, #4
 800635e:	6019      	str	r1, [r3, #0]
 8006360:	6813      	ldr	r3, [r2, #0]
 8006362:	e027      	b.n	80063b4 <_printf_i+0xa4>
 8006364:	2a73      	cmp	r2, #115	; 0x73
 8006366:	f000 80b4 	beq.w	80064d2 <_printf_i+0x1c2>
 800636a:	d808      	bhi.n	800637e <_printf_i+0x6e>
 800636c:	2a6f      	cmp	r2, #111	; 0x6f
 800636e:	d02a      	beq.n	80063c6 <_printf_i+0xb6>
 8006370:	2a70      	cmp	r2, #112	; 0x70
 8006372:	d1e5      	bne.n	8006340 <_printf_i+0x30>
 8006374:	680a      	ldr	r2, [r1, #0]
 8006376:	f042 0220 	orr.w	r2, r2, #32
 800637a:	600a      	str	r2, [r1, #0]
 800637c:	e003      	b.n	8006386 <_printf_i+0x76>
 800637e:	2a75      	cmp	r2, #117	; 0x75
 8006380:	d021      	beq.n	80063c6 <_printf_i+0xb6>
 8006382:	2a78      	cmp	r2, #120	; 0x78
 8006384:	d1dc      	bne.n	8006340 <_printf_i+0x30>
 8006386:	2278      	movs	r2, #120	; 0x78
 8006388:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800638c:	496e      	ldr	r1, [pc, #440]	; (8006548 <_printf_i+0x238>)
 800638e:	e064      	b.n	800645a <_printf_i+0x14a>
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006396:	1d11      	adds	r1, r2, #4
 8006398:	6019      	str	r1, [r3, #0]
 800639a:	6813      	ldr	r3, [r2, #0]
 800639c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0a3      	b.n	80064ec <_printf_i+0x1dc>
 80063a4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80063a8:	f102 0104 	add.w	r1, r2, #4
 80063ac:	6019      	str	r1, [r3, #0]
 80063ae:	d0d7      	beq.n	8006360 <_printf_i+0x50>
 80063b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	da03      	bge.n	80063c0 <_printf_i+0xb0>
 80063b8:	222d      	movs	r2, #45	; 0x2d
 80063ba:	425b      	negs	r3, r3
 80063bc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063c0:	4962      	ldr	r1, [pc, #392]	; (800654c <_printf_i+0x23c>)
 80063c2:	220a      	movs	r2, #10
 80063c4:	e017      	b.n	80063f6 <_printf_i+0xe6>
 80063c6:	6820      	ldr	r0, [r4, #0]
 80063c8:	6819      	ldr	r1, [r3, #0]
 80063ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80063ce:	d003      	beq.n	80063d8 <_printf_i+0xc8>
 80063d0:	1d08      	adds	r0, r1, #4
 80063d2:	6018      	str	r0, [r3, #0]
 80063d4:	680b      	ldr	r3, [r1, #0]
 80063d6:	e006      	b.n	80063e6 <_printf_i+0xd6>
 80063d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063dc:	f101 0004 	add.w	r0, r1, #4
 80063e0:	6018      	str	r0, [r3, #0]
 80063e2:	d0f7      	beq.n	80063d4 <_printf_i+0xc4>
 80063e4:	880b      	ldrh	r3, [r1, #0]
 80063e6:	4959      	ldr	r1, [pc, #356]	; (800654c <_printf_i+0x23c>)
 80063e8:	2a6f      	cmp	r2, #111	; 0x6f
 80063ea:	bf14      	ite	ne
 80063ec:	220a      	movne	r2, #10
 80063ee:	2208      	moveq	r2, #8
 80063f0:	2000      	movs	r0, #0
 80063f2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80063f6:	6865      	ldr	r5, [r4, #4]
 80063f8:	60a5      	str	r5, [r4, #8]
 80063fa:	2d00      	cmp	r5, #0
 80063fc:	f2c0 809c 	blt.w	8006538 <_printf_i+0x228>
 8006400:	6820      	ldr	r0, [r4, #0]
 8006402:	f020 0004 	bic.w	r0, r0, #4
 8006406:	6020      	str	r0, [r4, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d13f      	bne.n	800648c <_printf_i+0x17c>
 800640c:	2d00      	cmp	r5, #0
 800640e:	f040 8095 	bne.w	800653c <_printf_i+0x22c>
 8006412:	4675      	mov	r5, lr
 8006414:	2a08      	cmp	r2, #8
 8006416:	d10b      	bne.n	8006430 <_printf_i+0x120>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	07da      	lsls	r2, r3, #31
 800641c:	d508      	bpl.n	8006430 <_printf_i+0x120>
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	6862      	ldr	r2, [r4, #4]
 8006422:	429a      	cmp	r2, r3
 8006424:	bfde      	ittt	le
 8006426:	2330      	movle	r3, #48	; 0x30
 8006428:	f805 3c01 	strble.w	r3, [r5, #-1]
 800642c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006430:	ebae 0305 	sub.w	r3, lr, r5
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	f8cd 8000 	str.w	r8, [sp]
 800643a:	463b      	mov	r3, r7
 800643c:	aa03      	add	r2, sp, #12
 800643e:	4621      	mov	r1, r4
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff feef 	bl	8006224 <_printf_common>
 8006446:	3001      	adds	r0, #1
 8006448:	d155      	bne.n	80064f6 <_printf_i+0x1e6>
 800644a:	f04f 30ff 	mov.w	r0, #4294967295
 800644e:	b005      	add	sp, #20
 8006450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006454:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006458:	493c      	ldr	r1, [pc, #240]	; (800654c <_printf_i+0x23c>)
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006462:	f100 0504 	add.w	r5, r0, #4
 8006466:	601d      	str	r5, [r3, #0]
 8006468:	d001      	beq.n	800646e <_printf_i+0x15e>
 800646a:	6803      	ldr	r3, [r0, #0]
 800646c:	e002      	b.n	8006474 <_printf_i+0x164>
 800646e:	0655      	lsls	r5, r2, #25
 8006470:	d5fb      	bpl.n	800646a <_printf_i+0x15a>
 8006472:	8803      	ldrh	r3, [r0, #0]
 8006474:	07d0      	lsls	r0, r2, #31
 8006476:	bf44      	itt	mi
 8006478:	f042 0220 	orrmi.w	r2, r2, #32
 800647c:	6022      	strmi	r2, [r4, #0]
 800647e:	b91b      	cbnz	r3, 8006488 <_printf_i+0x178>
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	f022 0220 	bic.w	r2, r2, #32
 8006486:	6022      	str	r2, [r4, #0]
 8006488:	2210      	movs	r2, #16
 800648a:	e7b1      	b.n	80063f0 <_printf_i+0xe0>
 800648c:	4675      	mov	r5, lr
 800648e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006492:	fb02 3310 	mls	r3, r2, r0, r3
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800649c:	4603      	mov	r3, r0
 800649e:	2800      	cmp	r0, #0
 80064a0:	d1f5      	bne.n	800648e <_printf_i+0x17e>
 80064a2:	e7b7      	b.n	8006414 <_printf_i+0x104>
 80064a4:	6808      	ldr	r0, [r1, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	6949      	ldr	r1, [r1, #20]
 80064aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80064ae:	d004      	beq.n	80064ba <_printf_i+0x1aa>
 80064b0:	1d10      	adds	r0, r2, #4
 80064b2:	6018      	str	r0, [r3, #0]
 80064b4:	6813      	ldr	r3, [r2, #0]
 80064b6:	6019      	str	r1, [r3, #0]
 80064b8:	e007      	b.n	80064ca <_printf_i+0x1ba>
 80064ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064be:	f102 0004 	add.w	r0, r2, #4
 80064c2:	6018      	str	r0, [r3, #0]
 80064c4:	6813      	ldr	r3, [r2, #0]
 80064c6:	d0f6      	beq.n	80064b6 <_printf_i+0x1a6>
 80064c8:	8019      	strh	r1, [r3, #0]
 80064ca:	2300      	movs	r3, #0
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	4675      	mov	r5, lr
 80064d0:	e7b1      	b.n	8006436 <_printf_i+0x126>
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	1d11      	adds	r1, r2, #4
 80064d6:	6019      	str	r1, [r3, #0]
 80064d8:	6815      	ldr	r5, [r2, #0]
 80064da:	6862      	ldr	r2, [r4, #4]
 80064dc:	2100      	movs	r1, #0
 80064de:	4628      	mov	r0, r5
 80064e0:	f7f9 fe7e 	bl	80001e0 <memchr>
 80064e4:	b108      	cbz	r0, 80064ea <_printf_i+0x1da>
 80064e6:	1b40      	subs	r0, r0, r5
 80064e8:	6060      	str	r0, [r4, #4]
 80064ea:	6863      	ldr	r3, [r4, #4]
 80064ec:	6123      	str	r3, [r4, #16]
 80064ee:	2300      	movs	r3, #0
 80064f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f4:	e79f      	b.n	8006436 <_printf_i+0x126>
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	462a      	mov	r2, r5
 80064fa:	4639      	mov	r1, r7
 80064fc:	4630      	mov	r0, r6
 80064fe:	47c0      	blx	r8
 8006500:	3001      	adds	r0, #1
 8006502:	d0a2      	beq.n	800644a <_printf_i+0x13a>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	079b      	lsls	r3, r3, #30
 8006508:	d507      	bpl.n	800651a <_printf_i+0x20a>
 800650a:	2500      	movs	r5, #0
 800650c:	f104 0919 	add.w	r9, r4, #25
 8006510:	68e3      	ldr	r3, [r4, #12]
 8006512:	9a03      	ldr	r2, [sp, #12]
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	429d      	cmp	r5, r3
 8006518:	db05      	blt.n	8006526 <_printf_i+0x216>
 800651a:	68e0      	ldr	r0, [r4, #12]
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	4298      	cmp	r0, r3
 8006520:	bfb8      	it	lt
 8006522:	4618      	movlt	r0, r3
 8006524:	e793      	b.n	800644e <_printf_i+0x13e>
 8006526:	2301      	movs	r3, #1
 8006528:	464a      	mov	r2, r9
 800652a:	4639      	mov	r1, r7
 800652c:	4630      	mov	r0, r6
 800652e:	47c0      	blx	r8
 8006530:	3001      	adds	r0, #1
 8006532:	d08a      	beq.n	800644a <_printf_i+0x13a>
 8006534:	3501      	adds	r5, #1
 8006536:	e7eb      	b.n	8006510 <_printf_i+0x200>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1a7      	bne.n	800648c <_printf_i+0x17c>
 800653c:	780b      	ldrb	r3, [r1, #0]
 800653e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006542:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006546:	e765      	b.n	8006414 <_printf_i+0x104>
 8006548:	08008937 	.word	0x08008937
 800654c:	08008926 	.word	0x08008926

08006550 <memcpy>:
 8006550:	b510      	push	{r4, lr}
 8006552:	1e43      	subs	r3, r0, #1
 8006554:	440a      	add	r2, r1
 8006556:	4291      	cmp	r1, r2
 8006558:	d100      	bne.n	800655c <memcpy+0xc>
 800655a:	bd10      	pop	{r4, pc}
 800655c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006564:	e7f7      	b.n	8006556 <memcpy+0x6>

08006566 <memmove>:
 8006566:	4288      	cmp	r0, r1
 8006568:	b510      	push	{r4, lr}
 800656a:	eb01 0302 	add.w	r3, r1, r2
 800656e:	d803      	bhi.n	8006578 <memmove+0x12>
 8006570:	1e42      	subs	r2, r0, #1
 8006572:	4299      	cmp	r1, r3
 8006574:	d10c      	bne.n	8006590 <memmove+0x2a>
 8006576:	bd10      	pop	{r4, pc}
 8006578:	4298      	cmp	r0, r3
 800657a:	d2f9      	bcs.n	8006570 <memmove+0xa>
 800657c:	1881      	adds	r1, r0, r2
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	42d3      	cmn	r3, r2
 8006582:	d100      	bne.n	8006586 <memmove+0x20>
 8006584:	bd10      	pop	{r4, pc}
 8006586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800658a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800658e:	e7f7      	b.n	8006580 <memmove+0x1a>
 8006590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006594:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006598:	e7eb      	b.n	8006572 <memmove+0xc>

0800659a <_realloc_r>:
 800659a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659c:	4607      	mov	r7, r0
 800659e:	4614      	mov	r4, r2
 80065a0:	460e      	mov	r6, r1
 80065a2:	b921      	cbnz	r1, 80065ae <_realloc_r+0x14>
 80065a4:	4611      	mov	r1, r2
 80065a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065aa:	f7ff bc47 	b.w	8005e3c <_malloc_r>
 80065ae:	b922      	cbnz	r2, 80065ba <_realloc_r+0x20>
 80065b0:	f7ff fbf6 	bl	8005da0 <_free_r>
 80065b4:	4625      	mov	r5, r4
 80065b6:	4628      	mov	r0, r5
 80065b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ba:	f000 f814 	bl	80065e6 <_malloc_usable_size_r>
 80065be:	4284      	cmp	r4, r0
 80065c0:	d90f      	bls.n	80065e2 <_realloc_r+0x48>
 80065c2:	4621      	mov	r1, r4
 80065c4:	4638      	mov	r0, r7
 80065c6:	f7ff fc39 	bl	8005e3c <_malloc_r>
 80065ca:	4605      	mov	r5, r0
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d0f2      	beq.n	80065b6 <_realloc_r+0x1c>
 80065d0:	4631      	mov	r1, r6
 80065d2:	4622      	mov	r2, r4
 80065d4:	f7ff ffbc 	bl	8006550 <memcpy>
 80065d8:	4631      	mov	r1, r6
 80065da:	4638      	mov	r0, r7
 80065dc:	f7ff fbe0 	bl	8005da0 <_free_r>
 80065e0:	e7e9      	b.n	80065b6 <_realloc_r+0x1c>
 80065e2:	4635      	mov	r5, r6
 80065e4:	e7e7      	b.n	80065b6 <_realloc_r+0x1c>

080065e6 <_malloc_usable_size_r>:
 80065e6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f1a0 0004 	sub.w	r0, r0, #4
 80065f0:	bfbc      	itt	lt
 80065f2:	580b      	ldrlt	r3, [r1, r0]
 80065f4:	18c0      	addlt	r0, r0, r3
 80065f6:	4770      	bx	lr

080065f8 <_init>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	bf00      	nop
 80065fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fe:	bc08      	pop	{r3}
 8006600:	469e      	mov	lr, r3
 8006602:	4770      	bx	lr

08006604 <_fini>:
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006606:	bf00      	nop
 8006608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660a:	bc08      	pop	{r3}
 800660c:	469e      	mov	lr, r3
 800660e:	4770      	bx	lr
